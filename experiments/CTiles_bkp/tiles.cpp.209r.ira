
;; Function int hash_UNH(int*, int, long int, int) (_Z8hash_UNHPiili, funcdef_no=1063, decl_uid=23699, cgraph_uid=307)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 19 (  1.2)
deleting insn with uid = 137.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 114: def dominates all uses has unique first use
Reg 115: def dominates all uses has unique first use
Reg 116: def dominates all uses has unique first use
Reg 117: def dominates all uses has unique first use
Reg 110: def dominates all uses has unique first use
Reg 87 uninteresting
Reg 119: local to bb 5 def dominates all uses has unique first use
Reg 133: def dominates all uses has unique first use
Reg 121 uninteresting
Reg 96: local to bb 10 def dominates all uses has unique first use
Reg 128 uninteresting
Found def insn 98 for 96 to be not moveable
Reg 110 not local to one basic block
Reg 114 not local to one basic block
Reg 115 not local to one basic block
Reg 116 not local to one basic block
Reg 117 not local to one basic block
Examining insn 57, def for 119
  all ok
Reg 133 not local to one basic block
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 4
;;  header 12, latch 12
;;  depth 1, outer 0
;;  nodes: 12
;;
;; Loop 3
;;  header 10, latch 10
;;  depth 1, outer 0
;;  nodes: 10
;;
;; Loop 1
;;  header 4, latch 6
;;  depth 1, outer 0
;;  nodes: 4 6 5
;;
;; Loop 2
;;  header 5, latch 5
;;  depth 2, outer 1
;;  nodes: 5
;; 2 succs { 3 8 }
;; 3 succs { 4 }
;; 4 succs { 5 }
;; 5 succs { 5 6 }
;; 6 succs { 4 7 }
;; 7 succs { 8 }
;; 8 succs { 9 14 }
;; 9 succs { 10 }
;; 10 succs { 10 11 }
;; 11 succs { 12 15 }
;; 12 succs { 12 13 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 110: (insn_list:REG_DEP_TRUE 46 (nil))
init_insns for 133: (insn_list:REG_DEP_TRUE 168 (nil))

Pass 0 for finding pseudo/allocno costs

    a21 (r133,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r131,l0) best AREG, allocno AREG
    a2 (r130,l0) best DREG, allocno DREG
    a22 (r128,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a23 (r126,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a24 (r123,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a26 (r121,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a43 (r119,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a42 (r117,l2) best CREG, allocno CREG
    a32 (r117,l1) best CREG, allocno CREG
    a20 (r117,l3) best CREG, allocno CREG
    a10 (r117,l0) best CREG, allocno CREG
    a41 (r116,l2) best DREG, allocno DREG
    a31 (r116,l1) best DREG, allocno DREG
    a19 (r116,l3) best DREG, allocno DREG
    a14 (r116,l4) best DREG, allocno DREG
    a4 (r116,l0) best DREG, allocno DREG
    a40 (r115,l2) best SIREG, allocno SIREG
    a30 (r115,l1) best SIREG, allocno SIREG
    a18 (r115,l3) best SIREG, allocno SIREG
    a9 (r115,l0) best SIREG, allocno SIREG
    a39 (r114,l2) best DIREG, allocno DIREG
    a29 (r114,l1) best DIREG, allocno DIREG
    a17 (r114,l3) best DIREG, allocno DIREG
    a8 (r114,l0) best DIREG, allocno DIREG
    a38 (r110,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a28 (r110,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r109,l0) best AREG, allocno AREG
    a37 (r108,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a34 (r108,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r107,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r105,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r104,l3) best AREG, allocno AREG
    a5 (r104,l0) best AREG, allocno AREG
    a25 (r96,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a36 (r91,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a27 (r91,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a35 (r90,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a33 (r90,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a44 (r87,l2) best AREG, allocno AREG

  a0(r109,l0) costs: AREG:-4,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:143,143 SSE_REGS:143,143 MMX_REGS:143,143 FP_TOP_SSE_REGS:720885,720885 FP_SECOND_SSE_REGS:720885,720885 FLOAT_SSE_REGS:720885,720885 FLOAT_INT_REGS:720885,720885 INT_SSE_REGS:143,143 FLOAT_INT_SSE_REGS:720885,720885 ALL_REGS:720885,720885 MEM:40,40
  a1(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 MEM:33,273
  a2(r130,l0) costs: AREG:6,6 DREG:0,0 CREG:6,6 BREG:6,6 SIREG:6,6 DIREG:6,6 AD_REGS:6,6 Q_REGS:6,6 NON_Q_REGS:6,6 INDEX_REGS:6,6 GENERAL_REGS:6,6 LEGACY_REGS:6,6 CLOBBERED_REGS:6,6 MEM:30,30
  a3(r131,l0) costs: AREG:0,0 DREG:6,6 CREG:6,6 BREG:6,6 SIREG:6,6 DIREG:6,6 AD_REGS:6,6 Q_REGS:6,6 NON_Q_REGS:6,6 INDEX_REGS:6,6 GENERAL_REGS:6,6 LEGACY_REGS:6,6 CLOBBERED_REGS:6,6 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a4(r116,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:91,611 SSE_REGS:91,611 MMX_REGS:91,611 FP_TOP_SSE_REGS:458745,1458745 FP_SECOND_SSE_REGS:458745,1458745 FLOAT_SSE_REGS:458745,1458745 FLOAT_INT_REGS:458745,1458745 INT_SSE_REGS:91,611 FLOAT_INT_SSE_REGS:458745,1458745 ALL_REGS:458745,1458745 MEM:25,145
  a5(r104,l0) costs: AREG:0,0 DREG:6,6 CREG:6,6 BREG:6,6 SIREG:6,6 DIREG:6,6 AD_REGS:6,6 Q_REGS:6,6 NON_Q_REGS:6,6 INDEX_REGS:6,6 GENERAL_REGS:6,6 LEGACY_REGS:6,6 CLOBBERED_REGS:6,6 SSE_FIRST_REG:78,1118 SSE_REGS:78,1118 MMX_REGS:78,1118 FP_TOP_SSE_REGS:393210,2393210 FP_SECOND_SSE_REGS:393210,2393210 FLOAT_SSE_REGS:393210,2393210 FLOAT_INT_REGS:393210,2393210 INT_SSE_REGS:78,1118 FLOAT_INT_SSE_REGS:393210,2393210 ALL_REGS:393210,2393210 MEM:24,264
  a6(r133,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,559 SSE_REGS:39,559 MMX_REGS:39,559 FP_TOP_SSE_REGS:196605,2818005 FP_SECOND_SSE_REGS:196605,2818005 FLOAT_SSE_REGS:196605,2818005 FLOAT_INT_REGS:196605,2818005 INT_SSE_REGS:39,559 FLOAT_INT_SSE_REGS:196605,2818005 ALL_REGS:196605,2818005 MEM:12,172
  a7(r105,l0) costs: AREG:0,80 DREG:0,80 CREG:0,80 BREG:0,80 SIREG:0,80 DIREG:0,80 AD_REGS:0,80 Q_REGS:0,80 NON_Q_REGS:0,80 INDEX_REGS:0,80 GENERAL_REGS:0,80 LEGACY_REGS:0,80 CLOBBERED_REGS:0,80 SSE_FIRST_REG:39,2719 SSE_REGS:39,2719 MMX_REGS:39,2719 FP_TOP_SSE_REGS:196605,5196605 FP_SECOND_SSE_REGS:196605,5196605 FLOAT_SSE_REGS:196605,5196605 FLOAT_INT_REGS:196605,5196605 INT_SSE_REGS:39,2719 FLOAT_INT_SSE_REGS:196605,5196605 ALL_REGS:196605,5196605 MEM:12,692
  a8(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,572 SSE_REGS:52,572 MMX_REGS:52,572 FP_TOP_SSE_REGS:262140,2883540 FP_SECOND_SSE_REGS:262140,2883540 FLOAT_SSE_REGS:262140,2883540 FLOAT_INT_REGS:262140,2883540 INT_SSE_REGS:52,572 FLOAT_INT_SSE_REGS:262140,2883540 ALL_REGS:262140,2883540 MEM:16,176
  a9(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,624 SSE_REGS:104,624 MMX_REGS:104,624 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 FLOAT_INT_REGS:524280,1524280 INT_SSE_REGS:104,624 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:32,152
  a10(r117,l0) costs: AREG:0,80 DREG:0,80 CREG:-4,76 BREG:0,80 SIREG:0,80 DIREG:0,80 AD_REGS:0,80 Q_REGS:0,80 NON_Q_REGS:0,80 INDEX_REGS:0,80 GENERAL_REGS:0,80 LEGACY_REGS:0,80 CLOBBERED_REGS:0,80 SSE_FIRST_REG:52,652 SSE_REGS:52,652 MMX_REGS:52,652 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,652 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,216
  a11(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,2626 SSE_REGS:26,2626 MMX_REGS:26,2626 FP_TOP_SSE_REGS:131070,1131070 FP_SECOND_SSE_REGS:131070,1131070 FLOAT_SSE_REGS:131070,1131070 FLOAT_INT_REGS:131070,1131070 INT_SSE_REGS:26,2626 FLOAT_INT_SSE_REGS:131070,1131070 ALL_REGS:131070,1131070 MEM:8,608
  a12(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,20826 SSE_REGS:26,20826 MMX_REGS:26,20826 FP_TOP_SSE_REGS:131070,68666070 FP_SECOND_SSE_REGS:131070,68666070 FLOAT_SSE_REGS:131070,68666070 FLOAT_INT_REGS:131070,68666070 INT_SSE_REGS:26,20826 FLOAT_INT_SSE_REGS:131070,68666070 ALL_REGS:131070,68666070 MEM:8,5808
  a13(r107,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 MEM:240,240
  a14(r116,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:120,120
  a15(r104,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:240,240
  a16(r105,l3) costs: AREG:80,80 DREG:80,80 CREG:80,80 BREG:80,80 SIREG:80,80 DIREG:80,80 AD_REGS:80,80 Q_REGS:80,80 NON_Q_REGS:80,80 INDEX_REGS:80,80 GENERAL_REGS:80,80 LEGACY_REGS:80,80 CLOBBERED_REGS:80,80 SSE_FIRST_REG:2680,2680 SSE_REGS:2680,2680 MMX_REGS:2680,2680 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:2680,2680 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:680,680
  a17(r114,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:2621400,2621400 FP_SECOND_SSE_REGS:2621400,2621400 FLOAT_SSE_REGS:2621400,2621400 FLOAT_INT_REGS:2621400,2621400 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:2621400,2621400 ALL_REGS:2621400,2621400 MEM:160,160
  a18(r115,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:120,120
  a19(r116,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a20(r117,l3) costs: AREG:80,80 DREG:80,80 CREG:80,80 BREG:80,80 SIREG:80,80 DIREG:80,80 AD_REGS:80,80 Q_REGS:80,80 NON_Q_REGS:80,80 INDEX_REGS:80,80 GENERAL_REGS:80,80 LEGACY_REGS:80,80 CLOBBERED_REGS:80,80 SSE_FIRST_REG:600,600 SSE_REGS:600,600 MMX_REGS:600,600 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:600,600 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:200,200
  a21(r133,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:2621400,2621400 FP_SECOND_SSE_REGS:2621400,2621400 FLOAT_SSE_REGS:2621400,2621400 FLOAT_INT_REGS:2621400,2621400 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:2621400,2621400 ALL_REGS:2621400,2621400 MEM:160,160
  a22(r128,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:280,280
  a23(r126,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2080,2080 SSE_REGS:2080,2080 MMX_REGS:2080,2080 FP_TOP_SSE_REGS:5621400,5621400 FP_SECOND_SSE_REGS:5621400,5621400 FLOAT_SSE_REGS:5621400,5621400 FLOAT_INT_REGS:5621400,5621400 INT_SSE_REGS:2080,2080 FLOAT_INT_SSE_REGS:5621400,5621400 ALL_REGS:5621400,5621400 MEM:560,560
  a24(r123,l3) costs: AREG:80,80 DREG:80,80 CREG:80,80 BREG:80,80 SIREG:80,80 DIREG:80,80 AD_REGS:80,80 Q_REGS:80,80 NON_Q_REGS:80,80 INDEX_REGS:80,80 GENERAL_REGS:80,80 LEGACY_REGS:80,80 CLOBBERED_REGS:80,80 SSE_FIRST_REG:1120,1120 SSE_REGS:1120,1120 MMX_REGS:1120,1120 INT_SSE_REGS:1120,1120 MEM:400,400
  a25(r96,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:3621400,3621400 FP_SECOND_SSE_REGS:3621400,3621400 FLOAT_SSE_REGS:3621400,3621400 FLOAT_INT_REGS:3621400,3621400 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:3621400,3621400 ALL_REGS:3621400,3621400 MEM:320,320
  a26(r121,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:3621400,3621400 FP_SECOND_SSE_REGS:3621400,3621400 FLOAT_SSE_REGS:3621400,3621400 FLOAT_INT_REGS:3621400,3621400 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:3621400,3621400 ALL_REGS:3621400,3621400 MEM:320,320
  a27(r91,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:10400,20800 SSE_REGS:10400,20800 MMX_REGS:10400,20800 FP_TOP_SSE_REGS:16107000,68535000 FP_SECOND_SSE_REGS:16107000,68535000 FLOAT_SSE_REGS:16107000,68535000 FLOAT_INT_REGS:16107000,68535000 INT_SSE_REGS:10400,20800 FLOAT_INT_SSE_REGS:16107000,68535000 ALL_REGS:16107000,68535000 MEM:2600,5800
  a28(r110,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2600,2600 SSE_REGS:2600,2600 MMX_REGS:2600,2600 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2600,2600 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:600,600
  a29(r114,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a30(r115,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a31(r116,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a32(r117,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a33(r90,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2600,54600 SSE_REGS:2600,54600 MMX_REGS:2600,54600 FP_TOP_SSE_REGS:1000000,6000000 FP_SECOND_SSE_REGS:1000000,6000000 FLOAT_SSE_REGS:1000000,6000000 FLOAT_INT_REGS:1000000,6000000 INT_SSE_REGS:2600,54600 FLOAT_INT_SSE_REGS:1000000,6000000 ALL_REGS:1000000,6000000 MEM:800,13600
  a34(r108,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2600,23400 SSE_REGS:2600,23400 MMX_REGS:2600,23400 FP_TOP_SSE_REGS:1000000,3000000 FP_SECOND_SSE_REGS:1000000,3000000 FLOAT_SSE_REGS:1000000,3000000 FLOAT_INT_REGS:1000000,3000000 INT_SSE_REGS:2600,23400 FLOAT_INT_SSE_REGS:1000000,3000000 ALL_REGS:1000000,3000000 MEM:800,5600
  a35(r90,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:12800,12800
  a36(r91,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:10400,10400 SSE_REGS:10400,10400 MMX_REGS:10400,10400 FP_TOP_SSE_REGS:52428000,52428000 FP_SECOND_SSE_REGS:52428000,52428000 FLOAT_SSE_REGS:52428000,52428000 FLOAT_INT_REGS:52428000,52428000 INT_SSE_REGS:10400,10400 FLOAT_INT_SSE_REGS:52428000,52428000 ALL_REGS:52428000,52428000 MEM:3200,3200
  a37(r108,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20800,20800 SSE_REGS:20800,20800 MMX_REGS:20800,20800 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:20800,20800 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:4800,4800
  a38(r110,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a39(r114,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a40(r115,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a41(r116,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a42(r117,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a43(r119,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20800,20800 SSE_REGS:20800,20800 MMX_REGS:20800,20800 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:20800,20800 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:5600,5600
  a44(r87,l2) costs: AREG:-800,-800 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 MEM:5600,5600


Pass 1 for finding pseudo/allocno costs

    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r131: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r117: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a42 (r117,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a32 (r117,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r117,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r116,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a31 (r116,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r116,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r116,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r115,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a30 (r115,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r115,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a39 (r114,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a29 (r114,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r114,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r109: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r104: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r104,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r109,l0) costs: AREG:-4,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:143,143 SSE_REGS:143,143 MMX_REGS:143,143 FP_TOP_SSE_REGS:720885,720885 FP_SECOND_SSE_REGS:720885,720885 FLOAT_SSE_REGS:720885,720885 FLOAT_INT_REGS:720885,720885 INT_SSE_REGS:143,143 FLOAT_INT_SSE_REGS:720885,720885 ALL_REGS:720885,720885 MEM:40,40
  a1(r107,l0) costs: GENERAL_REGS:0,0 MEM:33,273
  a2(r130,l0) costs: AREG:6,6 DREG:0,0 CREG:6,6 BREG:6,6 SIREG:6,6 DIREG:6,6 AD_REGS:6,6 Q_REGS:6,6 NON_Q_REGS:6,6 INDEX_REGS:6,6 GENERAL_REGS:6,6 LEGACY_REGS:6,6 CLOBBERED_REGS:6,6 MEM:30,30
  a3(r131,l0) costs: AREG:0,0 DREG:6,6 CREG:6,6 BREG:6,6 SIREG:6,6 DIREG:6,6 AD_REGS:6,6 Q_REGS:6,6 NON_Q_REGS:6,6 INDEX_REGS:6,6 GENERAL_REGS:6,6 LEGACY_REGS:6,6 CLOBBERED_REGS:6,6 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a4(r116,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:91,611 SSE_REGS:91,611 MMX_REGS:91,611 FP_TOP_SSE_REGS:458745,1458745 FP_SECOND_SSE_REGS:458745,1458745 FLOAT_SSE_REGS:458745,1458745 FLOAT_INT_REGS:458745,1458745 INT_SSE_REGS:91,611 FLOAT_INT_SSE_REGS:458745,1458745 ALL_REGS:458745,1458745 MEM:25,145
  a5(r104,l0) costs: AREG:0,0 DREG:6,6 CREG:6,6 BREG:6,6 SIREG:6,6 DIREG:6,6 AD_REGS:6,6 Q_REGS:6,6 NON_Q_REGS:6,6 INDEX_REGS:6,6 GENERAL_REGS:6,6 LEGACY_REGS:6,6 CLOBBERED_REGS:6,6 SSE_FIRST_REG:78,1118 SSE_REGS:78,1118 MMX_REGS:78,1118 FP_TOP_SSE_REGS:393210,2393210 FP_SECOND_SSE_REGS:393210,2393210 FLOAT_SSE_REGS:393210,2393210 FLOAT_INT_REGS:393210,2393210 INT_SSE_REGS:78,1118 FLOAT_INT_SSE_REGS:393210,2393210 ALL_REGS:393210,2393210 MEM:24,264
  a6(r133,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,559 SSE_REGS:39,559 MMX_REGS:39,559 FP_TOP_SSE_REGS:196605,2818005 FP_SECOND_SSE_REGS:196605,2818005 FLOAT_SSE_REGS:196605,2818005 FLOAT_INT_REGS:196605,2818005 INT_SSE_REGS:39,559 FLOAT_INT_SSE_REGS:196605,2818005 ALL_REGS:196605,2818005 MEM:12,172
  a7(r105,l0) costs: GENERAL_REGS:0,80 SSE_FIRST_REG:39,2719 SSE_REGS:39,2719 MMX_REGS:39,2719 FP_TOP_SSE_REGS:196605,5196605 FP_SECOND_SSE_REGS:196605,5196605 FLOAT_SSE_REGS:196605,5196605 FLOAT_INT_REGS:196605,5196605 INT_SSE_REGS:39,2719 FLOAT_INT_SSE_REGS:196605,5196605 ALL_REGS:196605,5196605 MEM:12,692
  a8(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,572 SSE_REGS:52,572 MMX_REGS:52,572 FP_TOP_SSE_REGS:262140,2883540 FP_SECOND_SSE_REGS:262140,2883540 FLOAT_SSE_REGS:262140,2883540 FLOAT_INT_REGS:262140,2883540 INT_SSE_REGS:52,572 FLOAT_INT_SSE_REGS:262140,2883540 ALL_REGS:262140,2883540 MEM:16,176
  a9(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,624 SSE_REGS:104,624 MMX_REGS:104,624 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 FLOAT_INT_REGS:524280,1524280 INT_SSE_REGS:104,624 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:32,152
  a10(r117,l0) costs: AREG:0,80 DREG:0,80 CREG:-4,76 BREG:0,80 SIREG:0,80 DIREG:0,80 AD_REGS:0,80 Q_REGS:0,80 NON_Q_REGS:0,80 INDEX_REGS:0,80 GENERAL_REGS:0,80 LEGACY_REGS:0,80 CLOBBERED_REGS:0,80 SSE_FIRST_REG:52,652 SSE_REGS:52,652 MMX_REGS:52,652 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,652 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,216
  a11(r110,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,2626 SSE_REGS:26,2626 MMX_REGS:26,2626 FP_TOP_SSE_REGS:131070,1131070 FP_SECOND_SSE_REGS:131070,1131070 FLOAT_SSE_REGS:131070,1131070 FLOAT_INT_REGS:131070,1131070 INT_SSE_REGS:26,2626 FLOAT_INT_SSE_REGS:131070,1131070 ALL_REGS:131070,1131070 MEM:8,608
  a12(r91,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,20826 SSE_REGS:26,20826 MMX_REGS:26,20826 FP_TOP_SSE_REGS:131070,68666070 FP_SECOND_SSE_REGS:131070,68666070 FLOAT_SSE_REGS:131070,68666070 FLOAT_INT_REGS:131070,68666070 INT_SSE_REGS:26,20826 FLOAT_INT_SSE_REGS:131070,68666070 ALL_REGS:131070,68666070 MEM:8,5808
  a13(r107,l4) costs: GENERAL_REGS:0,0 MEM:240,240
  a14(r116,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:120,120
  a15(r104,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:240,240
  a16(r105,l3) costs: GENERAL_REGS:80,80 SSE_FIRST_REG:2680,2680 SSE_REGS:2680,2680 MMX_REGS:2680,2680 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:2680,2680 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:680,680
  a17(r114,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:2621400,2621400 FP_SECOND_SSE_REGS:2621400,2621400 FLOAT_SSE_REGS:2621400,2621400 FLOAT_INT_REGS:2621400,2621400 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:2621400,2621400 ALL_REGS:2621400,2621400 MEM:160,160
  a18(r115,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:120,120
  a19(r116,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a20(r117,l3) costs: AREG:80,80 DREG:80,80 CREG:80,80 BREG:80,80 SIREG:80,80 DIREG:80,80 AD_REGS:80,80 Q_REGS:80,80 NON_Q_REGS:80,80 INDEX_REGS:80,80 GENERAL_REGS:80,80 LEGACY_REGS:80,80 CLOBBERED_REGS:80,80 SSE_FIRST_REG:600,600 SSE_REGS:600,600 MMX_REGS:600,600 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:600,600 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:200,200
  a21(r133,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:520,520 SSE_REGS:520,520 MMX_REGS:520,520 FP_TOP_SSE_REGS:2621400,2621400 FP_SECOND_SSE_REGS:2621400,2621400 FLOAT_SSE_REGS:2621400,2621400 FLOAT_INT_REGS:2621400,2621400 INT_SSE_REGS:520,520 FLOAT_INT_SSE_REGS:2621400,2621400 ALL_REGS:2621400,2621400 MEM:160,160
  a22(r128,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:280,280
  a23(r126,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2080,2080 SSE_REGS:2080,2080 MMX_REGS:2080,2080 FP_TOP_SSE_REGS:5621400,5621400 FP_SECOND_SSE_REGS:5621400,5621400 FLOAT_SSE_REGS:5621400,5621400 FLOAT_INT_REGS:5621400,5621400 INT_SSE_REGS:2080,2080 FLOAT_INT_SSE_REGS:5621400,5621400 ALL_REGS:5621400,5621400 MEM:560,560
  a24(r123,l3) costs: GENERAL_REGS:80,80 SSE_FIRST_REG:1120,1120 SSE_REGS:1120,1120 MMX_REGS:1120,1120 INT_SSE_REGS:1120,1120 MEM:400,400
  a25(r96,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:3621400,3621400 FP_SECOND_SSE_REGS:3621400,3621400 FLOAT_SSE_REGS:3621400,3621400 FLOAT_INT_REGS:3621400,3621400 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:3621400,3621400 ALL_REGS:3621400,3621400 MEM:320,320
  a26(r121,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1040,1040 SSE_REGS:1040,1040 MMX_REGS:1040,1040 FP_TOP_SSE_REGS:3621400,3621400 FP_SECOND_SSE_REGS:3621400,3621400 FLOAT_SSE_REGS:3621400,3621400 FLOAT_INT_REGS:3621400,3621400 INT_SSE_REGS:1040,1040 FLOAT_INT_SSE_REGS:3621400,3621400 ALL_REGS:3621400,3621400 MEM:320,320
  a27(r91,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:10400,20800 SSE_REGS:10400,20800 MMX_REGS:10400,20800 FP_TOP_SSE_REGS:16107000,68535000 FP_SECOND_SSE_REGS:16107000,68535000 FLOAT_SSE_REGS:16107000,68535000 FLOAT_INT_REGS:16107000,68535000 INT_SSE_REGS:10400,20800 FLOAT_INT_SSE_REGS:16107000,68535000 ALL_REGS:16107000,68535000 MEM:2600,5800
  a28(r110,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2600,2600 SSE_REGS:2600,2600 MMX_REGS:2600,2600 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2600,2600 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:600,600
  a29(r114,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a30(r115,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a31(r116,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a32(r117,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a33(r90,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2600,54600 SSE_REGS:2600,54600 MMX_REGS:2600,54600 FP_TOP_SSE_REGS:1000000,6000000 FP_SECOND_SSE_REGS:1000000,6000000 FLOAT_SSE_REGS:1000000,6000000 FLOAT_INT_REGS:1000000,6000000 INT_SSE_REGS:2600,54600 FLOAT_INT_SSE_REGS:1000000,6000000 ALL_REGS:1000000,6000000 MEM:800,13600
  a34(r108,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2600,23400 SSE_REGS:2600,23400 MMX_REGS:2600,23400 FP_TOP_SSE_REGS:1000000,3000000 FP_SECOND_SSE_REGS:1000000,3000000 FLOAT_SSE_REGS:1000000,3000000 FLOAT_INT_REGS:1000000,3000000 INT_SSE_REGS:2600,23400 FLOAT_INT_SSE_REGS:1000000,3000000 ALL_REGS:1000000,3000000 MEM:800,5600
  a35(r90,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:12800,12800
  a36(r91,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:10400,10400 SSE_REGS:10400,10400 MMX_REGS:10400,10400 FP_TOP_SSE_REGS:52428000,52428000 FP_SECOND_SSE_REGS:52428000,52428000 FLOAT_SSE_REGS:52428000,52428000 FLOAT_INT_REGS:52428000,52428000 INT_SSE_REGS:10400,10400 FLOAT_INT_SSE_REGS:52428000,52428000 ALL_REGS:52428000,52428000 MEM:3200,3200
  a37(r108,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:20800,20800 SSE_REGS:20800,20800 MMX_REGS:20800,20800 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:20800,20800 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:4800,4800
  a38(r110,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a39(r114,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a40(r115,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a41(r116,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a42(r117,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a43(r119,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:20800,20800 SSE_REGS:20800,20800 MMX_REGS:20800,20800 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:20800,20800 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:5600,5600
  a44(r87,l2) costs: AREG:-800,-800 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 MEM:5600,5600

   Insn 159(l0): point = 0
   Insn 156(l0): point = 2
   Insn 37(l0): point = 5
   Insn 174(l0): point = 8
   Insn 149(l0): point = 10
   Insn 130(l0): point = 13
   Insn 129(l0): point = 15
   Insn 126(l0): point = 17
   Insn 125(l0): point = 19
   Insn 124(l0): point = 21
   Insn 168(l0): point = 25
   Insn 36(l0): point = 27
   Insn 35(l0): point = 29
   Insn 91(l0): point = 32
   Insn 90(l0): point = 34
   Insn 84(l0): point = 37
   Insn 46(l0): point = 40
   Insn 169(l0): point = 42
   Insn 42(l0): point = 45
   Insn 41(l0): point = 47
   Insn 31(l0): point = 49
   Insn 30(l0): point = 51
   Insn 29(l0): point = 53
   Insn 28(l0): point = 55
   Insn 142(l4): point = 58
   Insn 141(l4): point = 60
   Insn 117(l3): point = 63
   Insn 116(l3): point = 65
   Insn 112(l3): point = 67
   Insn 110(l3): point = 69
   Insn 109(l3): point = 71
   Insn 107(l3): point = 73
   Insn 102(l3): point = 75
   Insn 100(l3): point = 77
   Insn 98(l3): point = 79
   Insn 96(l3): point = 81
   Insn 34(l1): point = 84
   Insn 33(l1): point = 86
   Insn 50(l1): point = 88
   Insn 77(l1): point = 91
   Insn 76(l1): point = 93
   Insn 75(l1): point = 95
   Insn 65(l2): point = 98
   Insn 64(l2): point = 100
   Insn 60(l2): point = 102
   Insn 59(l2): point = 104
   Insn 58(l2): point = 106
   Insn 57(l2): point = 108
   Insn 56(l2): point = 110
   Insn 55(l2): point = 112
 a0(r109): [13..19] [8..10] [3..5]
 a1(r107): [11..17]
 a2(r130): [18..22]
 a3(r131): [21..21]
 a4(r116): [13..51]
 a5(r104): [23..29]
 a6(r133): [25..25]
 a7(r105): [25..27]
 a8(r114): [25..55]
 a9(r115): [25..53]
 a10(r117): [25..49]
 a11(r110): [40..40]
 a12(r91): [40..42]
 a13(r107): [58..62]
 a14(r116): [58..62]
 a15(r104): [63..83]
 a16(r105): [63..83]
 a17(r114): [63..83]
 a18(r115): [63..83]
 a19(r116): [63..83]
 a20(r117): [63..83]
 a21(r133): [63..83]
 a22(r128): [70..71]
 a23(r126): [72..75]
 a24(r123): [76..77]
 a25(r96): [76..79]
 a26(r121): [80..81]
 a27(r91): [84..97]
 a28(r110): [84..97]
 a29(r114): [84..97]
 a30(r115): [84..97]
 a31(r116): [84..97]
 a32(r117): [84..97]
 a33(r90): [84..84]
 a34(r108): [84..86]
 a35(r90): [98..114]
 a36(r91): [98..114]
 a37(r108): [98..114]
 a38(r110): [98..114]
 a39(r114): [98..114]
 a40(r115): [98..114]
 a41(r116): [98..114]
 a42(r117): [98..114]
 a43(r119): [105..108]
 a44(r87): [109..110]
      Moving ranges of a21r133 to a6r133:  [63..83]
 Rebuilding regno allocno list for 128
 Rebuilding regno allocno list for 126
 Rebuilding regno allocno list for 123
 Rebuilding regno allocno list for 121
 Rebuilding regno allocno list for 119
      Moving ranges of a42r117 to a32r117:  [98..114]
      Moving ranges of a32r117 to a10r117:  [84..114]
      Moving ranges of a20r117 to a10r117:  [63..83]
      Moving ranges of a41r116 to a31r116:  [98..114]
      Moving ranges of a31r116 to a4r116:  [84..114]
      Moving ranges of a19r116 to a4r116:  [63..83]
      Moving ranges of a14r116 to a4r116:  [58..62]
      Moving ranges of a40r115 to a30r115:  [98..114]
      Moving ranges of a30r115 to a9r115:  [84..114]
      Moving ranges of a18r115 to a9r115:  [63..83]
      Moving ranges of a39r114 to a29r114:  [98..114]
      Moving ranges of a29r114 to a8r114:  [84..114]
      Moving ranges of a17r114 to a8r114:  [63..83]
      Moving ranges of a38r110 to a28r110:  [98..114]
      Moving ranges of a28r110 to a11r110:  [84..114]
      Moving ranges of a37r108 to a34r108:  [98..114]
 Rebuilding regno allocno list for 108
      Moving ranges of a13r107 to a1r107:  [58..62]
      Moving ranges of a16r105 to a7r105:  [63..83]
      Moving ranges of a15r104 to a5r104:  [63..83]
 Rebuilding regno allocno list for 96
      Moving ranges of a36r91 to a27r91:  [98..114]
      Moving ranges of a27r91 to a12r91:  [84..114]
      Moving ranges of a35r90 to a33r90:  [98..114]
 Rebuilding regno allocno list for 90
 Rebuilding regno allocno list for 87
Compressing live ranges: from 115 to 31 - 26%
Ranges after the compression:
 a0(r109): [0..7]
 a1(r107): [15..16] [4..5]
 a2(r130): [6..9]
 a3(r131): [8..8]
 a4(r116): [4..30]
 a5(r104): [17..24] [10..12]
 a6(r133): [17..24] [11..11]
 a7(r105): [17..24] [11..12]
 a8(r114): [17..30] [11..14]
 a9(r115): [17..30] [11..14]
 a10(r117): [17..30] [11..14]
 a11(r110): [25..30] [13..13]
 a12(r91): [25..30] [13..14]
 a22(r128): [17..18]
 a23(r126): [19..20]
 a24(r123): [21..22]
 a25(r96): [21..22]
 a26(r121): [23..24]
 a33(r90): [27..30] [25..25]
 a34(r108): [25..30]
 a43(r119): [27..28]
 a44(r87): [29..30]
+++Allocating 176 bytes for conflict table (uncompressed size 360)
;; a0(r109,l0) conflicts: a1(r107,l0) a4(r116,l0) a2(r130,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r107,l0) conflicts: a0(r109,l0) a4(r116,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r130,l0) conflicts: a0(r109,l0) a4(r116,l0) a3(r131,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a3(r131,l0) conflicts: a4(r116,l0) a2(r130,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a4(r116,l0) conflicts: a0(r109,l0) a1(r107,l0) a2(r130,l0) a3(r131,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a11(r110,l0) a12(r91,l0) a22(r128,l0) a23(r126,l0) a24(r123,l0) a25(r96,l0) a26(r121,l0) a33(r90,l0) a34(r108,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a5(r104,l0) conflicts: a4(r116,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a22(r128,l0) a23(r126,l0) a24(r123,l0) a25(r96,l0) a26(r121,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r133,l0) conflicts: a4(r116,l0) a5(r104,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a22(r128,l0) a23(r126,l0) a24(r123,l0) a25(r96,l0) a26(r121,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a7(r105,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a22(r128,l0) a23(r126,l0) a24(r123,l0) a25(r96,l0) a26(r121,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a8(r114,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a9(r115,l0) a10(r117,l0) a11(r110,l0) a12(r91,l0) a22(r128,l0) a23(r126,l0) a24(r123,l0) a25(r96,l0) a26(r121,l0) a33(r90,l0) a34(r108,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0-2 4
;;     conflict hard regs: 0-2 4

;; a9(r115,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a10(r117,l0) a11(r110,l0) a12(r91,l0) a22(r128,l0) a23(r126,l0) a24(r123,l0) a25(r96,l0) a26(r121,l0) a33(r90,l0) a34(r108,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a10(r117,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a11(r110,l0) a12(r91,l0) a22(r128,l0) a23(r126,l0) a24(r123,l0) a25(r96,l0) a26(r121,l0) a33(r90,l0) a34(r108,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a11(r110,l0) conflicts: a4(r116,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a12(r91,l0) a33(r90,l0) a34(r108,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a12(r91,l0) conflicts: a4(r116,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a11(r110,l0) a33(r90,l0) a34(r108,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a22(r128,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r126,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a24(r123,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a25(r96,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a25(r96,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a24(r123,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r121,l0) conflicts: a4(r116,l0) a5(r104,l0) a6(r133,l0) a7(r105,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a33(r90,l0) conflicts: a4(r116,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a11(r110,l0) a12(r91,l0) a34(r108,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a34(r108,l0) conflicts: a4(r116,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a11(r110,l0) a12(r91,l0) a33(r90,l0) a43(r119,l0) a44(r87,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a43(r119,l0) conflicts: a4(r116,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a11(r110,l0) a12(r91,l0) a33(r90,l0) a34(r108,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a44(r87,l0) conflicts: a4(r116,l0) a8(r114,l0) a9(r115,l0) a10(r117,l0) a11(r110,l0) a12(r91,l0) a33(r90,l0) a34(r108,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a3(r131)<->a5(r104)@3:constraint
  cp1:a2(r130)<->a5(r104)@1:shuffle
  cp2:a1(r107)<->a2(r130)@1:shuffle
  cp3:a43(r119)<->a44(r87)@100:shuffle
  regions=5, blocks=16, points=31
    allocnos=45 (big 0), copies=4, conflicts=0, ranges=32

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r109 1r107 2r130 3r131 4r116 5r104 6r133 7r105 8r114 9r115 10r117 11r110 12r91 22r128 23r126 24r123 25r96 26r121 33r90 34r108 43r119 44r87
    modified regnos: 87 90 91 96 104 105 107 108 109 110 114 115 116 117 119 121 123 126 128 130 131 133
    border:
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@33546
          2:( 1-6 37-44)@27260
            3:( 3 6 41-44)@25410
      Allocno a0r109 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r107 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a2r130 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a3r131 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a4r116 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 7-36 45-51)
      Allocno a5r104 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a6r133 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a7r105 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a8r114 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 7-36 45-51)
      Allocno a9r115 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 7-36 45-51)
      Allocno a10r117 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 7-36 45-51)
      Allocno a11r110 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 7-36 45-51)
      Allocno a12r91 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 7-36 45-51)
      Allocno a22r128 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a23r126 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a24r123 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a25r96 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a26r121 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a33r90 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a34r108 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 7-36 45-51)
      Allocno a43r119 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a44r87 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a3(r131,l0)(cost 0)
      Pushing a2(r130,l0)(cost 0)
      Pushing a0(r109,l0)(cost 0)
      Pushing a6(r133,l0)(cost 0)
      Pushing a26(r121,l0)(cost 0)
      Pushing a25(r96,l0)(cost 0)
      Pushing a24(r123,l0)(cost 0)
      Pushing a22(r128,l0)(cost 0)
      Pushing a5(r104,l0)(cost 0)
      Pushing a1(r107,l0)(cost 0)
      Pushing a23(r126,l0)(cost 0)
      Pushing a7(r105,l0)(cost 0)
      Pushing a44(r87,l0)(cost 0)
      Pushing a43(r119,l0)(cost 0)
      Pushing a33(r90,l0)(cost 0)
      Pushing a4(r116,l0)(potential spill: pri=145, cost=145)
        Making a8(r114,l0) colorable
        Making a9(r115,l0) colorable
        Making a10(r117,l0) colorable
        Making a11(r110,l0) colorable
        Making a12(r91,l0) colorable
        Making a34(r108,l0) colorable
      Pushing a10(r117,l0)(cost 216)
      Pushing a8(r114,l0)(cost 176)
      Pushing a9(r115,l0)(cost 152)
      Pushing a11(r110,l0)(cost 608)
      Pushing a12(r91,l0)(cost 5808)
      Pushing a34(r108,l0)(cost 5600)
      Popping a34(r108,l0)  -- assign reg 3
      Popping a12(r91,l0)  -- assign reg 6
      Popping a11(r110,l0)  -- assign reg 41
      Popping a9(r115,l0)  -- assign reg 42
      Popping a8(r114,l0)  -- assign reg 43
      Popping a10(r117,l0)  -- assign reg 44
      Popping a4(r116,l0)  -- spill
      Popping a33(r90,l0)  -- assign reg 1
      Popping a43(r119,l0)  -- assign reg 0
      Popping a44(r87,l0)  -- assign reg 0
      Popping a7(r105,l0)  -- assign reg 1
      Popping a23(r126,l0)  -- assign reg 2
      Popping a1(r107,l0)  -- assign reg 1
      Popping a5(r104,l0)  -- assign reg 0
      Popping a22(r128,l0)  -- assign reg 2
      Popping a24(r123,l0)  -- assign reg 2
      Popping a25(r96,l0)  -- assign reg 4
      Popping a26(r121,l0)  -- assign reg 2
      Popping a6(r133,l0)  -- assign reg 5
      Popping a0(r109,l0)  -- assign reg 0
      Popping a2(r130,l0)  -- assign reg 1
      Popping a3(r131,l0)  -- assign reg 0
Spilling a9r115 for a33r90
Assigning 42 to a33r90
       a9(r115,l0)  -- assign memory
Disposition:
   44:r87  l0     0   33:r90  l0    42   12:r91  l0     6   25:r96  l0     4
    5:r104 l0     0    7:r105 l0     1    1:r107 l0     1   34:r108 l0     3
    0:r109 l0     0   11:r110 l0    41    8:r114 l0    43    9:r115 l0   mem
    4:r116 l0   mem   10:r117 l0    44   43:r119 l0     0   26:r121 l0     2
   24:r123 l0     2   23:r126 l0     2   22:r128 l0     2    2:r130 l0     1
    3:r131 l0     0    6:r133 l0     5
New iteration of spill/restore move
+++Costs: overall -1955, reg -2252, mem 297, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int hash_UNH(int*, int, long int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r6={1d,15u} r7={1d,16u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,14u} r17={16d,7u} r18={1d} r19={1d} r20={1d,15u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r87={1d,1u} r90={3d,3u} r91={2d,4u,1e} r96={1d,3u} r104={2d,6u} r105={2d,6u} r107={2d,6u} r108={2d,2u} r109={3d,1u} r110={1d,1u} r114={1d,1u} r115={1d,2u} r116={1d,5u} r117={1d,1u} r119={1d,1u} r121={1d,1u} r123={1d,2u} r126={2d,2u,1e} r128={1d,1u} r130={1d,2u} r131={1d} r133={1d,1u} 
;;    total ref usage 239{111d,126u,2e} in 69{68 regular + 1 call} insns.
(note 27 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 40, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 116 117
(note 38 27 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 28 38 29 2 (set (reg/v/f:DI 114 [ ints ])
        (reg:DI 5 di [ ints ])) tiles.cpp:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ ints ])
        (nil)))
(insn 29 28 30 2 (set (reg/v:SI 115 [ num_ints ])
        (reg:SI 4 si [ num_ints ])) tiles.cpp:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_ints ])
        (nil)))
(insn 30 29 31 2 (set (reg/v:DI 116 [ m ])
        (reg:DI 1 dx [ m ])) tiles.cpp:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ m ])
        (nil)))
(insn 31 30 32 2 (set (reg/v:SI 117 [ increment ])
        (reg:SI 2 cx [ increment ])) tiles.cpp:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ increment ])
        (nil)))
(note 32 31 40 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 40 32 41 2 (var_location:DI sum (const_int 0 [0])) tiles.cpp:134 -1
     (nil))
(insn 41 40 42 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE10first_call") [flags 0x2]  <var_decl 0x2b82f1f7d688 first_call>) [0 first_call+0 S4 A128])
            (const_int 0 [0]))) tiles.cpp:137 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 42 41 43 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) tiles.cpp:137 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 85)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              8 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 116 117

;; basic block 3, loop depth 0, count 0, freq 20, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(6){ }u10(7){ }u11(16){ }u12(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 116 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 110
(note 43 42 169 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 169 43 46 3 (set (reg:DI 91 [ ivtmp.78 ])
        (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)) 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
        (nil)))
(insn 46 169 79 3 (set (reg/f:DI 110 [ D.25971 ])
        (const:DI (plus:DI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
                (const_int 8192 [0x2000])))) 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
                (const_int 8192 [0x2000])))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 110 114 115 116 117

;; basic block 4, loop depth 1, count 0, freq 2000, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       6 [99.0%]  (DFS_BACK)
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(6){ }u14(7){ }u15(16){ }u16(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 110 114 115 116 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 90 108
(code_label 79 46 47 4 6 "" [1 uses])
(note 47 79 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 48 47 50 4 (var_location:SI k (clobber (const_int 0 [0]))) -1
     (nil))
(insn 50 48 52 4 (set (mem:SI (reg:DI 91 [ ivtmp.78 ]) [0 MEM[base: _115, offset: 0B]+0 S4 A32])
        (const_int 0 [0])) tiles.cpp:139 89 {*movsi_internal}
     (nil))
(debug_insn 52 50 33 4 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 33 52 34 4 (set (reg:SI 108 [ D.25970 ])
        (const_int 4 [0x4])) tiles.cpp:139 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))
(insn 34 33 68 4 (set (reg:SI 90 [ D.25965 ])
        (const_int 0 [0])) tiles.cpp:139 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 91 108 110 114 115 116 117

;; basic block 5, loop depth 2, count 0, freq 8000, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       5 [75.0%]  (DFS_BACK)
;;              4 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u18(6){ }u19(7){ }u20(16){ }u21(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 91 108 110 114 115 116 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 91 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 87 90 108 119
(code_label 68 34 53 5 4 "" [1 uses])
(note 53 68 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 54 53 55 5 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(call_insn 55 54 56 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x2b82f1e2a500 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) tiles.cpp:141 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 56 55 57 5 (set (reg:SI 87 [ D.25966 ])
        (reg:SI 0 ax)) tiles.cpp:141 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 57 56 58 5 (set (reg:SI 119 [ D.25965 ])
        (zero_extend:SI (subreg:QI (reg:SI 87 [ D.25966 ]) 0))) tiles.cpp:141 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:SI 87 [ D.25966 ])
        (nil)))
(insn 58 57 59 5 (parallel [
            (set (reg:SI 90 [ D.25965 ])
                (ashift:SI (reg:SI 90 [ D.25965 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:141 512 {*ashlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 59 58 60 5 (parallel [
            (set (reg:SI 90 [ D.25965 ])
                (ior:SI (reg:SI 119 [ D.25965 ])
                    (reg:SI 90 [ D.25965 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:141 412 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 119 [ D.25965 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 60 59 62 5 (set (mem:SI (reg:DI 91 [ ivtmp.78 ]) [0 MEM[base: _115, offset: 0B]+0 S4 A32])
        (reg:SI 90 [ D.25965 ])) tiles.cpp:141 89 {*movsi_internal}
     (nil))
(debug_insn 62 60 63 5 (var_location:SI i (debug_expr:SI D#1)) -1
     (nil))
(note 63 62 64 5 NOTE_INSN_DELETED)
(insn 64 63 65 5 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (reg:SI 108 [ D.25970 ])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg:SI 108 [ D.25970 ])
                (plus:SI (reg:SI 108 [ D.25970 ])
                    (const_int -1 [0xffffffffffffffff])))
        ]) tiles.cpp:140 281 {*addsi_2}
     (nil))
(jump_insn 65 64 72 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) tiles.cpp:140 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 7500 [0x1d4c])
            (nil)))
 -> 68)
;;  succ:       5 [75.0%]  (DFS_BACK)
;;              6 [25.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 91 108 110 114 115 116 117

;; basic block 6, loop depth 1, count 0, freq 2000, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 [25.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u33(6){ }u34(7){ }u35(16){ }u36(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 110 114 115 116 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 110
;; lr  def 	 17 [flags] 91
(note 72 65 74 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 74 72 75 6 (var_location:SI k (debug_expr:SI D#2)) -1
     (nil))
(insn 75 74 76 6 (parallel [
            (set (reg:DI 91 [ ivtmp.78 ])
                (plus:DI (reg:DI 91 [ ivtmp.78 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 76 75 77 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 91 [ ivtmp.78 ])
            (reg/f:DI 110 [ D.25971 ]))) tiles.cpp:138 8 {*cmpdi_1}
     (expr_list:REG_EQUAL (compare:CCZ (reg:DI 91 [ ivtmp.78 ])
            (const:DI (plus:DI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
                    (const_int 8192 [0x2000]))))
        (nil)))
(jump_insn 77 76 83 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 79)
            (pc))) tiles.cpp:138 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9899 [0x26ab])
            (nil)))
 -> 79)
;;  succ:       4 [99.0%]  (DFS_BACK)
;;              7 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 110 114 115 116 117

;; basic block 7, loop depth 0, count 0, freq 20, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u42(6){ }u43(7){ }u44(16){ }u45(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 116 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 83 77 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 7 (set (mem/c:SI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE10first_call") [flags 0x2]  <var_decl 0x2b82f1f7d688 first_call>) [0 first_call+0 S4 A128])
        (const_int 0 [0])) tiles.cpp:143 89 {*movsi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 116 117

;; basic block 8, loop depth 0, count 0, freq 40, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       2 [50.0%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u46(6){ }u47(7){ }u48(16){ }u49(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 116 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115
;; lr  def 	 17 [flags]
(code_label 85 84 86 8 2 "" [1 uses])
(note 86 85 88 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 88 86 89 8 (var_location:DI sum (const_int 0 [0])) -1
     (nil))
(debug_insn 89 88 90 8 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 90 89 91 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 115 [ num_ints ])
            (const_int 0 [0]))) tiles.cpp:146 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 91 90 92 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 164)
            (pc))) tiles.cpp:146 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 164)
;;  succ:       9 [91.0%]  (FALLTHRU)
;;              14 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 116 117

;; basic block 9, loop depth 0, count 0, freq 36, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [91.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u52(6){ }u53(7){ }u54(16){ }u55(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 116 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104 105 133
(note 92 91 35 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 35 92 36 9 (set (reg/v:DI 104 [ sum ])
        (const_int 0 [0])) tiles.cpp:134 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 36 35 168 9 (set (reg/v:SI 105 [ i ])
        (const_int 0 [0])) tiles.cpp:146 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 168 36 119 9 (set (reg/f:DI 133)
        (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)) 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 114 115 116 117 133

;; basic block 10, loop depth 1, count 0, freq 409, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       10 [91.0%]  (DFS_BACK)
;;              9 [100.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u56(6){ }u57(7){ }u58(16){ }u59(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 114 115 116 117 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 114 115 117 133
;; lr  def 	 17 [flags] 96 104 105 121 123 126 128
(code_label 119 168 93 10 9 "" [1 uses])
(note 93 119 94 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 94 93 95 10 (var_location:DI sum (reg/v:DI 104 [ sum ])) -1
     (nil))
(debug_insn 95 94 96 10 (var_location:SI i (reg/v:SI 105 [ i ])) -1
     (nil))
(insn 96 95 97 10 (set (reg:DI 121 [ D.25967 ])
        (sign_extend:DI (reg/v:SI 105 [ i ]))) tiles.cpp:148 149 {*extendsidi2_rex64}
     (nil))
(note 97 96 98 10 NOTE_INSN_DELETED)
(insn 98 97 173 10 (set (reg/v:DI 96 [ index ])
        (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI 121 [ D.25967 ])
                        (const_int 4 [0x4]))
                    (reg/v/f:DI 114 [ ints ])) [0 *_29+0 S4 A32]))) tiles.cpp:148 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:DI 121 [ D.25967 ])
        (nil)))
(debug_insn 173 98 99 10 (var_location:DI D#4 (reg/v:DI 96 [ index ])) -1
     (nil))
(debug_insn 99 173 100 10 (var_location:DI index (reg/v:DI 96 [ index ])) tiles.cpp:148 -1
     (nil))
(insn 100 99 172 10 (parallel [
            (set (reg:SI 123 [ D.25966 ])
                (mult:SI (reg/v:SI 117 [ increment ])
                    (reg/v:SI 105 [ i ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:149 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 172 100 101 10 (var_location:SI D#3 (reg:SI 123 [ D.25966 ])) -1
     (nil))
(note 101 172 102 10 NOTE_INSN_DELETED)
(insn 102 101 105 10 (set (reg:DI 126 [ index ])
        (plus:DI (reg/v:DI 96 [ index ])
            (subreg:DI (reg:SI 123 [ D.25966 ]) 0))) tiles.cpp:149 267 {*leadi}
     (expr_list:REG_DEAD (reg:SI 123 [ D.25966 ])
        (expr_list:REG_DEAD (reg/v:DI 96 [ index ])
            (nil))))
(debug_insn 105 102 106 10 (var_location:DI index (and:DI (plus:DI (sign_extend:DI (debug_expr:SI D#3))
            (debug_expr:DI D#4))
        (const_int 2047 [0x7ff]))) -1
     (nil))
(note 106 105 107 10 NOTE_INSN_DELETED)
(insn 107 106 109 10 (parallel [
            (set (reg:DI 126 [ index ])
                (and:DI (reg:DI 126 [ index ])
                    (const_int 2047 [0x7ff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:155 392 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 109 107 110 10 (set (reg:DI 128 [ D.25969 ])
        (zero_extend:DI (mem/j:SI (plus:DI (mult:DI (reg:DI 126 [ index ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 133)) [0 rndseq S4 A32]))) tiles.cpp:155 139 {*zero_extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:DI 126 [ index ])
        (expr_list:REG_EQUAL (zero_extend:DI (mem/j:SI (plus:DI (mult:DI (reg:DI 126 [ index ])
                            (const_int 4 [0x4]))
                        (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)) [0 rndseq S4 A32]))
            (nil))))
(insn 110 109 111 10 (parallel [
            (set (reg/v:DI 104 [ sum ])
                (plus:DI (reg/v:DI 104 [ sum ])
                    (reg:DI 128 [ D.25969 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 128 [ D.25969 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(debug_insn 111 110 112 10 (var_location:DI sum (reg/v:DI 104 [ sum ])) tiles.cpp:155 -1
     (nil))
(insn 112 111 114 10 (parallel [
            (set (reg/v:SI 105 [ i ])
                (plus:SI (reg/v:SI 105 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:146 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 114 112 115 10 (var_location:DI sum (reg/v:DI 104 [ sum ])) -1
     (nil))
(debug_insn 115 114 116 10 (var_location:SI i (reg/v:SI 105 [ i ])) -1
     (nil))
(insn 116 115 117 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 115 [ num_ints ])
            (reg/v:SI 105 [ i ]))) tiles.cpp:146 7 {*cmpsi_1}
     (nil))
(jump_insn 117 116 123 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 119)
            (pc))) tiles.cpp:146 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 119)
;;  succ:       10 [91.0%]  (DFS_BACK)
;;              11 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 114 115 116 117 133

;; basic block 11, loop depth 0, count 0, freq 36, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u87(6){ }u88(7){ }u89(16){ }u90(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 116
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 116
;; lr  def 	 17 [flags] 107 109 130 131
(note 123 117 124 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 11 (parallel [
            (set (reg:DI 131)
                (div:DI (reg/v:DI 104 [ sum ])
                    (reg/v:DI 116 [ m ])))
            (set (reg:DI 130 [ D.25969 ])
                (mod:DI (reg/v:DI 104 [ sum ])
                    (reg/v:DI 116 [ m ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:157 367 {*divmoddi4}
     (expr_list:REG_DEAD (reg/v:DI 104 [ sum ])
        (expr_list:REG_UNUSED (reg:DI 131)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 125 124 126 11 (set (reg:SI 109 [ D.25966 ])
        (subreg:SI (reg:DI 130 [ D.25969 ]) 0)) tiles.cpp:157 89 {*movsi_internal}
     (nil))
(insn 126 125 128 11 (set (reg/v:DI 107 [ index ])
        (sign_extend:DI (subreg:SI (reg:DI 130 [ D.25969 ]) 0))) tiles.cpp:157 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:DI 130 [ D.25969 ])
        (nil)))
(debug_insn 128 126 129 11 (var_location:DI index (reg/v:DI 107 [ index ])) -1
     (nil))
(insn 129 128 130 11 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg/v:DI 107 [ index ])
            (const_int 0 [0]))) tiles.cpp:158 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 130 129 171 11 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 150)
            (pc))) tiles.cpp:158 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 0 [0])
            (nil)))
 -> 150)
;;  succ:       12 [100.0%]  (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109 116

;; basic block 12, loop depth 1, count 0, freq 409, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              12 [91.0%]  (DFS_BACK)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u100(6){ }u101(7){ }u102(16){ }u103(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 116
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 116
;; lr  def 	 17 [flags] 107
(code_label 171 130 170 12 14 "" [1 uses])
(note 170 171 138 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 138 170 140 12 NOTE_INSN_DELETED)
(debug_insn 140 138 141 12 (var_location:DI index (plus:DI (reg/v:DI 107 [ index ])
        (reg/v:DI 116 [ m ]))) -1
     (nil))
(insn 141 140 142 12 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:DI (reg/v:DI 107 [ index ])
                        (reg/v:DI 116 [ m ]))
                    (const_int 0 [0])))
            (set (reg/v:DI 107 [ index ])
                (plus:DI (reg/v:DI 107 [ index ])
                    (reg/v:DI 116 [ m ])))
        ]) tiles.cpp:158 282 {*adddi_2}
     (nil))
(jump_insn 142 141 148 12 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 171)
            (pc))) tiles.cpp:158 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 171)
;;  succ:       12 [91.0%]  (DFS_BACK)
;;              13 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 116

;; basic block 13, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u110(6){ }u111(7){ }u112(16){ }u113(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107
;; lr  def 	 109
(note 148 142 149 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 174 13 (set (reg:SI 109 [ D.25966 ])
        (subreg:SI (reg/v:DI 107 [ index ]) 0)) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:DI 107 [ index ])
        (nil)))
(jump_insn 174 149 175 13 (set (pc)
        (label_ref 150)) 650 {jump}
     (nil)
 -> 150)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109

(barrier 175 174 164)
;; basic block 14, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       8 [9.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u115(6){ }u116(7){ }u117(16){ }u118(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 109
(code_label 164 175 163 14 13 "" [1 uses])
(note 163 164 37 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 37 163 150 14 (set (reg:SI 109 [ D.25966 ])
        (const_int 0 [0])) tiles.cpp:146 89 {*movsi_internal}
     (nil))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109

;; basic block 15, loop depth 0, count 0, freq 40, maybe hot
;;  prev block 14, next block 1, flags: (RTL)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              11
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u119(6){ }u120(7){ }u121(16){ }u122(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109
;; lr  def 	 0 [ax]
(code_label 150 37 151 15 7 "" [2 uses])
(note 151 150 156 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 156 151 159 15 (set (reg/i:SI 0 ax)
        (reg:SI 109 [ D.25966 ])) tiles.cpp:163 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 109 [ D.25966 ])
        (nil)))
(insn 159 156 0 15 (use (reg/i:SI 0 ax)) tiles.cpp:163 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles(int*, int, int, float*, int, int*, int) (_Z5tilesPiiiPfiS_i, funcdef_no=1061, decl_uid=23639, cgraph_uid=305)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 29 (  1.3)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 131: def dominates all uses has unique first use
Reg 132 uninteresting (no unique first use)
Reg 133: def dominates all uses has unique first use
Reg 134: def dominates all uses has unique first use
Reg 135 uninteresting (no unique first use)
Reg 136: def dominates all uses has unique first use
Ignoring reg 137, has equiv memory
Reg 84: def dominates all uses has unique first use
Reg 140 uninteresting
Reg 143: local to bb 5 def dominates all uses has unique first use
Reg 144 uninteresting
Reg 125: def dominates all uses has unique first use
Reg 152 uninteresting
Reg 99: def dominates all uses has unique first use
Reg 154 uninteresting
Reg 88 uninteresting
Ignoring reg 156, has equiv memory
Reg 157 uninteresting
Reg 121: def dominates all uses has unique first use
Reg 165 uninteresting
Reg 93: def dominates all uses has unique first use
Reg 186 uninteresting (no unique first use)
Reg 100 uninteresting (no unique first use)
Reg 101 uninteresting (no unique first use)
Reg 183 uninteresting
Ignoring reg 118, has equiv memory
Reg 84 not local to one basic block
Reg 93 not local to one basic block
Reg 99 not local to one basic block
Reg 121 not local to one basic block
Reg 125 not local to one basic block
Reg 131 not local to one basic block
Reg 133 not local to one basic block
Reg 134 not local to one basic block
Reg 136 not local to one basic block
Examining insn 62, def for 143
  all ok
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 17 16 15 14 13 12 20
;;
;; Loop 3
;;  header 12, latch 15
;;  depth 2, outer 2
;;  nodes: 12 15 14 13
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 11 7 }
;; 7 succs { 21 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 6 }
;; 11 succs { 19 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 12 16 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 21 }
;; 19 succs { 20 17 }
;; 20 succs { 12 }
;; 21 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 118: (insn_list:REG_DEP_TRUE 182 (nil))
init_insns for 137: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 100 (nil))
init_insns for 182: (insn_list:REG_DEP_TRUE 164 (nil))
Reg 186 had equivalence, but can't be eliminated

Pass 0 for finding pseudo/allocno costs

    a52 (r187,l3) best DIREG, allocno DIREG
    a34 (r187,l2) best DIREG, allocno DIREG
    a11 (r187,l0) best DIREG, allocno DIREG
    a51 (r186,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a33 (r186,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a73 (r185,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a50 (r185,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a35 (r185,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a39 (r183,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a53 (r182,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a58 (r178,l3) best AREG, allocno AREG
    a56 (r177,l3) best DREG, allocno DREG
    a59 (r175,l3) best AREG, allocno AREG
    a60 (r174,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a62 (r172,l3) best AREG, allocno AREG
    a61 (r171,l3) best DREG, allocno DREG
    a63 (r169,l3) best AREG, allocno AREG
    a3 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r158,l0) best DREG, allocno DREG
    a13 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a74 (r156,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a76 (r154,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a17 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a22 (r145,l0) best DREG, allocno DREG
    a23 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r143,l0) best DIREG, allocno DIREG
    a25 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a24 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a21 (r136,l0) best SIREG, allocno SIREG
    a72 (r135,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a49 (r135,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a32 (r135,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a71 (r134,l1) best CREG, allocno CREG
    a19 (r134,l0) best CREG, allocno CREG
    a70 (r133,l1) best DREG, allocno DREG
    a8 (r133,l0) best DREG, allocno DREG
    a69 (r132,l1) best SIREG, allocno SIREG
    a48 (r132,l3) best SIREG, allocno SIREG
    a31 (r132,l2) best SIREG, allocno SIREG
    a10 (r132,l0) best SIREG, allocno SIREG
    a68 (r131,l1) best DIREG, allocno DIREG
    a6 (r131,l0) best DIREG, allocno DIREG
    a67 (r125,l1) best SSE_REGS, allocno SSE_REGS
    a18 (r125,l0) best SSE_REGS, allocno SSE_REGS
    a47 (r121,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a30 (r121,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a40 (r120,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a46 (r119,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a29 (r119,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a38 (r118,l2) best AREG, allocno AREG
    a66 (r115,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a45 (r114,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a28 (r114,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a55 (r104,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a54 (r101,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a57 (r100,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a65 (r99,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a44 (r94,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a37 (r94,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a43 (r93,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a27 (r93,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a75 (r88,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a42 (r85,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a36 (r85,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a64 (r84,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a41 (r84,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a26 (r84,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r186,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,13039 SSE_REGS:52,13039 MMX_REGS:52,13039 FP_TOP_SSE_REGS:262140,63651460 FP_SECOND_SSE_REGS:262140,63651460 FLOAT_SSE_REGS:262140,63651460 FLOAT_INT_REGS:262140,63651460 INT_SSE_REGS:52,13039 FLOAT_INT_SSE_REGS:262140,63651460 ALL_REGS:262140,63651460 MEM:16,3965
  a1(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,2496 SSE_REGS:52,2496 MMX_REGS:52,2496 FP_TOP_SSE_REGS:262140,4262140 FP_SECOND_SSE_REGS:262140,4262140 FLOAT_SSE_REGS:262140,4262140 FLOAT_INT_REGS:262140,4262140 INT_SSE_REGS:52,2496 FLOAT_INT_SSE_REGS:262140,4262140 ALL_REGS:262140,4262140 MEM:16,627
  a2(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,12428 SSE_REGS:52,12428 MMX_REGS:52,12428 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,12428 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,2872
  a3(r165,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a4(r135,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,1560 SSE_REGS:364,1560 MMX_REGS:364,1560 FP_TOP_SSE_REGS:1834980,3834980 FP_SECOND_SSE_REGS:1834980,3834980 FLOAT_SSE_REGS:1834980,3834980 FLOAT_INT_REGS:1834980,3834980 INT_SSE_REGS:364,1560 FLOAT_INT_SSE_REGS:1834980,3834980 ALL_REGS:1834980,3834980 MEM:104,427
  a5(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1885 SSE_REGS:52,1885 MMX_REGS:52,1885 FP_TOP_SSE_REGS:262140,5342285 FP_SECOND_SSE_REGS:262140,5342285 FLOAT_SSE_REGS:262140,5342285 FLOAT_INT_REGS:262140,5342285 INT_SSE_REGS:52,1885 FLOAT_INT_SSE_REGS:262140,5342285 ALL_REGS:262140,5342285 MEM:16,486
  a6(r131,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a7(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a8(r133,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a9(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a10(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:156,19331 SSE_REGS:156,19331 MMX_REGS:156,19331 FP_TOP_SSE_REGS:786420,4786420 FP_SECOND_SSE_REGS:786420,4786420 FLOAT_SSE_REGS:786420,4786420 FLOAT_INT_REGS:786420,4786420 INT_SSE_REGS:156,19331 FLOAT_INT_SSE_REGS:786420,4786420 ALL_REGS:786420,4786420 MEM:48,4473
  a11(r187,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a12(r158,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a13(r157,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a14(r185,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a15(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,6162 SSE_REGS:52,6162 MMX_REGS:52,6162 FP_TOP_SSE_REGS:262140,15582720 FP_SECOND_SSE_REGS:262140,15582720 FLOAT_SSE_REGS:262140,15582720 FLOAT_INT_REGS:262140,15582720 INT_SSE_REGS:52,6162 FLOAT_INT_SSE_REGS:262140,15582720 ALL_REGS:262140,15582720 MEM:16,1614
  a16(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,298
  a17(r152,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a18(r125,l0) costs: AREG:52,1462 DREG:52,1462 CREG:52,1462 BREG:52,1462 SIREG:52,1462 DIREG:52,1462 AD_REGS:52,1462 Q_REGS:52,1462 NON_Q_REGS:52,1462 INDEX_REGS:52,1462 GENERAL_REGS:52,1462 LEGACY_REGS:52,1462 CLOBBERED_REGS:52,1462 FP_TOP_REG:84,2246 FP_SECOND_REG:84,2246 FLOAT_REGS:84,2246 SSE_FIRST_REG:0,188 SSE_REGS:0,188 MMX_REGS:68,1854 FP_TOP_SSE_REGS:84,2246 FP_SECOND_SSE_REGS:84,2246 FLOAT_SSE_REGS:84,2246 FLOAT_INT_REGS:84,2246 INT_SSE_REGS:52,1462 FLOAT_INT_SSE_REGS:84,2246 ALL_REGS:84,2246 MEM:32,972
  a19(r134,l0) costs: AREG:0,0 DREG:0,0 CREG:-4,-4 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a20(r143,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a21(r136,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a22(r145,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a23(r144,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a24(r137,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1048560,1048560 FP_SECOND_SSE_REGS:1048560,1048560 FLOAT_SSE_REGS:1048560,1048560 FLOAT_INT_REGS:1048560,1048560 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1048560,1048560 ALL_REGS:1048560,1048560 MEM:28,28
  a25(r140,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a26(r84,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a27(r93,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,12376 SSE_REGS:0,12376 MMX_REGS:0,12376 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,12376 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,2856
  a28(r114,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1833,1833 SSE_REGS:1833,1833 MMX_REGS:1833,1833 FP_TOP_SSE_REGS:5080145,5080145 FP_SECOND_SSE_REGS:5080145,5080145 FLOAT_SSE_REGS:5080145,5080145 FLOAT_INT_REGS:5080145,5080145 INT_SSE_REGS:1833,1833 FLOAT_INT_SSE_REGS:5080145,5080145 ALL_REGS:5080145,5080145 MEM:470,470
  a29(r119,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:611,611
  a30(r121,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a31(r132,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,19175 SSE_REGS:611,19175 MMX_REGS:611,19175 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:611,19175 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:141,4425
  a32(r135,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1196,1196 SSE_REGS:1196,1196 MMX_REGS:1196,1196 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1196,1196 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:323,323
  a33(r186,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,12987 SSE_REGS:611,12987 MMX_REGS:611,12987 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:611,12987 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:141,3949
  a34(r187,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,25337 SSE_REGS:585,25337 MMX_REGS:585,25337 FP_TOP_SSE_REGS:1000000,125778640 FP_SECOND_SSE_REGS:1000000,125778640 FLOAT_SSE_REGS:1000000,125778640 FLOAT_INT_REGS:1000000,125778640 INT_SSE_REGS:585,25337 FLOAT_INT_SSE_REGS:1000000,125778640 ALL_REGS:1000000,125778640 MEM:180,7796
  a35(r185,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,12961 SSE_REGS:585,12961 MMX_REGS:585,12961 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:585,12961 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:180,3988
  a36(r85,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,87217 SSE_REGS:585,87217 MMX_REGS:585,87217 FP_TOP_SSE_REGS:1000000,253557280 FP_SECOND_SSE_REGS:1000000,253557280 FLOAT_SSE_REGS:1000000,253557280 FLOAT_INT_REGS:1000000,253557280 INT_SSE_REGS:585,87217 FLOAT_INT_SSE_REGS:1000000,253557280 ALL_REGS:1000000,253557280 MEM:180,23980
  a37(r94,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,37713 SSE_REGS:585,37713 MMX_REGS:585,37713 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:585,37713 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:180,8748
  a38(r118,l2) costs: AREG:-47,-47 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:376,376
  a39(r183,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:4080145,4080145 FP_SECOND_SSE_REGS:4080145,4080145 FLOAT_SSE_REGS:4080145,4080145 FLOAT_INT_REGS:4080145,4080145 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:4080145,4080145 ALL_REGS:4080145,4080145 MEM:376,376
  a40(r120,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2131070,2131070 FP_SECOND_SSE_REGS:2131070,2131070 FLOAT_SSE_REGS:2131070,2131070 FLOAT_INT_REGS:2131070,2131070 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2131070,2131070 ALL_REGS:2131070,2131070 MEM:329,329
  a41(r84,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a42(r85,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:86632,86632 SSE_REGS:86632,86632 MMX_REGS:86632,86632 FP_TOP_SSE_REGS:252557280,252557280 FP_SECOND_SSE_REGS:252557280,252557280 FLOAT_SSE_REGS:252557280,252557280 FLOAT_INT_REGS:252557280,252557280 INT_SSE_REGS:86632,86632 FLOAT_INT_SSE_REGS:252557280,252557280 ALL_REGS:252557280,252557280 MEM:23800,23800
  a43(r93,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2856,2856
  a44(r94,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:8568,8568
  a45(r114,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a46(r119,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a47(r121,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a48(r132,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18564,18564 SSE_REGS:18564,18564 MMX_REGS:18564,18564 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:18564,18564 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:4284,4284
  a49(r135,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a50(r185,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a51(r186,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a52(r187,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:124778640,124778640 FP_SECOND_SSE_REGS:124778640,124778640 FLOAT_SSE_REGS:124778640,124778640 FLOAT_INT_REGS:124778640,124778640 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:124778640,124778640 ALL_REGS:124778640,124778640 MEM:7616,7616
  a53(r182,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6664,6664
  a54(r101,l3) costs: AREG:1904,1904 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:14280,14280
  a55(r104,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:9996,9996
  a56(r177,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:32194660,32194660 FP_SECOND_SSE_REGS:32194660,32194660 FLOAT_SSE_REGS:32194660,32194660 FLOAT_INT_REGS:32194660,32194660 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:32194660,32194660 ALL_REGS:32194660,32194660 MEM:3808,3808
  a57(r100,l3) costs: AREG:1904,1904 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:36194660,36194660 FP_SECOND_SSE_REGS:36194660,36194660 FLOAT_SSE_REGS:36194660,36194660 FLOAT_INT_REGS:36194660,36194660 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:36194660,36194660 ALL_REGS:36194660,36194660 MEM:14756,14756
  a58(r178,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a59(r175,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a60(r174,l3) costs: AREG:952,952 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3808,3808
  a61(r171,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a62(r172,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a63(r169,l3) costs: AREG:952,952 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:4284,4284
  a64(r84,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a65(r99,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:282,282
  a66(r115,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6110,6110 SSE_REGS:6110,6110 MMX_REGS:6110,6110 FP_TOP_SSE_REGS:15320580,15320580 FP_SECOND_SSE_REGS:15320580,15320580 FLOAT_SSE_REGS:15320580,15320580 FLOAT_INT_REGS:15320580,15320580 INT_SSE_REGS:6110,6110 FLOAT_INT_SSE_REGS:15320580,15320580 ALL_REGS:15320580,15320580 MEM:1598,1598
  a67(r125,l1) costs: AREG:1410,1410 DREG:1410,1410 CREG:1410,1410 BREG:1410,1410 SIREG:1410,1410 DIREG:1410,1410 AD_REGS:1410,1410 Q_REGS:1410,1410 NON_Q_REGS:1410,1410 INDEX_REGS:1410,1410 GENERAL_REGS:1410,1410 LEGACY_REGS:1410,1410 CLOBBERED_REGS:1410,1410 FP_TOP_REG:2162,2162 FP_SECOND_REG:2162,2162 FLOAT_REGS:2162,2162 SSE_FIRST_REG:188,188 SSE_REGS:188,188 MMX_REGS:1786,1786 FP_TOP_SSE_REGS:2162,2162 FP_SECOND_SSE_REGS:2162,2162 FLOAT_SSE_REGS:2162,2162 FLOAT_INT_REGS:2162,2162 INT_SSE_REGS:1410,1410 FLOAT_INT_SSE_REGS:2162,2162 ALL_REGS:2162,2162 MEM:940,940
  a68(r131,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a69(r132,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a70(r133,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a71(r134,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a72(r135,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a73(r185,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a74(r156,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:752,752
  a75(r88,l1) costs: AREG:1786,1786 DREG:1786,1786 CREG:1786,1786 BREG:1786,1786 SIREG:1786,1786 DIREG:1786,1786 AD_REGS:1786,1786 Q_REGS:1786,1786 NON_Q_REGS:1786,1786 INDEX_REGS:1786,1786 GENERAL_REGS:1786,1786 LEGACY_REGS:1786,1786 CLOBBERED_REGS:1786,1786 FP_TOP_REG:3948,3948 FP_SECOND_REG:3948,3948 FLOAT_REGS:3948,3948 SSE_FIRST_REG:-94,-94 SSE_REGS:0,0 MMX_REGS:3196,3196 FP_TOP_SSE_REGS:3948,3948 FP_SECOND_SSE_REGS:3948,3948 FLOAT_SSE_REGS:3948,3948 FLOAT_INT_REGS:3948,3948 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:3948,3948 ALL_REGS:3948,3948 MEM:1504,1504
  a76(r154,l1) costs: AREG:1974,1974 DREG:1974,1974 CREG:1974,1974 BREG:1974,1974 SIREG:1974,1974 DIREG:1974,1974 AD_REGS:1974,1974 Q_REGS:1974,1974 NON_Q_REGS:1974,1974 INDEX_REGS:1974,1974 GENERAL_REGS:1974,1974 LEGACY_REGS:1974,1974 CLOBBERED_REGS:1974,1974 FP_TOP_REG:4136,4136 FP_SECOND_REG:4136,4136 FLOAT_REGS:4136,4136 SSE_FIRST_REG:94,94 SSE_REGS:188,188 MMX_REGS:3384,3384 FP_TOP_SSE_REGS:4136,4136 FP_SECOND_SSE_REGS:4136,4136 FLOAT_SSE_REGS:4136,4136 FLOAT_INT_REGS:4136,4136 INT_SSE_REGS:2632,2632 FLOAT_INT_SSE_REGS:4136,4136 ALL_REGS:4136,4136 MEM:1692,1692


Pass 1 for finding pseudo/allocno costs

    r187: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a52 (r187,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a34 (r187,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r178: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r172: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r158: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r154: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r145: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r143: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r136: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r134: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a71 (r134,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a70 (r133,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a69 (r132,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a48 (r132,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a31 (r132,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a68 (r131,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r118: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r88: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r186,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,13039 SSE_REGS:52,13039 MMX_REGS:52,13039 FP_TOP_SSE_REGS:262140,63651460 FP_SECOND_SSE_REGS:262140,63651460 FLOAT_SSE_REGS:262140,63651460 FLOAT_INT_REGS:262140,63651460 INT_SSE_REGS:52,13039 FLOAT_INT_SSE_REGS:262140,63651460 ALL_REGS:262140,63651460 MEM:16,3965
  a1(r119,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,2496 SSE_REGS:52,2496 MMX_REGS:52,2496 FP_TOP_SSE_REGS:262140,4262140 FP_SECOND_SSE_REGS:262140,4262140 FLOAT_SSE_REGS:262140,4262140 FLOAT_INT_REGS:262140,4262140 INT_SSE_REGS:52,2496 FLOAT_INT_SSE_REGS:262140,4262140 ALL_REGS:262140,4262140 MEM:16,627
  a2(r93,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,12428 SSE_REGS:52,12428 MMX_REGS:52,12428 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,12428 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,2872
  a3(r165,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a4(r135,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:364,1560 SSE_REGS:364,1560 MMX_REGS:364,1560 FP_TOP_SSE_REGS:1834980,3834980 FP_SECOND_SSE_REGS:1834980,3834980 FLOAT_SSE_REGS:1834980,3834980 FLOAT_INT_REGS:1834980,3834980 INT_SSE_REGS:364,1560 FLOAT_INT_SSE_REGS:1834980,3834980 ALL_REGS:1834980,3834980 MEM:104,427
  a5(r114,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,1885 SSE_REGS:52,1885 MMX_REGS:52,1885 FP_TOP_SSE_REGS:262140,5342285 FP_SECOND_SSE_REGS:262140,5342285 FLOAT_SSE_REGS:262140,5342285 FLOAT_INT_REGS:262140,5342285 INT_SSE_REGS:52,1885 FLOAT_INT_SSE_REGS:262140,5342285 ALL_REGS:262140,5342285 MEM:16,486
  a6(r131,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a7(r121,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a8(r133,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a9(r84,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a10(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:156,19331 SSE_REGS:156,19331 MMX_REGS:156,19331 FP_TOP_SSE_REGS:786420,4786420 FP_SECOND_SSE_REGS:786420,4786420 FLOAT_SSE_REGS:786420,4786420 FLOAT_INT_REGS:786420,4786420 INT_SSE_REGS:156,19331 FLOAT_INT_SSE_REGS:786420,4786420 ALL_REGS:786420,4786420 MEM:48,4473
  a11(r187,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a12(r158,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a13(r157,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a14(r185,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a15(r115,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,6162 SSE_REGS:52,6162 MMX_REGS:52,6162 FP_TOP_SSE_REGS:262140,15582720 FP_SECOND_SSE_REGS:262140,15582720 FLOAT_SSE_REGS:262140,15582720 FLOAT_INT_REGS:262140,15582720 INT_SSE_REGS:52,6162 FLOAT_INT_SSE_REGS:262140,15582720 ALL_REGS:262140,15582720 MEM:16,1614
  a16(r99,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,298
  a17(r152,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a18(r125,l0) costs: AREG:52,1462 DREG:52,1462 CREG:52,1462 BREG:52,1462 SIREG:52,1462 DIREG:52,1462 AD_REGS:52,1462 Q_REGS:52,1462 NON_Q_REGS:52,1462 INDEX_REGS:52,1462 GENERAL_REGS:52,1462 LEGACY_REGS:52,1462 CLOBBERED_REGS:52,1462 FP_TOP_REG:84,2246 FP_SECOND_REG:84,2246 FLOAT_REGS:84,2246 SSE_REGS:0,188 MMX_REGS:68,1854 FP_TOP_SSE_REGS:84,2246 FP_SECOND_SSE_REGS:84,2246 FLOAT_SSE_REGS:84,2246 FLOAT_INT_REGS:84,2246 INT_SSE_REGS:52,1462 FLOAT_INT_SSE_REGS:84,2246 ALL_REGS:84,2246 MEM:32,972
  a19(r134,l0) costs: AREG:0,0 DREG:0,0 CREG:-4,-4 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a20(r143,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a21(r136,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a22(r145,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a23(r144,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a24(r137,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1048560,1048560 FP_SECOND_SSE_REGS:1048560,1048560 FLOAT_SSE_REGS:1048560,1048560 FLOAT_INT_REGS:1048560,1048560 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1048560,1048560 ALL_REGS:1048560,1048560 MEM:28,28
  a25(r140,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a26(r84,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a27(r93,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,12376 SSE_REGS:0,12376 MMX_REGS:0,12376 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,12376 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,2856
  a28(r114,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1833,1833 SSE_REGS:1833,1833 MMX_REGS:1833,1833 FP_TOP_SSE_REGS:5080145,5080145 FP_SECOND_SSE_REGS:5080145,5080145 FLOAT_SSE_REGS:5080145,5080145 FLOAT_INT_REGS:5080145,5080145 INT_SSE_REGS:1833,1833 FLOAT_INT_SSE_REGS:5080145,5080145 ALL_REGS:5080145,5080145 MEM:470,470
  a29(r119,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:611,611
  a30(r121,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a31(r132,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,19175 SSE_REGS:611,19175 MMX_REGS:611,19175 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:611,19175 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:141,4425
  a32(r135,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1196,1196 SSE_REGS:1196,1196 MMX_REGS:1196,1196 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1196,1196 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:323,323
  a33(r186,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:611,12987 SSE_REGS:611,12987 MMX_REGS:611,12987 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:611,12987 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:141,3949
  a34(r187,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,25337 SSE_REGS:585,25337 MMX_REGS:585,25337 FP_TOP_SSE_REGS:1000000,125778640 FP_SECOND_SSE_REGS:1000000,125778640 FLOAT_SSE_REGS:1000000,125778640 FLOAT_INT_REGS:1000000,125778640 INT_SSE_REGS:585,25337 FLOAT_INT_SSE_REGS:1000000,125778640 ALL_REGS:1000000,125778640 MEM:180,7796
  a35(r185,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:585,12961 SSE_REGS:585,12961 MMX_REGS:585,12961 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:585,12961 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:180,3988
  a36(r85,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:585,87217 SSE_REGS:585,87217 MMX_REGS:585,87217 FP_TOP_SSE_REGS:1000000,253557280 FP_SECOND_SSE_REGS:1000000,253557280 FLOAT_SSE_REGS:1000000,253557280 FLOAT_INT_REGS:1000000,253557280 INT_SSE_REGS:585,87217 FLOAT_INT_SSE_REGS:1000000,253557280 ALL_REGS:1000000,253557280 MEM:180,23980
  a37(r94,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:585,37713 SSE_REGS:585,37713 MMX_REGS:585,37713 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:585,37713 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:180,8748
  a38(r118,l2) costs: AREG:-47,-47 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:376,376
  a39(r183,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:4080145,4080145 FP_SECOND_SSE_REGS:4080145,4080145 FLOAT_SSE_REGS:4080145,4080145 FLOAT_INT_REGS:4080145,4080145 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:4080145,4080145 ALL_REGS:4080145,4080145 MEM:376,376
  a40(r120,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2131070,2131070 FP_SECOND_SSE_REGS:2131070,2131070 FLOAT_SSE_REGS:2131070,2131070 FLOAT_INT_REGS:2131070,2131070 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2131070,2131070 ALL_REGS:2131070,2131070 MEM:329,329
  a41(r84,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a42(r85,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:86632,86632 SSE_REGS:86632,86632 MMX_REGS:86632,86632 FP_TOP_SSE_REGS:252557280,252557280 FP_SECOND_SSE_REGS:252557280,252557280 FLOAT_SSE_REGS:252557280,252557280 FLOAT_INT_REGS:252557280,252557280 INT_SSE_REGS:86632,86632 FLOAT_INT_SSE_REGS:252557280,252557280 ALL_REGS:252557280,252557280 MEM:23800,23800
  a43(r93,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2856,2856
  a44(r94,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:8568,8568
  a45(r114,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a46(r119,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a47(r121,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a48(r132,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18564,18564 SSE_REGS:18564,18564 MMX_REGS:18564,18564 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:18564,18564 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:4284,4284
  a49(r135,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a50(r185,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a51(r186,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a52(r187,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:124778640,124778640 FP_SECOND_SSE_REGS:124778640,124778640 FLOAT_SSE_REGS:124778640,124778640 FLOAT_INT_REGS:124778640,124778640 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:124778640,124778640 ALL_REGS:124778640,124778640 MEM:7616,7616
  a53(r182,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6664,6664
  a54(r101,l3) costs: GENERAL_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:14280,14280
  a55(r104,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:9996,9996
  a56(r177,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:32194660,32194660 FP_SECOND_SSE_REGS:32194660,32194660 FLOAT_SSE_REGS:32194660,32194660 FLOAT_INT_REGS:32194660,32194660 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:32194660,32194660 ALL_REGS:32194660,32194660 MEM:3808,3808
  a57(r100,l3) costs: GENERAL_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:36194660,36194660 FP_SECOND_SSE_REGS:36194660,36194660 FLOAT_SSE_REGS:36194660,36194660 FLOAT_INT_REGS:36194660,36194660 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:36194660,36194660 ALL_REGS:36194660,36194660 MEM:14756,14756
  a58(r178,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a59(r175,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a60(r174,l3) costs: GENERAL_REGS:952,952 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3808,3808
  a61(r171,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a62(r172,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a63(r169,l3) costs: AREG:952,952 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:4284,4284
  a64(r84,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a65(r99,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:282,282
  a66(r115,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6110,6110 SSE_REGS:6110,6110 MMX_REGS:6110,6110 FP_TOP_SSE_REGS:15320580,15320580 FP_SECOND_SSE_REGS:15320580,15320580 FLOAT_SSE_REGS:15320580,15320580 FLOAT_INT_REGS:15320580,15320580 INT_SSE_REGS:6110,6110 FLOAT_INT_SSE_REGS:15320580,15320580 ALL_REGS:15320580,15320580 MEM:1598,1598
  a67(r125,l1) costs: AREG:1410,1410 DREG:1410,1410 CREG:1410,1410 BREG:1410,1410 SIREG:1410,1410 DIREG:1410,1410 AD_REGS:1410,1410 Q_REGS:1410,1410 NON_Q_REGS:1410,1410 INDEX_REGS:1410,1410 GENERAL_REGS:1410,1410 LEGACY_REGS:1410,1410 CLOBBERED_REGS:1410,1410 FP_TOP_REG:2162,2162 FP_SECOND_REG:2162,2162 FLOAT_REGS:2162,2162 SSE_REGS:188,188 MMX_REGS:1786,1786 FP_TOP_SSE_REGS:2162,2162 FP_SECOND_SSE_REGS:2162,2162 FLOAT_SSE_REGS:2162,2162 FLOAT_INT_REGS:2162,2162 INT_SSE_REGS:1410,1410 FLOAT_INT_SSE_REGS:2162,2162 ALL_REGS:2162,2162 MEM:940,940
  a68(r131,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a69(r132,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a70(r133,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a71(r134,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a72(r135,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a73(r185,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a74(r156,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:752,752
  a75(r88,l1) costs: AREG:2444,2444 DREG:2444,2444 CREG:2444,2444 BREG:2444,2444 SIREG:2444,2444 DIREG:2444,2444 AD_REGS:2444,2444 Q_REGS:2444,2444 NON_Q_REGS:2444,2444 INDEX_REGS:2444,2444 GENERAL_REGS:2444,2444 LEGACY_REGS:2444,2444 CLOBBERED_REGS:2444,2444 FP_TOP_REG:3948,3948 FP_SECOND_REG:3948,3948 FLOAT_REGS:3948,3948 SSE_FIRST_REG:-94,-94 SSE_REGS:0,0 MMX_REGS:3196,3196 FP_TOP_SSE_REGS:3948,3948 FP_SECOND_SSE_REGS:3948,3948 FLOAT_SSE_REGS:3948,3948 FLOAT_INT_REGS:3948,3948 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:3948,3948 ALL_REGS:3948,3948 MEM:1504,1504
  a76(r154,l1) costs: AREG:2632,2632 DREG:2632,2632 CREG:2632,2632 BREG:2632,2632 SIREG:2632,2632 DIREG:2632,2632 AD_REGS:2632,2632 Q_REGS:2632,2632 NON_Q_REGS:2632,2632 INDEX_REGS:2632,2632 GENERAL_REGS:2632,2632 LEGACY_REGS:2632,2632 CLOBBERED_REGS:2632,2632 FP_TOP_REG:4136,4136 FP_SECOND_REG:4136,4136 FLOAT_REGS:4136,4136 SSE_FIRST_REG:94,94 SSE_REGS:188,188 MMX_REGS:3384,3384 FP_TOP_SSE_REGS:4136,4136 FP_SECOND_SSE_REGS:4136,4136 FLOAT_SSE_REGS:4136,4136 FLOAT_INT_REGS:4136,4136 INT_SSE_REGS:2632,2632 FLOAT_INT_SSE_REGS:4136,4136 ALL_REGS:4136,4136 MEM:1692,1692

   Insn 232(l0): point = 1
   Insn 217(l0): point = 3
   Insn 39(l0): point = 5
   Insn 132(l0): point = 7
   Insn 130(l0): point = 9
   Insn 128(l0): point = 11
   Insn 127(l0): point = 13
   Insn 216(l0): point = 16
   Insn 34(l0): point = 18
   Insn 91(l0): point = 20
   Insn 89(l0): point = 22
   Insn 87(l0): point = 24
   Insn 228(l0): point = 27
   Insn 81(l0): point = 30
   Insn 80(l0): point = 32
   Insn 230(l0): point = 35
   Insn 120(l0): point = 37
   Insn 119(l0): point = 39
   Insn 118(l0): point = 41
   Insn 117(l0): point = 43
   Insn 114(l0): point = 45
   Insn 113(l0): point = 47
   Insn 112(l0): point = 49
   Insn 223(l0): point = 52
   Insn 52(l0): point = 55
   Insn 51(l0): point = 57
   Insn 225(l0): point = 60
   Insn 71(l0): point = 62
   Insn 70(l0): point = 64
   Insn 69(l0): point = 66
   Insn 68(l0): point = 68
   Insn 64(l0): point = 70
   Insn 63(l0): point = 72
   Insn 62(l0): point = 74
   Insn 59(l0): point = 76
   Insn 48(l0): point = 79
   Insn 47(l0): point = 81
   Insn 43(l0): point = 83
   Insn 32(l0): point = 85
   Insn 31(l0): point = 87
   Insn 30(l0): point = 89
   Insn 29(l0): point = 91
   Insn 28(l0): point = 93
   Insn 27(l0): point = 95
   Insn 26(l0): point = 97
   Insn 238(l2): point = 100
   Insn 219(l2): point = 102
   Insn 218(l2): point = 104
   Insn 36(l2): point = 106
   Insn 35(l2): point = 108
   Insn 38(l2): point = 111
   Insn 196(l2): point = 114
   Insn 195(l2): point = 116
   Insn 188(l2): point = 119
   Insn 187(l2): point = 121
   Insn 186(l2): point = 123
   Insn 183(l2): point = 125
   Insn 182(l2): point = 127
   Insn 181(l2): point = 129
   Insn 180(l2): point = 131
   Insn 179(l2): point = 133
   Insn 178(l2): point = 135
   Insn 177(l2): point = 137
   Insn 176(l2): point = 139
   Insn 174(l2): point = 141
   Insn 173(l2): point = 143
   Insn 236(l2): point = 146
   Insn 37(l2): point = 148
   Insn 143(l3): point = 151
   Insn 142(l3): point = 153
   Insn 141(l3): point = 155
   Insn 139(l3): point = 157
   Insn 171(l3): point = 160
   Insn 170(l3): point = 162
   Insn 168(l3): point = 164
   Insn 167(l3): point = 166
   Insn 164(l3): point = 168
   Insn 163(l3): point = 170
   Insn 161(l3): point = 172
   Insn 157(l3): point = 175
   Insn 156(l3): point = 177
   Insn 155(l3): point = 179
   Insn 154(l3): point = 182
   Insn 153(l3): point = 184
   Insn 234(l3): point = 187
   Insn 147(l3): point = 189
   Insn 146(l3): point = 191
   Insn 145(l3): point = 194
   Insn 105(l1): point = 197
   Insn 104(l1): point = 199
   Insn 103(l1): point = 201
   Insn 100(l1): point = 203
   Insn 99(l1): point = 205
   Insn 97(l1): point = 207
   Insn 96(l1): point = 209
   Insn 95(l1): point = 211
   Insn 94(l1): point = 213
 a0(r186): [1..3]
 a1(r119): [1..5]
 a2(r93): [1..7]
 a3(r165): [8..9]
 a4(r135): [30..89] [1..26]
 a5(r114): [1..11]
 a6(r131): [30..97] [12..26]
 a7(r121): [1..13]
 a8(r133): [30..93] [14..26]
 a9(r84): [30..83] [1..26]
 a10(r132): [30..95] [1..26]
 a11(r187): [40..45]
 a12(r158): [44..47]
 a13(r157): [48..49]
 a14(r185): [16..16]
 a15(r115): [16..18]
 a16(r99): [16..20]
 a17(r152): [21..22]
 a18(r125): [16..24]
 a19(r134): [55..91] [16..26]
 a20(r143): [65..74]
 a21(r136): [67..87]
 a22(r145): [69..70]
 a23(r144): [71..72]
 a24(r137): [73..85]
 a25(r140): [75..76]
 a26(r84): [100..150]
 a27(r93): [100..150]
 a28(r114): [100..150]
 a29(r119): [100..150]
 a30(r121): [100..150]
 a31(r132): [100..150]
 a32(r135): [100..150]
 a33(r186): [100..150]
 a34(r187): [100..102]
 a35(r185): [100..104]
 a36(r85): [100..106]
 a37(r94): [100..108]
 a38(r118): [128..129]
 a39(r183): [142..143]
 a40(r120): [144..148] [111..111]
 a41(r84): [151..196]
 a42(r85): [151..196]
 a43(r93): [151..196]
 a44(r94): [151..196]
 a45(r114): [151..196]
 a46(r119): [151..196]
 a47(r121): [151..196]
 a48(r132): [151..196]
 a49(r135): [151..196]
 a50(r185): [151..196]
 a51(r186): [151..196]
 a52(r187): [151..196]
 a53(r182): [169..170]
 a54(r101): [171..196] [151..155]
 a55(r104): [187..189] [173..177]
 a56(r177): [178..180]
 a57(r100): [190..196] [178..186] [151..157]
 a58(r178): [179..179]
 a59(r175): [181..182]
 a60(r174): [183..184]
 a61(r171): [190..192]
 a62(r172): [191..191]
 a63(r169): [193..194]
 a64(r84): [197..215]
 a65(r99): [197..215]
 a66(r115): [197..215]
 a67(r125): [197..215]
 a68(r131): [197..215]
 a69(r132): [197..215]
 a70(r133): [197..215]
 a71(r134): [197..215]
 a72(r135): [197..215]
 a73(r185): [197..215]
 a74(r156): [204..205]
 a75(r88): [206..207]
 a76(r154): [212..213]
Compressing live ranges: from 216 to 58 - 26%
Ranges after the compression:
 a0(r186): [0..1]
 a1(r119): [0..1]
 a2(r93): [0..1]
 a3(r165): [2..3]
 a4(r135): [0..22]
 a5(r114): [0..3]
 a6(r131): [4..22]
 a7(r121): [0..5]
 a8(r133): [6..22]
 a9(r84): [0..22]
 a10(r132): [0..22]
 a11(r187): [11..12]
 a12(r158): [11..12]
 a13(r157): [13..14]
 a14(r185): [7..7]
 a15(r115): [7..8]
 a16(r99): [7..8]
 a17(r152): [9..10]
 a18(r125): [7..10]
 a19(r134): [15..22] [7..10]
 a20(r143): [15..20]
 a21(r136): [15..22]
 a22(r145): [15..16]
 a23(r144): [17..18]
 a24(r137): [19..22]
 a25(r140): [21..22]
 a26(r84): [23..31]
 a27(r93): [23..31]
 a28(r114): [23..31]
 a29(r119): [23..31]
 a30(r121): [23..31]
 a31(r132): [23..31]
 a32(r135): [23..31]
 a33(r186): [23..31]
 a34(r187): [23..24]
 a35(r185): [23..24]
 a36(r85): [23..24]
 a37(r94): [23..24]
 a38(r118): [26..27]
 a39(r183): [28..29]
 a40(r120): [30..31] [25..25]
 a41(r84): [32..51]
 a42(r85): [32..51]
 a43(r93): [32..51]
 a44(r94): [32..51]
 a45(r114): [32..51]
 a46(r119): [32..51]
 a47(r121): [32..51]
 a48(r132): [32..51]
 a49(r135): [32..51]
 a50(r185): [32..51]
 a51(r186): [32..51]
 a52(r187): [32..51]
 a53(r182): [34..35]
 a54(r101): [36..51] [32..33]
 a55(r104): [45..46] [36..37]
 a56(r177): [38..40]
 a57(r100): [47..51] [38..44] [32..33]
 a58(r178): [39..39]
 a59(r175): [41..42]
 a60(r174): [43..44]
 a61(r171): [47..49]
 a62(r172): [48..48]
 a63(r169): [50..51]
 a64(r84): [52..57]
 a65(r99): [52..57]
 a66(r115): [52..57]
 a67(r125): [52..57]
 a68(r131): [52..57]
 a69(r132): [52..57]
 a70(r133): [52..57]
 a71(r134): [52..57]
 a72(r135): [52..57]
 a73(r185): [52..57]
 a74(r156): [52..53]
 a75(r88): [54..55]
 a76(r154): [56..57]
    Creating cap  a77(r187,l0: a34(r187,l2))
    Creating cap  a78(r185,l0: a35(r185,l2))
    Creating cap  a79(r85,l0: a36(r85,l2))
    Creating cap  a80(r94,l0: a37(r94,l2))
    Creating cap  a81(r118,l0: a38(r118,l2))
    Creating cap  a82(r183,l0: a39(r183,l2))
    Creating cap  a83(r120,l0: a40(r120,l2))
    Creating cap  a84(r182,l2: a53(r182,l3))
    Creating cap  a85(r101,l2: a54(r101,l3))
    Creating cap  a86(r104,l2: a55(r104,l3))
    Creating cap  a87(r177,l2: a56(r177,l3))
    Creating cap  a88(r100,l2: a57(r100,l3))
    Creating cap  a89(r178,l2: a58(r178,l3))
    Creating cap  a90(r175,l2: a59(r175,l3))
    Creating cap  a91(r174,l2: a60(r174,l3))
    Creating cap  a92(r171,l2: a61(r171,l3))
    Creating cap  a93(r172,l2: a62(r172,l3))
    Creating cap  a94(r169,l2: a63(r169,l3))
    Creating cap  a95(r156,l0: a74(r156,l1))
    Creating cap  a96(r88,l0: a75(r88,l1))
    Creating cap  a97(r154,l0: a76(r154,l1))
    Creating cap  a98(r182,l0: a84(r182,l2: a53(r182,l3)))
    Creating cap  a99(r101,l0: a85(r101,l2: a54(r101,l3)))
    Creating cap  a100(r104,l0: a86(r104,l2: a55(r104,l3)))
    Creating cap  a101(r177,l0: a87(r177,l2: a56(r177,l3)))
    Creating cap  a102(r100,l0: a88(r100,l2: a57(r100,l3)))
    Creating cap  a103(r178,l0: a89(r178,l2: a58(r178,l3)))
    Creating cap  a104(r175,l0: a90(r175,l2: a59(r175,l3)))
    Creating cap  a105(r174,l0: a91(r174,l2: a60(r174,l3)))
    Creating cap  a106(r171,l0: a92(r171,l2: a61(r171,l3)))
    Creating cap  a107(r172,l0: a93(r172,l2: a62(r172,l3)))
    Creating cap  a108(r169,l0: a94(r169,l2: a63(r169,l3)))
+++Allocating 1608 bytes for conflict table (uncompressed size 1744)
;; a0(r186,l0) conflicts: a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a1(r119,l0) conflicts: a0(r186,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a2(r93,l0) conflicts: a0(r186,l0) a1(r119,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a3(r165,l0) conflicts: a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r135,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a9(r84,l0) a10(r132,l0) a3(r165,l0) a6(r131,l0) a8(r133,l0) a14(r185,l0) a15(r115,l0) a16(r99,l0) a19(r134,l0) a17(r152,l0) a11(r187,l0) a12(r158,l0) a13(r157,l0) a22(r145,l0) a20(r143,l0) a21(r136,l0) a23(r144,l0) a24(r137,l0) a25(r140,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0) a95(r156,l0)
;;     total conflict hard regs: 0-2 4 5 38
;;     conflict hard regs: 0 1 4 5 38

;; a5(r114,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a3(r165,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a6(r131,l0) conflicts: a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a8(r133,l0) a14(r185,l0) a15(r115,l0) a16(r99,l0) a19(r134,l0) a17(r152,l0) a11(r187,l0) a12(r158,l0) a13(r157,l0) a22(r145,l0) a20(r143,l0) a21(r136,l0) a23(r144,l0) a24(r137,l0) a25(r140,l0) a95(r156,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a7(r121,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a3(r165,l0) a6(r131,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a8(r133,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a14(r185,l0) a15(r115,l0) a16(r99,l0) a19(r134,l0) a17(r152,l0) a11(r187,l0) a12(r158,l0) a13(r157,l0) a22(r145,l0) a20(r143,l0) a21(r136,l0) a23(r144,l0) a24(r137,l0) a25(r140,l0) a95(r156,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a9(r84,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a10(r132,l0) a3(r165,l0) a6(r131,l0) a8(r133,l0) a14(r185,l0) a15(r115,l0) a16(r99,l0) a19(r134,l0) a17(r152,l0) a11(r187,l0) a12(r158,l0) a13(r157,l0) a22(r145,l0) a20(r143,l0) a21(r136,l0) a23(r144,l0) a24(r137,l0) a25(r140,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0) a95(r156,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0 1 4 5

;; a10(r132,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a3(r165,l0) a6(r131,l0) a8(r133,l0) a14(r185,l0) a15(r115,l0) a16(r99,l0) a19(r134,l0) a17(r152,l0) a11(r187,l0) a12(r158,l0) a13(r157,l0) a22(r145,l0) a20(r143,l0) a21(r136,l0) a23(r144,l0) a24(r137,l0) a25(r140,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a83(r120,l0) a81(r118,l0) a82(r183,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0) a95(r156,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a11(r187,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a12(r158,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a12(r158,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a11(r187,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r157,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r185,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a15(r115,l0) a16(r99,l0) a19(r134,l0) a95(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r115,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a14(r185,l0) a16(r99,l0) a19(r134,l0) a95(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a16(r99,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a14(r185,l0) a15(r115,l0) a19(r134,l0) a95(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a17(r152,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a19(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a18(r125,l0) conflicts: a96(r88,l0) a97(r154,l0)
;;     total conflict hard regs: 21
;;     conflict hard regs:

;; a19(r134,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a14(r185,l0) a15(r115,l0) a16(r99,l0) a17(r152,l0) a22(r145,l0) a20(r143,l0) a21(r136,l0) a23(r144,l0) a24(r137,l0) a25(r140,l0) a95(r156,l0)
;;     total conflict hard regs: 0 1 4 5 37 38
;;     conflict hard regs: 0 1 4 5 37 38

;; a20(r143,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a19(r134,l0) a22(r145,l0) a21(r136,l0) a23(r144,l0) a24(r137,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a21(r136,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a19(r134,l0) a22(r145,l0) a20(r143,l0) a23(r144,l0) a24(r137,l0) a25(r140,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a22(r145,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a19(r134,l0) a20(r143,l0) a21(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r144,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a19(r134,l0) a20(r143,l0) a21(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a24(r137,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a19(r134,l0) a20(r143,l0) a21(r136,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a25(r140,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a19(r134,l0) a21(r136,l0) a24(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r84,l2) conflicts: a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a27(r93,l2) conflicts: a26(r84,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a28(r114,l2) conflicts: a26(r84,l2) a27(r93,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a29(r119,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a30(r121,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a31(r132,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a32(r135,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a33(r186,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a40(r120,l2) a38(r118,l2) a39(r183,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a34(r187,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a35(r185,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a36(r85,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a37(r94,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a85(r101,l2) a88(r100,l2) a84(r182,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a38(r118,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a39(r183,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a40(r120,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a41(r84,l3) conflicts: a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a42(r85,l3) conflicts: a41(r84,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a43(r93,l3) conflicts: a41(r84,l3) a42(r85,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a44(r94,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a45(r114,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a46(r119,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a47(r121,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a48(r132,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a49(r135,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a50(r185,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a51(r186,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a52(r187,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a54(r101,l3) a57(r100,l3) a53(r182,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a53(r182,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a54(r101,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a57(r100,l3) a55(r104,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a55(r104,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a56(r177,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a58(r178,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a57(r100,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a56(r177,l3) a58(r178,l3) a59(r175,l3) a60(r174,l3) a61(r171,l3) a62(r172,l3) a63(r169,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a58(r178,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a56(r177,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a59(r175,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a60(r174,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a61(r171,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a62(r172,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a62(r172,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3) a61(r171,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a63(r169,l3) conflicts: a41(r84,l3) a42(r85,l3) a43(r93,l3) a44(r94,l3) a45(r114,l3) a46(r119,l3) a47(r121,l3) a48(r132,l3) a49(r135,l3) a50(r185,l3) a51(r186,l3) a52(r187,l3) a54(r101,l3) a57(r100,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a64(r84,l1) conflicts: a74(r156,l1) a65(r99,l1) a66(r115,l1) a68(r131,l1) a69(r132,l1) a70(r133,l1) a71(r134,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a65(r99,l1) conflicts: a74(r156,l1) a64(r84,l1) a66(r115,l1) a68(r131,l1) a69(r132,l1) a70(r133,l1) a71(r134,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a66(r115,l1) conflicts: a74(r156,l1) a64(r84,l1) a65(r99,l1) a68(r131,l1) a69(r132,l1) a70(r133,l1) a71(r134,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a67(r125,l1) conflicts: a75(r88,l1) a76(r154,l1)
;;     total conflict hard regs: 21
;;     conflict hard regs: 21

;; a68(r131,l1) conflicts: a74(r156,l1) a64(r84,l1) a65(r99,l1) a66(r115,l1) a69(r132,l1) a70(r133,l1) a71(r134,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a69(r132,l1) conflicts: a74(r156,l1) a64(r84,l1) a65(r99,l1) a66(r115,l1) a68(r131,l1) a70(r133,l1) a71(r134,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a70(r133,l1) conflicts: a74(r156,l1) a64(r84,l1) a65(r99,l1) a66(r115,l1) a68(r131,l1) a69(r132,l1) a71(r134,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a71(r134,l1) conflicts: a74(r156,l1) a64(r84,l1) a65(r99,l1) a66(r115,l1) a68(r131,l1) a69(r132,l1) a70(r133,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a72(r135,l1) conflicts: a74(r156,l1) a64(r84,l1) a65(r99,l1) a66(r115,l1) a68(r131,l1) a69(r132,l1) a70(r133,l1) a71(r134,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a73(r185,l1) conflicts: a74(r156,l1) a64(r84,l1) a65(r99,l1) a66(r115,l1) a68(r131,l1) a69(r132,l1) a70(r133,l1) a71(r134,l1) a72(r135,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a74(r156,l1) conflicts: a64(r84,l1) a65(r99,l1) a66(r115,l1) a68(r131,l1) a69(r132,l1) a70(r133,l1) a71(r134,l1) a72(r135,l1) a73(r185,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a75(r88,l1) conflicts: a67(r125,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a76(r154,l1) conflicts: a67(r125,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a77(r187,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a78(r185,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a79(r85,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a80(r94,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a99(r101,l0) a102(r100,l0) a98(r182,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a81(r118,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a82(r183,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a83(r120,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a84(r182,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a85(r101,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a88(r100,l2) a86(r104,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a86(r104,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a87(r177,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2) a89(r178,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a88(r100,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a87(r177,l2) a89(r178,l2) a90(r175,l2) a91(r174,l2) a92(r171,l2) a93(r172,l2) a94(r169,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a89(r178,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2) a87(r177,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a90(r175,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a91(r174,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a92(r171,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2) a93(r172,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a93(r172,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2) a92(r171,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a94(r169,l2) conflicts: a26(r84,l2) a27(r93,l2) a28(r114,l2) a29(r119,l2) a30(r121,l2) a31(r132,l2) a32(r135,l2) a33(r186,l2) a34(r187,l2) a35(r185,l2) a36(r85,l2) a37(r94,l2) a85(r101,l2) a88(r100,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a95(r156,l0) conflicts: a4(r135,l0) a9(r84,l0) a10(r132,l0) a6(r131,l0) a8(r133,l0) a14(r185,l0) a15(r115,l0) a16(r99,l0) a19(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a96(r88,l0) conflicts: a18(r125,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a97(r154,l0) conflicts: a18(r125,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a98(r182,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a99(r101,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a102(r100,l0) a100(r104,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a100(r104,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a101(r177,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0) a103(r178,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a102(r100,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a101(r177,l0) a103(r178,l0) a104(r175,l0) a105(r174,l0) a106(r171,l0) a107(r172,l0) a108(r169,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a103(r178,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0) a101(r177,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a104(r175,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a105(r174,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a106(r171,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0) a107(r172,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a107(r172,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0) a106(r171,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a108(r169,l0) conflicts: a0(r186,l0) a1(r119,l0) a2(r93,l0) a5(r114,l0) a7(r121,l0) a4(r135,l0) a9(r84,l0) a10(r132,l0) a77(r187,l0) a78(r185,l0) a79(r85,l0) a80(r94,l0) a99(r101,l0) a102(r100,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a7(r121)<->a8(r133)@1:shuffle
  cp1:a5(r114)<->a6(r131)@4:move
  cp2:a12(r158)<->a13(r157)@1:shuffle
  cp3:a23(r144)<->a24(r137)@1:shuffle
  cp4:a22(r145)<->a23(r144)@1:shuffle
  cp5:a39(r183)<->a40(r120)@5:shuffle
  cp6:a53(r182)<->a54(r101)@119:shuffle
  cp7:a59(r175)<->a60(r174)@59:shuffle
  cp8:a58(r178)<->a59(r175)@476:constraint
  cp9:a56(r177)<->a59(r175)@59:shuffle
  cp10:a62(r172)<->a63(r169)@476:constraint
  cp11:a61(r171)<->a63(r169)@59:shuffle
  cp12:a55(r104)<->a57(r100)@476:constraint
  cp13:a74(r156)<->a75(r88)@11:shuffle
  cp14:a82(r183)<->a83(r120)@5:shuffle
  cp15:a84(r182)<->a85(r101)@119:shuffle
  cp16:a90(r175)<->a91(r174)@59:shuffle
  cp17:a89(r178)<->a90(r175)@476:constraint
  cp18:a87(r177)<->a90(r175)@59:shuffle
  cp19:a93(r172)<->a94(r169)@476:constraint
  cp20:a92(r171)<->a94(r169)@59:shuffle
  cp21:a86(r104)<->a88(r100)@476:constraint
  cp22:a95(r156)<->a96(r88)@11:shuffle
  cp23:a98(r182)<->a99(r101)@119:shuffle
  cp24:a104(r175)<->a105(r174)@59:shuffle
  cp25:a103(r178)<->a104(r175)@476:constraint
  cp26:a101(r177)<->a104(r175)@59:shuffle
  cp27:a107(r172)<->a108(r169)@476:constraint
  cp28:a106(r171)<->a108(r169)@59:shuffle
  cp29:a100(r104)<->a102(r100)@476:constraint
  regions=4, blocks=22, points=58
    allocnos=109 (big 0), copies=30, conflicts=4, ranges=83

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 21 11(->19:l2) 10 8(->9:l1) 7 6 5 4 3 2
    all: 0r186 1r119 2r93 3r165 4r135 5r114 6r131 7r121 8r133 9r84 10r132 11r187 12r158 13r157 14r185 15r115 16r99 17r152 18r125 19r134 20r143 21r136 22r145 23r144 24r137 25r140 77r187 78r185 79r85 80r94 81r118 82r183 83r120 95r156 96r88 97r154 98r182 99r101 100r104 101r177 102r100 103r178 104r175 105r174 106r171 107r172 108r169
    modified regnos: 84 85 88 93 94 99 100 101 104 114 115 118 119 120 121 125 131 132 133 134 135 136 137 140 143 144 145 152 154 156 157 158 165 169 171 172 174 175 177 178 182 183 185 186 187
    border:
    Pressure: GENERAL_REGS=16 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@7144
        2:( 0-6 37-44)@60040
          3:( 1-6 37-44)@14280
            4:( 2-6 37-44)@143332
              5:( 3 6 37-44)@15900
                6:( 3 6 39-44)@8946
                  7:( 3 6 41-44)@3758
      Spill a18(r125,l0)
      Allocno a0r186 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a1r119 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a2r93 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a3r165 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a4r135 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 38 45-51)
      Allocno a5r114 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a6r131 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a7r121 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a8r133 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a9r84 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a10r132 of GENERAL_REGS(15) has 8 avail. regs  3 6 39-44, node:  3 6 39-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a11r187 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a12r158 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a13r157 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a14r185 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a15r115 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a16r99 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a17r152 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a19r134 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-38 45-51)
      Allocno a20r143 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a21r136 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a22r145 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a23r144 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a24r137 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a25r140 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a77r187 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a78r185 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a79r85 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a80r94 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a81r118 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a82r183 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a83r120 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a95r156 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a96r88 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a97r154 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a98r182 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a99r101 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a100r104 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a101r177 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a102r100 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a103r178 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a104r175 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a105r174 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a106r171 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a107r172 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a108r169 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a25(r140,l0)(cost 0)
      Pushing a23(r144,l0)(cost 0)
      Pushing a22(r145,l0)(cost 0)
      Pushing a17(r152,l0)(cost 0)
      Pushing a13(r157,l0)(cost 0)
      Pushing a12(r158,l0)(cost 0)
      Pushing a3(r165,l0)(cost 0)
      Pushing a21(r136,l0)(cost 0)
      Pushing a20(r143,l0)(cost 0)
      Pushing a11(r187,l0)(cost 0)
      Pushing a24(r137,l0)(cost 0)
      Pushing a83(r120,l0: a40(r120,l2))(cost 0)
      Pushing a82(r183,l0: a39(r183,l2))(cost 0)
      Pushing a81(r118,l0: a38(r118,l2))(cost 0)
      Pushing a97(r154,l0: a76(r154,l1))(cost 0)
      Pushing a96(r88,l0: a75(r88,l1))(cost 0)
      Pushing a95(r156,l0: a74(r156,l1))(cost 0)
      Pushing a15(r115,l0)(cost 0)
      Pushing a107(r172,l0: a93(r172,l2: a62(r172,l3)))(cost 0)
        Making a106(r171,l0: a92(r171,l2: a61(r171,l3))) colorable
      Pushing a103(r178,l0: a89(r178,l2: a58(r178,l3)))(cost 0)
        Making a101(r177,l0: a87(r177,l2: a56(r177,l3))) colorable
      Pushing a105(r174,l0: a91(r174,l2: a60(r174,l3)))(cost 0)
      Pushing a106(r171,l0: a92(r171,l2: a61(r171,l3)))(cost 3332)
      Pushing a101(r177,l0: a87(r177,l2: a56(r177,l3)))(cost 3808)
      Pushing a108(r169,l0: a94(r169,l2: a63(r169,l3)))(cost 0)
      Pushing a104(r175,l0: a90(r175,l2: a59(r175,l3)))(cost 0)
      Pushing a98(r182,l0: a84(r182,l2: a53(r182,l3)))(cost 0)
      Pushing a100(r104,l0: a86(r104,l2: a55(r104,l3)))(cost 0)
      Pushing a6(r131,l0)(potential spill: pri=28, cost=28)
      Pushing a8(r133,l0)(potential spill: pri=28, cost=28)
        Making a14(r185,l0) colorable
        Making a16(r99,l0) colorable
        Making a19(r134,l0) colorable
      Pushing a19(r134,l0)(cost 392)
      Pushing a16(r99,l0)(cost 298)
      Pushing a14(r185,l0)(cost 392)
      Pushing a7(r121,l0)(potential spill: pri=52, cost=157)
        Making a77(r187,l0: a34(r187,l2)) colorable
        Making a78(r185,l0: a35(r185,l2)) colorable
        Making a79(r85,l0: a36(r85,l2)) colorable
        Making a80(r94,l0: a37(r94,l2)) colorable
        Making a99(r101,l0: a85(r101,l2: a54(r101,l3))) colorable
        Making a102(r100,l0: a88(r100,l2: a57(r100,l3))) colorable
      Pushing a78(r185,l0: a35(r185,l2))(cost 3988)
      Pushing a77(r187,l0: a34(r187,l2))(cost 7796)
      Pushing a80(r94,l0: a37(r94,l2))(cost 8748)
        Making a0(r186,l0) colorable
        Making a1(r119,l0) colorable
        Making a2(r93,l0) colorable
        Making a5(r114,l0) colorable
      Pushing a5(r114,l0)(cost 486)
      Pushing a1(r119,l0)(cost 627)
        Making a10(r132,l0) colorable
      Pushing a2(r93,l0)(cost 2872)
      Pushing a0(r186,l0)(cost 3965)
        Making a4(r135,l0) colorable
        Making a9(r84,l0) colorable
      Pushing a9(r84,l0)(cost 157)
      Pushing a4(r135,l0)(cost 427)
      Pushing a10(r132,l0)(cost 4473)
      Pushing a102(r100,l0: a88(r100,l2: a57(r100,l3)))(cost 12852)
      Pushing a99(r101,l0: a85(r101,l2: a54(r101,l3)))(cost 12376)
      Pushing a79(r85,l0: a36(r85,l2))(cost 23980)
      Popping a79(r85,l0: a36(r85,l2))  -- assign reg 2
      Popping a99(r101,l0: a85(r101,l2: a54(r101,l3)))  -- assign reg 38
      Popping a102(r100,l0: a88(r100,l2: a57(r100,l3)))  -- assign reg 39
      Popping a10(r132,l0)  -- assign reg 3
      Popping a4(r135,l0)  -- assign reg 6
      Popping a9(r84,l0)  -- assign reg 41
      Popping a0(r186,l0)  -- assign reg 42
      Popping a2(r93,l0)  -- assign reg 43
      Popping a1(r119,l0)  -- assign reg 44
      Popping a5(r114,l0)  -- assign reg 37
      Popping a80(r94,l0: a37(r94,l2))  -- assign reg 4
      Popping a77(r187,l0: a34(r187,l2))  -- assign reg 5
      Popping a78(r185,l0: a35(r185,l2))  -- assign reg 40
      Popping a7(r121,l0)  -- spill
      Popping a14(r185,l0)  -- assign reg 42
      Popping a16(r99,l0)  -- assign reg 43
      Popping a19(r134,l0)  -- assign reg 44
      Popping a8(r133,l0)  -- spill
      Popping a6(r131,l0)  -- spill
      Popping a100(r104,l0: a86(r104,l2: a55(r104,l3)))  -- assign reg 39
      Popping a98(r182,l0: a84(r182,l2: a53(r182,l3)))  -- assign reg 38
      Popping a104(r175,l0: a90(r175,l2: a59(r175,l3)))  -- assign reg 0
      Popping a108(r169,l0: a94(r169,l2: a63(r169,l3)))  -- assign reg 0
      Popping a101(r177,l0: a87(r177,l2: a56(r177,l3)))  -- assign reg 1
      Popping a106(r171,l0: a92(r171,l2: a61(r171,l3)))  -- assign reg 1
      Popping a105(r174,l0: a91(r174,l2: a60(r174,l3)))  -- assign reg 0
      Popping a103(r178,l0: a89(r178,l2: a58(r178,l3)))  -- assign reg 0
      Popping a107(r172,l0: a93(r172,l2: a62(r172,l3)))  -- assign reg 0
      Popping a15(r115,l0)  -- assign reg 0
      Popping a95(r156,l0: a74(r156,l1))  -- assign reg 1
      Popping a96(r88,l0: a75(r88,l1))  -- assign reg 21
      Popping a97(r154,l0: a76(r154,l1))  -- assign reg 21
      Popping a81(r118,l0: a38(r118,l2))  -- assign reg 0
      Popping a82(r183,l0: a39(r183,l2))  -- assign reg 0
      Popping a83(r120,l0: a40(r120,l2))  -- assign reg 0
      Popping a24(r137,l0)  -- assign reg 0
      Popping a11(r187,l0)  -- assign reg 5
      Popping a20(r143,l0)  -- assign reg 5
      Popping a21(r136,l0)  -- assign reg 38
      Popping a3(r165,l0)  -- assign reg 0
      Popping a12(r158,l0)  -- assign reg 1
      Popping a13(r157,l0)  -- assign reg 1
      Popping a17(r152,l0)  -- assign reg 0
      Popping a22(r145,l0)  -- assign reg 1
      Popping a23(r144,l0)  -- assign reg 0
      Popping a25(r140,l0)  -- assign reg 1
Spilling a9r84 for a5r114
Assigning 41 to a5r114
Assigning 41 to a6r131
Spilling a6r131 for a15r115
Assigning 41 to a15r115
       a6(r131,l0)  -- assign memory
       a9(r84,l0)  -- assign memory

  Loop 2 (parent 0, header bb19, depth 1)
    bbs: 20(->12:l3) 19 18(->21:l0) 17 16
    all: 26r84 27r93 28r114 29r119 30r121 31r132 32r135 33r186 34r187 35r185 36r85 37r94 38r118 39r183 40r120 84r182 85r101 86r104 87r177 88r100 89r178 90r175 91r174 92r171 93r172 94r169
    modified regnos: 85 94 100 101 104 114 118 119 120 169 171 172 174 175 177 178 182 183 185 187
    border: 26r84 27r93 28r114 29r119 30r121 31r132 32r135 33r186
    Pressure: GENERAL_REGS=16
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@54804
          2:( 1-6 37-44)@14280
            3:( 2-6 37-44)@143288
              4:( 3 6 37-44)@24622
                5:( 3 6 41-44)@1210
      Allocno a26r84 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a27r93 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a28r114 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a29r119 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a30r121 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a31r132 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a32r135 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a33r186 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a34r187 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a35r185 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a36r85 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a37r94 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a38r118 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a39r183 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a40r120 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a84r182 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a85r101 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a86r104 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a87r177 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a88r100 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a89r178 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a90r175 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a91r174 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a92r171 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a93r172 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a94r169 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a40(r120,l2)(cost 0)
      Pushing a39(r183,l2)(cost 0)
      Pushing a38(r118,l2)(cost 0)
      Pushing a93(r172,l2: a62(r172,l3))(cost 0)
        Making a92(r171,l2: a61(r171,l3)) colorable
      Pushing a89(r178,l2: a58(r178,l3))(cost 0)
        Making a87(r177,l2: a56(r177,l3)) colorable
      Pushing a91(r174,l2: a60(r174,l3))(cost 0)
      Pushing a92(r171,l2: a61(r171,l3))(cost 3332)
      Pushing a87(r177,l2: a56(r177,l3))(cost 3808)
      Pushing a94(r169,l2: a63(r169,l3))(cost 0)
      Pushing a90(r175,l2: a59(r175,l3))(cost 0)
      Pushing a84(r182,l2: a53(r182,l3))(cost 0)
      Pushing a86(r104,l2: a55(r104,l3))(cost 0)
      Pushing a26(r84,l2)(potential spill: pri=33, cost=101)
        Making a34(r187,l2) colorable
        Making a35(r185,l2) colorable
        Making a36(r85,l2) colorable
        Making a37(r94,l2) colorable
        Making a85(r101,l2: a54(r101,l3)) colorable
        Making a88(r100,l2: a57(r100,l3)) colorable
      Pushing a35(r185,l2)(cost 3988)
      Pushing a34(r187,l2)(cost 7796)
      Pushing a37(r94,l2)(cost 8748)
        Making a27(r93,l2) colorable
        Making a28(r114,l2) colorable
        Making a29(r119,l2) colorable
        Making a31(r132,l2) colorable
        Making a33(r186,l2) colorable
      Pushing a28(r114,l2)(cost 510)
      Pushing a29(r119,l2)(cost 651)
      Pushing a27(r93,l2)(cost 2896)
      Pushing a33(r186,l2)(cost 3989)
        Making a30(r121,l2) colorable
        Making a32(r135,l2) colorable
      Pushing a30(r121,l2)(cost 101)
      Pushing a32(r135,l2)(cost 363)
      Pushing a31(r132,l2)(cost 4465)
      Pushing a88(r100,l2: a57(r100,l3))(cost 12852)
      Pushing a85(r101,l2: a54(r101,l3))(cost 12376)
      Pushing a36(r85,l2)(cost 23980)
      Popping a36(r85,l2)  -- assign reg 2
      Popping a85(r101,l2: a54(r101,l3))  -- assign reg 4
      Popping a88(r100,l2: a57(r100,l3))  -- assign reg 37
      Popping a31(r132,l2)  -- assign reg 3
      Popping a32(r135,l2)  -- assign reg 6
      Popping a30(r121,l2)  -- assign reg 41
      Popping a33(r186,l2)  -- assign reg 42
      Popping a27(r93,l2)  -- assign reg 43
      Popping a29(r119,l2)  -- assign reg 44
      Popping a28(r114,l2)  -- assign reg 38
      Popping a37(r94,l2)  -- assign reg 5
      Popping a34(r187,l2)  -- assign reg 39
      Popping a35(r185,l2)  -- assign reg 40
      Popping a26(r84,l2)  -- spill
      Popping a86(r104,l2: a55(r104,l3))  -- assign reg 37
      Popping a84(r182,l2: a53(r182,l3))  -- assign reg 4
      Popping a90(r175,l2: a59(r175,l3))  -- assign reg 0
      Popping a94(r169,l2: a63(r169,l3))  -- assign reg 0
      Popping a87(r177,l2: a56(r177,l3))  -- assign reg 1
      Popping a92(r171,l2: a61(r171,l3))  -- assign reg 1
      Popping a91(r174,l2: a60(r174,l3))  -- assign reg 0
      Popping a89(r178,l2: a58(r178,l3))  -- assign reg 0
      Popping a93(r172,l2: a62(r172,l3))  -- assign reg 0
      Popping a38(r118,l2)  -- assign reg 0
      Popping a39(r183,l2)  -- assign reg 0
      Popping a40(r120,l2)  -- assign reg 0
Spilling a30r121 for a28r114
Assigning 41 to a28r114
       a30(r121,l2)  -- assign memory

  Loop 3 (parent 2, header bb12, depth 2)
    bbs: 15(->16:l2) 14 13 12
    all: 41r84 42r85 43r93 44r94 45r114 46r119 47r121 48r132 49r135 50r185 51r186 52r187 53r182 54r101 55r104 56r177 57r100 58r178 59r175 60r174 61r171 62r172 63r169
    modified regnos: 85 94 100 101 104 169 171 172 174 175 177 178 182
    border: 41r84 42r85 43r93 44r94 45r114 46r119 47r121 48r132 49r135 50r185 51r186 52r187
    Pressure: GENERAL_REGS=16
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@52360
          2:( 1-6 37-44)@14280
            3:( 2-6 37-44)@163744
      Spill a41(r84,l3)
      Spill a47(r121,l3)
      Allocno a42r85 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a43r93 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a44r94 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a45r114 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a46r119 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a48r132 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a49r135 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a50r185 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a51r186 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a52r187 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a53r182 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a54r101 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a55r104 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a56r177 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a57r100 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a58r178 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a59r175 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a60r174 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a61r171 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a62r172 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a63r169 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a62(r172,l3)(cost 0)
      Pushing a58(r178,l3)(cost 0)
      Pushing a60(r174,l3)(cost 0)
      Pushing a61(r171,l3)(cost 0)
      Pushing a56(r177,l3)(cost 0)
      Pushing a63(r169,l3)(cost 0)
        Making a57(r100,l3) colorable
      Pushing a59(r175,l3)(cost 0)
        Making a54(r101,l3) colorable
      Pushing a53(r182,l3)(cost 0)
        Making a42(r85,l3) colorable
        Making a43(r93,l3) colorable
        Making a44(r94,l3) colorable
        Making a45(r114,l3) colorable
        Making a46(r119,l3) colorable
        Making a48(r132,l3) colorable
        Making a49(r135,l3) colorable
        Making a50(r185,l3) colorable
        Making a51(r186,l3) colorable
        Making a52(r187,l3) colorable
      Pushing a49(r135,l3)(cost 720)
      Pushing a46(r119,l3)(cost 720)
      Pushing a45(r114,l3)(cost 720)
      Pushing a51(r186,l3)(cost 4528)
      Pushing a50(r185,l3)(cost 4176)
      Pushing a43(r93,l3)(cost 3576)
      Pushing a52(r187,l3)(cost 7984)
      Pushing a48(r132,l3)(cost 5004)
      Pushing a55(r104,l3)(cost 0)
      Pushing a44(r94,l3)(cost 8936)
      Pushing a57(r100,l3)(cost 12852)
      Pushing a54(r101,l3)(cost 12376)
      Pushing a42(r85,l3)(cost 24168)
      Popping a42(r85,l3)  -- assign reg 2
      Popping a54(r101,l3)  -- assign reg 4
      Popping a57(r100,l3)  -- assign reg 37
      Popping a44(r94,l3)  -- assign reg 5
      Popping a55(r104,l3)  -- assign reg 37
      Popping a48(r132,l3)  -- assign reg 3
      Popping a52(r187,l3)  -- assign reg 39
      Popping a43(r93,l3)  -- assign reg 43
      Popping a50(r185,l3)  -- assign reg 40
      Popping a51(r186,l3)  -- assign reg 42
      Popping a45(r114,l3)  -- assign reg 41
      Popping a46(r119,l3)  -- assign reg 44
      Popping a49(r135,l3)  -- assign reg 6
      Popping a53(r182,l3)  -- assign reg 4
      Popping a59(r175,l3)  -- assign reg 0
      Popping a63(r169,l3)  -- assign reg 0
      Popping a56(r177,l3)  -- assign reg 1
      Popping a61(r171,l3)  -- assign reg 1
      Popping a60(r174,l3)  -- assign reg 0
      Popping a58(r178,l3)  -- assign reg 0
      Popping a62(r172,l3)  -- assign reg 0

  Loop 1 (parent 0, header bb9, depth 1)
    bbs: 9(->10:l0)
    all: 64r84 65r99 66r115 67r125 68r131 69r132 70r133 71r134 72r135 73r185 74r156 75r88 76r154
    modified regnos: 88 115 154 156
    border: 64r84 65r99 66r115 67r125 68r131 69r132 70r133 71r134 72r135 73r185
    Pressure: GENERAL_REGS=10 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@4700
          2:( 3 6 41-44)@2068
      Spill a64(r84,l1)
      Spill a68(r131,l1)
      Spill a70(r133,l1)
      Allocno a65r99 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a66r115 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a69r132 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a71r134 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a72r135 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a73r185 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a74r156 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a74(r156,l1)(cost 0)
        Making a65(r99,l1) colorable
        Making a69(r132,l1) colorable
        Making a71(r134,l1) colorable
        Making a72(r135,l1) colorable
        Making a73(r185,l1) colorable
      Pushing a72(r135,l1)(cost 64)
      Pushing a69(r132,l1)(cost 64)
      Pushing a73(r185,l1)(cost 416)
      Pushing a71(r134,l1)(cost 416)
      Pushing a65(r99,l1)(cost 322)
      Pushing a66(r115,l1)(cost 0)
      Popping a66(r115,l1)  -- assign reg 41
      Popping a65(r99,l1)  -- assign reg 43
      Popping a71(r134,l1)  -- assign reg 44
      Popping a73(r185,l1)  -- assign reg 42
      Popping a69(r132,l1)  -- assign reg 3
      Popping a72(r135,l1)  -- assign reg 6
      Popping a74(r156,l1)  -- assign reg 0
Disposition:
   64:r84  l1   mem   41:r84  l3   mem   26:r84  l2   mem    9:r84  l0   mem
   42:r85  l3     2   36:r85  l2     2   75:r88  l1    21   43:r93  l3    43
   27:r93  l2    43    2:r93  l0    43   44:r94  l3     5   37:r94  l2     5
   65:r99  l1    43   16:r99  l0    43   57:r100 l3    37   54:r101 l3     4
   55:r104 l3    37   45:r114 l3    41   28:r114 l2    41    5:r114 l0    41
   66:r115 l1    41   15:r115 l0    41   38:r118 l2     0   46:r119 l3    44
   29:r119 l2    44    1:r119 l0    44   40:r120 l2     0   47:r121 l3   mem
   30:r121 l2   mem    7:r121 l0   mem   67:r125 l1   mem   18:r125 l0   mem
   68:r131 l1   mem    6:r131 l0   mem   69:r132 l1     3   48:r132 l3     3
   31:r132 l2     3   10:r132 l0     3   70:r133 l1   mem    8:r133 l0   mem
   71:r134 l1    44   19:r134 l0    44   72:r135 l1     6   49:r135 l3     6
   32:r135 l2     6    4:r135 l0     6   21:r136 l0    38   24:r137 l0     0
   25:r140 l0     1   20:r143 l0     5   23:r144 l0     0   22:r145 l0     1
   17:r152 l0     0   76:r154 l1    21   74:r156 l1     0   13:r157 l0     1
   12:r158 l0     1    3:r165 l0     0   63:r169 l3     0   61:r171 l3     1
   62:r172 l3     0   60:r174 l3     0   59:r175 l3     0   56:r177 l3     1
   58:r178 l3     0   53:r182 l3     4   39:r183 l2     0   73:r185 l1    42
   50:r185 l3    40   35:r185 l2    40   14:r185 l0    42   51:r186 l3    42
   33:r186 l2    42    0:r186 l0    42   52:r187 l3    39   34:r187 l2    39
   11:r187 l0     5
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb19)
  43 vs parent 43:      Creating newreg=188 from oldreg=93
  41 vs parent 41:      Creating newreg=189 from oldreg=114
  44 vs parent 44:      Creating newreg=190 from oldreg=119
  3 vs parent 3:      Creating newreg=191 from oldreg=132
  6 vs parent 6:      Creating newreg=192 from oldreg=135
  42 vs parent 42:      Creating newreg=193 from oldreg=186
      Creating newreg=194 from oldreg=187
      Creating newreg=195 from oldreg=185
rescanning insn with uid = 218.
deleting insn with uid = 218.
rescanning insn with uid = 219.
deleting insn with uid = 219.
rescanning insn with uid = 192.
deleting insn with uid = 192.
rescanning insn with uid = 195.
deleting insn with uid = 195.
rescanning insn with uid = 174.
deleting insn with uid = 174.
rescanning insn with uid = 179.
deleting insn with uid = 179.
rescanning insn with uid = 181.
deleting insn with uid = 181.
rescanning insn with uid = 182.
deleting insn with uid = 182.
rescanning insn with uid = 183.
deleting insn with uid = 183.
rescanning insn with uid = 185.
deleting insn with uid = 185.
rescanning insn with uid = 186.
deleting insn with uid = 186.
rescanning insn with uid = 187.
deleting insn with uid = 187.
rescanning insn with uid = 37.
deleting insn with uid = 37.
      Changing RTL for loop 3 (header bb12)
  2 vs parent 2:      Creating newreg=196 from oldreg=85
  43 vs parent 43:      Creating newreg=197 from oldreg=188
  5 vs parent 5:      Creating newreg=198 from oldreg=94
  41 vs parent 41:      Creating newreg=199 from oldreg=189
  44 vs parent 44:      Creating newreg=200 from oldreg=190
  3 vs parent 3:      Creating newreg=201 from oldreg=191
  6 vs parent 6:      Creating newreg=202 from oldreg=192
  40 vs parent 40:      Creating newreg=203 from oldreg=195
  42 vs parent 42:      Creating newreg=204 from oldreg=193
  39 vs parent 39:      Creating newreg=205 from oldreg=194
rescanning insn with uid = 161.
deleting insn with uid = 161.
rescanning insn with uid = 163.
deleting insn with uid = 163.
rescanning insn with uid = 164.
deleting insn with uid = 164.
rescanning insn with uid = 167.
deleting insn with uid = 167.
rescanning insn with uid = 168.
deleting insn with uid = 168.
rescanning insn with uid = 170.
deleting insn with uid = 170.
rescanning insn with uid = 155.
deleting insn with uid = 155.
rescanning insn with uid = 157.
deleting insn with uid = 157.
rescanning insn with uid = 146.
deleting insn with uid = 146.
rescanning insn with uid = 139.
deleting insn with uid = 139.
rescanning insn with uid = 141.
deleting insn with uid = 141.
      Changing RTL for loop 1 (header bb9)
  43 vs parent 43:      Creating newreg=206 from oldreg=99
  41 vs parent 41:      Creating newreg=207 from oldreg=115
  3 vs parent 3:      Creating newreg=208 from oldreg=132
  44 vs parent 44:      Creating newreg=209 from oldreg=134
  6 vs parent 6:      Creating newreg=210 from oldreg=135
  42 vs parent 42:      Creating newreg=211 from oldreg=185
rescanning insn with uid = 94.
deleting insn with uid = 94.
rescanning insn with uid = 99.
deleting insn with uid = 99.
rescanning insn with uid = 100.
deleting insn with uid = 100.
rescanning insn with uid = 103.
deleting insn with uid = 103.
rescanning insn with uid = 104.
deleting insn with uid = 104.
scanning new insn with uid = 240.
scanning new insn with uid = 241.
scanning new insn with uid = 242.
scanning new insn with uid = 243.
scanning new insn with uid = 244.
scanning new insn with uid = 245.
scanning new insn with uid = 246.
scanning new insn with uid = 247.
scanning new insn with uid = 254.
scanning new insn with uid = 255.
scanning new insn with uid = 256.
scanning new insn with uid = 257.
scanning new insn with uid = 258.
scanning new insn with uid = 259.
    Adding cp30:a16r99-a65r206
    Adding range [59..59] to allocno a16r99
    Adding cp31:a15r115-a66r207
    Adding range [59..61] to allocno a15r115
    Adding cp32:a10r132-a69r208
    Adding range [59..63] to allocno a10r132
    Adding cp33:a19r134-a71r209
    Adding range [59..65] to allocno a19r134
    Adding cp34:a4r135-a72r210
    Adding range [59..67] to allocno a4r135
    Adding cp35:a14r185-a73r211
    Adding range [59..69] to allocno a14r185
    Adding range [60..70] to allocno a65r206
    Adding range [62..70] to allocno a66r207
    Adding range [64..70] to allocno a69r208
    Adding range [66..70] to allocno a71r209
    Adding range [68..70] to allocno a72r210
    Adding range [70..70] to allocno a73r211
    Adding range [59..70] to live through  allocno a9r84
    Adding range [59..70] to live through  allocno a18r125
    Adding range [59..70] to live through  allocno a6r131
    Adding range [59..70] to live through  allocno a8r133
    Adding cp36:a10r132-a69r208
    Adding range [72..72] to allocno a69r208
    Adding cp37:a4r135-a72r210
    Adding range [72..74] to allocno a72r210
    Adding range [73..75] to allocno a10r132
    Adding range [75..75] to allocno a4r135
    Adding range [72..75] to live through  allocno a9r84
    Adding range [72..75] to live through  allocno a6r131
    Adding range [72..75] to live through  allocno a8r133
    Adding cp38:a2r93-a27r188
    Adding range [77..77] to allocno a2r93
    Adding cp39:a5r114-a28r189
    Adding range [77..79] to allocno a5r114
    Adding cp40:a1r119-a29r190
    Adding range [77..81] to allocno a1r119
    Adding cp41:a10r132-a31r191
    Adding range [77..83] to allocno a10r132
    Adding cp42:a4r135-a32r192
    Adding range [77..85] to allocno a4r135
    Adding cp43:a0r186-a33r193
    Adding range [77..87] to allocno a0r186
    Adding range [78..88] to allocno a27r188
    Adding range [80..88] to allocno a28r189
    Adding range [82..88] to allocno a29r190
    Adding range [84..88] to allocno a31r191
    Adding range [86..88] to allocno a32r192
    Adding range [88..88] to allocno a33r193
    Adding range [77..88] to live through  allocno a9r84
    Adding range [77..88] to live through  allocno a7r121
    Adding cp44:a27r188-a43r197
    Adding range [90..90] to allocno a43r197
    Adding cp45:a28r189-a45r199
    Adding range [90..92] to allocno a45r199
    Adding cp46:a29r190-a46r200
    Adding range [90..94] to allocno a46r200
    Adding cp47:a31r191-a48r201
    Adding range [90..96] to allocno a48r201
    Adding cp48:a32r192-a49r202
    Adding range [90..98] to allocno a49r202
    Adding cp49:a33r193-a51r204
    Adding range [90..100] to allocno a51r204
    Adding range [91..101] to allocno a27r188
    Adding range [93..101] to allocno a28r189
    Adding range [95..101] to allocno a29r190
    Adding range [97..101] to allocno a31r191
    Adding range [99..101] to allocno a32r192
    Adding range [101..101] to allocno a33r193
    Adding range [90..101] to live through  allocno a26r84
    Adding range [90..101] to live through  allocno a30r121
    Adding cp50:a36r85-a42r196
    Adding range [103..103] to allocno a36r85
    Adding cp51:a27r188-a43r197
    Adding range [103..105] to allocno a27r188
    Adding cp52:a37r94-a44r198
    Adding range [103..107] to allocno a37r94
    Adding cp53:a28r189-a45r199
    Adding range [103..109] to allocno a28r189
    Adding cp54:a29r190-a46r200
    Adding range [103..111] to allocno a29r190
    Adding cp55:a31r191-a48r201
    Adding range [103..113] to allocno a31r191
    Adding cp56:a32r192-a49r202
    Adding range [103..115] to allocno a32r192
    Adding cp57:a35r195-a50r203
    Adding range [103..117] to allocno a35r195
    Adding cp58:a33r193-a51r204
    Adding range [103..119] to allocno a33r193
    Adding cp59:a34r194-a52r205
    Adding range [103..121] to allocno a34r194
    Adding range [104..122] to allocno a42r196
    Adding range [106..122] to allocno a43r197
    Adding range [108..122] to allocno a44r198
    Adding range [110..122] to allocno a45r199
    Adding range [112..122] to allocno a46r200
    Adding range [114..122] to allocno a48r201
    Adding range [116..122] to allocno a49r202
    Adding range [118..122] to allocno a50r203
    Adding range [120..122] to allocno a51r204
    Adding range [122..122] to allocno a52r205
    Adding range [103..122] to live through  allocno a26r84
    Adding range [103..122] to live through  allocno a30r121
scanning new insn with uid = 248.
scanning new insn with uid = 249.
scanning new insn with uid = 250.
scanning new insn with uid = 251.
scanning new insn with uid = 252.
scanning new insn with uid = 253.
scanning new insn with uid = 260.
scanning new insn with uid = 261.
scanning new insn with uid = 262.
scanning new insn with uid = 263.
scanning new insn with uid = 264.
scanning new insn with uid = 265.
scanning new insn with uid = 266.
scanning new insn with uid = 267.
scanning new insn with uid = 268.
scanning new insn with uid = 269.
    New r188: setting preferred GENERAL_REGS, alternative NO_REGS
    New r189: setting preferred GENERAL_REGS, alternative NO_REGS
    New r190: setting preferred GENERAL_REGS, alternative NO_REGS
    New r191: setting preferred SIREG, alternative GENERAL_REGS
    New r192: setting preferred GENERAL_REGS, alternative NO_REGS
    New r193: setting preferred GENERAL_REGS, alternative NO_REGS
    New r194: setting preferred DIREG, alternative GENERAL_REGS
    New r195: setting preferred GENERAL_REGS, alternative NO_REGS
    New r196: setting preferred GENERAL_REGS, alternative NO_REGS
    New r197: setting preferred GENERAL_REGS, alternative NO_REGS
    New r198: setting preferred GENERAL_REGS, alternative NO_REGS
    New r199: setting preferred GENERAL_REGS, alternative NO_REGS
    New r200: setting preferred GENERAL_REGS, alternative NO_REGS
    New r201: setting preferred SIREG, alternative GENERAL_REGS
    New r202: setting preferred GENERAL_REGS, alternative NO_REGS
    New r203: setting preferred GENERAL_REGS, alternative NO_REGS
    New r204: setting preferred GENERAL_REGS, alternative NO_REGS
    New r205: setting preferred DIREG, alternative GENERAL_REGS
    New r206: setting preferred GENERAL_REGS, alternative NO_REGS
    New r207: setting preferred GENERAL_REGS, alternative NO_REGS
    New r208: setting preferred SIREG, alternative GENERAL_REGS
    New r209: setting preferred CREG, alternative GENERAL_REGS
    New r210: setting preferred GENERAL_REGS, alternative NO_REGS
    New r211: setting preferred GENERAL_REGS, alternative NO_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 28 (  1.3)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 17 16 15 14 13 12 20
;;
;; Loop 3
;;  header 12, latch 15
;;  depth 2, outer 2
;;  nodes: 12 15 14 13
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 11 7 }
;; 7 succs { 21 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 6 }
;; 11 succs { 19 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 12 16 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 21 }
;; 19 succs { 20 17 }
;; 20 succs { 12 }
;; 21 succs { 1 }
+++Costs: overall 18602, reg 16038, mem 2564, ld 0, st 0, move 1552
+++       move loops 0, new jumps 2


void tiles(int*, int, int, float*, int, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={5d,1u} r1={8d,4u} r2={6d,2u} r4={8d,4u} r5={8d,4u} r6={1d,21u} r7={1d,25u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,21u,1e} r17={28d,8u} r18={4d} r19={4d} r20={1d,28u,7e} r21={6d,2u} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,1u} r38={5d,1u} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r84={1d,2u} r85={1d,1u} r88={1d,1u} r93={1d,1u} r94={1d,1u} r99={1d,1u} r100={1d,5u} r101={1d,4u} r104={3d,2u} r114={1d,1u} r115={1d,1u} r118={1d,1u} r119={1d,1u} r120={2d,1u} r121={1d,1u} r125={1d,1u} r131={1d,1u} r132={2d,4u} r133={1d,1u} r134={1d,1u} r135={2d,8u} r136={1d,1u} r137={1d,3u} r140={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r152={1d,1u} r154={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r165={1d,1u} r169={1d,2u} r171={1d,1u} r172={1d} r174={1d,1u} r175={1d,2u} r177={1d,1u} r178={1d} r182={1d,1u} r183={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={2d,1u} r189={3d,3u,1e} r190={3d,6u} r191={2d,2u} r192={2d,3u} r193={2d,2u} r194={1d,1u} r195={1d,1u} r196={2d,6u,1e} r197={1d,2u} r198={2d,2u} r199={1d,1u} r200={1d,1u} r201={1d,6u} r202={1d,1u} r203={1d,1u} r204={1d,2u} r205={1d,2u,1e} r206={1d,1u} r207={2d,4u,1e} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u,1e} 
;;    total ref usage 568{315d,240u,13e} in 138{134 regular + 4 call} insns.
(note 25 0 40 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 84 131 132 133 134 135 136 137
(note 40 25 26 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 26 40 27 2 (set (reg/v/f:DI 131 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 27 26 28 2 (set (reg/v:SI 132 [ num_tilings ])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:37 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn 28 27 29 2 (set (reg/v:SI 133 [ memory_size ])
        (reg:SI 1 dx [ memory_size ])) tiles.cpp:37 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory_size ])
        (nil)))
(insn 29 28 30 2 (set (reg/v/f:DI 134 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn 30 29 31 2 (set (reg/v:SI 135 [ num_floats ])
        (reg:SI 37 r8 [ num_floats ])) tiles.cpp:37 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ num_floats ])
        (nil)))
(insn 31 30 32 2 (set (reg/v/f:DI 136 [ ints ])
        (reg:DI 38 r9 [ ints ])) tiles.cpp:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ ints ])
        (nil)))
(insn 32 31 33 2 (set (reg/v:SI 137 [ num_ints ])
        (mem/c:SI (reg/f:DI 16 argp) [0 num_ints+0 S4 A64])) tiles.cpp:37 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 num_ints+0 S4 A64])
        (nil)))
(note 33 32 42 2 NOTE_INSN_FUNCTION_BEG)
(note 42 33 43 2 NOTE_INSN_DELETED)
(insn 43 42 44 2 (set (reg/v:SI 84 [ num_coordinates ])
        (plus:SI (plus:SI (reg/v:SI 135 [ num_floats ])
                (reg/v:SI 137 [ num_ints ]))
            (const_int 1 [0x1]))) tiles.cpp:42 266 {*leasi}
     (nil))
(debug_insn 44 43 46 2 (var_location:SI num_coordinates (reg/v:SI 84 [ num_coordinates ])) tiles.cpp:42 -1
     (nil))
(debug_insn 46 44 47 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 47 46 48 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 137 [ num_ints ])
            (const_int 0 [0]))) tiles.cpp:44 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 48 47 74 2 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) tiles.cpp:44 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9762 [0x2622])
            (nil)))
 -> 56)
;;  succ:       5 [97.6%] 
;;              3 [2.4%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 134 135 136 137

;; basic block 3, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [2.4%]  (FALLTHRU)
;;              5 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u18(6){ }u19(7){ }u20(16){ }u21(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 134 135
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135
;; lr  def 	 17 [flags]
(code_label 74 48 49 3 21 "" [1 uses])
(note 49 74 50 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 50 49 51 3 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 51 50 52 3 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 135 [ num_floats ])
            (const_int 0 [0]))) tiles.cpp:47 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 52 51 222 3 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) tiles.cpp:47 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 85)
;;  succ:       8 [95.2%] 
;;              4 [4.8%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 134 135

;; basic block 4, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 3, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       3 [4.8%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 135
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 222 52 223 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 223 222 224 4 (set (pc)
        (label_ref 77)) 650 {jump}
     (nil)
 -> 77)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 135

(barrier 224 223 56)
;; basic block 5, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2 [97.6%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(6){ }u25(7){ }u26(16){ }u27(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 134 135 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135 136 137
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 140 143 144 145
(code_label 56 224 57 5 18 "" [1 uses])
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 58 57 59 5 NOTE_INSN_DELETED)
(insn 59 58 60 5 (set (reg:DI 140 [ D.26004 ])
        (sign_extend:DI (reg/v:SI 135 [ num_floats ]))) tiles.cpp:44 149 {*extendsidi2_rex64}
     (nil))
(note 60 59 61 5 NOTE_INSN_DELETED)
(note 61 60 62 5 NOTE_INSN_DELETED)
(insn 62 61 63 5 (set (reg:DI 143 [ D.26007 ])
        (plus:DI (plus:DI (mult:DI (reg:DI 140 [ D.26004 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 20 frame))
            (const_int -172 [0xffffffffffffff54]))) tiles.cpp:44 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 140 [ D.26004 ])
        (nil)))
(insn 63 62 64 5 (set (reg:DI 144 [ D.26004 ])
        (sign_extend:DI (reg/v:SI 137 [ num_ints ]))) tiles.cpp:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 137 [ num_ints ])
        (nil)))
(insn 64 63 68 5 (parallel [
            (set (reg:DI 145 [ D.26004 ])
                (ashift:DI (reg:DI 144 [ D.26004 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 144 [ D.26004 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 68 64 69 5 (set (reg:DI 1 dx)
        (reg:DI 145 [ D.26004 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 145 [ D.26004 ])
        (nil)))
(insn 69 68 70 5 (set (reg:DI 4 si)
        (reg/v/f:DI 136 [ ints ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 136 [ ints ])
        (nil)))
(insn 70 69 71 5 (set (reg:DI 5 di)
        (reg:DI 143 [ D.26007 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 143 [ D.26007 ])
        (nil)))
(call_insn 71 70 225 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 225 71 226 5 (set (pc)
        (label_ref 74)) 650 {jump}
     (nil)
 -> 74)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 134 135

(barrier 226 225 77)
;; basic block 6, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [100.0%] 
;;              10 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u43(6){ }u44(7){ }u45(16){ }u46(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 135
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 132
;; lr  def 	 17 [flags]
(code_label 77 226 78 6 20 "" [2 uses])
(note 78 77 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 79 78 80 6 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn 80 79 81 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 132 [ num_tilings ])
            (const_int 0 [0]))) tiles.cpp:53 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 81 80 227 6 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) tiles.cpp:53 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 125)
;;  succ:       11 [91.0%] 
;;              7 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 135

;; basic block 7, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 6, next block 8, flags: (NEW, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 227 81 228 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 228 227 229 7 (set (pc)
        (label_ref 203)) 650 {jump}
     (nil)
 -> 203)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 229 228 85)
;; basic block 8, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 [95.2%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u49(6){ }u50(7){ }u51(16){ }u52(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 134 135
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 132 134 135
;; lr  def 	 99 115 125 152 185 206 207 208 209 210 211
(code_label 85 229 86 8 19 "" [1 uses])
(note 86 85 87 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 8 (set (reg:SF 125 [ D.26002 ])
        (float:SF (reg/v:SI 132 [ num_tilings ]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(note 88 87 89 8 NOTE_INSN_DELETED)
(insn 89 88 90 8 (set (reg:DI 152 [ D.26004 ])
        (zero_extend:DI (plus:SI (reg/v:SI 135 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 90 89 91 8 NOTE_INSN_DELETED)
(insn 91 90 34 8 (set (reg:DI 99 [ D.26004 ])
        (plus:DI (mult:DI (reg:DI 152 [ D.26004 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 152 [ D.26004 ])
        (nil)))
(insn 34 91 216 8 (set (reg:DI 115 [ ivtmp.104 ])
        (const_int 0 [0])) tiles.cpp:47 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 216 34 240 8 (set (reg/f:DI 185)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 240 216 241 8 (set (reg:DI 206 [orig:99 D.26004 ] [99])
        (reg:DI 99 [ D.26004 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 99 [ D.26004 ])
        (nil)))
(insn 241 240 242 8 (set (reg:DI 207 [orig:115 ivtmp.104 ] [115])
        (reg:DI 115 [ ivtmp.104 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 115 [ ivtmp.104 ])
        (nil)))
(insn 242 241 243 8 (set (reg/v:SI 208 [orig:132 num_tilings ] [132])
        (reg/v:SI 132 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 132 [ num_tilings ])
        (nil)))
(insn 243 242 244 8 (set (reg/v/f:DI 209 [orig:134 floats ] [134])
        (reg/v/f:DI 134 [ floats ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 134 [ floats ])
        (nil)))
(insn 244 243 245 8 (set (reg/v:SI 210 [orig:135 num_floats ] [135])
        (reg/v:SI 135 [ num_floats ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 135 [ num_floats ])
        (nil)))
(insn 245 244 107 8 (set (reg/f:DI 211 [185])
        (reg/f:DI 185)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 125 131 133 206 207 208 209 210 211

;; basic block 9, loop depth 1, count 0, freq 942, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       9 [95.2%]  (DFS_BACK)
;;              8 [100.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u59(6){ }u60(7){ }u61(16){ }u62(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 125 131 133 206 207 208 209 210 211
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 206 207 209 211
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88 154 156 207
(code_label 107 245 92 9 25 "" [1 uses])
(note 92 107 93 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 93 92 94 9 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 94 93 95 9 (set (reg:SF 154 [ D.26002 ])
        (mult:SF (reg:SF 125 [ D.26002 ])
            (mem:SF (plus:DI (reg/v/f:DI 209 [orig:134 floats ] [134])
                    (reg:DI 207 [orig:115 ivtmp.104 ] [115])) [0 MEM[base: floats_26(D), index: ivtmp.104_58, offset: 0B]+0 S4 A32]))) tiles.cpp:48 777 {*fop_sf_comm_sse}
     (nil))
(insn 95 94 96 9 (set (reg:SF 21 xmm0)
        (reg:SF 154 [ D.26002 ])) tiles.cpp:48 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 154 [ D.26002 ])
        (nil)))
(call_insn/u 96 95 97 9 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:48 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 97 96 99 9 (set (reg:SF 88 [ D.26002 ])
        (reg:SF 21 xmm0)) tiles.cpp:48 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0)
        (nil)))
(insn 99 97 100 9 (set (reg:SI 156)
        (fix:SI (reg:SF 88 [ D.26002 ]))) tiles.cpp:48 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 88 [ D.26002 ])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 211 [185])
                    (reg:DI 207 [orig:115 ivtmp.104 ] [115])) [0 MEM[symbol: qstate, index: ivtmp.104_58, offset: 0B]+0 S4 A32])
            (nil))))
(insn 100 99 102 9 (set (mem:SI (plus:DI (reg/f:DI 211 [185])
                (reg:DI 207 [orig:115 ivtmp.104 ] [115])) [0 MEM[symbol: qstate, index: ivtmp.104_58, offset: 0B]+0 S4 A32])
        (reg:SI 156)) tiles.cpp:48 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 156)
        (nil)))
(debug_insn 102 100 103 9 (var_location:SI i (debug_expr:SI D#6)) -1
     (nil))
(insn 103 102 104 9 (parallel [
            (set (reg:DI 207 [orig:115 ivtmp.104 ] [115])
                (plus:DI (reg:DI 207 [orig:115 ivtmp.104 ] [115])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 104 103 105 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 207 [orig:115 ivtmp.104 ] [115])
            (reg:DI 206 [orig:99 D.26004 ] [99]))) tiles.cpp:47 8 {*cmpdi_1}
     (nil))
(jump_insn 105 104 111 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 107)
            (pc))) tiles.cpp:47 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 107)
;;  succ:       9 [95.2%]  (DFS_BACK)
;;              10 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 125 131 133 206 207 208 209 210 211

;; basic block 10, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u78(6){ }u79(7){ }u80(16){ }u81(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 133 208 210
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 208 210
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 132 135 157 158 187
(note 111 105 246 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 246 111 247 10 (set (reg/v:SI 132 [ num_tilings ])
        (reg/v:SI 208 [orig:132 num_tilings ] [132])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 208 [orig:132 num_tilings ] [132])
        (nil)))
(insn 247 246 112 10 (set (reg/v:SI 135 [ num_floats ])
        (reg/v:SI 210 [orig:135 num_floats ] [135])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 210 [orig:135 num_floats ] [135])
        (nil)))
(insn 112 247 113 10 (set (reg:DI 157 [ D.26004 ])
        (sign_extend:DI (reg/v:SI 135 [ num_floats ]))) tiles.cpp:49 149 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 10 (parallel [
            (set (reg:DI 158 [ D.26004 ])
                (ashift:DI (reg:DI 157 [ D.26004 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:49 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 157 [ D.26004 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 114 113 117 10 (parallel [
            (set (reg/f:DI 187)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -256 [0xffffffffffffff00]))
            (nil))))
(insn 117 114 118 10 (set (reg:DI 1 dx)
        (reg:DI 158 [ D.26004 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 158 [ D.26004 ])
        (nil)))
(insn 118 117 119 10 (set (reg:SI 4 si)
        (const_int 0 [0])) 89 {*movsi_internal}
     (nil))
(insn 119 118 120 10 (set (reg:DI 5 di)
        (reg/f:DI 187)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -256 [0xffffffffffffff00]))
            (nil))))
(call_insn 120 119 230 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 230 120 231 10 (set (pc)
        (label_ref 77)) 650 {jump}
     (nil)
 -> 77)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 135

(barrier 231 230 125)
;; basic block 11, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       6 [91.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u92(6){ }u93(7){ }u94(16){ }u95(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 131 132 133 135
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131 132 133 135
;; lr  def 	 93 114 119 121 165 186 188 189 190 191 192 193
(code_label 125 231 126 11 22 "" [1 uses])
(note 126 125 127 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 11 (set (reg:DI 121 [ D.26006 ])
        (sign_extend:DI (reg/v:SI 133 [ memory_size ]))) 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 133 [ memory_size ])
        (nil)))
(insn 128 127 129 11 (set (reg:DI 114 [ ivtmp.98 ])
        (reg/v/f:DI 131 [ the_tiles ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 131 [ the_tiles ])
        (nil)))
(note 129 128 130 11 NOTE_INSN_DELETED)
(insn 130 129 131 11 (set (reg:DI 165 [ D.26004 ])
        (zero_extend:DI (plus:SI (reg/v:SI 135 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 131 130 132 11 NOTE_INSN_DELETED)
(insn 132 131 39 11 (set (reg:DI 93 [ D.26004 ])
        (plus:DI (mult:DI (reg:DI 165 [ D.26004 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 165 [ D.26004 ])
        (nil)))
(insn 39 132 217 11 (set (reg/v:SI 119 [ j ])
        (const_int 0 [0])) tiles.cpp:53 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 217 39 248 11 (set (reg/f:DI 186)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 248 217 249 11 (set (reg:DI 188 [orig:93 D.26004 ] [93])
        (reg:DI 93 [ D.26004 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 93 [ D.26004 ])
        (nil)))
(insn 249 248 250 11 (set (reg:DI 189 [orig:114 ivtmp.98 ] [114])
        (reg:DI 114 [ ivtmp.98 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 114 [ ivtmp.98 ])
        (nil)))
(insn 250 249 251 11 (set (reg/v:SI 190 [orig:119 j ] [119])
        (reg/v:SI 119 [ j ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 119 [ j ])
        (nil)))
(insn 251 250 252 11 (set (reg/v:SI 191 [orig:132 num_tilings ] [132])
        (reg/v:SI 132 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 132 [ num_tilings ])
        (nil)))
(insn 252 251 253 11 (set (reg/v:SI 192 [orig:135 num_floats ] [135])
        (reg/v:SI 135 [ num_floats ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 135 [ num_floats ])
        (nil)))
(insn 253 252 232 11 (set (reg/f:DI 193 [186])
        (reg/f:DI 186)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 186)
        (nil)))
(jump_insn 232 253 233 11 (set (pc)
        (label_ref 190)) 650 {jump}
     (nil)
 -> 190)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 188 189 190 191 192 193

(barrier 233 232 198)
;; basic block 12, loop depth 2, count 0, freq 9524, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       15 [95.2%]  (DFS_BACK)
;;              20 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u103(6){ }u104(7){ }u105(16){ }u106(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 196 197 198 199 200 201 202 203 204 205
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 196 203 205
;; lr  def 	 17 [flags] 100 101
(code_label 198 233 136 12 31 "" [2 uses])
(note 136 198 137 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 137 136 139 12 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 139 137 141 12 (set (reg:SI 100 [ D.26001 ])
        (mem:SI (plus:DI (reg/f:DI 203 [185])
                (reg:DI 196 [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: qstate, index: ivtmp.87_15, offset: 0B]+0 S4 A32])) tiles.cpp:59 89 {*movsi_internal}
     (nil))
(insn 141 139 142 12 (set (reg:SI 101 [ D.26001 ])
        (mem:SI (plus:DI (reg/f:DI 205 [187])
                (reg:DI 196 [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: base, index: ivtmp.87_15, offset: 0B]+0 S4 A32])) tiles.cpp:59 89 {*movsi_internal}
     (nil))
(insn 142 141 143 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 100 [ D.26001 ])
            (reg:SI 101 [ D.26001 ]))) tiles.cpp:59 7 {*cmpsi_1}
     (nil))
(jump_insn 143 142 144 12 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) tiles.cpp:59 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 150)
;;  succ:       13 [50.0%]  (FALLTHRU)
;;              14 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 100 101 121 196 197 198 199 200 201 202 203 204 205

;; basic block 13, loop depth 2, count 0, freq 4762, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [50.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u114(6){ }u115(7){ }u116(16){ }u117(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 100 101 121 196 197 198 199 200 201 202 203 204 205
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101 201
;; lr  def 	 17 [flags] 104 169 171 172
(note 144 143 145 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 13 (parallel [
            (set (reg:SI 169 [ D.26001 ])
                (minus:SI (reg:SI 100 [ D.26001 ])
                    (reg:SI 101 [ D.26001 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:60 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 146 145 147 13 (parallel [
            (set (reg:SI 172)
                (div:SI (reg:SI 169 [ D.26001 ])
                    (reg/v:SI 201 [orig:132 num_tilings ] [132])))
            (set (reg:SI 171 [ D.26001 ])
                (mod:SI (reg:SI 169 [ D.26001 ])
                    (reg/v:SI 201 [orig:132 num_tilings ] [132])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:60 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 169 [ D.26001 ])
        (expr_list:REG_UNUSED (reg:SI 172)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 147 146 234 13 (parallel [
            (set (reg:SI 104 [ D.26001 ])
                (minus:SI (reg:SI 100 [ D.26001 ])
                    (reg:SI 171 [ D.26001 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:60 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 171 [ D.26001 ])
        (expr_list:REG_DEAD (reg:SI 100 [ D.26001 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(jump_insn 234 147 235 13 (set (pc)
        (label_ref 158)) 650 {jump}
     (nil)
 -> 158)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 101 104 121 196 197 198 199 200 201 202 203 204 205

(barrier 235 234 150)
;; basic block 14, loop depth 2, count 0, freq 4762, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12 [50.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u126(6){ }u127(7){ }u128(16){ }u129(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 100 101 121 196 197 198 199 200 201 202 203 204 205
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101 201
;; lr  def 	 17 [flags] 104 174 175 177 178
(code_label 150 235 151 14 27 "" [1 uses])
(note 151 150 152 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 152 151 153 14 NOTE_INSN_DELETED)
(insn 153 152 154 14 (parallel [
            (set (reg:SI 174 [ D.26001 ])
                (minus:SI (reg:SI 101 [ D.26001 ])
                    (reg:SI 100 [ D.26001 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 154 153 155 14 (parallel [
            (set (reg:SI 175 [ D.26001 ])
                (plus:SI (reg:SI 174 [ D.26001 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 174 [ D.26001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 155 154 156 14 (parallel [
            (set (reg:SI 178)
                (div:SI (reg:SI 175 [ D.26001 ])
                    (reg/v:SI 201 [orig:132 num_tilings ] [132])))
            (set (reg:SI 177 [ D.26001 ])
                (mod:SI (reg:SI 175 [ D.26001 ])
                    (reg/v:SI 201 [orig:132 num_tilings ] [132])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 175 [ D.26001 ])
        (expr_list:REG_UNUSED (reg:SI 178)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 156 155 157 14 (set (reg:SI 104 [ D.26001 ])
        (plus:SI (plus:SI (reg:SI 100 [ D.26001 ])
                (reg:SI 177 [ D.26001 ]))
            (const_int 1 [0x1]))) tiles.cpp:62 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 177 [ D.26001 ])
        (expr_list:REG_DEAD (reg:SI 100 [ D.26001 ])
            (nil))))
(insn 157 156 158 14 (parallel [
            (set (reg:SI 104 [ D.26001 ])
                (minus:SI (reg:SI 104 [ D.26001 ])
                    (reg/v:SI 201 [orig:132 num_tilings ] [132])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 101 104 121 196 197 198 199 200 201 202 203 204 205

;; basic block 15, loop depth 2, count 0, freq 9524, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u142(6){ }u143(7){ }u144(16){ }u145(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 101 104 121 196 197 198 199 200 201 202 203 204 205
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 104 196 197 198 204 205
;; lr  def 	 17 [flags] 182 196 198
(code_label 158 157 159 15 28 "" [1 uses])
(note 159 158 161 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 161 159 163 15 (set (mem:SI (plus:DI (reg/f:DI 204 [186])
                (reg:DI 196 [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: coordinates, index: ivtmp.87_15, offset: 0B]+0 S4 A32])
        (reg:SI 104 [ D.26001 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 104 [ D.26001 ])
        (nil)))
(insn 163 161 164 15 (parallel [
            (set (reg:SI 182)
                (plus:SI (reg:SI 101 [ D.26001 ])
                    (reg:SI 198 [orig:94 ivtmp.93 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:65 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 101 [ D.26001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 205 [187])
                        (reg:DI 196 [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: base, index: ivtmp.87_15, offset: 0B]+0 S4 A32])
                (nil)))))
(insn 164 163 166 15 (set (mem:SI (plus:DI (reg/f:DI 205 [187])
                (reg:DI 196 [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: base, index: ivtmp.87_15, offset: 0B]+0 S4 A32])
        (reg:SI 182)) tiles.cpp:65 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 182)
        (nil)))
(debug_insn 166 164 167 15 (var_location:SI i (debug_expr:SI D#5)) -1
     (nil))
(insn 167 166 168 15 (parallel [
            (set (reg:DI 196 [orig:85 ivtmp.87 ] [85])
                (plus:DI (reg:DI 196 [orig:85 ivtmp.87 ] [85])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 168 167 170 15 (parallel [
            (set (reg:SI 198 [orig:94 ivtmp.93 ] [94])
                (plus:SI (reg:SI 198 [orig:94 ivtmp.93 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 170 168 171 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 196 [orig:85 ivtmp.87 ] [85])
            (reg:DI 197 [orig:93 D.26004 ] [93]))) tiles.cpp:56 8 {*cmpdi_1}
     (nil))
(jump_insn 171 170 205 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 198)
            (pc))) tiles.cpp:56 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 198)
;;  succ:       12 [95.2%]  (DFS_BACK)
;;              16 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 196 197 198 199 200 201 202 203 204 205

;; basic block 16, loop depth 1, count 0, freq 453, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u159(6){ }u160(7){ }u161(16){ }u162(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 197 199 200 201 202 204
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 197 199 200 201 202 204
;; lr  def 	 120 188 189 190 191 192 193
(note 205 171 254 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 254 205 255 16 (set (reg:DI 188 [orig:93 D.26004 ] [93])
        (reg:DI 197 [orig:93 D.26004 ] [93])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 197 [orig:93 D.26004 ] [93])
        (nil)))
(insn 255 254 256 16 (set (reg:DI 189 [orig:114 ivtmp.98 ] [114])
        (reg:DI 199 [orig:114 ivtmp.98 ] [114])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 199 [orig:114 ivtmp.98 ] [114])
        (nil)))
(insn 256 255 257 16 (set (reg/v:SI 190 [orig:119 j ] [119])
        (reg/v:SI 200 [orig:119 j ] [119])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 200 [orig:119 j ] [119])
        (nil)))
(insn 257 256 258 16 (set (reg/v:SI 191 [orig:132 num_tilings ] [132])
        (reg/v:SI 201 [orig:132 num_tilings ] [132])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 201 [orig:132 num_tilings ] [132])
        (nil)))
(insn 258 257 259 16 (set (reg/v:SI 192 [orig:135 num_floats ] [135])
        (reg/v:SI 202 [orig:135 num_floats ] [135])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 202 [orig:135 num_floats ] [135])
        (nil)))
(insn 259 258 37 16 (set (reg/f:DI 193 [186])
        (reg/f:DI 204 [186])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 204 [186])
        (nil)))
(insn 37 259 236 16 (set (reg/v:SI 120 [ num_floats ])
        (reg/v:SI 192 [orig:135 num_floats ] [135])) 89 {*movsi_internal}
     (nil))
(jump_insn 236 37 237 16 (set (pc)
        (label_ref 194)) 650 {jump}
     (nil)
 -> 194)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 120 121 188 189 190 191 192 193

(barrier 237 236 209)
;; basic block 17, loop depth 1, count 0, freq 23, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       19 [4.8%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u164(6){ }u165(7){ }u166(16){ }u167(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 188 189 190 191 192 193
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 120
(code_label 209 237 208 17 32 "" [1 uses])
(note 208 209 38 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 38 208 194 17 (set (reg/v:SI 120 [ num_floats ])
        (const_int 0 [0])) tiles.cpp:56 89 {*movsi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 120 121 188 189 190 191 192 193

;; basic block 18, loop depth 1, count 0, freq 476, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u168(6){ }u169(7){ }u170(16){ }u171(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 120 121 188 189 190 191 192 193
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 120 121 189 190 191 193
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 118 183 189 190
(code_label 194 38 172 18 30 "" [1 uses])
(note 172 194 173 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 173 172 174 18 (set (reg:DI 183 [ num_floats ])
        (sign_extend:DI (reg/v:SI 120 [ num_floats ]))) tiles.cpp:68 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 120 [ num_floats ])
        (nil)))
(insn 174 173 176 18 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 183 [ num_floats ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -176 [0xffffffffffffff50])) [0 coordinates S4 A32])
        (reg/v:SI 190 [orig:119 j ] [119])) tiles.cpp:68 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 183 [ num_floats ])
        (nil)))
(insn 176 174 177 18 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:70 89 {*movsi_internal}
     (nil))
(insn 177 176 178 18 (set (reg:DI 1 dx)
        (reg:DI 121 [ D.26006 ])) tiles.cpp:70 87 {*movdi_internal_rex64}
     (nil))
(insn 178 177 179 18 (set (reg:SI 4 si)
        (reg/v:SI 84 [ num_coordinates ])) tiles.cpp:70 89 {*movsi_internal}
     (nil))
(insn 179 178 180 18 (set (reg:DI 5 di)
        (reg/f:DI 193 [186])) tiles.cpp:70 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(call_insn 180 179 181 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:70 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(insn 181 180 182 18 (set (reg:SI 118 [ D.26001 ])
        (reg:SI 0 ax)) tiles.cpp:70 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (expr_list:REG_EQUIV (mem:SI (reg:DI 189 [orig:114 ivtmp.98 ] [114]) [0 MEM[base: _31, offset: 0B]+0 S4 A32])
            (nil))))
(insn 182 181 183 18 (set (mem:SI (reg:DI 189 [orig:114 ivtmp.98 ] [114]) [0 MEM[base: _31, offset: 0B]+0 S4 A32])
        (reg:SI 118 [ D.26001 ])) tiles.cpp:70 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 118 [ D.26001 ])
        (nil)))
(insn 183 182 185 18 (parallel [
            (set (reg/v:SI 190 [orig:119 j ] [119])
                (plus:SI (reg/v:SI 190 [orig:119 j ] [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:53 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 185 183 186 18 (var_location:SI j (reg/v:SI 190 [orig:119 j ] [119])) -1
     (nil))
(insn 186 185 187 18 (parallel [
            (set (reg:DI 189 [orig:114 ivtmp.98 ] [114])
                (plus:DI (reg:DI 189 [orig:114 ivtmp.98 ] [114])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 187 186 188 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 190 [orig:119 j ] [119])
            (reg/v:SI 191 [orig:132 num_tilings ] [132]))) tiles.cpp:53 7 {*cmpsi_1}
     (nil))
(jump_insn 188 187 190 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 203)
            (pc))) tiles.cpp:53 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 203)
;;  succ:       19 [91.0%]  (FALLTHRU,DFS_BACK)
;;              21 [9.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 188 189 190 191 192 193

;; basic block 19, loop depth 1, count 0, freq 476, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 [91.0%]  (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u194(6){ }u195(7){ }u196(16){ }u197(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 188 189 190 191 192 193
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 192
;; lr  def 	 17 [flags]
(code_label 190 188 191 19 26 "" [1 uses])
(note 191 190 192 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(debug_insn 192 191 193 19 (var_location:SI j (reg/v:SI 190 [orig:119 j ] [119])) -1
     (nil))
(debug_insn 193 192 195 19 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 195 193 196 19 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 192 [orig:135 num_floats ] [135])
            (const_int 0 [0]))) tiles.cpp:56 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 196 195 197 19 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 209)
            (pc))) tiles.cpp:56 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 209)
;;  succ:       20 [95.2%]  (FALLTHRU)
;;              17 [4.8%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 188 189 190 191 192 193

;; basic block 20, loop depth 1, count 0, freq 453, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [95.2%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u201(6){ }u202(7){ }u203(16){ }u204(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 188 189 190 191 192 193
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 188 189 190 191 192 193
;; lr  def 	 85 94 194 195 196 197 198 199 200 201 202 203 204 205
(note 197 196 35 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 35 197 36 20 (set (reg:SI 94 [ ivtmp.93 ])
        (const_int 1 [0x1])) tiles.cpp:56 89 {*movsi_internal}
     (nil))
(insn 36 35 218 20 (set (reg:DI 85 [ ivtmp.87 ])
        (const_int 0 [0])) tiles.cpp:56 87 {*movdi_internal_rex64}
     (nil))
(insn 218 36 219 20 (set (reg/f:DI 195 [185])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 219 218 260 20 (set (reg/f:DI 194 [187])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -256 [0xffffffffffffff00]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -256 [0xffffffffffffff00]))
        (nil)))
(insn 260 219 261 20 (set (reg:DI 196 [orig:85 ivtmp.87 ] [85])
        (reg:DI 85 [ ivtmp.87 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 85 [ ivtmp.87 ])
        (nil)))
(insn 261 260 262 20 (set (reg:DI 197 [orig:93 D.26004 ] [93])
        (reg:DI 188 [orig:93 D.26004 ] [93])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 188 [orig:93 D.26004 ] [93])
        (nil)))
(insn 262 261 263 20 (set (reg:SI 198 [orig:94 ivtmp.93 ] [94])
        (reg:SI 94 [ ivtmp.93 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94 [ ivtmp.93 ])
        (nil)))
(insn 263 262 264 20 (set (reg:DI 199 [orig:114 ivtmp.98 ] [114])
        (reg:DI 189 [orig:114 ivtmp.98 ] [114])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 189 [orig:114 ivtmp.98 ] [114])
        (nil)))
(insn 264 263 265 20 (set (reg/v:SI 200 [orig:119 j ] [119])
        (reg/v:SI 190 [orig:119 j ] [119])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 190 [orig:119 j ] [119])
        (nil)))
(insn 265 264 266 20 (set (reg/v:SI 201 [orig:132 num_tilings ] [132])
        (reg/v:SI 191 [orig:132 num_tilings ] [132])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 191 [orig:132 num_tilings ] [132])
        (nil)))
(insn 266 265 267 20 (set (reg/v:SI 202 [orig:135 num_floats ] [135])
        (reg/v:SI 192 [orig:135 num_floats ] [135])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 192 [orig:135 num_floats ] [135])
        (nil)))
(insn 267 266 268 20 (set (reg/f:DI 203 [185])
        (reg/f:DI 195 [185])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 195 [185])
        (nil)))
(insn 268 267 269 20 (set (reg/f:DI 204 [186])
        (reg/f:DI 193 [186])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 193 [186])
        (nil)))
(insn 269 268 238 20 (set (reg/f:DI 205 [187])
        (reg/f:DI 194 [187])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 194 [187])
        (nil)))
(jump_insn 238 269 239 20 (set (pc)
        (label_ref 198)) 650 {jump}
     (nil)
 -> 198)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 121 196 197 198 199 200 201 202 203 204 205

(barrier 239 238 203)
;; basic block 21, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       18 [9.0%]  (LOOP_EXIT)
;;              7 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u207(6){ }u208(7){ }u209(16){ }u210(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 203 239 204 21 17 "" [2 uses])
(note 204 203 0 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int hash(int*, int, collision_table*) (_Z4hashPiiP15collision_table, funcdef_no=1064, decl_uid=23703, cgraph_uid=308)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 21 count 19 (  1.1)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 98: def dominates all uses has unique first use
Reg 99: def dominates all uses has unique first use
Reg 63 uninteresting
Reg 64 uninteresting (no unique first use)
Ignoring reg 103, has equiv memory
Reg 68 uninteresting
Reg 69 uninteresting
Reg 77 uninteresting
Reg 105 uninteresting
Reg 80: def dominates all uses has unique first use
Reg 92: def dominates all uses has unique first use
Reg 91: def dominates all uses has unique first use
Reg 106: local to bb 10 def dominates all uses has unique first use
Ignoring reg 108, has equiv memory
Reg 89 uninteresting
Reg 90 uninteresting
Reg 80 not local to one basic block
Reg 91 not local to one basic block
Reg 92 not local to one basic block
Reg 98 not local to one basic block
Reg 99 not local to one basic block
Examining insn 80, def for 106
  all ok
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;;
;; Loop 1
;;  header 14, latch 13
;;  depth 1, outer 0
;;  nodes: 14 13 11 10
;; 2 succs { 3 4 }
;; 3 succs { 16 }
;; 4 succs { 5 6 }
;; 5 succs { 16 }
;; 6 succs { 7 8 }
;; 7 succs { 16 }
;; 8 succs { 14 }
;; 9 succs { }
;; 10 succs { 16 11 }
;; 11 succs { 12 13 }
;; 12 succs { 16 }
;; 13 succs { 14 }
;; 14 succs { 15 10 }
;; 15 succs { 9 }
;; 16 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 103: (insn_list:REG_DEP_TRUE 26 (nil))
init_insns for 108: (insn_list:REG_DEP_TRUE 82 (nil))

Pass 0 for finding pseudo/allocno costs

    a23 (r115,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a26 (r113,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a28 (r112,l1) best AREG, allocno AREG
    a27 (r111,l1) best DREG, allocno DREG
    a29 (r110,l1) best AREG, allocno AREG
    a31 (r108,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a32 (r106,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a22 (r100,l1) best DREG, allocno DREG
    a6 (r100,l0) best DREG, allocno DREG
    a11 (r99,l0) best SIREG, allocno SIREG
    a10 (r98,l0) best DIREG, allocno DIREG
    a21 (r92,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r91,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a30 (r90,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a25 (r89,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r81,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r80,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r77,l0) best AREG, allocno AREG
    a14 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r64,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r63,l0) best AREG, allocno AREG
    a24 (r59,l1) best AREG, allocno AREG
    a0 (r59,l0) best AREG, allocno AREG

  a0(r59,l0) costs: AREG:-434,-434 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8463,33748 SSE_REGS:8463,33748 MMX_REGS:8463,33748 FP_TOP_SSE_REGS:3000000,5000000 FP_SECOND_SSE_REGS:3000000,5000000 FLOAT_SSE_REGS:3000000,5000000 FLOAT_INT_REGS:3000000,5000000 INT_SSE_REGS:8463,33748 FLOAT_INT_SSE_REGS:3000000,5000000 ALL_REGS:3000000,5000000 MEM:2170,9005
  a1(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:273,25987 SSE_REGS:273,25987 MMX_REGS:273,25987 FP_TOP_SSE_REGS:1376235,67190350 FP_SECOND_SSE_REGS:1376235,67190350 FLOAT_SSE_REGS:1376235,67190350 FLOAT_INT_REGS:1376235,67190350 INT_SSE_REGS:273,25987 FLOAT_INT_SSE_REGS:1376235,67190350 ALL_REGS:1376235,67190350 MEM:84,7996
  a2(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6357,19214 SSE_REGS:6357,19214 MMX_REGS:6357,19214 FP_TOP_SSE_REGS:4000000,5000000 FP_SECOND_SSE_REGS:4000000,5000000 FLOAT_SSE_REGS:4000000,5000000 FLOAT_INT_REGS:4000000,5000000 INT_SSE_REGS:6357,19214 FLOAT_INT_SSE_REGS:4000000,5000000 ALL_REGS:4000000,5000000 MEM:1739,4706
  a3(r81,l0) costs: AREG:0,2000 DREG:0,2000 CREG:0,2000 BREG:0,2000 SIREG:0,2000 DIREG:0,2000 AD_REGS:0,2000 Q_REGS:0,2000 NON_Q_REGS:0,2000 INDEX_REGS:0,2000 GENERAL_REGS:0,2000 LEGACY_REGS:0,2000 CLOBBERED_REGS:0,2000 SSE_FIRST_REG:702,53844 SSE_REGS:702,53844 MMX_REGS:702,53844 FP_TOP_SSE_REGS:1000000,5000000 FP_SECOND_SSE_REGS:1000000,5000000 FLOAT_SSE_REGS:1000000,5000000 FLOAT_INT_REGS:1000000,5000000 INT_SSE_REGS:702,53844 FLOAT_INT_SSE_REGS:1000000,5000000 ALL_REGS:1000000,5000000 MEM:216,15018
  a4(r92,l0) costs: AREG:0,2000 DREG:0,2000 CREG:0,2000 BREG:0,2000 SIREG:0,2000 DIREG:0,2000 AD_REGS:0,2000 Q_REGS:0,2000 NON_Q_REGS:0,2000 INDEX_REGS:0,2000 GENERAL_REGS:0,2000 LEGACY_REGS:0,2000 CLOBBERED_REGS:0,2000 SSE_FIRST_REG:1404,16404 SSE_REGS:1404,16404 MMX_REGS:1404,16404 FP_TOP_SSE_REGS:2000000,3000000 FP_SECOND_SSE_REGS:2000000,3000000 FLOAT_SSE_REGS:2000000,3000000 FLOAT_INT_REGS:2000000,3000000 INT_SSE_REGS:1404,16404 FLOAT_INT_SSE_REGS:2000000,3000000 ALL_REGS:2000000,3000000 MEM:432,5432
  a5(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:702,26702 SSE_REGS:702,26702 MMX_REGS:702,26702 FP_TOP_SSE_REGS:1000000,3000000 FP_SECOND_SSE_REGS:1000000,3000000 FLOAT_SSE_REGS:1000000,3000000 FLOAT_INT_REGS:1000000,3000000 INT_SSE_REGS:702,26702 FLOAT_INT_SSE_REGS:1000000,3000000 ALL_REGS:1000000,3000000 MEM:216,6216
  a6(r100,l0) costs: AREG:0,0 DREG:-217,-217 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24349,63063 SSE_REGS:24349,63063 MMX_REGS:24349,63063 FP_TOP_SSE_REGS:109525960,304689190 FP_SECOND_SSE_REGS:109525960,304689190 FLOAT_SSE_REGS:109525960,304689190 FLOAT_INT_REGS:109525960,304689190 INT_SSE_REGS:24349,63063 FLOAT_INT_SSE_REGS:109525960,304689190 ALL_REGS:109525960,304689190 MEM:7492,19404
  a7(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:702,13702 SSE_REGS:702,13702 MMX_REGS:702,13702 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:702,13702 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:216,3216
  a8(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1404,1404 SSE_REGS:1404,1404 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1404,1404 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:378,378
  a9(r77,l0) costs: AREG:-54,-54 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1404,1404 SSE_REGS:1404,1404 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:4538890,4538890 FP_SECOND_SSE_REGS:4538890,4538890 FLOAT_SSE_REGS:4538890,4538890 FLOAT_INT_REGS:4538890,4538890 INT_SSE_REGS:1404,1404 FLOAT_INT_SSE_REGS:4538890,4538890 ALL_REGS:4538890,4538890 MEM:432,432
  a10(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-271,-271 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:9165,9165 SSE_REGS:9165,9165 MMX_REGS:9165,9165 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:9165,9165 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:2332,2332
  a11(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-271,-271 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:9165,9165 SSE_REGS:9165,9165 MMX_REGS:9165,9165 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:9165,9165 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:2332,2332
  a12(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5642,30927 SSE_REGS:5642,30927 MMX_REGS:5642,30927 FP_TOP_SSE_REGS:15221095,17221095 FP_SECOND_SSE_REGS:15221095,17221095 FLOAT_SSE_REGS:15221095,17221095 FLOAT_INT_REGS:15221095,17221095 INT_SSE_REGS:5642,30927 FLOAT_INT_SSE_REGS:15221095,17221095 ALL_REGS:15221095,17221095 MEM:1736,8516
  a13(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6084,6084 SSE_REGS:6084,6084 MMX_REGS:6084,6084 FP_TOP_SSE_REGS:17449285,17449285 FP_SECOND_SSE_REGS:17449285,17449285 FLOAT_SSE_REGS:17449285,17449285 FLOAT_INT_REGS:17449285,17449285 INT_SSE_REGS:6084,6084 FLOAT_INT_SSE_REGS:17449285,17449285 ALL_REGS:17449285,17449285 MEM:1872,1872
  a14(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:7904,7904 SSE_REGS:7904,7904 MMX_REGS:7904,7904 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:7904,7904 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:2041,2041
  a15(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5642,5642 SSE_REGS:5642,5642 MMX_REGS:5642,5642 FP_TOP_SSE_REGS:15221095,15221095 FP_SECOND_SSE_REGS:15221095,15221095 FLOAT_SSE_REGS:15221095,15221095 FLOAT_INT_REGS:15221095,15221095 INT_SSE_REGS:5642,5642 FLOAT_INT_SSE_REGS:15221095,15221095 ALL_REGS:15221095,15221095 MEM:0,0
  a16(r63,l0) costs: AREG:-217,-217 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5642,5642 SSE_REGS:5642,5642 MMX_REGS:5642,5642 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:5642,5642 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1519,1519
  a17(r64,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12857,12857 SSE_REGS:12857,12857 MMX_REGS:12857,12857 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:12857,12857 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2967,2967
  a18(r80,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13000,13000 SSE_REGS:13000,13000 MMX_REGS:13000,13000 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:13000,13000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:3000,3000
  a19(r81,l1) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 SSE_FIRST_REG:53142,53142 SSE_REGS:53142,53142 MMX_REGS:53142,53142 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:53142,53142 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:14802,14802
  a20(r91,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6000,6000
  a21(r92,l1) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 SSE_FIRST_REG:15000,15000 SSE_REGS:15000,15000 MMX_REGS:15000,15000 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:15000,15000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:5000,5000
  a22(r100,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:38714,38714 SSE_REGS:38714,38714 MMX_REGS:38714,38714 FP_TOP_SSE_REGS:195163230,195163230 FP_SECOND_SSE_REGS:195163230,195163230 FLOAT_SSE_REGS:195163230,195163230 FLOAT_INT_REGS:195163230,195163230 INT_SSE_REGS:38714,38714 FLOAT_INT_SSE_REGS:195163230,195163230 ALL_REGS:195163230,195163230 MEM:11912,11912
  a23(r115,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:25285,25285 SSE_REGS:25285,25285 MMX_REGS:25285,25285 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:25285,25285 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6780,6780
  a24(r59,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:25285,25285 SSE_REGS:25285,25285 MMX_REGS:25285,25285 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:25285,25285 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6835,6835
  a25(r89,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:25714,25714 SSE_REGS:25714,25714 MMX_REGS:25714,25714 FP_TOP_SSE_REGS:65814115,65814115 FP_SECOND_SSE_REGS:65814115,65814115 FLOAT_SSE_REGS:65814115,65814115 FLOAT_INT_REGS:65814115,65814115 INT_SSE_REGS:25714,25714 FLOAT_INT_SSE_REGS:65814115,65814115 ALL_REGS:65814115,65814115 MEM:7912,7912
  a26(r113,l1) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 SSE_FIRST_REG:28000,28000 SSE_REGS:28000,28000 MMX_REGS:28000,28000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:28000,28000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a27(r111,l1) costs: AREG:2000,2000 DREG:0,0 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 MEM:9967,9967
  a28(r112,l1) costs: AREG:0,0 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 SSE_FIRST_REG:13000,13000 SSE_REGS:13000,13000 MMX_REGS:13000,13000 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:13000,13000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:4000,4000
  a29(r110,l1) costs: AREG:0,0 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a30(r90,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:38285,38285 SSE_REGS:38285,38285 MMX_REGS:38285,38285 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:38285,38285 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:9824,9824
  a31(r108,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:25714,25714 SSE_REGS:25714,25714 MMX_REGS:25714,25714 FP_TOP_SSE_REGS:65814115,65814115 FP_SECOND_SSE_REGS:65814115,65814115 FLOAT_SSE_REGS:65814115,65814115 FLOAT_INT_REGS:65814115,65814115 INT_SSE_REGS:25714,25714 FLOAT_INT_SSE_REGS:65814115,65814115 ALL_REGS:65814115,65814115 MEM:0,0
  a32(r106,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:25714,25714 SSE_REGS:25714,25714 MMX_REGS:25714,25714 FP_TOP_SSE_REGS:65814115,65814115 FP_SECOND_SSE_REGS:65814115,65814115 FLOAT_SSE_REGS:65814115,65814115 FLOAT_INT_REGS:65814115,65814115 INT_SSE_REGS:25714,25714 FLOAT_INT_SSE_REGS:65814115,65814115 ALL_REGS:65814115,65814115 MEM:7912,7912


Pass 1 for finding pseudo/allocno costs

    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r112: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r100: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r100,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r77: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r63: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r59,l1) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:-434,-434 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8463,33748 SSE_REGS:8463,33748 MMX_REGS:8463,33748 FP_TOP_SSE_REGS:3000000,5000000 FP_SECOND_SSE_REGS:3000000,5000000 FLOAT_SSE_REGS:3000000,5000000 FLOAT_INT_REGS:3000000,5000000 INT_SSE_REGS:8463,33748 FLOAT_INT_SSE_REGS:3000000,5000000 ALL_REGS:3000000,5000000 MEM:2170,9005
  a1(r89,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:273,25987 SSE_REGS:273,25987 MMX_REGS:273,25987 FP_TOP_SSE_REGS:1376235,67190350 FP_SECOND_SSE_REGS:1376235,67190350 FLOAT_SSE_REGS:1376235,67190350 FLOAT_INT_REGS:1376235,67190350 INT_SSE_REGS:273,25987 FLOAT_INT_SSE_REGS:1376235,67190350 ALL_REGS:1376235,67190350 MEM:84,7996
  a2(r64,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6357,19214 SSE_REGS:6357,19214 MMX_REGS:6357,19214 FP_TOP_SSE_REGS:4000000,5000000 FP_SECOND_SSE_REGS:4000000,5000000 FLOAT_SSE_REGS:4000000,5000000 FLOAT_INT_REGS:4000000,5000000 INT_SSE_REGS:6357,19214 FLOAT_INT_SSE_REGS:4000000,5000000 ALL_REGS:4000000,5000000 MEM:1739,4706
  a3(r81,l0) costs: GENERAL_REGS:0,2000 SSE_FIRST_REG:702,53844 SSE_REGS:702,53844 MMX_REGS:702,53844 FP_TOP_SSE_REGS:1000000,5000000 FP_SECOND_SSE_REGS:1000000,5000000 FLOAT_SSE_REGS:1000000,5000000 FLOAT_INT_REGS:1000000,5000000 INT_SSE_REGS:702,53844 FLOAT_INT_SSE_REGS:1000000,5000000 ALL_REGS:1000000,5000000 MEM:216,15018
  a4(r92,l0) costs: GENERAL_REGS:0,2000 SSE_FIRST_REG:1404,16404 SSE_REGS:1404,16404 MMX_REGS:1404,16404 FP_TOP_SSE_REGS:2000000,3000000 FP_SECOND_SSE_REGS:2000000,3000000 FLOAT_SSE_REGS:2000000,3000000 FLOAT_INT_REGS:2000000,3000000 INT_SSE_REGS:1404,16404 FLOAT_INT_SSE_REGS:2000000,3000000 ALL_REGS:2000000,3000000 MEM:432,5432
  a5(r91,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:702,26702 SSE_REGS:702,26702 MMX_REGS:702,26702 FP_TOP_SSE_REGS:1000000,3000000 FP_SECOND_SSE_REGS:1000000,3000000 FLOAT_SSE_REGS:1000000,3000000 FLOAT_INT_REGS:1000000,3000000 INT_SSE_REGS:702,26702 FLOAT_INT_SSE_REGS:1000000,3000000 ALL_REGS:1000000,3000000 MEM:216,6216
  a6(r100,l0) costs: AREG:0,0 DREG:-217,-217 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24349,63063 SSE_REGS:24349,63063 MMX_REGS:24349,63063 FP_TOP_SSE_REGS:109525960,304689190 FP_SECOND_SSE_REGS:109525960,304689190 FLOAT_SSE_REGS:109525960,304689190 FLOAT_INT_REGS:109525960,304689190 INT_SSE_REGS:24349,63063 FLOAT_INT_SSE_REGS:109525960,304689190 ALL_REGS:109525960,304689190 MEM:7492,19404
  a7(r80,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:702,13702 SSE_REGS:702,13702 MMX_REGS:702,13702 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:702,13702 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:216,3216
  a8(r105,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1404,1404 SSE_REGS:1404,1404 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1404,1404 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:378,378
  a9(r77,l0) costs: AREG:-54,-54 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1404,1404 SSE_REGS:1404,1404 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:4538890,4538890 FP_SECOND_SSE_REGS:4538890,4538890 FLOAT_SSE_REGS:4538890,4538890 FLOAT_INT_REGS:4538890,4538890 INT_SSE_REGS:1404,1404 FLOAT_INT_SSE_REGS:4538890,4538890 ALL_REGS:4538890,4538890 MEM:432,432
  a10(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-271,-271 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:9165,9165 SSE_REGS:9165,9165 MMX_REGS:9165,9165 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:9165,9165 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:2332,2332
  a11(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-271,-271 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:9165,9165 SSE_REGS:9165,9165 MMX_REGS:9165,9165 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:9165,9165 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:2332,2332
  a12(r115,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:5642,30927 SSE_REGS:5642,30927 MMX_REGS:5642,30927 FP_TOP_SSE_REGS:15221095,17221095 FP_SECOND_SSE_REGS:15221095,17221095 FLOAT_SSE_REGS:15221095,17221095 FLOAT_INT_REGS:15221095,17221095 INT_SSE_REGS:5642,30927 FLOAT_INT_SSE_REGS:15221095,17221095 ALL_REGS:15221095,17221095 MEM:1736,8516
  a13(r68,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6084,6084 SSE_REGS:6084,6084 MMX_REGS:6084,6084 FP_TOP_SSE_REGS:17449285,17449285 FP_SECOND_SSE_REGS:17449285,17449285 FLOAT_SSE_REGS:17449285,17449285 FLOAT_INT_REGS:17449285,17449285 INT_SSE_REGS:6084,6084 FLOAT_INT_SSE_REGS:17449285,17449285 ALL_REGS:17449285,17449285 MEM:1872,1872
  a14(r69,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:7904,7904 SSE_REGS:7904,7904 MMX_REGS:7904,7904 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:7904,7904 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:2041,2041
  a15(r103,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:5642,5642 SSE_REGS:5642,5642 MMX_REGS:5642,5642 FP_TOP_SSE_REGS:15221095,15221095 FP_SECOND_SSE_REGS:15221095,15221095 FLOAT_SSE_REGS:15221095,15221095 FLOAT_INT_REGS:15221095,15221095 INT_SSE_REGS:5642,5642 FLOAT_INT_SSE_REGS:15221095,15221095 ALL_REGS:15221095,15221095 MEM:0,0
  a16(r63,l0) costs: AREG:-217,-217 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5642,5642 SSE_REGS:5642,5642 MMX_REGS:5642,5642 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:5642,5642 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1519,1519
  a17(r64,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12857,12857 SSE_REGS:12857,12857 MMX_REGS:12857,12857 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:12857,12857 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2967,2967
  a18(r80,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13000,13000 SSE_REGS:13000,13000 MMX_REGS:13000,13000 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:13000,13000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:3000,3000
  a19(r81,l1) costs: GENERAL_REGS:2000,2000 SSE_FIRST_REG:53142,53142 SSE_REGS:53142,53142 MMX_REGS:53142,53142 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:53142,53142 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:14802,14802
  a20(r91,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6000,6000
  a21(r92,l1) costs: GENERAL_REGS:2000,2000 SSE_FIRST_REG:15000,15000 SSE_REGS:15000,15000 MMX_REGS:15000,15000 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:15000,15000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:5000,5000
  a22(r100,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:38714,38714 SSE_REGS:38714,38714 MMX_REGS:38714,38714 FP_TOP_SSE_REGS:195163230,195163230 FP_SECOND_SSE_REGS:195163230,195163230 FLOAT_SSE_REGS:195163230,195163230 FLOAT_INT_REGS:195163230,195163230 INT_SSE_REGS:38714,38714 FLOAT_INT_SSE_REGS:195163230,195163230 ALL_REGS:195163230,195163230 MEM:11912,11912
  a23(r115,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:25285,25285 SSE_REGS:25285,25285 MMX_REGS:25285,25285 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:25285,25285 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6780,6780
  a24(r59,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:25285,25285 SSE_REGS:25285,25285 MMX_REGS:25285,25285 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:25285,25285 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6835,6835
  a25(r89,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:25714,25714 SSE_REGS:25714,25714 MMX_REGS:25714,25714 FP_TOP_SSE_REGS:65814115,65814115 FP_SECOND_SSE_REGS:65814115,65814115 FLOAT_SSE_REGS:65814115,65814115 FLOAT_INT_REGS:65814115,65814115 INT_SSE_REGS:25714,25714 FLOAT_INT_SSE_REGS:65814115,65814115 ALL_REGS:65814115,65814115 MEM:7912,7912
  a26(r113,l1) costs: GENERAL_REGS:2000,2000 SSE_FIRST_REG:28000,28000 SSE_REGS:28000,28000 MMX_REGS:28000,28000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:28000,28000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a27(r111,l1) costs: AREG:2000,2000 DREG:0,0 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 MEM:9967,9967
  a28(r112,l1) costs: AREG:0,0 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 SSE_FIRST_REG:13000,13000 SSE_REGS:13000,13000 MMX_REGS:13000,13000 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:13000,13000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:4000,4000
  a29(r110,l1) costs: AREG:0,0 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 INDEX_REGS:2000,2000 GENERAL_REGS:2000,2000 LEGACY_REGS:2000,2000 CLOBBERED_REGS:2000,2000 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a30(r90,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:38285,38285 SSE_REGS:38285,38285 MMX_REGS:38285,38285 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:38285,38285 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:9824,9824
  a31(r108,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:25714,25714 SSE_REGS:25714,25714 MMX_REGS:25714,25714 FP_TOP_SSE_REGS:65814115,65814115 FP_SECOND_SSE_REGS:65814115,65814115 FLOAT_SSE_REGS:65814115,65814115 FLOAT_INT_REGS:65814115,65814115 INT_SSE_REGS:25714,25714 FLOAT_INT_SSE_REGS:65814115,65814115 ALL_REGS:65814115,65814115 MEM:0,0
  a32(r106,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:25714,25714 SSE_REGS:25714,25714 MMX_REGS:25714,25714 FP_TOP_SSE_REGS:65814115,65814115 FP_SECOND_SSE_REGS:65814115,65814115 FLOAT_SSE_REGS:65814115,65814115 FLOAT_INT_REGS:65814115,65814115 INT_SSE_REGS:25714,25714 FLOAT_INT_SSE_REGS:65814115,65814115 ALL_REGS:65814115,65814115 MEM:7912,7912

   Insn 127(l0): point = 0
   Insn 124(l0): point = 2
   Insn 143(l0): point = 5
   Insn 92(l0): point = 7
   Insn 77(l0): point = 10
   Insn 76(l0): point = 12
   Insn 75(l0): point = 14
   Insn 74(l0): point = 16
   Insn 73(l0): point = 18
   Insn 72(l0): point = 20
   Insn 147(l0): point = 23
   Insn 141(l0): point = 26
   Insn 67(l0): point = 28
   Insn 66(l0): point = 30
   Insn 65(l0): point = 32
   Insn 62(l0): point = 34
   Insn 61(l0): point = 36
   Insn 59(l0): point = 38
   Insn 58(l0): point = 40
   Insn 57(l0): point = 42
   Insn 56(l0): point = 44
   Insn 55(l0): point = 46
   Insn 54(l0): point = 48
   Insn 139(l0): point = 51
   Insn 49(l0): point = 53
   Insn 47(l0): point = 56
   Insn 46(l0): point = 58
   Insn 137(l0): point = 61
   Insn 41(l0): point = 63
   Insn 40(l0): point = 65
   Insn 38(l0): point = 68
   Insn 37(l0): point = 70
   Insn 135(l0): point = 73
   Insn 32(l0): point = 75
   Insn 30(l0): point = 78
   Insn 29(l0): point = 80
   Insn 28(l0): point = 82
   Insn 27(l0): point = 84
   Insn 26(l0): point = 86
   Insn 24(l0): point = 88
   Insn 22(l0): point = 90
   Insn 21(l0): point = 92
   Insn 20(l0): point = 94
   Insn 19(l0): point = 96
   Insn 18(l0): point = 98
   Insn 17(l0): point = 100
   Insn 16(l0): point = 102
   Insn 14(l0): point = 104
   Insn 13(l0): point = 106
   Insn 12(l0): point = 108
   Insn 11(l0): point = 110
   Insn 10(l0): point = 112
   Insn 9(l0): point = 114
   Insn 8(l0): point = 116
   Insn 4(l0): point = 118
   Insn 3(l0): point = 120
   Insn 2(l0): point = 122
   Insn 86(l1): point = 125
   Insn 85(l1): point = 127
   Insn 84(l1): point = 129
   Insn 83(l1): point = 131
   Insn 82(l1): point = 133
   Insn 80(l1): point = 135
   Insn 112(l1): point = 138
   Insn 111(l1): point = 140
   Insn 110(l1): point = 142
   Insn 107(l1): point = 144
   Insn 105(l1): point = 146
   Insn 104(l1): point = 149
   Insn 102(l1): point = 151
   Insn 131(l1): point = 154
   Insn 90(l1): point = 157
   Insn 89(l1): point = 159
   Insn 88(l1): point = 161
 a0(r59): [51..104] [3..9]
 a1(r89): [8..9]
 a2(r64): [78..90] [64..72] [56..60] [26..50] [8..9]
 a3(r81): [26..28]
 a4(r92): [26..32]
 a5(r91): [26..30]
 a6(r100): [76..118] [66..72] [54..60] [26..50]
 a7(r80): [26..34]
 a8(r105): [35..36]
 a9(r77): [37..38]
 a10(r98): [78..122] [68..72] [56..60] [43..50]
 a11(r99): [78..120] [68..72] [56..60] [45..50]
 a12(r115): [78..88] [68..72] [56..60] [26..50]
 a13(r68): [78..84] [64..72]
 a14(r69): [78..82] [71..72]
 a15(r103): [85..86]
 a16(r63): [91..92]
 a17(r64): [125..163]
 a18(r80): [125..163]
 a19(r81): [125..163]
 a20(r91): [125..163]
 a21(r92): [125..163]
 a22(r100): [125..163]
 a23(r115): [150..154]
 a24(r59): [155..163] [125..144]
 a25(r89): [157..163] [125..131]
 a26(r113): [141..142]
 a27(r111): [136..147]
 a28(r112): [146..146]
 a29(r110): [148..149]
 a30(r90): [160..163] [125..129]
 a31(r108): [132..133]
 a32(r106): [132..135]
      Moving ranges of a23r115 to a12r115:  [150..154]
 Rebuilding regno allocno list for 113
 Rebuilding regno allocno list for 112
 Rebuilding regno allocno list for 111
 Rebuilding regno allocno list for 110
 Rebuilding regno allocno list for 108
 Rebuilding regno allocno list for 106
      Moving ranges of a22r100 to a6r100:  [125..163]
      Moving ranges of a21r92 to a4r92:  [125..163]
      Moving ranges of a20r91 to a5r91:  [125..163]
 Rebuilding regno allocno list for 90
      Moving ranges of a25r89 to a1r89:  [157..163] [125..131]
      Moving ranges of a19r81 to a3r81:  [125..163]
      Moving ranges of a18r80 to a7r80:  [125..163]
      Moving ranges of a17r64 to a2r64:  [125..163]
      Moving ranges of a24r59 to a0r59:  [155..163] [125..144]
Compressing live ranges: from 164 to 34 - 20%
Ranges after the compression:
 a0(r59): [32..33] [10..25] [0..1]
 a1(r89): [32..33] [20..21] [0..1]
 a2(r64): [20..33] [0..17]
 a3(r81): [20..33] [2..3]
 a4(r92): [20..33] [2..3]
 a5(r91): [20..33] [2..3]
 a6(r100): [2..33]
 a7(r80): [20..33] [2..3]
 a8(r105): [4..5]
 a9(r77): [6..7]
 a10(r98): [8..19]
 a11(r99): [8..19]
 a12(r115): [30..31] [2..17]
 a13(r68): [12..15]
 a14(r69): [12..15]
 a15(r103): [16..17]
 a16(r63): [18..19]
 a26(r113): [24..25]
 a27(r111): [24..27]
 a28(r112): [26..26]
 a29(r110): [28..29]
 a30(r90): [32..33] [20..21]
 a31(r108): [22..23]
 a32(r106): [22..23]
+++Allocating 192 bytes for conflict table (uncompressed size 264)
;; a0(r59,l0) conflicts: a1(r89,l0) a2(r64,l0) a12(r115,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a10(r98,l0) a11(r99,l0) a13(r68,l0) a14(r69,l0) a15(r103,l0) a16(r63,l0) a30(r90,l0) a31(r108,l0) a32(r106,l0) a26(r113,l0) a27(r111,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a1(r89,l0) conflicts: a0(r59,l0) a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a30(r90,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r64,l0) conflicts: a0(r59,l0) a1(r89,l0) a12(r115,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a8(r105,l0) a9(r77,l0) a10(r98,l0) a11(r99,l0) a13(r68,l0) a14(r69,l0) a15(r103,l0) a30(r90,l0) a31(r108,l0) a32(r106,l0) a26(r113,l0) a27(r111,l0) a28(r112,l0) a29(r110,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a3(r81,l0) conflicts: a0(r59,l0) a1(r89,l0) a2(r64,l0) a12(r115,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a30(r90,l0) a31(r108,l0) a32(r106,l0) a26(r113,l0) a27(r111,l0) a28(r112,l0) a29(r110,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a4(r92,l0) conflicts: a0(r59,l0) a1(r89,l0) a2(r64,l0) a12(r115,l0) a3(r81,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a30(r90,l0) a31(r108,l0) a32(r106,l0) a26(r113,l0) a27(r111,l0) a28(r112,l0) a29(r110,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a5(r91,l0) conflicts: a0(r59,l0) a1(r89,l0) a2(r64,l0) a12(r115,l0) a3(r81,l0) a4(r92,l0) a6(r100,l0) a7(r80,l0) a30(r90,l0) a31(r108,l0) a32(r106,l0) a26(r113,l0) a27(r111,l0) a28(r112,l0) a29(r110,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a6(r100,l0) conflicts: a0(r59,l0) a1(r89,l0) a2(r64,l0) a12(r115,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a7(r80,l0) a8(r105,l0) a9(r77,l0) a10(r98,l0) a11(r99,l0) a13(r68,l0) a14(r69,l0) a15(r103,l0) a16(r63,l0) a30(r90,l0) a31(r108,l0) a32(r106,l0) a26(r113,l0) a27(r111,l0) a28(r112,l0) a29(r110,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a7(r80,l0) conflicts: a0(r59,l0) a1(r89,l0) a2(r64,l0) a12(r115,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a30(r90,l0) a31(r108,l0) a32(r106,l0) a26(r113,l0) a27(r111,l0) a28(r112,l0) a29(r110,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a8(r105,l0) conflicts: a2(r64,l0) a12(r115,l0) a6(r100,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a9(r77,l0) conflicts: a2(r64,l0) a12(r115,l0) a6(r100,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a10(r98,l0) conflicts: a0(r59,l0) a2(r64,l0) a12(r115,l0) a6(r100,l0) a11(r99,l0) a13(r68,l0) a14(r69,l0) a15(r103,l0) a16(r63,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a11(r99,l0) conflicts: a0(r59,l0) a2(r64,l0) a12(r115,l0) a6(r100,l0) a10(r98,l0) a13(r68,l0) a14(r69,l0) a15(r103,l0) a16(r63,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a12(r115,l0) conflicts: a0(r59,l0) a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a8(r105,l0) a9(r77,l0) a10(r98,l0) a11(r99,l0) a13(r68,l0) a14(r69,l0) a15(r103,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a13(r68,l0) conflicts: a0(r59,l0) a2(r64,l0) a12(r115,l0) a6(r100,l0) a10(r98,l0) a11(r99,l0) a14(r69,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r69,l0) conflicts: a0(r59,l0) a2(r64,l0) a12(r115,l0) a6(r100,l0) a10(r98,l0) a11(r99,l0) a13(r68,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r103,l0) conflicts: a0(r59,l0) a2(r64,l0) a12(r115,l0) a6(r100,l0) a10(r98,l0) a11(r99,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a16(r63,l0) conflicts: a0(r59,l0) a6(r100,l0) a10(r98,l0) a11(r99,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r113,l0) conflicts: a0(r59,l0) a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a27(r111,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a27(r111,l0) conflicts: a0(r59,l0) a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a26(r113,l0) a28(r112,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a28(r112,l0) conflicts: a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a27(r111,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a29(r110,l0) conflicts: a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a30(r90,l0) conflicts: a0(r59,l0) a1(r89,l0) a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a31(r108,l0) conflicts: a0(r59,l0) a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a32(r106,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a32(r106,l0) conflicts: a0(r59,l0) a2(r64,l0) a3(r81,l0) a4(r92,l0) a5(r91,l0) a6(r100,l0) a7(r80,l0) a31(r108,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a12(r115)<->a29(r110)@125:shuffle
  cp1:a28(r112)<->a29(r110)@1000:constraint
  cp2:a27(r111)<->a29(r110)@125:shuffle
  cp3:a27(r111)<->a32(r106)@123:shuffle
  cp4:a7(r80)<->a8(r105)@6:shuffle
  cp5:a2(r64)<->a16(r63)@27:shuffle
  regions=2, blocks=17, points=34
    allocnos=33 (big 0), copies=6, conflicts=0, ranges=35

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 16 15 12 14 13 11 10 9 8 7 6 5 4 3 2
    all: 0r59 1r89 2r64 3r81 4r92 5r91 6r100 7r80 8r105 9r77 10r98 11r99 12r115 13r68 14r69 15r103 16r63 26r113 27r111 28r112 29r110 30r90 31r108 32r106
    modified regnos: 59 63 64 68 69 77 80 81 89 90 91 92 98 99 100 103 105 106 108 110 111 112 113 115
    border:
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@91574
          2:( 1-6 37-44)@19934
            3:( 2-6 37-44)@55764
              4:( 3 6 37-44)@83262
                5:( 3 6 41-44)@9328
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a1r89 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a2r64 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a3r81 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a4r92 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a5r91 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a6r100 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a7r80 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a8r105 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a9r77 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a10r98 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a11r99 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a12r115 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a13r68 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a14r69 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a15r103 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a16r63 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a26r113 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a27r111 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a28r112 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a29r110 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a30r90 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a31r108 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a32r106 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a9(r77,l0)(cost 0)
      Pushing a8(r105,l0)(cost 0)
      Pushing a16(r63,l0)(cost 0)
      Pushing a15(r103,l0)(cost 0)
      Pushing a13(r68,l0)(cost 0)
      Pushing a14(r69,l0)(cost 0)
        Making a12(r115,l0) colorable
        Making a10(r98,l0) colorable
        Making a11(r99,l0) colorable
      Pushing a11(r99,l0)(cost 2332)
      Pushing a10(r98,l0)(cost 2332)
      Pushing a28(r112,l0)(cost 0)
      Pushing a32(r106,l0)(cost 0)
      Pushing a31(r108,l0)(cost 0)
        Making a3(r81,l0) colorable
        Making a4(r92,l0) colorable
        Making a5(r91,l0) colorable
        Making a7(r80,l0) colorable
      Pushing a7(r80,l0)(cost 3216)
      Pushing a4(r92,l0)(cost 3432)
        Making a0(r59,l0) colorable
      Pushing a1(r89,l0)(cost 0)
        Making a2(r64,l0) colorable
        Making a6(r100,l0) colorable
      Pushing a2(r64,l0)(cost 4706)
      Pushing a26(r113,l0)(cost 0)
      Pushing a12(r115,l0)(cost 8516)
      Pushing a0(r59,l0)(cost 9005)
      Pushing a30(r90,l0)(cost 0)
      Pushing a27(r111,l0)(cost 0)
      Pushing a29(r110,l0)(cost 0)
      Pushing a5(r91,l0)(cost 6216)
      Pushing a6(r100,l0)(cost 19404)
      Pushing a3(r81,l0)(cost 13018)
      Popping a3(r81,l0)  -- assign reg 2
      Popping a6(r100,l0)  -- assign reg 3
      Popping a5(r91,l0)  -- assign reg 4
      Popping a29(r110,l0)  -- assign reg 0
      Popping a27(r111,l0)  -- assign reg 1
      Popping a30(r90,l0)  -- assign reg 1
      Popping a0(r59,l0)  -- assign reg 6
      Popping a12(r115,l0)  -- assign reg 41
      Popping a26(r113,l0)  -- assign reg 5
      Popping a2(r64,l0)  -- assign reg 42
      Popping a1(r89,l0)  -- assign reg 0
      Popping a4(r92,l0)  -- assign reg 37
      Popping a7(r80,l0)  -- assign reg 38
      Popping a31(r108,l0)  -- assign reg 5
      Popping a32(r106,l0)  -- assign reg 1
      Popping a28(r112,l0)  -- assign reg 0
      Popping a10(r98,l0)  -- assign reg 43
      Popping a11(r99,l0)  -- assign reg 44
      Popping a14(r69,l0)  -- assign reg 0
      Popping a13(r68,l0)  -- assign reg 1
      Popping a15(r103,l0)  -- assign reg 0
      Popping a16(r63,l0)  -- assign reg 0
      Popping a8(r105,l0)  -- assign reg 38
      Popping a9(r77,l0)  -- assign reg 0
Disposition:
    0:r59  l0     6   16:r63  l0     0    2:r64  l0    42   13:r68  l0     1
   14:r69  l0     0    9:r77  l0     0    7:r80  l0    38    3:r81  l0     2
    1:r89  l0     0   30:r90  l0     1    5:r91  l0     4    4:r92  l0    37
   10:r98  l0    43   11:r99  l0    44    6:r100 l0     3   15:r103 l0     0
    8:r105 l0    38   32:r106 l0     1   31:r108 l0     5   29:r110 l0     0
   27:r111 l0     1   28:r112 l0     0   26:r113 l0     5   12:r115 l0    41
New iteration of spill/restore move
+++Costs: overall 5187, reg 5187, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int hash(int*, int, collision_table*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={8d,7u} r1={9d,4u} r2={9d,3u} r4={10d,5u} r5={11d,6u} r6={1d,16u} r7={1d,21u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1d,15u} r17={20d,6u} r18={5d} r19={5d} r20={1d,16u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r59={2d,3u} r63={1d,1u} r64={1d,5u} r68={1d,2u} r69={1d,2u} r77={1d,1u} r80={1d,2u} r81={2d,4u} r89={1d,2u} r90={1d,2u} r91={1d,3u} r92={1d,3u} r98={1d,3u} r99={1d,3u} r100={1d,15u,2e} r103={1d,1u} r105={1d,1u} r106={1d,1u} r108={1d,1u} r110={1d,2u} r111={1d,4u} r112={1d} r113={1d,1u} r115={2d,2u} 
;;    total ref usage 463{298d,163u,2e} in 85{80 regular + 5 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 2177, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 63 64 68 69 98 99 100 103 115
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 98 [ ints ])
        (reg:DI 5 di [ ints ])) tiles.cpp:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ ints ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 99 [ num_ints ])
        (reg:SI 4 si [ num_ints ])) tiles.cpp:172 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_ints ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 100 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (parallel [
            (set (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                        (const_int 24 [0x18])) [0 ct_7(D)->calls+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                            (const_int 24 [0x18])) [0 ct_7(D)->calls+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:176 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 9 8 10 2 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:177 89 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx)
        (mem/j:DI (reg/v/f:DI 100 [ ct ]) [0 ct_7(D)->m+0 S8 A64])) tiles.cpp:177 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (reg/v:SI 99 [ num_ints ])) tiles.cpp:177 89 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/v/f:DI 98 [ ints ])) tiles.cpp:177 87 {*movdi_internal_rex64}
     (nil))
(call_insn 13 12 134 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:177 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(debug_insn 134 13 14 2 (var_location:SI D#7 (reg:SI 0 ax)) -1
     (nil))
(insn 14 134 15 2 (set (reg/v:SI 59 [ j ])
        (reg:SI 0 ax)) tiles.cpp:177 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(debug_insn 15 14 16 2 (var_location:SI j (debug_expr:SI D#7)) tiles.cpp:177 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 2 cx)
        (const_int 457 [0x1c9])) tiles.cpp:178 89 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 1 dx)
        (const_int 2147483647 [0x7fffffff])) tiles.cpp:178 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg:SI 4 si)
        (reg/v:SI 99 [ num_ints ])) tiles.cpp:178 89 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/v/f:DI 98 [ ints ])) tiles.cpp:178 87 {*movdi_internal_rex64}
     (nil))
(call_insn 20 19 21 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:178 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(insn 21 20 22 2 (set (reg:SI 63 [ D.26025 ])
        (reg:SI 0 ax)) tiles.cpp:178 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 22 21 23 2 (set (reg/v:DI 64 [ ccheck ])
        (sign_extend:DI (reg:SI 63 [ D.26025 ]))) tiles.cpp:178 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 63 [ D.26025 ])
        (nil)))
(debug_insn 23 22 24 2 (var_location:DI ccheck (reg/v:DI 64 [ ccheck ])) tiles.cpp:178 -1
     (nil))
(insn 24 23 25 2 (set (reg:DI 115 [ D.26024 ])
        (sign_extend:DI (reg/v:SI 59 [ j ]))) tiles.cpp:179 149 {*extendsidi2_rex64}
     (nil))
(note 25 24 26 2 NOTE_INSN_DELETED)
(insn 26 25 27 2 (set (reg/f:DI 103 [ ct_7(D)->data ])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])) tiles.cpp:179 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])
        (nil)))
(insn 27 26 28 2 (set (reg/f:DI 68 [ D.26026 ])
        (plus:DI (mult:DI (reg:DI 115 [ D.26024 ])
                (const_int 8 [0x8]))
            (reg/f:DI 103 [ ct_7(D)->data ]))) tiles.cpp:179 267 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 103 [ ct_7(D)->data ])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 69 [ D.26024 ])
        (mem:DI (reg/f:DI 68 [ D.26026 ]) [0 *_22+0 S8 A64])) tiles.cpp:179 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 69 [ D.26024 ])
            (reg/v:DI 64 [ ccheck ]))) tiles.cpp:179 8 {*cmpdi_1}
     (nil))
(jump_insn 30 29 31 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) tiles.cpp:179 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
            (nil)))
 -> 35)
;;  succ:       3 [19.9%]  (FALLTHRU)
;;              4 [80.1%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 68 69 98 99 100 115

;; basic block 3, loop depth 0, count 0, freq 433, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [19.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u40(6){ }u41(7){ }u42(16){ }u43(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags]
(note 31 30 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 135 3 (parallel [
            (set (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                        (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                            (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:180 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 100 [ ct ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 135 32 136 3 (set (pc)
        (label_ref 117)) 650 {jump}
     (nil)
 -> 117)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 136 135 35)
;; basic block 4, loop depth 0, count 0, freq 1743, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [80.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u46(6){ }u47(7){ }u48(16){ }u49(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 68 69 98 99 100 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 17 [flags]
(code_label 35 136 36 4 37 "" [1 uses])
(note 36 35 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 69 [ D.26024 ])
            (const_int -1 [0xffffffffffffffff]))) tiles.cpp:181 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.26024 ])
        (nil)))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) tiles.cpp:181 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
            (nil)))
 -> 44)
;;  succ:       5 [19.9%]  (FALLTHRU)
;;              6 [80.1%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 68 98 99 100 115

;; basic block 5, loop depth 0, count 0, freq 347, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 [19.9%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u52(6){ }u53(7){ }u54(16){ }u55(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 68 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 68 100
;; lr  def 	 17 [flags]
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (parallel [
            (set (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                        (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                            (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:182 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 100 [ ct ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 137 5 (set (mem:DI (reg/f:DI 68 [ D.26026 ]) [0 *_22+0 S8 A64])
        (reg/v:DI 64 [ ccheck ])) tiles.cpp:183 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ D.26026 ])
        (expr_list:REG_DEAD (reg/v:DI 64 [ ccheck ])
            (nil))))
(jump_insn 137 41 138 5 (set (pc)
        (label_ref 117)) 650 {jump}
     (nil)
 -> 117)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 138 137 44)
;; basic block 6, loop depth 0, count 0, freq 1396, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [80.1%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u60(6){ }u61(7){ }u62(16){ }u63(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 98 99 100 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags]
(code_label 44 138 45 6 39 "" [1 uses])
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/j:SI (plus:DI (reg/v/f:DI 100 [ ct ])
                    (const_int 16 [0x10])) [0 ct_7(D)->safe+0 S4 A64])
            (const_int 0 [0]))) tiles.cpp:184 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 48 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) tiles.cpp:184 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3898 [0xf3a])
            (nil)))
 -> 52)
;;  succ:       7 [61.0%]  (FALLTHRU)
;;              8 [39.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 98 99 100 115

;; basic block 7, loop depth 0, count 0, freq 852, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 [61.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u66(6){ }u67(7){ }u68(16){ }u69(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags]
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 139 7 (parallel [
            (set (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                        (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                            (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:185 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 100 [ ct ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 139 49 140 7 (set (pc)
        (label_ref 117)) 650 {jump}
     (nil)
 -> 117)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 140 139 52)
;; basic block 8, loop depth 0, count 0, freq 544, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 [39.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u72(6){ }u73(7){ }u74(16){ }u75(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 98 99 100 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 99 100
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 77 80 81 91 92 105
(code_label 52 140 53 8 40 "" [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:187 89 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:DI 1 dx)
        (const_int 536870911 [0x1fffffff])) tiles.cpp:187 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 8 (set (reg:SI 4 si)
        (reg/v:SI 99 [ num_ints ])) tiles.cpp:187 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 99 [ num_ints ])
        (nil)))
(insn 57 56 58 8 (set (reg:DI 5 di)
        (reg/v/f:DI 98 [ ints ])) tiles.cpp:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 98 [ ints ])
        (nil)))
(call_insn 58 57 59 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:187 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(insn 59 58 60 8 (set (reg:SI 77 [ D.26025 ])
        (reg:SI 0 ax)) tiles.cpp:187 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(note 60 59 61 8 NOTE_INSN_DELETED)
(insn 61 60 62 8 (set (reg:SI 105 [ D.26025 ])
        (plus:SI (mult:SI (reg:SI 77 [ D.26025 ])
                (const_int 2 [0x2]))
            (const_int 1 [0x1]))) tiles.cpp:187 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 77 [ D.26025 ])
        (nil)))
(insn 62 61 63 8 (set (reg/v:DI 80 [ h2 ])
        (sign_extend:DI (reg:SI 105 [ D.26025 ]))) tiles.cpp:187 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 105 [ D.26025 ])
        (nil)))
(debug_insn 63 62 64 8 (var_location:DI h2 (reg/v:DI 80 [ h2 ])) tiles.cpp:187 -1
     (nil))
(debug_insn 64 63 65 8 (var_location:SI i (const_int 0 [0])) tiles.cpp:188 -1
     (nil))
(insn 65 64 66 8 (set (reg:DI 92 [ D.26024 ])
        (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 8 (set (reg:DI 91 [ D.26024 ])
        (mem/j:DI (reg/v/f:DI 100 [ ct ]) [0 ct_7(D)->m+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 141 8 (parallel [
            (set (reg:DI 81 [ ivtmp.112 ])
                (plus:DI (reg:DI 92 [ D.26024 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 141 67 142 8 (set (pc)
        (label_ref 97)) tiles.cpp:189 650 {jump}
     (nil)
 -> 97)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 80 81 91 92 100 115

(barrier 142 141 109)
;; basic block 9, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       15 [100.0%]  (LOOP_EXIT)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u91(6){ }u92(7){ }u93(16){ }u94(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 109 142 70 9 43 "" [1 uses])
(note 70 109 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 71 70 72 9 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b82f8519da8 *.LC0>)) -1
     (nil))
(insn 72 71 73 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b82f8519da8 *.LC0>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 9 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (nil))
(insn 74 73 75 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 91 {*movqi_internal}
     (nil))
(call_insn 75 74 76 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x2b82f0908600 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_BR_PRED (use (reg:SI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
(insn 76 75 77 9 (set (reg:SI 5 di)
        (const_int 0 [0])) tiles.cpp:193 89 {*movsi_internal}
     (nil))
(call_insn 77 76 78 9 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b82f08ee700 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) tiles.cpp:193 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 78 77 145)
;; basic block 10, loop depth 1, count 0, freq 9896, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       14 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u101(6){ }u102(7){ }u103(16){ }u104(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 80 81 91 92 100 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 100 111
;; lr  def 	 17 [flags] 89 90 106 108
(code_label 145 78 79 10 45 "" [1 uses])
(note 79 145 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 10 (set (reg:DI 106 [ D.26027 ])
        (sign_extend:DI (subreg:SI (reg:DI 111) 0))) tiles.cpp:194 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:DI 111)
        (nil)))
(note 81 80 82 10 NOTE_INSN_DELETED)
(insn 82 81 83 10 (set (reg/f:DI 108 [ ct_7(D)->data ])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])) tiles.cpp:194 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])
        (nil)))
(insn 83 82 84 10 (set (reg/f:DI 89 [ D.26026 ])
        (plus:DI (mult:DI (reg:DI 106 [ D.26027 ])
                (const_int 8 [0x8]))
            (reg/f:DI 108 [ ct_7(D)->data ]))) tiles.cpp:194 267 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 108 [ ct_7(D)->data ])
        (expr_list:REG_DEAD (reg:DI 106 [ D.26027 ])
            (nil))))
(insn 84 83 85 10 (set (reg:DI 90 [ D.26024 ])
        (mem:DI (reg/f:DI 89 [ D.26026 ]) [0 *_55+0 S8 A64])) tiles.cpp:194 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 90 [ D.26024 ])
            (reg/v:DI 64 [ ccheck ]))) tiles.cpp:194 8 {*cmpdi_1}
     (nil))
(jump_insn 86 85 87 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) tiles.cpp:194 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 225 [0xe1])
            (nil)))
 -> 117)
;;  succ:       16 [2.2%]  (LOOP_EXIT)
;;              11 [97.8%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 80 81 89 90 91 92 100

;; basic block 11, loop depth 1, count 0, freq 9673, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 [97.8%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u114(6){ }u115(7){ }u116(16){ }u117(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 80 81 89 90 91 92 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81 90
;; lr  def 	 17 [flags] 81
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (parallel [
            (set (reg:DI 81 [ ivtmp.112 ])
                (plus:DI (reg:DI 81 [ ivtmp.112 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 89 88 90 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 90 [ D.26024 ])
            (const_int -1 [0xffffffffffffffff]))) tiles.cpp:195 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 90 [ D.26024 ])
        (nil)))
(jump_insn 90 89 91 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) tiles.cpp:195 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil)))
 -> 95)
;;  succ:       12 [2.2%]  (FALLTHRU,LOOP_EXIT)
;;              13 [97.8%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 80 81 89 91 92 100

;; basic block 12, loop depth 0, count 0, freq 218, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [2.2%]  (FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u121(6){ }u122(7){ }u123(16){ }u124(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 89
;; lr  def 	
(note 91 90 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 143 12 (set (mem:DI (reg/f:DI 89 [ D.26026 ]) [0 *_78+0 S8 A64])
        (reg/v:DI 64 [ ccheck ])) tiles.cpp:195 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 89 [ D.26026 ])
        (expr_list:REG_DEAD (reg/v:DI 64 [ ccheck ])
            (nil))))
(jump_insn 143 92 144 12 (set (pc)
        (label_ref 117)) tiles.cpp:195 650 {jump}
     (nil)
 -> 117)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 144 143 95)
;; basic block 13, loop depth 1, count 0, freq 9455, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11 [97.8%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u127(6){ }u128(7){ }u129(16){ }u130(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 80 81 91 92 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 115
(code_label 95 144 96 13 42 "" [1 uses])
(note 96 95 131 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 131 96 97 13 (set (reg:DI 115 [ D.26024 ])
        (sign_extend:DI (reg/v:SI 59 [ j ]))) 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 59 [ j ])
        (nil)))
;;  succ:       14 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 80 81 91 92 100 115

;; basic block 14, loop depth 1, count 0, freq 10000, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u132(6){ }u133(7){ }u134(16){ }u135(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 80 81 91 92 100 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 80 81 91 92 100 115
;; lr  def 	 17 [flags] 59 110 111 112 113
(code_label 97 131 98 14 41 "" [1 uses])
(note 98 97 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 100 98 101 14 (var_location:SI j (debug_expr:SI D#7)) -1
     (nil))
(debug_insn 101 100 102 14 (var_location:SI i (minus:SI (subreg:SI (reg:DI 81 [ ivtmp.112 ]) 0)
        (subreg:SI (reg:DI 92 [ D.26024 ]) 0))) tiles.cpp:189 -1
     (nil))
(insn 102 101 104 14 (set (mem/j:DI (plus:DI (reg/v/f:DI 100 [ ct ])
                (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])
        (reg:DI 81 [ ivtmp.112 ])) tiles.cpp:190 87 {*movdi_internal_rex64}
     (nil))
(insn 104 102 105 14 (parallel [
            (set (reg:DI 110 [ D.26024 ])
                (plus:DI (reg:DI 115 [ D.26024 ])
                    (reg/v:DI 80 [ h2 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:191 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ D.26024 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 105 104 133 14 (parallel [
            (set (reg:DI 112)
                (div:DI (reg:DI 110 [ D.26024 ])
                    (reg:DI 91 [ D.26024 ])))
            (set (reg:DI 111)
                (mod:DI (reg:DI 110 [ D.26024 ])
                    (reg:DI 91 [ D.26024 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:191 367 {*divmoddi4}
     (expr_list:REG_DEAD (reg:DI 110 [ D.26024 ])
        (expr_list:REG_UNUSED (reg:DI 112)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(debug_insn 133 105 107 14 (var_location:SI D#7 (subreg:SI (reg:DI 111) 0)) -1
     (nil))
(insn 107 133 108 14 (set (reg/v:SI 59 [ j ])
        (subreg:SI (reg:DI 111) 0)) tiles.cpp:191 89 {*movsi_internal}
     (nil))
(debug_insn 108 107 110 14 (var_location:SI j (subreg:SI (reg:DI 111) 0)) tiles.cpp:191 -1
     (nil))
(insn 110 108 111 14 (parallel [
            (set (reg:DI 113 [ D.26028 ])
                (minus:DI (reg:DI 81 [ ivtmp.112 ])
                    (reg:DI 92 [ D.26024 ])))
            (clobber (reg:CC 17 flags))
        ]) 310 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 111 110 112 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 91 [ D.26024 ])
            (reg:DI 113 [ D.26028 ]))) tiles.cpp:193 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 113 [ D.26028 ])
        (nil)))
(jump_insn 112 111 146 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 145)
            (pc))) tiles.cpp:193 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil)))
 -> 145)
;;  succ:       15 [0.0%]  (FALLTHRU)
;;              10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 64 80 81 91 92 100 111

;; basic block 15, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 14, next block 16, flags: (NEW, RTL, MODIFIED)
;;  pred:       14 [0.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 146 112 147 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 147 146 148 15 (set (pc)
        (label_ref 109)) 650 {jump}
     (nil)
 -> 109)
;;  succ:       9 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 148 147 117)
;; basic block 16, loop depth 0, count 0, freq 2173, maybe hot
;;  prev block 15, next block 1, flags: (RTL)
;;  pred:       7 [100.0%] 
;;              3 [100.0%] 
;;              5 [100.0%] 
;;              10 [2.2%]  (LOOP_EXIT)
;;              12 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u154(6){ }u155(7){ }u156(16){ }u157(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax]
(code_label 117 148 118 16 38 "" [5 uses])
(note 118 117 119 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(debug_insn 119 118 124 16 (var_location:SI j (debug_expr:SI D#7)) -1
     (nil))
(insn 124 119 127 16 (set (reg/i:SI 0 ax)
        (reg/v:SI 59 [ j ])) tiles.cpp:199 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 59 [ j ])
        (nil)))
(insn 127 124 0 16 (use (reg/i:SI 0 ax)) tiles.cpp:199 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles(int*, int, collision_table*, float*, int, int*, int) (_Z5tilesPiiP15collision_tablePfiS_i, funcdef_no=1062, decl_uid=23694, cgraph_uid=306)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 29 (  1.3)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 108: def dominates all uses has unique first use
Reg 109 uninteresting (no unique first use)
Reg 110: def dominates all uses has unique first use
Reg 111: def dominates all uses has unique first use
Reg 112 uninteresting (no unique first use)
Reg 113: def dominates all uses has unique first use
Ignoring reg 114, has equiv memory
Reg 62: def dominates all uses has unique first use
Reg 117 uninteresting
Reg 120: local to bb 5 def dominates all uses has unique first use
Reg 121 uninteresting
Reg 102: def dominates all uses has unique first use
Reg 129 uninteresting
Reg 77: def dominates all uses has unique first use
Reg 131 uninteresting
Reg 66 uninteresting
Ignoring reg 133, has equiv memory
Reg 134 uninteresting
Reg 142 uninteresting
Reg 71: def dominates all uses has unique first use
Reg 162 uninteresting (no unique first use)
Reg 78 uninteresting (no unique first use)
Reg 79 uninteresting (no unique first use)
Reg 160 uninteresting
Ignoring reg 94, has equiv memory
Reg 62 not local to one basic block
Reg 71 not local to one basic block
Reg 77 not local to one basic block
Reg 102 not local to one basic block
Reg 108 not local to one basic block
Reg 110 not local to one basic block
Reg 111 not local to one basic block
Reg 113 not local to one basic block
Examining insn 40, def for 120
  all ok
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 17 16 15 14 13 12 20
;;
;; Loop 3
;;  header 12, latch 15
;;  depth 2, outer 2
;;  nodes: 12 15 14 13
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 11 7 }
;; 7 succs { 21 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 6 }
;; 11 succs { 19 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 12 16 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 21 }
;; 19 succs { 20 17 }
;; 20 succs { 12 }
;; 21 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 94: (insn_list:REG_DEP_TRUE 158 (nil))
init_insns for 114: (insn_list:REG_DEP_TRUE 10 (nil))
init_insns for 133: (insn_list:REG_DEP_TRUE 78 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 141 (nil))
Reg 162 had equivalence, but can't be eliminated

Pass 0 for finding pseudo/allocno costs

    a72 (r164,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a51 (r164,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a34 (r164,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a50 (r163,l3) best DIREG, allocno DIREG
    a33 (r163,l2) best DIREG, allocno DIREG
    a10 (r163,l0) best DIREG, allocno DIREG
    a49 (r162,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a32 (r162,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a38 (r160,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a52 (r159,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a57 (r155,l3) best AREG, allocno AREG
    a55 (r154,l3) best DREG, allocno DREG
    a58 (r152,l3) best AREG, allocno AREG
    a59 (r151,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a61 (r149,l3) best AREG, allocno AREG
    a60 (r148,l3) best DREG, allocno DREG
    a62 (r146,l3) best AREG, allocno AREG
    a3 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r135,l0) best DREG, allocno DREG
    a12 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a73 (r133,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a75 (r131,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a16 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a21 (r122,l0) best DREG, allocno DREG
    a22 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r120,l0) best DIREG, allocno DIREG
    a24 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a23 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r113,l0) best SIREG, allocno SIREG
    a71 (r112,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a48 (r112,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a31 (r112,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a70 (r111,l1) best CREG, allocno CREG
    a18 (r111,l0) best CREG, allocno CREG
    a69 (r110,l1) best DREG, allocno DREG
    a47 (r110,l3) best DREG, allocno DREG
    a30 (r110,l2) best DREG, allocno DREG
    a9 (r110,l0) best DREG, allocno DREG
    a68 (r109,l1) best SIREG, allocno SIREG
    a46 (r109,l3) best SIREG, allocno SIREG
    a29 (r109,l2) best SIREG, allocno SIREG
    a8 (r109,l0) best SIREG, allocno SIREG
    a67 (r108,l1) best DIREG, allocno DIREG
    a6 (r108,l0) best DIREG, allocno DIREG
    a66 (r102,l1) best SSE_REGS, allocno SSE_REGS
    a17 (r102,l0) best SSE_REGS, allocno SSE_REGS
    a39 (r96,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a45 (r95,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a28 (r95,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a37 (r94,l2) best AREG, allocno AREG
    a65 (r92,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a44 (r91,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a27 (r91,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a54 (r82,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a53 (r79,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a56 (r78,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a64 (r77,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a43 (r72,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a36 (r72,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a42 (r71,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a26 (r71,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a74 (r66,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a41 (r63,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a35 (r63,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a63 (r62,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a40 (r62,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a25 (r62,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r162,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,13039 SSE_REGS:52,13039 MMX_REGS:52,13039 FP_TOP_SSE_REGS:262140,63651460 FP_SECOND_SSE_REGS:262140,63651460 FLOAT_SSE_REGS:262140,63651460 FLOAT_INT_REGS:262140,63651460 INT_SSE_REGS:52,13039 FLOAT_INT_SSE_REGS:262140,63651460 ALL_REGS:262140,63651460 MEM:16,3965
  a1(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,2496 SSE_REGS:52,2496 MMX_REGS:52,2496 FP_TOP_SSE_REGS:262140,4262140 FP_SECOND_SSE_REGS:262140,4262140 FLOAT_SSE_REGS:262140,4262140 FLOAT_INT_REGS:262140,4262140 INT_SSE_REGS:52,2496 FLOAT_INT_SSE_REGS:262140,4262140 ALL_REGS:262140,4262140 MEM:16,627
  a2(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,12428 SSE_REGS:52,12428 MMX_REGS:52,12428 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,12428 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,2872
  a3(r142,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a4(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,1560 SSE_REGS:364,1560 MMX_REGS:364,1560 FP_TOP_SSE_REGS:1834980,3834980 FP_SECOND_SSE_REGS:1834980,3834980 FLOAT_SSE_REGS:1834980,3834980 FLOAT_INT_REGS:1834980,3834980 INT_SSE_REGS:364,1560 FLOAT_INT_SSE_REGS:1834980,3834980 ALL_REGS:1834980,3834980 MEM:104,427
  a5(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1885 SSE_REGS:52,1885 MMX_REGS:52,1885 FP_TOP_SSE_REGS:262140,5342285 FP_SECOND_SSE_REGS:262140,5342285 FLOAT_SSE_REGS:262140,5342285 FLOAT_INT_REGS:262140,5342285 INT_SSE_REGS:52,1885 FLOAT_INT_SSE_REGS:262140,5342285 ALL_REGS:262140,5342285 MEM:16,486
  a6(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a7(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a8(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:156,19331 SSE_REGS:156,19331 MMX_REGS:156,19331 FP_TOP_SSE_REGS:786420,4786420 FP_SECOND_SSE_REGS:786420,4786420 FLOAT_SSE_REGS:786420,4786420 FLOAT_INT_REGS:786420,4786420 INT_SSE_REGS:156,19331 FLOAT_INT_SSE_REGS:786420,4786420 ALL_REGS:786420,4786420 MEM:48,4473
  a9(r110,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a10(r163,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a11(r135,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a12(r134,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a13(r164,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a14(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,6162 SSE_REGS:52,6162 MMX_REGS:52,6162 FP_TOP_SSE_REGS:262140,15582720 FP_SECOND_SSE_REGS:262140,15582720 FLOAT_SSE_REGS:262140,15582720 FLOAT_INT_REGS:262140,15582720 INT_SSE_REGS:52,6162 FLOAT_INT_SSE_REGS:262140,15582720 ALL_REGS:262140,15582720 MEM:16,1614
  a15(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,298
  a16(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a17(r102,l0) costs: AREG:52,1462 DREG:52,1462 CREG:52,1462 BREG:52,1462 SIREG:52,1462 DIREG:52,1462 AD_REGS:52,1462 Q_REGS:52,1462 NON_Q_REGS:52,1462 INDEX_REGS:52,1462 GENERAL_REGS:52,1462 LEGACY_REGS:52,1462 CLOBBERED_REGS:52,1462 FP_TOP_REG:84,2246 FP_SECOND_REG:84,2246 FLOAT_REGS:84,2246 SSE_FIRST_REG:0,188 SSE_REGS:0,188 MMX_REGS:68,1854 FP_TOP_SSE_REGS:84,2246 FP_SECOND_SSE_REGS:84,2246 FLOAT_SSE_REGS:84,2246 FLOAT_INT_REGS:84,2246 INT_SSE_REGS:52,1462 FLOAT_INT_SSE_REGS:84,2246 ALL_REGS:84,2246 MEM:32,972
  a18(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:-4,-4 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a19(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a20(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a21(r122,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a22(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a23(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1048560,1048560 FP_SECOND_SSE_REGS:1048560,1048560 FLOAT_SSE_REGS:1048560,1048560 FLOAT_INT_REGS:1048560,1048560 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1048560,1048560 ALL_REGS:1048560,1048560 MEM:28,28
  a24(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a25(r62,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a26(r71,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,12376 SSE_REGS:0,12376 MMX_REGS:0,12376 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,12376 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,2856
  a27(r91,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1833,1833 SSE_REGS:1833,1833 MMX_REGS:1833,1833 FP_TOP_SSE_REGS:5080145,5080145 FP_SECOND_SSE_REGS:5080145,5080145 FLOAT_SSE_REGS:5080145,5080145 FLOAT_INT_REGS:5080145,5080145 INT_SSE_REGS:1833,1833 FLOAT_INT_SSE_REGS:5080145,5080145 ALL_REGS:5080145,5080145 MEM:470,470
  a28(r95,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:611,611
  a29(r109,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,19175 SSE_REGS:611,19175 MMX_REGS:611,19175 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:611,19175 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:141,4425
  a30(r110,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a31(r112,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1196,1196 SSE_REGS:1196,1196 MMX_REGS:1196,1196 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1196,1196 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:323,323
  a32(r162,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,12987 SSE_REGS:611,12987 MMX_REGS:611,12987 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:611,12987 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:141,3949
  a33(r163,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,25337 SSE_REGS:585,25337 MMX_REGS:585,25337 FP_TOP_SSE_REGS:1000000,125778640 FP_SECOND_SSE_REGS:1000000,125778640 FLOAT_SSE_REGS:1000000,125778640 FLOAT_INT_REGS:1000000,125778640 INT_SSE_REGS:585,25337 FLOAT_INT_SSE_REGS:1000000,125778640 ALL_REGS:1000000,125778640 MEM:180,7796
  a34(r164,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,12961 SSE_REGS:585,12961 MMX_REGS:585,12961 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:585,12961 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:180,3988
  a35(r63,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,87217 SSE_REGS:585,87217 MMX_REGS:585,87217 FP_TOP_SSE_REGS:1000000,253557280 FP_SECOND_SSE_REGS:1000000,253557280 FLOAT_SSE_REGS:1000000,253557280 FLOAT_INT_REGS:1000000,253557280 INT_SSE_REGS:585,87217 FLOAT_INT_SSE_REGS:1000000,253557280 ALL_REGS:1000000,253557280 MEM:180,23980
  a36(r72,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,37713 SSE_REGS:585,37713 MMX_REGS:585,37713 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:585,37713 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:180,8748
  a37(r94,l2) costs: AREG:-47,-47 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:376,376
  a38(r160,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:4080145,4080145 FP_SECOND_SSE_REGS:4080145,4080145 FLOAT_SSE_REGS:4080145,4080145 FLOAT_INT_REGS:4080145,4080145 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:4080145,4080145 ALL_REGS:4080145,4080145 MEM:376,376
  a39(r96,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2131070,2131070 FP_SECOND_SSE_REGS:2131070,2131070 FLOAT_SSE_REGS:2131070,2131070 FLOAT_INT_REGS:2131070,2131070 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2131070,2131070 ALL_REGS:2131070,2131070 MEM:329,329
  a40(r62,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a41(r63,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:86632,86632 SSE_REGS:86632,86632 MMX_REGS:86632,86632 FP_TOP_SSE_REGS:252557280,252557280 FP_SECOND_SSE_REGS:252557280,252557280 FLOAT_SSE_REGS:252557280,252557280 FLOAT_INT_REGS:252557280,252557280 INT_SSE_REGS:86632,86632 FLOAT_INT_SSE_REGS:252557280,252557280 ALL_REGS:252557280,252557280 MEM:23800,23800
  a42(r71,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2856,2856
  a43(r72,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:8568,8568
  a44(r91,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a45(r95,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a46(r109,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18564,18564 SSE_REGS:18564,18564 MMX_REGS:18564,18564 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:18564,18564 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:4284,4284
  a47(r110,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a48(r112,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a49(r162,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a50(r163,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:124778640,124778640 FP_SECOND_SSE_REGS:124778640,124778640 FLOAT_SSE_REGS:124778640,124778640 FLOAT_INT_REGS:124778640,124778640 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:124778640,124778640 ALL_REGS:124778640,124778640 MEM:7616,7616
  a51(r164,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a52(r159,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6664,6664
  a53(r79,l3) costs: AREG:1904,1904 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:14280,14280
  a54(r82,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:9996,9996
  a55(r154,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:32194660,32194660 FP_SECOND_SSE_REGS:32194660,32194660 FLOAT_SSE_REGS:32194660,32194660 FLOAT_INT_REGS:32194660,32194660 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:32194660,32194660 ALL_REGS:32194660,32194660 MEM:3808,3808
  a56(r78,l3) costs: AREG:1904,1904 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:36194660,36194660 FP_SECOND_SSE_REGS:36194660,36194660 FLOAT_SSE_REGS:36194660,36194660 FLOAT_INT_REGS:36194660,36194660 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:36194660,36194660 ALL_REGS:36194660,36194660 MEM:14756,14756
  a57(r155,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a58(r152,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a59(r151,l3) costs: AREG:952,952 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3808,3808
  a60(r148,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a61(r149,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a62(r146,l3) costs: AREG:952,952 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:4284,4284
  a63(r62,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a64(r77,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:282,282
  a65(r92,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6110,6110 SSE_REGS:6110,6110 MMX_REGS:6110,6110 FP_TOP_SSE_REGS:15320580,15320580 FP_SECOND_SSE_REGS:15320580,15320580 FLOAT_SSE_REGS:15320580,15320580 FLOAT_INT_REGS:15320580,15320580 INT_SSE_REGS:6110,6110 FLOAT_INT_SSE_REGS:15320580,15320580 ALL_REGS:15320580,15320580 MEM:1598,1598
  a66(r102,l1) costs: AREG:1410,1410 DREG:1410,1410 CREG:1410,1410 BREG:1410,1410 SIREG:1410,1410 DIREG:1410,1410 AD_REGS:1410,1410 Q_REGS:1410,1410 NON_Q_REGS:1410,1410 INDEX_REGS:1410,1410 GENERAL_REGS:1410,1410 LEGACY_REGS:1410,1410 CLOBBERED_REGS:1410,1410 FP_TOP_REG:2162,2162 FP_SECOND_REG:2162,2162 FLOAT_REGS:2162,2162 SSE_FIRST_REG:188,188 SSE_REGS:188,188 MMX_REGS:1786,1786 FP_TOP_SSE_REGS:2162,2162 FP_SECOND_SSE_REGS:2162,2162 FLOAT_SSE_REGS:2162,2162 FLOAT_INT_REGS:2162,2162 INT_SSE_REGS:1410,1410 FLOAT_INT_SSE_REGS:2162,2162 ALL_REGS:2162,2162 MEM:940,940
  a67(r108,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a68(r109,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a69(r110,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a70(r111,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a71(r112,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a72(r164,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a73(r133,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:752,752
  a74(r66,l1) costs: AREG:1786,1786 DREG:1786,1786 CREG:1786,1786 BREG:1786,1786 SIREG:1786,1786 DIREG:1786,1786 AD_REGS:1786,1786 Q_REGS:1786,1786 NON_Q_REGS:1786,1786 INDEX_REGS:1786,1786 GENERAL_REGS:1786,1786 LEGACY_REGS:1786,1786 CLOBBERED_REGS:1786,1786 FP_TOP_REG:3948,3948 FP_SECOND_REG:3948,3948 FLOAT_REGS:3948,3948 SSE_FIRST_REG:-94,-94 SSE_REGS:0,0 MMX_REGS:3196,3196 FP_TOP_SSE_REGS:3948,3948 FP_SECOND_SSE_REGS:3948,3948 FLOAT_SSE_REGS:3948,3948 FLOAT_INT_REGS:3948,3948 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:3948,3948 ALL_REGS:3948,3948 MEM:1504,1504
  a75(r131,l1) costs: AREG:1974,1974 DREG:1974,1974 CREG:1974,1974 BREG:1974,1974 SIREG:1974,1974 DIREG:1974,1974 AD_REGS:1974,1974 Q_REGS:1974,1974 NON_Q_REGS:1974,1974 INDEX_REGS:1974,1974 GENERAL_REGS:1974,1974 LEGACY_REGS:1974,1974 CLOBBERED_REGS:1974,1974 FP_TOP_REG:4136,4136 FP_SECOND_REG:4136,4136 FLOAT_REGS:4136,4136 SSE_FIRST_REG:94,94 SSE_REGS:188,188 MMX_REGS:3384,3384 FP_TOP_SSE_REGS:4136,4136 FP_SECOND_SSE_REGS:4136,4136 FLOAT_SSE_REGS:4136,4136 FLOAT_INT_REGS:4136,4136 INT_SSE_REGS:2632,2632 FLOAT_INT_SSE_REGS:4136,4136 ALL_REGS:4136,4136 MEM:1692,1692


Pass 1 for finding pseudo/allocno costs

    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r163: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r163,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a33 (r163,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r155: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r149: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r135: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r131: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r122: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r120: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r113: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r111: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a70 (r111,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a69 (r110,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a47 (r110,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a30 (r110,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a68 (r109,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a46 (r109,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a29 (r109,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a67 (r108,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r162,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,13039 SSE_REGS:52,13039 MMX_REGS:52,13039 FP_TOP_SSE_REGS:262140,63651460 FP_SECOND_SSE_REGS:262140,63651460 FLOAT_SSE_REGS:262140,63651460 FLOAT_INT_REGS:262140,63651460 INT_SSE_REGS:52,13039 FLOAT_INT_SSE_REGS:262140,63651460 ALL_REGS:262140,63651460 MEM:16,3965
  a1(r95,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,2496 SSE_REGS:52,2496 MMX_REGS:52,2496 FP_TOP_SSE_REGS:262140,4262140 FP_SECOND_SSE_REGS:262140,4262140 FLOAT_SSE_REGS:262140,4262140 FLOAT_INT_REGS:262140,4262140 INT_SSE_REGS:52,2496 FLOAT_INT_SSE_REGS:262140,4262140 ALL_REGS:262140,4262140 MEM:16,627
  a2(r71,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,12428 SSE_REGS:52,12428 MMX_REGS:52,12428 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,12428 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,2872
  a3(r142,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a4(r112,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:364,1560 SSE_REGS:364,1560 MMX_REGS:364,1560 FP_TOP_SSE_REGS:1834980,3834980 FP_SECOND_SSE_REGS:1834980,3834980 FLOAT_SSE_REGS:1834980,3834980 FLOAT_INT_REGS:1834980,3834980 INT_SSE_REGS:364,1560 FLOAT_INT_SSE_REGS:1834980,3834980 ALL_REGS:1834980,3834980 MEM:104,427
  a5(r91,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,1885 SSE_REGS:52,1885 MMX_REGS:52,1885 FP_TOP_SSE_REGS:262140,5342285 FP_SECOND_SSE_REGS:262140,5342285 FLOAT_SSE_REGS:262140,5342285 FLOAT_INT_REGS:262140,5342285 INT_SSE_REGS:52,1885 FLOAT_INT_SSE_REGS:262140,5342285 ALL_REGS:262140,5342285 MEM:16,486
  a6(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a7(r62,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a8(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:156,19331 SSE_REGS:156,19331 MMX_REGS:156,19331 FP_TOP_SSE_REGS:786420,4786420 FP_SECOND_SSE_REGS:786420,4786420 FLOAT_SSE_REGS:786420,4786420 FLOAT_INT_REGS:786420,4786420 INT_SSE_REGS:156,19331 FLOAT_INT_SSE_REGS:786420,4786420 ALL_REGS:786420,4786420 MEM:48,4473
  a9(r110,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,663 SSE_REGS:52,663 MMX_REGS:52,663 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,663 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,157
  a10(r163,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a11(r135,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a12(r134,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a13(r164,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a14(r92,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,6162 SSE_REGS:52,6162 MMX_REGS:52,6162 FP_TOP_SSE_REGS:262140,15582720 FP_SECOND_SSE_REGS:262140,15582720 FLOAT_SSE_REGS:262140,15582720 FLOAT_INT_REGS:262140,15582720 INT_SSE_REGS:52,6162 FLOAT_INT_SSE_REGS:262140,15582720 ALL_REGS:262140,15582720 MEM:16,1614
  a15(r77,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,1262140 FP_SECOND_SSE_REGS:262140,1262140 FLOAT_SSE_REGS:262140,1262140 FLOAT_INT_REGS:262140,1262140 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,1262140 ALL_REGS:262140,1262140 MEM:16,298
  a16(r129,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a17(r102,l0) costs: AREG:52,1462 DREG:52,1462 CREG:52,1462 BREG:52,1462 SIREG:52,1462 DIREG:52,1462 AD_REGS:52,1462 Q_REGS:52,1462 NON_Q_REGS:52,1462 INDEX_REGS:52,1462 GENERAL_REGS:52,1462 LEGACY_REGS:52,1462 CLOBBERED_REGS:52,1462 FP_TOP_REG:84,2246 FP_SECOND_REG:84,2246 FLOAT_REGS:84,2246 SSE_REGS:0,188 MMX_REGS:68,1854 FP_TOP_SSE_REGS:84,2246 FP_SECOND_SSE_REGS:84,2246 FLOAT_SSE_REGS:84,2246 FLOAT_INT_REGS:84,2246 INT_SSE_REGS:52,1462 FLOAT_INT_SSE_REGS:84,2246 ALL_REGS:84,2246 MEM:32,972
  a18(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:-4,-4 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,1274 SSE_REGS:52,1274 MMX_REGS:52,1274 FP_TOP_SSE_REGS:262140,6422430 FP_SECOND_SSE_REGS:262140,6422430 FLOAT_SSE_REGS:262140,6422430 FLOAT_INT_REGS:262140,6422430 INT_SSE_REGS:52,1274 FLOAT_INT_SSE_REGS:262140,6422430 ALL_REGS:262140,6422430 MEM:16,392
  a19(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-4,-4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a20(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-4,-4 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a21(r122,l0) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:24,24
  a22(r121,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:28,28
  a23(r114,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1048560,1048560 FP_SECOND_SSE_REGS:1048560,1048560 FLOAT_SSE_REGS:1048560,1048560 FLOAT_INT_REGS:1048560,1048560 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1048560,1048560 ALL_REGS:1048560,1048560 MEM:28,28
  a24(r117,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 FP_TOP_SSE_REGS:524280,524280 FP_SECOND_SSE_REGS:524280,524280 FLOAT_SSE_REGS:524280,524280 FLOAT_INT_REGS:524280,524280 INT_SSE_REGS:104,104 FLOAT_INT_SSE_REGS:524280,524280 ALL_REGS:524280,524280 MEM:32,32
  a25(r62,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a26(r71,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,12376 SSE_REGS:0,12376 MMX_REGS:0,12376 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,12376 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,2856
  a27(r91,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1833,1833 SSE_REGS:1833,1833 MMX_REGS:1833,1833 FP_TOP_SSE_REGS:5080145,5080145 FP_SECOND_SSE_REGS:5080145,5080145 FLOAT_SSE_REGS:5080145,5080145 FLOAT_INT_REGS:5080145,5080145 INT_SSE_REGS:1833,1833 FLOAT_INT_SSE_REGS:5080145,5080145 ALL_REGS:5080145,5080145 MEM:470,470
  a28(r95,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:611,611
  a29(r109,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,19175 SSE_REGS:611,19175 MMX_REGS:611,19175 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:611,19175 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:141,4425
  a30(r110,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:611,611 SSE_REGS:611,611 MMX_REGS:611,611 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:611,611 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:141,141
  a31(r112,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1196,1196 SSE_REGS:1196,1196 MMX_REGS:1196,1196 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1196,1196 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:323,323
  a32(r162,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:611,12987 SSE_REGS:611,12987 MMX_REGS:611,12987 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:611,12987 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:141,3949
  a33(r163,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,25337 SSE_REGS:585,25337 MMX_REGS:585,25337 FP_TOP_SSE_REGS:1000000,125778640 FP_SECOND_SSE_REGS:1000000,125778640 FLOAT_SSE_REGS:1000000,125778640 FLOAT_INT_REGS:1000000,125778640 INT_SSE_REGS:585,25337 FLOAT_INT_SSE_REGS:1000000,125778640 ALL_REGS:1000000,125778640 MEM:180,7796
  a34(r164,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:585,12961 SSE_REGS:585,12961 MMX_REGS:585,12961 FP_TOP_SSE_REGS:1000000,63389320 FP_SECOND_SSE_REGS:1000000,63389320 FLOAT_SSE_REGS:1000000,63389320 FLOAT_INT_REGS:1000000,63389320 INT_SSE_REGS:585,12961 FLOAT_INT_SSE_REGS:1000000,63389320 ALL_REGS:1000000,63389320 MEM:180,3988
  a35(r63,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:585,87217 SSE_REGS:585,87217 MMX_REGS:585,87217 FP_TOP_SSE_REGS:1000000,253557280 FP_SECOND_SSE_REGS:1000000,253557280 FLOAT_SSE_REGS:1000000,253557280 FLOAT_INT_REGS:1000000,253557280 INT_SSE_REGS:585,87217 FLOAT_INT_SSE_REGS:1000000,253557280 ALL_REGS:1000000,253557280 MEM:180,23980
  a36(r72,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:585,37713 SSE_REGS:585,37713 MMX_REGS:585,37713 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:585,37713 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:180,8748
  a37(r94,l2) costs: AREG:-47,-47 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:376,376
  a38(r160,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:4080145,4080145 FP_SECOND_SSE_REGS:4080145,4080145 FLOAT_SSE_REGS:4080145,4080145 FLOAT_INT_REGS:4080145,4080145 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:4080145,4080145 ALL_REGS:4080145,4080145 MEM:376,376
  a39(r96,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:2131070,2131070 FP_SECOND_SSE_REGS:2131070,2131070 FLOAT_SSE_REGS:2131070,2131070 FLOAT_INT_REGS:2131070,2131070 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:2131070,2131070 ALL_REGS:2131070,2131070 MEM:329,329
  a40(r62,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a41(r63,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:86632,86632 SSE_REGS:86632,86632 MMX_REGS:86632,86632 FP_TOP_SSE_REGS:252557280,252557280 FP_SECOND_SSE_REGS:252557280,252557280 FLOAT_SSE_REGS:252557280,252557280 FLOAT_INT_REGS:252557280,252557280 INT_SSE_REGS:86632,86632 FLOAT_INT_SSE_REGS:252557280,252557280 ALL_REGS:252557280,252557280 MEM:23800,23800
  a42(r71,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2856,2856
  a43(r72,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:8568,8568
  a44(r91,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a45(r95,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a46(r109,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18564,18564 SSE_REGS:18564,18564 MMX_REGS:18564,18564 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:18564,18564 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:4284,4284
  a47(r110,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a48(r112,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a49(r162,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a50(r163,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:124778640,124778640 FP_SECOND_SSE_REGS:124778640,124778640 FLOAT_SSE_REGS:124778640,124778640 FLOAT_INT_REGS:124778640,124778640 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:124778640,124778640 ALL_REGS:124778640,124778640 MEM:7616,7616
  a51(r164,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:62389320,62389320 FP_SECOND_SSE_REGS:62389320,62389320 FLOAT_SSE_REGS:62389320,62389320 FLOAT_INT_REGS:62389320,62389320 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:62389320,62389320 ALL_REGS:62389320,62389320 MEM:3808,3808
  a52(r159,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:24752,24752 SSE_REGS:24752,24752 MMX_REGS:24752,24752 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:24752,24752 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6664,6664
  a53(r79,l3) costs: GENERAL_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:14280,14280
  a54(r82,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:37128,37128 SSE_REGS:37128,37128 MMX_REGS:37128,37128 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:37128,37128 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:9996,9996
  a55(r154,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:32194660,32194660 FP_SECOND_SSE_REGS:32194660,32194660 FLOAT_SSE_REGS:32194660,32194660 FLOAT_INT_REGS:32194660,32194660 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:32194660,32194660 ALL_REGS:32194660,32194660 MEM:3808,3808
  a56(r78,l3) costs: GENERAL_REGS:1904,1904 SSE_FIRST_REG:51408,51408 SSE_REGS:51408,51408 MMX_REGS:51408,51408 FP_TOP_SSE_REGS:36194660,36194660 FP_SECOND_SSE_REGS:36194660,36194660 FLOAT_SSE_REGS:36194660,36194660 FLOAT_INT_REGS:36194660,36194660 INT_SSE_REGS:51408,51408 FLOAT_INT_SSE_REGS:36194660,36194660 ALL_REGS:36194660,36194660 MEM:14756,14756
  a57(r155,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a58(r152,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a59(r151,l3) costs: GENERAL_REGS:952,952 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3808,3808
  a60(r148,l3) costs: AREG:952,952 DREG:0,0 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:12376,12376 SSE_REGS:12376,12376 MMX_REGS:12376,12376 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:12376,12376 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3332,3332
  a61(r149,l3) costs: AREG:0,0 DREG:952,952 CREG:952,952 BREG:952,952 SIREG:952,952 DIREG:952,952 AD_REGS:952,952 Q_REGS:952,952 NON_Q_REGS:952,952 INDEX_REGS:952,952 GENERAL_REGS:952,952 LEGACY_REGS:952,952 CLOBBERED_REGS:952,952 SSE_FIRST_REG:6188,6188 SSE_REGS:6188,6188 MMX_REGS:6188,6188 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:6188,6188 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1904,1904
  a62(r146,l3) costs: AREG:952,952 DREG:1904,1904 CREG:1904,1904 BREG:1904,1904 SIREG:1904,1904 DIREG:1904,1904 AD_REGS:1904,1904 Q_REGS:1904,1904 NON_Q_REGS:1904,1904 INDEX_REGS:1904,1904 GENERAL_REGS:1904,1904 LEGACY_REGS:1904,1904 CLOBBERED_REGS:1904,1904 SSE_FIRST_REG:13328,13328 SSE_REGS:13328,13328 MMX_REGS:13328,13328 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:13328,13328 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:4284,4284
  a63(r62,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a64(r77,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:282,282
  a65(r92,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6110,6110 SSE_REGS:6110,6110 MMX_REGS:6110,6110 FP_TOP_SSE_REGS:15320580,15320580 FP_SECOND_SSE_REGS:15320580,15320580 FLOAT_SSE_REGS:15320580,15320580 FLOAT_INT_REGS:15320580,15320580 INT_SSE_REGS:6110,6110 FLOAT_INT_SSE_REGS:15320580,15320580 ALL_REGS:15320580,15320580 MEM:1598,1598
  a66(r102,l1) costs: AREG:1410,1410 DREG:1410,1410 CREG:1410,1410 BREG:1410,1410 SIREG:1410,1410 DIREG:1410,1410 AD_REGS:1410,1410 Q_REGS:1410,1410 NON_Q_REGS:1410,1410 INDEX_REGS:1410,1410 GENERAL_REGS:1410,1410 LEGACY_REGS:1410,1410 CLOBBERED_REGS:1410,1410 FP_TOP_REG:2162,2162 FP_SECOND_REG:2162,2162 FLOAT_REGS:2162,2162 SSE_REGS:188,188 MMX_REGS:1786,1786 FP_TOP_SSE_REGS:2162,2162 FP_SECOND_SSE_REGS:2162,2162 FLOAT_SSE_REGS:2162,2162 FLOAT_INT_REGS:2162,2162 INT_SSE_REGS:1410,1410 FLOAT_INT_SSE_REGS:2162,2162 ALL_REGS:2162,2162 MEM:940,940
  a67(r108,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a68(r109,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a69(r110,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a70(r111,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a71(r112,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a72(r164,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1222,1222 SSE_REGS:1222,1222 MMX_REGS:1222,1222 FP_TOP_SSE_REGS:6160290,6160290 FP_SECOND_SSE_REGS:6160290,6160290 FLOAT_SSE_REGS:6160290,6160290 FLOAT_INT_REGS:6160290,6160290 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:6160290,6160290 ALL_REGS:6160290,6160290 MEM:376,376
  a73(r133,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2444,2444 SSE_REGS:2444,2444 MMX_REGS:2444,2444 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:752,752
  a74(r66,l1) costs: AREG:2444,2444 DREG:2444,2444 CREG:2444,2444 BREG:2444,2444 SIREG:2444,2444 DIREG:2444,2444 AD_REGS:2444,2444 Q_REGS:2444,2444 NON_Q_REGS:2444,2444 INDEX_REGS:2444,2444 GENERAL_REGS:2444,2444 LEGACY_REGS:2444,2444 CLOBBERED_REGS:2444,2444 FP_TOP_REG:3948,3948 FP_SECOND_REG:3948,3948 FLOAT_REGS:3948,3948 SSE_FIRST_REG:-94,-94 SSE_REGS:0,0 MMX_REGS:3196,3196 FP_TOP_SSE_REGS:3948,3948 FP_SECOND_SSE_REGS:3948,3948 FLOAT_SSE_REGS:3948,3948 FLOAT_INT_REGS:3948,3948 INT_SSE_REGS:2444,2444 FLOAT_INT_SSE_REGS:3948,3948 ALL_REGS:3948,3948 MEM:1504,1504
  a75(r131,l1) costs: AREG:2632,2632 DREG:2632,2632 CREG:2632,2632 BREG:2632,2632 SIREG:2632,2632 DIREG:2632,2632 AD_REGS:2632,2632 Q_REGS:2632,2632 NON_Q_REGS:2632,2632 INDEX_REGS:2632,2632 GENERAL_REGS:2632,2632 LEGACY_REGS:2632,2632 CLOBBERED_REGS:2632,2632 FP_TOP_REG:4136,4136 FP_SECOND_REG:4136,4136 FLOAT_REGS:4136,4136 SSE_FIRST_REG:94,94 SSE_REGS:188,188 MMX_REGS:3384,3384 FP_TOP_SSE_REGS:4136,4136 FP_SECOND_SSE_REGS:4136,4136 FLOAT_SSE_REGS:4136,4136 FLOAT_INT_REGS:4136,4136 INT_SSE_REGS:2632,2632 FLOAT_INT_SSE_REGS:4136,4136 ALL_REGS:4136,4136 MEM:1692,1692

   Insn 208(l0): point = 1
   Insn 193(l0): point = 3
   Insn 17(l0): point = 5
   Insn 109(l0): point = 7
   Insn 107(l0): point = 9
   Insn 105(l0): point = 11
   Insn 192(l0): point = 14
   Insn 12(l0): point = 16
   Insn 69(l0): point = 18
   Insn 67(l0): point = 20
   Insn 65(l0): point = 22
   Insn 204(l0): point = 25
   Insn 59(l0): point = 28
   Insn 58(l0): point = 30
   Insn 206(l0): point = 33
   Insn 98(l0): point = 35
   Insn 97(l0): point = 37
   Insn 96(l0): point = 39
   Insn 95(l0): point = 41
   Insn 92(l0): point = 43
   Insn 91(l0): point = 45
   Insn 90(l0): point = 47
   Insn 199(l0): point = 50
   Insn 30(l0): point = 53
   Insn 29(l0): point = 55
   Insn 201(l0): point = 58
   Insn 49(l0): point = 60
   Insn 48(l0): point = 62
   Insn 47(l0): point = 64
   Insn 46(l0): point = 66
   Insn 42(l0): point = 68
   Insn 41(l0): point = 70
   Insn 40(l0): point = 72
   Insn 37(l0): point = 74
   Insn 26(l0): point = 77
   Insn 25(l0): point = 79
   Insn 21(l0): point = 81
   Insn 10(l0): point = 83
   Insn 9(l0): point = 85
   Insn 8(l0): point = 87
   Insn 7(l0): point = 89
   Insn 6(l0): point = 91
   Insn 5(l0): point = 93
   Insn 4(l0): point = 95
   Insn 214(l2): point = 98
   Insn 195(l2): point = 100
   Insn 194(l2): point = 102
   Insn 14(l2): point = 104
   Insn 13(l2): point = 106
   Insn 16(l2): point = 109
   Insn 172(l2): point = 112
   Insn 171(l2): point = 114
   Insn 164(l2): point = 117
   Insn 163(l2): point = 119
   Insn 162(l2): point = 121
   Insn 159(l2): point = 123
   Insn 158(l2): point = 125
   Insn 157(l2): point = 127
   Insn 156(l2): point = 129
   Insn 155(l2): point = 131
   Insn 154(l2): point = 133
   Insn 153(l2): point = 135
   Insn 151(l2): point = 137
   Insn 150(l2): point = 139
   Insn 212(l2): point = 142
   Insn 15(l2): point = 144
   Insn 120(l3): point = 147
   Insn 119(l3): point = 149
   Insn 118(l3): point = 151
   Insn 116(l3): point = 153
   Insn 148(l3): point = 156
   Insn 147(l3): point = 158
   Insn 145(l3): point = 160
   Insn 144(l3): point = 162
   Insn 141(l3): point = 164
   Insn 140(l3): point = 166
   Insn 138(l3): point = 168
   Insn 134(l3): point = 171
   Insn 133(l3): point = 173
   Insn 132(l3): point = 175
   Insn 131(l3): point = 178
   Insn 130(l3): point = 180
   Insn 210(l3): point = 183
   Insn 124(l3): point = 185
   Insn 123(l3): point = 187
   Insn 122(l3): point = 190
   Insn 83(l1): point = 193
   Insn 82(l1): point = 195
   Insn 81(l1): point = 197
   Insn 78(l1): point = 199
   Insn 77(l1): point = 201
   Insn 75(l1): point = 203
   Insn 74(l1): point = 205
   Insn 73(l1): point = 207
   Insn 72(l1): point = 209
 a0(r162): [1..3]
 a1(r95): [1..5]
 a2(r71): [1..7]
 a3(r142): [8..9]
 a4(r112): [28..87] [1..24]
 a5(r91): [1..11]
 a6(r108): [28..95] [12..24]
 a7(r62): [28..81] [1..24]
 a8(r109): [28..93] [1..24]
 a9(r110): [28..91] [1..24]
 a10(r163): [38..43]
 a11(r135): [42..45]
 a12(r134): [46..47]
 a13(r164): [14..14]
 a14(r92): [14..16]
 a15(r77): [14..18]
 a16(r129): [19..20]
 a17(r102): [14..22]
 a18(r111): [53..89] [14..24]
 a19(r120): [63..72]
 a20(r113): [65..85]
 a21(r122): [67..68]
 a22(r121): [69..70]
 a23(r114): [71..83]
 a24(r117): [73..74]
 a25(r62): [98..146]
 a26(r71): [98..146]
 a27(r91): [98..146]
 a28(r95): [98..146]
 a29(r109): [98..146]
 a30(r110): [98..146]
 a31(r112): [98..146]
 a32(r162): [98..146]
 a33(r163): [98..100]
 a34(r164): [98..102]
 a35(r63): [98..104]
 a36(r72): [98..106]
 a37(r94): [126..127]
 a38(r160): [138..139]
 a39(r96): [140..144] [109..109]
 a40(r62): [147..192]
 a41(r63): [147..192]
 a42(r71): [147..192]
 a43(r72): [147..192]
 a44(r91): [147..192]
 a45(r95): [147..192]
 a46(r109): [147..192]
 a47(r110): [147..192]
 a48(r112): [147..192]
 a49(r162): [147..192]
 a50(r163): [147..192]
 a51(r164): [147..192]
 a52(r159): [165..166]
 a53(r79): [167..192] [147..151]
 a54(r82): [183..185] [169..173]
 a55(r154): [174..176]
 a56(r78): [186..192] [174..182] [147..153]
 a57(r155): [175..175]
 a58(r152): [177..178]
 a59(r151): [179..180]
 a60(r148): [186..188]
 a61(r149): [187..187]
 a62(r146): [189..190]
 a63(r62): [193..211]
 a64(r77): [193..211]
 a65(r92): [193..211]
 a66(r102): [193..211]
 a67(r108): [193..211]
 a68(r109): [193..211]
 a69(r110): [193..211]
 a70(r111): [193..211]
 a71(r112): [193..211]
 a72(r164): [193..211]
 a73(r133): [200..201]
 a74(r66): [202..203]
 a75(r131): [208..209]
Compressing live ranges: from 212 to 56 - 26%
Ranges after the compression:
 a0(r162): [0..1]
 a1(r95): [0..1]
 a2(r71): [0..1]
 a3(r142): [2..3]
 a4(r112): [0..20]
 a5(r91): [0..3]
 a6(r108): [4..20]
 a7(r62): [0..20]
 a8(r109): [0..20]
 a9(r110): [0..20]
 a10(r163): [9..10]
 a11(r135): [9..10]
 a12(r134): [11..12]
 a13(r164): [5..5]
 a14(r92): [5..6]
 a15(r77): [5..6]
 a16(r129): [7..8]
 a17(r102): [5..8]
 a18(r111): [13..20] [5..8]
 a19(r120): [13..18]
 a20(r113): [13..20]
 a21(r122): [13..14]
 a22(r121): [15..16]
 a23(r114): [17..20]
 a24(r117): [19..20]
 a25(r62): [21..29]
 a26(r71): [21..29]
 a27(r91): [21..29]
 a28(r95): [21..29]
 a29(r109): [21..29]
 a30(r110): [21..29]
 a31(r112): [21..29]
 a32(r162): [21..29]
 a33(r163): [21..22]
 a34(r164): [21..22]
 a35(r63): [21..22]
 a36(r72): [21..22]
 a37(r94): [24..25]
 a38(r160): [26..27]
 a39(r96): [28..29] [23..23]
 a40(r62): [30..49]
 a41(r63): [30..49]
 a42(r71): [30..49]
 a43(r72): [30..49]
 a44(r91): [30..49]
 a45(r95): [30..49]
 a46(r109): [30..49]
 a47(r110): [30..49]
 a48(r112): [30..49]
 a49(r162): [30..49]
 a50(r163): [30..49]
 a51(r164): [30..49]
 a52(r159): [32..33]
 a53(r79): [34..49] [30..31]
 a54(r82): [43..44] [34..35]
 a55(r154): [36..38]
 a56(r78): [45..49] [36..42] [30..31]
 a57(r155): [37..37]
 a58(r152): [39..40]
 a59(r151): [41..42]
 a60(r148): [45..47]
 a61(r149): [46..46]
 a62(r146): [48..49]
 a63(r62): [50..55]
 a64(r77): [50..55]
 a65(r92): [50..55]
 a66(r102): [50..55]
 a67(r108): [50..55]
 a68(r109): [50..55]
 a69(r110): [50..55]
 a70(r111): [50..55]
 a71(r112): [50..55]
 a72(r164): [50..55]
 a73(r133): [50..51]
 a74(r66): [52..53]
 a75(r131): [54..55]
    Creating cap  a76(r163,l0: a33(r163,l2))
    Creating cap  a77(r164,l0: a34(r164,l2))
    Creating cap  a78(r63,l0: a35(r63,l2))
    Creating cap  a79(r72,l0: a36(r72,l2))
    Creating cap  a80(r94,l0: a37(r94,l2))
    Creating cap  a81(r160,l0: a38(r160,l2))
    Creating cap  a82(r96,l0: a39(r96,l2))
    Creating cap  a83(r159,l2: a52(r159,l3))
    Creating cap  a84(r79,l2: a53(r79,l3))
    Creating cap  a85(r82,l2: a54(r82,l3))
    Creating cap  a86(r154,l2: a55(r154,l3))
    Creating cap  a87(r78,l2: a56(r78,l3))
    Creating cap  a88(r155,l2: a57(r155,l3))
    Creating cap  a89(r152,l2: a58(r152,l3))
    Creating cap  a90(r151,l2: a59(r151,l3))
    Creating cap  a91(r148,l2: a60(r148,l3))
    Creating cap  a92(r149,l2: a61(r149,l3))
    Creating cap  a93(r146,l2: a62(r146,l3))
    Creating cap  a94(r133,l0: a73(r133,l1))
    Creating cap  a95(r66,l0: a74(r66,l1))
    Creating cap  a96(r131,l0: a75(r131,l1))
    Creating cap  a97(r159,l0: a83(r159,l2: a52(r159,l3)))
    Creating cap  a98(r79,l0: a84(r79,l2: a53(r79,l3)))
    Creating cap  a99(r82,l0: a85(r82,l2: a54(r82,l3)))
    Creating cap  a100(r154,l0: a86(r154,l2: a55(r154,l3)))
    Creating cap  a101(r78,l0: a87(r78,l2: a56(r78,l3)))
    Creating cap  a102(r155,l0: a88(r155,l2: a57(r155,l3)))
    Creating cap  a103(r152,l0: a89(r152,l2: a58(r152,l3)))
    Creating cap  a104(r151,l0: a90(r151,l2: a59(r151,l3)))
    Creating cap  a105(r148,l0: a91(r148,l2: a60(r148,l3)))
    Creating cap  a106(r149,l0: a92(r149,l2: a61(r149,l3)))
    Creating cap  a107(r146,l0: a93(r146,l2: a62(r146,l3)))
+++Allocating 1592 bytes for conflict table (uncompressed size 1728)
;; a0(r162,l0) conflicts: a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a1(r95,l0) conflicts: a0(r162,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a2(r71,l0) conflicts: a0(r162,l0) a1(r95,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a3(r142,l0) conflicts: a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r112,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a3(r142,l0) a6(r108,l0) a13(r164,l0) a14(r92,l0) a15(r77,l0) a18(r111,l0) a16(r129,l0) a10(r163,l0) a11(r135,l0) a12(r134,l0) a21(r122,l0) a19(r120,l0) a20(r113,l0) a22(r121,l0) a23(r114,l0) a24(r117,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0) a94(r133,l0)
;;     total conflict hard regs: 0 1 4 5 38
;;     conflict hard regs: 0 1 4 5 38

;; a5(r91,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a3(r142,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a6(r108,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a13(r164,l0) a14(r92,l0) a15(r77,l0) a18(r111,l0) a16(r129,l0) a10(r163,l0) a11(r135,l0) a12(r134,l0) a21(r122,l0) a19(r120,l0) a20(r113,l0) a22(r121,l0) a23(r114,l0) a24(r117,l0) a94(r133,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a7(r62,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a8(r109,l0) a9(r110,l0) a3(r142,l0) a6(r108,l0) a13(r164,l0) a14(r92,l0) a15(r77,l0) a18(r111,l0) a16(r129,l0) a10(r163,l0) a11(r135,l0) a12(r134,l0) a21(r122,l0) a19(r120,l0) a20(r113,l0) a22(r121,l0) a23(r114,l0) a24(r117,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0) a94(r133,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a8(r109,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a9(r110,l0) a3(r142,l0) a6(r108,l0) a13(r164,l0) a14(r92,l0) a15(r77,l0) a18(r111,l0) a16(r129,l0) a10(r163,l0) a11(r135,l0) a12(r134,l0) a21(r122,l0) a19(r120,l0) a20(r113,l0) a22(r121,l0) a23(r114,l0) a24(r117,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0) a94(r133,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a9(r110,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a3(r142,l0) a6(r108,l0) a13(r164,l0) a14(r92,l0) a15(r77,l0) a18(r111,l0) a16(r129,l0) a10(r163,l0) a11(r135,l0) a12(r134,l0) a21(r122,l0) a19(r120,l0) a20(r113,l0) a22(r121,l0) a23(r114,l0) a24(r117,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a82(r96,l0) a80(r94,l0) a81(r160,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0) a94(r133,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a10(r163,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a11(r135,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a11(r135,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a10(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a12(r134,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r164,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a14(r92,l0) a15(r77,l0) a18(r111,l0) a94(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r92,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a13(r164,l0) a15(r77,l0) a18(r111,l0) a94(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r77,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a13(r164,l0) a14(r92,l0) a18(r111,l0) a94(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a16(r129,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a18(r111,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a17(r102,l0) conflicts: a95(r66,l0) a96(r131,l0)
;;     total conflict hard regs: 21
;;     conflict hard regs:

;; a18(r111,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a13(r164,l0) a14(r92,l0) a15(r77,l0) a16(r129,l0) a21(r122,l0) a19(r120,l0) a20(r113,l0) a22(r121,l0) a23(r114,l0) a24(r117,l0) a94(r133,l0)
;;     total conflict hard regs: 0 1 4 5 37 38
;;     conflict hard regs: 0 1 4 5 37 38

;; a19(r120,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a18(r111,l0) a21(r122,l0) a20(r113,l0) a22(r121,l0) a23(r114,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a20(r113,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a18(r111,l0) a21(r122,l0) a19(r120,l0) a22(r121,l0) a23(r114,l0) a24(r117,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a21(r122,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a18(r111,l0) a19(r120,l0) a20(r113,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a22(r121,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a18(r111,l0) a19(r120,l0) a20(r113,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r114,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a18(r111,l0) a19(r120,l0) a20(r113,l0) a24(r117,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a24(r117,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a18(r111,l0) a20(r113,l0) a23(r114,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a25(r62,l2) conflicts: a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a26(r71,l2) conflicts: a25(r62,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a27(r91,l2) conflicts: a25(r62,l2) a26(r71,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a28(r95,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a29(r109,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a30(r110,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a31(r112,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a32(r162,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a39(r96,l2) a37(r94,l2) a38(r160,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a33(r163,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a34(r164,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a35(r63,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a36(r72,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a84(r79,l2) a87(r78,l2) a83(r159,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a37(r94,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a38(r160,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a39(r96,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a40(r62,l3) conflicts: a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a41(r63,l3) conflicts: a40(r62,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a42(r71,l3) conflicts: a40(r62,l3) a41(r63,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a43(r72,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a44(r91,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a45(r95,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a46(r109,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a47(r110,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a48(r112,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a49(r162,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a50(r163,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a51(r164,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a53(r79,l3) a56(r78,l3) a52(r159,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a52(r159,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a53(r79,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a56(r78,l3) a54(r82,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a54(r82,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a55(r154,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a57(r155,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a56(r78,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a55(r154,l3) a57(r155,l3) a58(r152,l3) a59(r151,l3) a60(r148,l3) a61(r149,l3) a62(r146,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a57(r155,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a55(r154,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a58(r152,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a59(r151,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a60(r148,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a61(r149,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a61(r149,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3) a60(r148,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a62(r146,l3) conflicts: a40(r62,l3) a41(r63,l3) a42(r71,l3) a43(r72,l3) a44(r91,l3) a45(r95,l3) a46(r109,l3) a47(r110,l3) a48(r112,l3) a49(r162,l3) a50(r163,l3) a51(r164,l3) a53(r79,l3) a56(r78,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a63(r62,l1) conflicts: a73(r133,l1) a64(r77,l1) a65(r92,l1) a67(r108,l1) a68(r109,l1) a69(r110,l1) a70(r111,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a64(r77,l1) conflicts: a73(r133,l1) a63(r62,l1) a65(r92,l1) a67(r108,l1) a68(r109,l1) a69(r110,l1) a70(r111,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a65(r92,l1) conflicts: a73(r133,l1) a63(r62,l1) a64(r77,l1) a67(r108,l1) a68(r109,l1) a69(r110,l1) a70(r111,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a66(r102,l1) conflicts: a74(r66,l1) a75(r131,l1)
;;     total conflict hard regs: 21
;;     conflict hard regs: 21

;; a67(r108,l1) conflicts: a73(r133,l1) a63(r62,l1) a64(r77,l1) a65(r92,l1) a68(r109,l1) a69(r110,l1) a70(r111,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a68(r109,l1) conflicts: a73(r133,l1) a63(r62,l1) a64(r77,l1) a65(r92,l1) a67(r108,l1) a69(r110,l1) a70(r111,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a69(r110,l1) conflicts: a73(r133,l1) a63(r62,l1) a64(r77,l1) a65(r92,l1) a67(r108,l1) a68(r109,l1) a70(r111,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a70(r111,l1) conflicts: a73(r133,l1) a63(r62,l1) a64(r77,l1) a65(r92,l1) a67(r108,l1) a68(r109,l1) a69(r110,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a71(r112,l1) conflicts: a73(r133,l1) a63(r62,l1) a64(r77,l1) a65(r92,l1) a67(r108,l1) a68(r109,l1) a69(r110,l1) a70(r111,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a72(r164,l1) conflicts: a73(r133,l1) a63(r62,l1) a64(r77,l1) a65(r92,l1) a67(r108,l1) a68(r109,l1) a69(r110,l1) a70(r111,l1) a71(r112,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a73(r133,l1) conflicts: a63(r62,l1) a64(r77,l1) a65(r92,l1) a67(r108,l1) a68(r109,l1) a69(r110,l1) a70(r111,l1) a71(r112,l1) a72(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a74(r66,l1) conflicts: a66(r102,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a75(r131,l1) conflicts: a66(r102,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a76(r163,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a77(r164,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a78(r63,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a79(r72,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a98(r79,l0) a101(r78,l0) a97(r159,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a80(r94,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a81(r160,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a82(r96,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a83(r159,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a84(r79,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a87(r78,l2) a85(r82,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a85(r82,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a86(r154,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2) a88(r155,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a87(r78,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a86(r154,l2) a88(r155,l2) a89(r152,l2) a90(r151,l2) a91(r148,l2) a92(r149,l2) a93(r146,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a88(r155,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2) a86(r154,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a89(r152,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a90(r151,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a91(r148,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2) a92(r149,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a92(r149,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2) a91(r148,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a93(r146,l2) conflicts: a25(r62,l2) a26(r71,l2) a27(r91,l2) a28(r95,l2) a29(r109,l2) a30(r110,l2) a31(r112,l2) a32(r162,l2) a33(r163,l2) a34(r164,l2) a35(r63,l2) a36(r72,l2) a84(r79,l2) a87(r78,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a94(r133,l0) conflicts: a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a6(r108,l0) a13(r164,l0) a14(r92,l0) a15(r77,l0) a18(r111,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a95(r66,l0) conflicts: a17(r102,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a96(r131,l0) conflicts: a17(r102,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a97(r159,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a98(r79,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a101(r78,l0) a99(r82,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a99(r82,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a100(r154,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0) a102(r155,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a101(r78,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a100(r154,l0) a102(r155,l0) a103(r152,l0) a104(r151,l0) a105(r148,l0) a106(r149,l0) a107(r146,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a102(r155,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0) a100(r154,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a103(r152,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a104(r151,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a105(r148,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0) a106(r149,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a106(r149,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0) a105(r148,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a107(r146,l0) conflicts: a0(r162,l0) a1(r95,l0) a2(r71,l0) a5(r91,l0) a4(r112,l0) a7(r62,l0) a8(r109,l0) a9(r110,l0) a76(r163,l0) a77(r164,l0) a78(r63,l0) a79(r72,l0) a98(r79,l0) a101(r78,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a5(r91)<->a6(r108)@4:move
  cp1:a11(r135)<->a12(r134)@1:shuffle
  cp2:a22(r121)<->a23(r114)@1:shuffle
  cp3:a21(r122)<->a22(r121)@1:shuffle
  cp4:a38(r160)<->a39(r96)@5:shuffle
  cp5:a52(r159)<->a53(r79)@119:shuffle
  cp6:a58(r152)<->a59(r151)@59:shuffle
  cp7:a57(r155)<->a58(r152)@476:constraint
  cp8:a55(r154)<->a58(r152)@59:shuffle
  cp9:a61(r149)<->a62(r146)@476:constraint
  cp10:a60(r148)<->a62(r146)@59:shuffle
  cp11:a54(r82)<->a56(r78)@476:constraint
  cp12:a73(r133)<->a74(r66)@11:shuffle
  cp13:a81(r160)<->a82(r96)@5:shuffle
  cp14:a83(r159)<->a84(r79)@119:shuffle
  cp15:a89(r152)<->a90(r151)@59:shuffle
  cp16:a88(r155)<->a89(r152)@476:constraint
  cp17:a86(r154)<->a89(r152)@59:shuffle
  cp18:a92(r149)<->a93(r146)@476:constraint
  cp19:a91(r148)<->a93(r146)@59:shuffle
  cp20:a85(r82)<->a87(r78)@476:constraint
  cp21:a94(r133)<->a95(r66)@11:shuffle
  cp22:a97(r159)<->a98(r79)@119:shuffle
  cp23:a103(r152)<->a104(r151)@59:shuffle
  cp24:a102(r155)<->a103(r152)@476:constraint
  cp25:a100(r154)<->a103(r152)@59:shuffle
  cp26:a106(r149)<->a107(r146)@476:constraint
  cp27:a105(r148)<->a107(r146)@59:shuffle
  cp28:a99(r82)<->a101(r78)@476:constraint
  regions=4, blocks=22, points=56
    allocnos=108 (big 0), copies=29, conflicts=4, ranges=82

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 21 11(->19:l2) 10 8(->9:l1) 7 6 5 4 3 2
    all: 0r162 1r95 2r71 3r142 4r112 5r91 6r108 7r62 8r109 9r110 10r163 11r135 12r134 13r164 14r92 15r77 16r129 17r102 18r111 19r120 20r113 21r122 22r121 23r114 24r117 76r163 77r164 78r63 79r72 80r94 81r160 82r96 94r133 95r66 96r131 97r159 98r79 99r82 100r154 101r78 102r155 103r152 104r151 105r148 106r149 107r146
    modified regnos: 62 63 66 71 72 77 78 79 82 91 92 94 95 96 102 108 109 110 111 112 113 114 117 120 121 122 129 131 133 134 135 142 146 148 149 151 152 154 155 159 160 162 163 164
    border:
    Pressure: GENERAL_REGS=16 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@7144
        2:( 0-6 37-44)@60040
          3:( 1-6 37-44)@14280
            4:( 2-6 37-44)@143332
              5:( 2 3 6 37-44)@15900
                6:( 3 6 39-44)@8946
                  7:( 3 6 41-44)@3702
      Spill a17(r102,l0)
      Allocno a0r162 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a1r95 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a2r71 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a3r142 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a4r112 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 38 45-51)
      Allocno a5r91 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a6r108 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a7r62 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a8r109 of GENERAL_REGS(15) has 8 avail. regs  3 6 39-44, node:  3 6 39-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a9r110 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a10r163 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a11r135 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a12r134 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a13r164 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a14r92 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a15r77 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a16r129 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a18r111 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-38 45-51)
      Allocno a19r120 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a20r113 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a21r122 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a22r121 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a23r114 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a24r117 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a76r163 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a77r164 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a78r63 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a79r72 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a80r94 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a81r160 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a82r96 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a94r133 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a95r66 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a96r131 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a97r159 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a98r79 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a99r82 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a100r154 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a101r78 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a102r155 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a103r152 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a104r151 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a105r148 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a106r149 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a107r146 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a24(r117,l0)(cost 0)
      Pushing a22(r121,l0)(cost 0)
      Pushing a21(r122,l0)(cost 0)
      Pushing a16(r129,l0)(cost 0)
      Pushing a12(r134,l0)(cost 0)
      Pushing a11(r135,l0)(cost 0)
      Pushing a3(r142,l0)(cost 0)
      Pushing a20(r113,l0)(cost 0)
      Pushing a19(r120,l0)(cost 0)
      Pushing a10(r163,l0)(cost 0)
      Pushing a23(r114,l0)(cost 0)
      Pushing a82(r96,l0: a39(r96,l2))(cost 0)
      Pushing a81(r160,l0: a38(r160,l2))(cost 0)
      Pushing a80(r94,l0: a37(r94,l2))(cost 0)
      Pushing a96(r131,l0: a75(r131,l1))(cost 0)
      Pushing a95(r66,l0: a74(r66,l1))(cost 0)
      Pushing a94(r133,l0: a73(r133,l1))(cost 0)
      Pushing a14(r92,l0)(cost 0)
      Pushing a106(r149,l0: a92(r149,l2: a61(r149,l3)))(cost 0)
        Making a105(r148,l0: a91(r148,l2: a60(r148,l3))) colorable
      Pushing a102(r155,l0: a88(r155,l2: a57(r155,l3)))(cost 0)
        Making a100(r154,l0: a86(r154,l2: a55(r154,l3))) colorable
      Pushing a104(r151,l0: a90(r151,l2: a59(r151,l3)))(cost 0)
      Pushing a105(r148,l0: a91(r148,l2: a60(r148,l3)))(cost 3332)
      Pushing a100(r154,l0: a86(r154,l2: a55(r154,l3)))(cost 3808)
      Pushing a107(r146,l0: a93(r146,l2: a62(r146,l3)))(cost 0)
      Pushing a103(r152,l0: a89(r152,l2: a58(r152,l3)))(cost 0)
      Pushing a97(r159,l0: a83(r159,l2: a52(r159,l3)))(cost 0)
      Pushing a99(r82,l0: a85(r82,l2: a54(r82,l3)))(cost 0)
      Pushing a6(r108,l0)(potential spill: pri=28, cost=28)
      Pushing a7(r62,l0)(potential spill: pri=52, cost=157)
        Making a13(r164,l0) colorable
        Making a15(r77,l0) colorable
        Making a18(r111,l0) colorable
        Making a76(r163,l0: a33(r163,l2)) colorable
        Making a77(r164,l0: a34(r164,l2)) colorable
        Making a78(r63,l0: a35(r63,l2)) colorable
        Making a79(r72,l0: a36(r72,l2)) colorable
        Making a98(r79,l0: a84(r79,l2: a53(r79,l3))) colorable
        Making a101(r78,l0: a87(r78,l2: a56(r78,l3))) colorable
      Pushing a18(r111,l0)(cost 392)
      Pushing a15(r77,l0)(cost 298)
      Pushing a13(r164,l0)(cost 392)
      Pushing a77(r164,l0: a34(r164,l2))(cost 3988)
      Pushing a76(r163,l0: a33(r163,l2))(cost 7796)
        Making a0(r162,l0) colorable
        Making a1(r95,l0) colorable
        Making a2(r71,l0) colorable
        Making a5(r91,l0) colorable
      Pushing a5(r91,l0)(cost 486)
      Pushing a1(r95,l0)(cost 627)
      Pushing a2(r71,l0)(cost 2872)
        Making a8(r109,l0) colorable
      Pushing a0(r162,l0)(cost 3965)
      Pushing a8(r109,l0)(cost 4473)
        Making a4(r112,l0) colorable
        Making a9(r110,l0) colorable
      Pushing a9(r110,l0)(cost 157)
      Pushing a4(r112,l0)(cost 427)
      Pushing a79(r72,l0: a36(r72,l2))(cost 8748)
      Pushing a101(r78,l0: a87(r78,l2: a56(r78,l3)))(cost 12852)
      Pushing a98(r79,l0: a84(r79,l2: a53(r79,l3)))(cost 12376)
      Pushing a78(r63,l0: a35(r63,l2))(cost 23980)
      Popping a78(r63,l0: a35(r63,l2))  -- assign reg 2
      Popping a98(r79,l0: a84(r79,l2: a53(r79,l3)))  -- assign reg 38
      Popping a101(r78,l0: a87(r78,l2: a56(r78,l3)))  -- assign reg 39
      Popping a79(r72,l0: a36(r72,l2))  -- assign reg 40
      Popping a4(r112,l0)  -- assign reg 3
      Popping a9(r110,l0)  -- assign reg 6
      Popping a8(r109,l0)  -- assign reg 41
      Popping a0(r162,l0)  -- assign reg 42
      Popping a2(r71,l0)  -- assign reg 43
      Popping a1(r95,l0)  -- assign reg 44
      Popping a5(r91,l0)  -- assign reg 37
      Popping a76(r163,l0: a33(r163,l2))  -- assign reg 4
      Popping a77(r164,l0: a34(r164,l2))  -- assign reg 5
      Popping a13(r164,l0)  -- assign reg 42
      Popping a15(r77,l0)  -- assign reg 43
      Popping a18(r111,l0)  -- assign reg 44
      Popping a7(r62,l0)  -- spill
      Popping a6(r108,l0)  -- spill
      Popping a99(r82,l0: a85(r82,l2: a54(r82,l3)))  -- assign reg 39
      Popping a97(r159,l0: a83(r159,l2: a52(r159,l3)))  -- assign reg 38
      Popping a103(r152,l0: a89(r152,l2: a58(r152,l3)))  -- assign reg 0
      Popping a107(r146,l0: a93(r146,l2: a62(r146,l3)))  -- assign reg 0
      Popping a100(r154,l0: a86(r154,l2: a55(r154,l3)))  -- assign reg 1
      Popping a105(r148,l0: a91(r148,l2: a60(r148,l3)))  -- assign reg 1
      Popping a104(r151,l0: a90(r151,l2: a59(r151,l3)))  -- assign reg 0
      Popping a102(r155,l0: a88(r155,l2: a57(r155,l3)))  -- assign reg 0
      Popping a106(r149,l0: a92(r149,l2: a61(r149,l3)))  -- assign reg 0
      Popping a14(r92,l0)  -- assign reg 0
      Popping a94(r133,l0: a73(r133,l1))  -- assign reg 1
      Popping a95(r66,l0: a74(r66,l1))  -- assign reg 21
      Popping a96(r131,l0: a75(r131,l1))  -- assign reg 21
      Popping a80(r94,l0: a37(r94,l2))  -- assign reg 0
      Popping a81(r160,l0: a38(r160,l2))  -- assign reg 0
      Popping a82(r96,l0: a39(r96,l2))  -- assign reg 0
      Popping a23(r114,l0)  -- assign reg 0
      Popping a10(r163,l0)  -- assign reg 5
      Popping a19(r120,l0)  -- assign reg 5
      Popping a20(r113,l0)  -- assign reg 38
      Popping a3(r142,l0)  -- assign reg 0
      Popping a11(r135,l0)  -- assign reg 1
      Popping a12(r134,l0)  -- assign reg 1
      Popping a16(r129,l0)  -- assign reg 0
      Popping a21(r122,l0)  -- assign reg 1
      Popping a22(r121,l0)  -- assign reg 0
      Popping a24(r117,l0)  -- assign reg 1
Spilling a9r110 for a5r91
Assigning 6 to a5r91
Assigning 6 to a6r108
Spilling a6r108 for a14r92
Assigning 6 to a14r92
       a6(r108,l0)  -- assign memory
       a9(r110,l0)  -- assign memory

  Loop 2 (parent 0, header bb19, depth 1)
    bbs: 20(->12:l3) 19 18(->21:l0) 17 16
    all: 25r62 26r71 27r91 28r95 29r109 30r110 31r112 32r162 33r163 34r164 35r63 36r72 37r94 38r160 39r96 83r159 84r79 85r82 86r154 87r78 88r155 89r152 90r151 91r148 92r149 93r146
    modified regnos: 63 72 78 79 82 91 94 95 96 146 148 149 151 152 154 155 159 160 163 164
    border: 25r62 26r71 27r91 28r95 29r109 30r110 31r112 32r162
    Pressure: GENERAL_REGS=16
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@54804
          2:( 1-6 37-44)@14280
            3:( 2-6 37-44)@143288
              4:( 2 3 6 37-44)@24622
                5:( 3 6 41-44)@1210
      Allocno a25r62 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a26r71 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a27r91 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a28r95 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a29r109 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a30r110 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a31r112 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a32r162 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a33r163 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a34r164 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a35r63 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a36r72 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a37r94 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a38r160 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a39r96 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a83r159 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a84r79 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a85r82 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a86r154 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a87r78 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a88r155 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a89r152 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a90r151 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a91r148 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a92r149 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a93r146 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a39(r96,l2)(cost 0)
      Pushing a38(r160,l2)(cost 0)
      Pushing a37(r94,l2)(cost 0)
      Pushing a92(r149,l2: a61(r149,l3))(cost 0)
        Making a91(r148,l2: a60(r148,l3)) colorable
      Pushing a88(r155,l2: a57(r155,l3))(cost 0)
        Making a86(r154,l2: a55(r154,l3)) colorable
      Pushing a90(r151,l2: a59(r151,l3))(cost 0)
      Pushing a91(r148,l2: a60(r148,l3))(cost 3332)
      Pushing a86(r154,l2: a55(r154,l3))(cost 3808)
      Pushing a93(r146,l2: a62(r146,l3))(cost 0)
      Pushing a89(r152,l2: a58(r152,l3))(cost 0)
      Pushing a83(r159,l2: a52(r159,l3))(cost 0)
      Pushing a85(r82,l2: a54(r82,l3))(cost 0)
      Pushing a25(r62,l2)(potential spill: pri=33, cost=101)
        Making a33(r163,l2) colorable
        Making a34(r164,l2) colorable
        Making a35(r63,l2) colorable
        Making a36(r72,l2) colorable
        Making a84(r79,l2: a53(r79,l3)) colorable
        Making a87(r78,l2: a56(r78,l3)) colorable
      Pushing a34(r164,l2)(cost 3988)
      Pushing a33(r163,l2)(cost 7796)
        Making a26(r71,l2) colorable
        Making a27(r91,l2) colorable
        Making a28(r95,l2) colorable
        Making a29(r109,l2) colorable
        Making a32(r162,l2) colorable
      Pushing a27(r91,l2)(cost 510)
      Pushing a28(r95,l2)(cost 651)
      Pushing a26(r71,l2)(cost 2896)
      Pushing a32(r162,l2)(cost 3989)
      Pushing a29(r109,l2)(cost 4465)
        Making a30(r110,l2) colorable
        Making a31(r112,l2) colorable
      Pushing a30(r110,l2)(cost 101)
      Pushing a31(r112,l2)(cost 363)
      Pushing a36(r72,l2)(cost 8748)
      Pushing a87(r78,l2: a56(r78,l3))(cost 12852)
      Pushing a84(r79,l2: a53(r79,l3))(cost 12376)
      Pushing a35(r63,l2)(cost 23980)
      Popping a35(r63,l2)  -- assign reg 2
      Popping a84(r79,l2: a53(r79,l3))  -- assign reg 4
      Popping a87(r78,l2: a56(r78,l3))  -- assign reg 37
      Popping a36(r72,l2)  -- assign reg 38
      Popping a31(r112,l2)  -- assign reg 3
      Popping a30(r110,l2)  -- assign reg 6
      Popping a29(r109,l2)  -- assign reg 41
      Popping a32(r162,l2)  -- assign reg 42
      Popping a26(r71,l2)  -- assign reg 43
      Popping a28(r95,l2)  -- assign reg 44
      Popping a27(r91,l2)  -- assign reg 39
      Popping a33(r163,l2)  -- assign reg 5
      Popping a34(r164,l2)  -- assign reg 40
      Popping a25(r62,l2)  -- spill
      Popping a85(r82,l2: a54(r82,l3))  -- assign reg 37
      Popping a83(r159,l2: a52(r159,l3))  -- assign reg 4
      Popping a89(r152,l2: a58(r152,l3))  -- assign reg 0
      Popping a93(r146,l2: a62(r146,l3))  -- assign reg 0
      Popping a86(r154,l2: a55(r154,l3))  -- assign reg 1
      Popping a91(r148,l2: a60(r148,l3))  -- assign reg 1
      Popping a90(r151,l2: a59(r151,l3))  -- assign reg 0
      Popping a88(r155,l2: a57(r155,l3))  -- assign reg 0
      Popping a92(r149,l2: a61(r149,l3))  -- assign reg 0
      Popping a37(r94,l2)  -- assign reg 0
      Popping a38(r160,l2)  -- assign reg 0
      Popping a39(r96,l2)  -- assign reg 0
Spilling a30r110 for a27r91
Assigning 6 to a27r91
       a30(r110,l2)  -- assign memory

  Loop 3 (parent 2, header bb12, depth 2)
    bbs: 15(->16:l2) 14 13 12
    all: 40r62 41r63 42r71 43r72 44r91 45r95 46r109 47r110 48r112 49r162 50r163 51r164 52r159 53r79 54r82 55r154 56r78 57r155 58r152 59r151 60r148 61r149 62r146
    modified regnos: 63 72 78 79 82 146 148 149 151 152 154 155 159
    border: 40r62 41r63 42r71 43r72 44r91 45r95 46r109 47r110 48r112 49r162 50r163 51r164
    Pressure: GENERAL_REGS=16
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@52360
          2:( 1-6 37-44)@14280
            3:( 2-6 37-44)@163744
      Spill a40(r62,l3)
      Spill a47(r110,l3)
      Allocno a41r63 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a42r71 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a43r72 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a44r91 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a45r95 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a46r109 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a48r112 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a49r162 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a50r163 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a51r164 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a52r159 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a53r79 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a54r82 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a55r154 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a56r78 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a57r155 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a58r152 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a59r151 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a60r148 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a61r149 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a62r146 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a61(r149,l3)(cost 0)
      Pushing a57(r155,l3)(cost 0)
      Pushing a59(r151,l3)(cost 0)
      Pushing a60(r148,l3)(cost 0)
      Pushing a55(r154,l3)(cost 0)
      Pushing a62(r146,l3)(cost 0)
        Making a56(r78,l3) colorable
      Pushing a58(r152,l3)(cost 0)
        Making a53(r79,l3) colorable
      Pushing a52(r159,l3)(cost 0)
        Making a41(r63,l3) colorable
        Making a42(r71,l3) colorable
        Making a43(r72,l3) colorable
        Making a44(r91,l3) colorable
        Making a45(r95,l3) colorable
        Making a46(r109,l3) colorable
        Making a48(r112,l3) colorable
        Making a49(r162,l3) colorable
        Making a50(r163,l3) colorable
        Making a51(r164,l3) colorable
      Pushing a48(r112,l3)(cost 720)
      Pushing a45(r95,l3)(cost 720)
      Pushing a44(r91,l3)(cost 720)
      Pushing a51(r164,l3)(cost 4176)
      Pushing a49(r162,l3)(cost 4528)
      Pushing a42(r71,l3)(cost 3576)
      Pushing a50(r163,l3)(cost 7984)
      Pushing a46(r109,l3)(cost 5004)
      Pushing a54(r82,l3)(cost 0)
      Pushing a43(r72,l3)(cost 8936)
      Pushing a56(r78,l3)(cost 12852)
      Pushing a53(r79,l3)(cost 12376)
      Pushing a41(r63,l3)(cost 24168)
      Popping a41(r63,l3)  -- assign reg 2
      Popping a53(r79,l3)  -- assign reg 4
      Popping a56(r78,l3)  -- assign reg 37
      Popping a43(r72,l3)  -- assign reg 38
      Popping a54(r82,l3)  -- assign reg 37
      Popping a46(r109,l3)  -- assign reg 41
      Popping a50(r163,l3)  -- assign reg 5
      Popping a42(r71,l3)  -- assign reg 43
      Popping a49(r162,l3)  -- assign reg 42
      Popping a51(r164,l3)  -- assign reg 40
      Popping a44(r91,l3)  -- assign reg 6
      Popping a45(r95,l3)  -- assign reg 44
      Popping a48(r112,l3)  -- assign reg 3
      Popping a52(r159,l3)  -- assign reg 4
      Popping a58(r152,l3)  -- assign reg 0
      Popping a62(r146,l3)  -- assign reg 0
      Popping a55(r154,l3)  -- assign reg 1
      Popping a60(r148,l3)  -- assign reg 1
      Popping a59(r151,l3)  -- assign reg 0
      Popping a57(r155,l3)  -- assign reg 0
      Popping a61(r149,l3)  -- assign reg 0

  Loop 1 (parent 0, header bb9, depth 1)
    bbs: 9(->10:l0)
    all: 63r62 64r77 65r92 66r102 67r108 68r109 69r110 70r111 71r112 72r164 73r133 74r66 75r131
    modified regnos: 66 92 131 133
    border: 63r62 64r77 65r92 66r102 67r108 68r109 69r110 70r111 71r112 72r164
    Pressure: GENERAL_REGS=10 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@4700
          2:( 3 6 41-44)@2068
      Spill a63(r62,l1)
      Spill a67(r108,l1)
      Spill a69(r110,l1)
      Allocno a64r77 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a65r92 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a68r109 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a70r111 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a71r112 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a72r164 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a73r133 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a73(r133,l1)(cost 0)
        Making a64(r77,l1) colorable
        Making a68(r109,l1) colorable
        Making a70(r111,l1) colorable
        Making a71(r112,l1) colorable
        Making a72(r164,l1) colorable
      Pushing a71(r112,l1)(cost 64)
      Pushing a68(r109,l1)(cost 64)
      Pushing a72(r164,l1)(cost 416)
      Pushing a70(r111,l1)(cost 416)
      Pushing a64(r77,l1)(cost 322)
      Pushing a65(r92,l1)(cost 0)
      Popping a65(r92,l1)  -- assign reg 6
      Popping a64(r77,l1)  -- assign reg 43
      Popping a70(r111,l1)  -- assign reg 44
      Popping a72(r164,l1)  -- assign reg 42
      Popping a68(r109,l1)  -- assign reg 41
      Popping a71(r112,l1)  -- assign reg 3
      Popping a73(r133,l1)  -- assign reg 0
Disposition:
   63:r62  l1   mem   40:r62  l3   mem   25:r62  l2   mem    7:r62  l0   mem
   41:r63  l3     2   35:r63  l2     2   74:r66  l1    21   42:r71  l3    43
   26:r71  l2    43    2:r71  l0    43   43:r72  l3    38   36:r72  l2    38
   64:r77  l1    43   15:r77  l0    43   56:r78  l3    37   53:r79  l3     4
   54:r82  l3    37   44:r91  l3     6   27:r91  l2     6    5:r91  l0     6
   65:r92  l1     6   14:r92  l0     6   37:r94  l2     0   45:r95  l3    44
   28:r95  l2    44    1:r95  l0    44   39:r96  l2     0   66:r102 l1   mem
   17:r102 l0   mem   67:r108 l1   mem    6:r108 l0   mem   68:r109 l1    41
   46:r109 l3    41   29:r109 l2    41    8:r109 l0    41   69:r110 l1   mem
   47:r110 l3   mem   30:r110 l2   mem    9:r110 l0   mem   70:r111 l1    44
   18:r111 l0    44   71:r112 l1     3   48:r112 l3     3   31:r112 l2     3
    4:r112 l0     3   20:r113 l0    38   23:r114 l0     0   24:r117 l0     1
   19:r120 l0     5   22:r121 l0     0   21:r122 l0     1   16:r129 l0     0
   75:r131 l1    21   73:r133 l1     0   12:r134 l0     1   11:r135 l0     1
    3:r142 l0     0   62:r146 l3     0   60:r148 l3     1   61:r149 l3     0
   59:r151 l3     0   58:r152 l3     0   55:r154 l3     1   57:r155 l3     0
   52:r159 l3     4   38:r160 l2     0   49:r162 l3    42   32:r162 l2    42
    0:r162 l0    42   50:r163 l3     5   33:r163 l2     5   10:r163 l0     5
   72:r164 l1    42   51:r164 l3    40   34:r164 l2    40   13:r164 l0    42
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb19)
  43 vs parent 43:      Creating newreg=165 from oldreg=71
  6 vs parent 6:      Creating newreg=166 from oldreg=91
  44 vs parent 44:      Creating newreg=167 from oldreg=95
  41 vs parent 41:      Creating newreg=168 from oldreg=109
  3 vs parent 3:      Creating newreg=169 from oldreg=112
  42 vs parent 42:      Creating newreg=170 from oldreg=162
      Creating newreg=171 from oldreg=163
      Creating newreg=172 from oldreg=164
rescanning insn with uid = 194.
deleting insn with uid = 194.
rescanning insn with uid = 195.
deleting insn with uid = 195.
rescanning insn with uid = 168.
deleting insn with uid = 168.
rescanning insn with uid = 171.
deleting insn with uid = 171.
rescanning insn with uid = 151.
deleting insn with uid = 151.
rescanning insn with uid = 155.
deleting insn with uid = 155.
rescanning insn with uid = 157.
deleting insn with uid = 157.
rescanning insn with uid = 158.
deleting insn with uid = 158.
rescanning insn with uid = 159.
deleting insn with uid = 159.
rescanning insn with uid = 161.
deleting insn with uid = 161.
rescanning insn with uid = 162.
deleting insn with uid = 162.
rescanning insn with uid = 163.
deleting insn with uid = 163.
rescanning insn with uid = 15.
deleting insn with uid = 15.
      Changing RTL for loop 3 (header bb12)
  2 vs parent 2:      Creating newreg=173 from oldreg=63
  43 vs parent 43:      Creating newreg=174 from oldreg=165
  38 vs parent 38:      Creating newreg=175 from oldreg=72
  6 vs parent 6:      Creating newreg=176 from oldreg=166
  44 vs parent 44:      Creating newreg=177 from oldreg=167
  41 vs parent 41:      Creating newreg=178 from oldreg=168
  3 vs parent 3:      Creating newreg=179 from oldreg=169
  42 vs parent 42:      Creating newreg=180 from oldreg=170
  5 vs parent 5:      Creating newreg=181 from oldreg=171
  40 vs parent 40:      Creating newreg=182 from oldreg=172
rescanning insn with uid = 138.
deleting insn with uid = 138.
rescanning insn with uid = 140.
deleting insn with uid = 140.
rescanning insn with uid = 141.
deleting insn with uid = 141.
rescanning insn with uid = 144.
deleting insn with uid = 144.
rescanning insn with uid = 145.
deleting insn with uid = 145.
rescanning insn with uid = 147.
deleting insn with uid = 147.
rescanning insn with uid = 132.
deleting insn with uid = 132.
rescanning insn with uid = 134.
deleting insn with uid = 134.
rescanning insn with uid = 123.
deleting insn with uid = 123.
rescanning insn with uid = 116.
deleting insn with uid = 116.
rescanning insn with uid = 118.
deleting insn with uid = 118.
      Changing RTL for loop 1 (header bb9)
  43 vs parent 43:      Creating newreg=183 from oldreg=77
  6 vs parent 6:      Creating newreg=184 from oldreg=92
  41 vs parent 41:      Creating newreg=185 from oldreg=109
  44 vs parent 44:      Creating newreg=186 from oldreg=111
  3 vs parent 3:      Creating newreg=187 from oldreg=112
  42 vs parent 42:      Creating newreg=188 from oldreg=164
rescanning insn with uid = 72.
deleting insn with uid = 72.
rescanning insn with uid = 77.
deleting insn with uid = 77.
rescanning insn with uid = 78.
deleting insn with uid = 78.
rescanning insn with uid = 81.
deleting insn with uid = 81.
rescanning insn with uid = 82.
deleting insn with uid = 82.
scanning new insn with uid = 216.
scanning new insn with uid = 217.
scanning new insn with uid = 218.
scanning new insn with uid = 219.
scanning new insn with uid = 220.
scanning new insn with uid = 221.
scanning new insn with uid = 222.
scanning new insn with uid = 223.
scanning new insn with uid = 230.
scanning new insn with uid = 231.
scanning new insn with uid = 232.
scanning new insn with uid = 233.
scanning new insn with uid = 234.
scanning new insn with uid = 235.
    Adding cp29:a15r77-a64r183
    Adding range [57..57] to allocno a15r77
    Adding cp30:a14r92-a65r184
    Adding range [57..59] to allocno a14r92
    Adding cp31:a8r109-a68r185
    Adding range [57..61] to allocno a8r109
    Adding cp32:a18r111-a70r186
    Adding range [57..63] to allocno a18r111
    Adding cp33:a4r112-a71r187
    Adding range [57..65] to allocno a4r112
    Adding cp34:a13r164-a72r188
    Adding range [57..67] to allocno a13r164
    Adding range [58..68] to allocno a64r183
    Adding range [60..68] to allocno a65r184
    Adding range [62..68] to allocno a68r185
    Adding range [64..68] to allocno a70r186
    Adding range [66..68] to allocno a71r187
    Adding range [68..68] to allocno a72r188
    Adding range [57..68] to live through  allocno a7r62
    Adding range [57..68] to live through  allocno a17r102
    Adding range [57..68] to live through  allocno a6r108
    Adding range [57..68] to live through  allocno a9r110
    Adding cp35:a8r109-a68r185
    Adding range [70..70] to allocno a68r185
    Adding cp36:a4r112-a71r187
    Adding range [70..72] to allocno a71r187
    Adding range [71..73] to allocno a8r109
    Adding range [73..73] to allocno a4r112
    Adding range [70..73] to live through  allocno a7r62
    Adding range [70..73] to live through  allocno a6r108
    Adding range [70..73] to live through  allocno a9r110
    Adding cp37:a2r71-a26r165
    Adding range [75..75] to allocno a2r71
    Adding cp38:a5r91-a27r166
    Adding range [75..77] to allocno a5r91
    Adding cp39:a1r95-a28r167
    Adding range [75..79] to allocno a1r95
    Adding cp40:a8r109-a29r168
    Adding range [75..81] to allocno a8r109
    Adding cp41:a4r112-a31r169
    Adding range [75..83] to allocno a4r112
    Adding cp42:a0r162-a32r170
    Adding range [75..85] to allocno a0r162
    Adding range [76..86] to allocno a26r165
    Adding range [78..86] to allocno a27r166
    Adding range [80..86] to allocno a28r167
    Adding range [82..86] to allocno a29r168
    Adding range [84..86] to allocno a31r169
    Adding range [86..86] to allocno a32r170
    Adding range [75..86] to live through  allocno a7r62
    Adding range [75..86] to live through  allocno a9r110
    Adding cp43:a26r165-a42r174
    Adding range [88..88] to allocno a42r174
    Adding cp44:a27r166-a44r176
    Adding range [88..90] to allocno a44r176
    Adding cp45:a28r167-a45r177
    Adding range [88..92] to allocno a45r177
    Adding cp46:a29r168-a46r178
    Adding range [88..94] to allocno a46r178
    Adding cp47:a31r169-a48r179
    Adding range [88..96] to allocno a48r179
    Adding cp48:a32r170-a49r180
    Adding range [88..98] to allocno a49r180
    Adding range [89..99] to allocno a26r165
    Adding range [91..99] to allocno a27r166
    Adding range [93..99] to allocno a28r167
    Adding range [95..99] to allocno a29r168
    Adding range [97..99] to allocno a31r169
    Adding range [99..99] to allocno a32r170
    Adding range [88..99] to live through  allocno a25r62
    Adding range [88..99] to live through  allocno a30r110
    Adding cp49:a35r63-a41r173
    Adding range [101..101] to allocno a35r63
    Adding cp50:a26r165-a42r174
    Adding range [101..103] to allocno a26r165
    Adding cp51:a36r72-a43r175
    Adding range [101..105] to allocno a36r72
    Adding cp52:a27r166-a44r176
    Adding range [101..107] to allocno a27r166
    Adding cp53:a28r167-a45r177
    Adding range [101..109] to allocno a28r167
    Adding cp54:a29r168-a46r178
    Adding range [101..111] to allocno a29r168
    Adding cp55:a31r169-a48r179
    Adding range [101..113] to allocno a31r169
    Adding cp56:a32r170-a49r180
    Adding range [101..115] to allocno a32r170
    Adding cp57:a33r171-a50r181
    Adding range [101..117] to allocno a33r171
    Adding cp58:a34r172-a51r182
    Adding range [101..119] to allocno a34r172
    Adding range [102..120] to allocno a41r173
    Adding range [104..120] to allocno a42r174
    Adding range [106..120] to allocno a43r175
    Adding range [108..120] to allocno a44r176
    Adding range [110..120] to allocno a45r177
    Adding range [112..120] to allocno a46r178
    Adding range [114..120] to allocno a48r179
    Adding range [116..120] to allocno a49r180
    Adding range [118..120] to allocno a50r181
    Adding range [120..120] to allocno a51r182
    Adding range [101..120] to live through  allocno a25r62
    Adding range [101..120] to live through  allocno a30r110
scanning new insn with uid = 224.
scanning new insn with uid = 225.
scanning new insn with uid = 226.
scanning new insn with uid = 227.
scanning new insn with uid = 228.
scanning new insn with uid = 229.
scanning new insn with uid = 236.
scanning new insn with uid = 237.
scanning new insn with uid = 238.
scanning new insn with uid = 239.
scanning new insn with uid = 240.
scanning new insn with uid = 241.
scanning new insn with uid = 242.
scanning new insn with uid = 243.
scanning new insn with uid = 244.
scanning new insn with uid = 245.
    New r165: setting preferred GENERAL_REGS, alternative NO_REGS
    New r166: setting preferred GENERAL_REGS, alternative NO_REGS
    New r167: setting preferred GENERAL_REGS, alternative NO_REGS
    New r168: setting preferred SIREG, alternative GENERAL_REGS
    New r169: setting preferred GENERAL_REGS, alternative NO_REGS
    New r170: setting preferred GENERAL_REGS, alternative NO_REGS
    New r171: setting preferred DIREG, alternative GENERAL_REGS
    New r172: setting preferred GENERAL_REGS, alternative NO_REGS
    New r173: setting preferred GENERAL_REGS, alternative NO_REGS
    New r174: setting preferred GENERAL_REGS, alternative NO_REGS
    New r175: setting preferred GENERAL_REGS, alternative NO_REGS
    New r176: setting preferred GENERAL_REGS, alternative NO_REGS
    New r177: setting preferred GENERAL_REGS, alternative NO_REGS
    New r178: setting preferred SIREG, alternative GENERAL_REGS
    New r179: setting preferred GENERAL_REGS, alternative NO_REGS
    New r180: setting preferred GENERAL_REGS, alternative NO_REGS
    New r181: setting preferred DIREG, alternative GENERAL_REGS
    New r182: setting preferred GENERAL_REGS, alternative NO_REGS
    New r183: setting preferred GENERAL_REGS, alternative NO_REGS
    New r184: setting preferred GENERAL_REGS, alternative NO_REGS
    New r185: setting preferred SIREG, alternative GENERAL_REGS
    New r186: setting preferred CREG, alternative GENERAL_REGS
    New r187: setting preferred GENERAL_REGS, alternative NO_REGS
    New r188: setting preferred GENERAL_REGS, alternative NO_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 28 (  1.3)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 17 16 15 14 13 12 20
;;
;; Loop 3
;;  header 12, latch 15
;;  depth 2, outer 2
;;  nodes: 12 15 14 13
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 11 7 }
;; 7 succs { 21 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 6 }
;; 11 succs { 19 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 12 16 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 21 }
;; 19 succs { 20 17 }
;; 20 succs { 12 }
;; 21 succs { 1 }
+++Costs: overall 18574, reg 16038, mem 2536, ld 0, st 0, move 1552
+++       move loops 0, new jumps 2


void tiles(int*, int, collision_table*, float*, int, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={5d,1u} r1={8d,4u} r2={5d,1u} r4={8d,4u} r5={8d,4u} r6={1d,21u} r7={1d,25u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,21u,1e} r17={28d,8u} r18={4d} r19={4d} r20={1d,28u,7e} r21={6d,2u} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,1u} r38={5d,1u} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r62={1d,2u} r63={1d,1u} r66={1d,1u} r71={1d,1u} r72={1d,1u} r77={1d,1u} r78={1d,5u} r79={1d,4u} r82={3d,2u} r91={1d,1u} r92={1d,1u} r94={1d,1u} r95={1d,1u} r96={2d,1u} r102={1d,1u} r108={1d,1u} r109={2d,4u} r110={1d,1u} r111={1d,1u} r112={2d,8u} r113={1d,1u} r114={1d,3u} r117={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r129={1d,1u} r131={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r142={1d,1u} r146={1d,2u} r148={1d,1u} r149={1d} r151={1d,1u} r152={1d,2u} r154={1d,1u} r155={1d} r159={1d,1u} r160={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={2d,1u} r166={3d,3u,1e} r167={3d,6u} r168={2d,2u} r169={2d,3u} r170={2d,2u} r171={1d,1u} r172={1d,1u} r173={2d,6u,1e} r174={1d,2u} r175={2d,2u} r176={1d,1u} r177={1d,1u} r178={1d,6u} r179={1d,1u} r180={1d,2u} r181={1d,2u,1e} r182={1d,1u} r183={1d,1u} r184={2d,4u,1e} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u,1e} 
;;    total ref usage 564{313d,238u,13e} in 136{132 regular + 4 call} insns.
(note 3 0 18 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 62 108 109 110 111 112 113 114
(note 18 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 4 18 5 2 (set (reg/v/f:DI 108 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:84 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SI 109 [ num_tilings ])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:84 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn 6 5 7 2 (set (reg/v/f:DI 110 [ ctable ])
        (reg:DI 1 dx [ ctable ])) tiles.cpp:84 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ctable ])
        (nil)))
(insn 7 6 8 2 (set (reg/v/f:DI 111 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:84 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn 8 7 9 2 (set (reg/v:SI 112 [ num_floats ])
        (reg:SI 37 r8 [ num_floats ])) tiles.cpp:84 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ num_floats ])
        (nil)))
(insn 9 8 10 2 (set (reg/v/f:DI 113 [ ints ])
        (reg:DI 38 r9 [ ints ])) tiles.cpp:84 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ ints ])
        (nil)))
(insn 10 9 11 2 (set (reg/v:SI 114 [ num_ints ])
        (mem/c:SI (reg/f:DI 16 argp) [0 num_ints+0 S4 A64])) tiles.cpp:84 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 num_ints+0 S4 A64])
        (nil)))
(note 11 10 20 2 NOTE_INSN_FUNCTION_BEG)
(note 20 11 21 2 NOTE_INSN_DELETED)
(insn 21 20 22 2 (set (reg/v:SI 62 [ num_coordinates ])
        (plus:SI (plus:SI (reg/v:SI 112 [ num_floats ])
                (reg/v:SI 114 [ num_ints ]))
            (const_int 1 [0x1]))) tiles.cpp:89 266 {*leasi}
     (nil))
(debug_insn 22 21 24 2 (var_location:SI num_coordinates (reg/v:SI 62 [ num_coordinates ])) tiles.cpp:89 -1
     (nil))
(debug_insn 24 22 25 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 25 24 26 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 114 [ num_ints ])
            (const_int 0 [0]))) tiles.cpp:91 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 52 2 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) tiles.cpp:91 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9762 [0x2622])
            (nil)))
 -> 34)
;;  succ:       5 [97.6%] 
;;              3 [2.4%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 111 112 113 114

;; basic block 3, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [2.4%]  (FALLTHRU)
;;              5 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u18(6){ }u19(7){ }u20(16){ }u21(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 111 112
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112
;; lr  def 	 17 [flags]
(code_label 52 26 27 3 54 "" [1 uses])
(note 27 52 28 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 28 27 29 3 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 29 28 30 3 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 112 [ num_floats ])
            (const_int 0 [0]))) tiles.cpp:94 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 30 29 198 3 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) tiles.cpp:94 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 63)
;;  succ:       8 [95.2%] 
;;              4 [4.8%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 111 112

;; basic block 4, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 3, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       3 [4.8%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 112
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 198 30 199 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 199 198 200 4 (set (pc)
        (label_ref 55)) 650 {jump}
     (nil)
 -> 55)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 112

(barrier 200 199 34)
;; basic block 5, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2 [97.6%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(6){ }u25(7){ }u26(16){ }u27(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 111 112 113 114
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 113 114
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 117 120 121 122
(code_label 34 200 35 5 51 "" [1 uses])
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 36 35 37 5 NOTE_INSN_DELETED)
(insn 37 36 38 5 (set (reg:DI 117 [ D.26059 ])
        (sign_extend:DI (reg/v:SI 112 [ num_floats ]))) tiles.cpp:91 149 {*extendsidi2_rex64}
     (nil))
(note 38 37 39 5 NOTE_INSN_DELETED)
(note 39 38 40 5 NOTE_INSN_DELETED)
(insn 40 39 41 5 (set (reg:DI 120 [ D.26061 ])
        (plus:DI (plus:DI (mult:DI (reg:DI 117 [ D.26059 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 20 frame))
            (const_int -172 [0xffffffffffffff54]))) tiles.cpp:91 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 117 [ D.26059 ])
        (nil)))
(insn 41 40 42 5 (set (reg:DI 121 [ D.26059 ])
        (sign_extend:DI (reg/v:SI 114 [ num_ints ]))) tiles.cpp:91 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 114 [ num_ints ])
        (nil)))
(insn 42 41 46 5 (parallel [
            (set (reg:DI 122 [ D.26059 ])
                (ashift:DI (reg:DI 121 [ D.26059 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:91 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 121 [ D.26059 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 46 42 47 5 (set (reg:DI 1 dx)
        (reg:DI 122 [ D.26059 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 122 [ D.26059 ])
        (nil)))
(insn 47 46 48 5 (set (reg:DI 4 si)
        (reg/v/f:DI 113 [ ints ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 113 [ ints ])
        (nil)))
(insn 48 47 49 5 (set (reg:DI 5 di)
        (reg:DI 120 [ D.26061 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 120 [ D.26061 ])
        (nil)))
(call_insn 49 48 201 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 201 49 202 5 (set (pc)
        (label_ref 52)) 650 {jump}
     (nil)
 -> 52)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 111 112

(barrier 202 201 55)
;; basic block 6, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [100.0%] 
;;              10 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u43(6){ }u44(7){ }u45(16){ }u46(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 112
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109
;; lr  def 	 17 [flags]
(code_label 55 202 56 6 53 "" [2 uses])
(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 57 56 58 6 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn 58 57 59 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 109 [ num_tilings ])
            (const_int 0 [0]))) tiles.cpp:100 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 59 58 203 6 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) tiles.cpp:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 103)
;;  succ:       11 [91.0%] 
;;              7 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 112

;; basic block 7, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 6, next block 8, flags: (NEW, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 203 59 204 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 204 203 205 7 (set (pc)
        (label_ref 179)) 650 {jump}
     (nil)
 -> 179)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 205 204 63)
;; basic block 8, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 [95.2%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u49(6){ }u50(7){ }u51(16){ }u52(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 111 112
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 111 112
;; lr  def 	 77 92 102 129 164 183 184 185 186 187 188
(code_label 63 205 64 8 52 "" [1 uses])
(note 64 63 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 8 (set (reg:SF 102 [ D.26057 ])
        (float:SF (reg/v:SI 109 [ num_tilings ]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(note 66 65 67 8 NOTE_INSN_DELETED)
(insn 67 66 68 8 (set (reg:DI 129 [ D.26059 ])
        (zero_extend:DI (plus:SI (reg/v:SI 112 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 68 67 69 8 NOTE_INSN_DELETED)
(insn 69 68 12 8 (set (reg:DI 77 [ D.26059 ])
        (plus:DI (mult:DI (reg:DI 129 [ D.26059 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 129 [ D.26059 ])
        (nil)))
(insn 12 69 192 8 (set (reg:DI 92 [ ivtmp.138 ])
        (const_int 0 [0])) tiles.cpp:94 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 192 12 216 8 (set (reg/f:DI 164)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 216 192 217 8 (set (reg:DI 183 [orig:77 D.26059 ] [77])
        (reg:DI 77 [ D.26059 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 77 [ D.26059 ])
        (nil)))
(insn 217 216 218 8 (set (reg:DI 184 [orig:92 ivtmp.138 ] [92])
        (reg:DI 92 [ ivtmp.138 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 92 [ ivtmp.138 ])
        (nil)))
(insn 218 217 219 8 (set (reg/v:SI 185 [orig:109 num_tilings ] [109])
        (reg/v:SI 109 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 109 [ num_tilings ])
        (nil)))
(insn 219 218 220 8 (set (reg/v/f:DI 186 [orig:111 floats ] [111])
        (reg/v/f:DI 111 [ floats ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 111 [ floats ])
        (nil)))
(insn 220 219 221 8 (set (reg/v:SI 187 [orig:112 num_floats ] [112])
        (reg/v:SI 112 [ num_floats ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 112 [ num_floats ])
        (nil)))
(insn 221 220 85 8 (set (reg/f:DI 188 [164])
        (reg/f:DI 164)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 102 108 110 183 184 185 186 187 188

;; basic block 9, loop depth 1, count 0, freq 942, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       9 [95.2%]  (DFS_BACK)
;;              8 [100.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u59(6){ }u60(7){ }u61(16){ }u62(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 102 108 110 183 184 185 186 187 188
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102 183 184 186 188
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 131 133 184
(code_label 85 221 70 9 58 "" [1 uses])
(note 70 85 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 71 70 72 9 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 72 71 73 9 (set (reg:SF 131 [ D.26057 ])
        (mult:SF (reg:SF 102 [ D.26057 ])
            (mem:SF (plus:DI (reg/v/f:DI 186 [orig:111 floats ] [111])
                    (reg:DI 184 [orig:92 ivtmp.138 ] [92])) [0 MEM[base: floats_26(D), index: ivtmp.138_58, offset: 0B]+0 S4 A32]))) tiles.cpp:95 777 {*fop_sf_comm_sse}
     (nil))
(insn 73 72 74 9 (set (reg:SF 21 xmm0)
        (reg:SF 131 [ D.26057 ])) tiles.cpp:95 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 131 [ D.26057 ])
        (nil)))
(call_insn/u 74 73 75 9 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:95 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 75 74 77 9 (set (reg:SF 66 [ D.26057 ])
        (reg:SF 21 xmm0)) tiles.cpp:95 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0)
        (nil)))
(insn 77 75 78 9 (set (reg:SI 133)
        (fix:SI (reg:SF 66 [ D.26057 ]))) tiles.cpp:95 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 66 [ D.26057 ])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 188 [164])
                    (reg:DI 184 [orig:92 ivtmp.138 ] [92])) [0 MEM[symbol: qstate, index: ivtmp.138_58, offset: 0B]+0 S4 A32])
            (nil))))
(insn 78 77 80 9 (set (mem:SI (plus:DI (reg/f:DI 188 [164])
                (reg:DI 184 [orig:92 ivtmp.138 ] [92])) [0 MEM[symbol: qstate, index: ivtmp.138_58, offset: 0B]+0 S4 A32])
        (reg:SI 133)) tiles.cpp:95 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 133)
        (nil)))
(debug_insn 80 78 81 9 (var_location:SI i (debug_expr:SI D#9)) -1
     (nil))
(insn 81 80 82 9 (parallel [
            (set (reg:DI 184 [orig:92 ivtmp.138 ] [92])
                (plus:DI (reg:DI 184 [orig:92 ivtmp.138 ] [92])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 82 81 83 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 184 [orig:92 ivtmp.138 ] [92])
            (reg:DI 183 [orig:77 D.26059 ] [77]))) tiles.cpp:94 8 {*cmpdi_1}
     (nil))
(jump_insn 83 82 89 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 85)
            (pc))) tiles.cpp:94 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 85)
;;  succ:       9 [95.2%]  (DFS_BACK)
;;              10 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 102 108 110 183 184 185 186 187 188

;; basic block 10, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u78(6){ }u79(7){ }u80(16){ }u81(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 110 185 187
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 185 187
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 109 112 134 135 163
(note 89 83 222 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 222 89 223 10 (set (reg/v:SI 109 [ num_tilings ])
        (reg/v:SI 185 [orig:109 num_tilings ] [109])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 185 [orig:109 num_tilings ] [109])
        (nil)))
(insn 223 222 90 10 (set (reg/v:SI 112 [ num_floats ])
        (reg/v:SI 187 [orig:112 num_floats ] [112])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 187 [orig:112 num_floats ] [112])
        (nil)))
(insn 90 223 91 10 (set (reg:DI 134 [ D.26059 ])
        (sign_extend:DI (reg/v:SI 112 [ num_floats ]))) tiles.cpp:96 149 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 10 (parallel [
            (set (reg:DI 135 [ D.26059 ])
                (ashift:DI (reg:DI 134 [ D.26059 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:96 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 134 [ D.26059 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 92 91 95 10 (parallel [
            (set (reg/f:DI 163)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -256 [0xffffffffffffff00]))
            (nil))))
(insn 95 92 96 10 (set (reg:DI 1 dx)
        (reg:DI 135 [ D.26059 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 135 [ D.26059 ])
        (nil)))
(insn 96 95 97 10 (set (reg:SI 4 si)
        (const_int 0 [0])) 89 {*movsi_internal}
     (nil))
(insn 97 96 98 10 (set (reg:DI 5 di)
        (reg/f:DI 163)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -256 [0xffffffffffffff00]))
            (nil))))
(call_insn 98 97 206 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 206 98 207 10 (set (pc)
        (label_ref 55)) 650 {jump}
     (nil)
 -> 55)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 112

(barrier 207 206 103)
;; basic block 11, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       6 [91.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u92(6){ }u93(7){ }u94(16){ }u95(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 108 109 110 112
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108 109 112
;; lr  def 	 71 91 95 142 162 165 166 167 168 169 170
(code_label 103 207 104 11 55 "" [1 uses])
(note 104 103 105 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 11 (set (reg:DI 91 [ ivtmp.132 ])
        (reg/v/f:DI 108 [ the_tiles ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 108 [ the_tiles ])
        (nil)))
(note 106 105 107 11 NOTE_INSN_DELETED)
(insn 107 106 108 11 (set (reg:DI 142 [ D.26059 ])
        (zero_extend:DI (plus:SI (reg/v:SI 112 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 108 107 109 11 NOTE_INSN_DELETED)
(insn 109 108 17 11 (set (reg:DI 71 [ D.26059 ])
        (plus:DI (mult:DI (reg:DI 142 [ D.26059 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 142 [ D.26059 ])
        (nil)))
(insn 17 109 193 11 (set (reg/v:SI 95 [ j ])
        (const_int 0 [0])) tiles.cpp:100 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 193 17 224 11 (set (reg/f:DI 162)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 224 193 225 11 (set (reg:DI 165 [orig:71 D.26059 ] [71])
        (reg:DI 71 [ D.26059 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 71 [ D.26059 ])
        (nil)))
(insn 225 224 226 11 (set (reg:DI 166 [orig:91 ivtmp.132 ] [91])
        (reg:DI 91 [ ivtmp.132 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 91 [ ivtmp.132 ])
        (nil)))
(insn 226 225 227 11 (set (reg/v:SI 167 [orig:95 j ] [95])
        (reg/v:SI 95 [ j ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 95 [ j ])
        (nil)))
(insn 227 226 228 11 (set (reg/v:SI 168 [orig:109 num_tilings ] [109])
        (reg/v:SI 109 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 109 [ num_tilings ])
        (nil)))
(insn 228 227 229 11 (set (reg/v:SI 169 [orig:112 num_floats ] [112])
        (reg/v:SI 112 [ num_floats ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 112 [ num_floats ])
        (nil)))
(insn 229 228 208 11 (set (reg/f:DI 170 [162])
        (reg/f:DI 162)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (nil)))
(jump_insn 208 229 209 11 (set (pc)
        (label_ref 166)) 650 {jump}
     (nil)
 -> 166)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 165 166 167 168 169 170

(barrier 209 208 174)
;; basic block 12, loop depth 2, count 0, freq 9524, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       15 [95.2%]  (DFS_BACK)
;;              20 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u102(6){ }u103(7){ }u104(16){ }u105(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 173 174 175 176 177 178 179 180 181 182
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 173 181 182
;; lr  def 	 17 [flags] 78 79
(code_label 174 209 113 12 64 "" [2 uses])
(note 113 174 114 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 114 113 116 12 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 116 114 118 12 (set (reg:SI 78 [ D.26056 ])
        (mem:SI (plus:DI (reg/f:DI 182 [164])
                (reg:DI 173 [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: qstate, index: ivtmp.121_15, offset: 0B]+0 S4 A32])) tiles.cpp:106 89 {*movsi_internal}
     (nil))
(insn 118 116 119 12 (set (reg:SI 79 [ D.26056 ])
        (mem:SI (plus:DI (reg/f:DI 181 [163])
                (reg:DI 173 [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: base, index: ivtmp.121_15, offset: 0B]+0 S4 A32])) tiles.cpp:106 89 {*movsi_internal}
     (nil))
(insn 119 118 120 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 78 [ D.26056 ])
            (reg:SI 79 [ D.26056 ]))) tiles.cpp:106 7 {*cmpsi_1}
     (nil))
(jump_insn 120 119 121 12 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) tiles.cpp:106 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 127)
;;  succ:       13 [50.0%]  (FALLTHRU)
;;              14 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 78 79 110 173 174 175 176 177 178 179 180 181 182

;; basic block 13, loop depth 2, count 0, freq 4762, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [50.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u113(6){ }u114(7){ }u115(16){ }u116(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 78 79 110 173 174 175 176 177 178 179 180 181 182
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78 79 178
;; lr  def 	 17 [flags] 82 146 148 149
(note 121 120 122 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 13 (parallel [
            (set (reg:SI 146 [ D.26056 ])
                (minus:SI (reg:SI 78 [ D.26056 ])
                    (reg:SI 79 [ D.26056 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:107 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 123 122 124 13 (parallel [
            (set (reg:SI 149)
                (div:SI (reg:SI 146 [ D.26056 ])
                    (reg/v:SI 178 [orig:109 num_tilings ] [109])))
            (set (reg:SI 148 [ D.26056 ])
                (mod:SI (reg:SI 146 [ D.26056 ])
                    (reg/v:SI 178 [orig:109 num_tilings ] [109])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:107 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 146 [ D.26056 ])
        (expr_list:REG_UNUSED (reg:SI 149)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 124 123 210 13 (parallel [
            (set (reg:SI 82 [ D.26056 ])
                (minus:SI (reg:SI 78 [ D.26056 ])
                    (reg:SI 148 [ D.26056 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:107 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 148 [ D.26056 ])
        (expr_list:REG_DEAD (reg:SI 78 [ D.26056 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(jump_insn 210 124 211 13 (set (pc)
        (label_ref 135)) 650 {jump}
     (nil)
 -> 135)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 79 82 110 173 174 175 176 177 178 179 180 181 182

(barrier 211 210 127)
;; basic block 14, loop depth 2, count 0, freq 4762, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12 [50.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u125(6){ }u126(7){ }u127(16){ }u128(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 78 79 110 173 174 175 176 177 178 179 180 181 182
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78 79 178
;; lr  def 	 17 [flags] 82 151 152 154 155
(code_label 127 211 128 14 60 "" [1 uses])
(note 128 127 129 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 129 128 130 14 NOTE_INSN_DELETED)
(insn 130 129 131 14 (parallel [
            (set (reg:SI 151 [ D.26056 ])
                (minus:SI (reg:SI 79 [ D.26056 ])
                    (reg:SI 78 [ D.26056 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 131 130 132 14 (parallel [
            (set (reg:SI 152 [ D.26056 ])
                (plus:SI (reg:SI 151 [ D.26056 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 151 [ D.26056 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 132 131 133 14 (parallel [
            (set (reg:SI 155)
                (div:SI (reg:SI 152 [ D.26056 ])
                    (reg/v:SI 178 [orig:109 num_tilings ] [109])))
            (set (reg:SI 154 [ D.26056 ])
                (mod:SI (reg:SI 152 [ D.26056 ])
                    (reg/v:SI 178 [orig:109 num_tilings ] [109])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 152 [ D.26056 ])
        (expr_list:REG_UNUSED (reg:SI 155)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 133 132 134 14 (set (reg:SI 82 [ D.26056 ])
        (plus:SI (plus:SI (reg:SI 78 [ D.26056 ])
                (reg:SI 154 [ D.26056 ]))
            (const_int 1 [0x1]))) tiles.cpp:109 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 154 [ D.26056 ])
        (expr_list:REG_DEAD (reg:SI 78 [ D.26056 ])
            (nil))))
(insn 134 133 135 14 (parallel [
            (set (reg:SI 82 [ D.26056 ])
                (minus:SI (reg:SI 82 [ D.26056 ])
                    (reg/v:SI 178 [orig:109 num_tilings ] [109])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 79 82 110 173 174 175 176 177 178 179 180 181 182

;; basic block 15, loop depth 2, count 0, freq 9524, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u141(6){ }u142(7){ }u143(16){ }u144(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 79 82 110 173 174 175 176 177 178 179 180 181 182
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79 82 173 174 175 180 181
;; lr  def 	 17 [flags] 159 173 175
(code_label 135 134 136 15 61 "" [1 uses])
(note 136 135 138 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 138 136 140 15 (set (mem:SI (plus:DI (reg/f:DI 180 [162])
                (reg:DI 173 [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: coordinates, index: ivtmp.121_15, offset: 0B]+0 S4 A32])
        (reg:SI 82 [ D.26056 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ D.26056 ])
        (nil)))
(insn 140 138 141 15 (parallel [
            (set (reg:SI 159)
                (plus:SI (reg:SI 79 [ D.26056 ])
                    (reg:SI 175 [orig:72 ivtmp.127 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:112 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 79 [ D.26056 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 181 [163])
                        (reg:DI 173 [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: base, index: ivtmp.121_15, offset: 0B]+0 S4 A32])
                (nil)))))
(insn 141 140 143 15 (set (mem:SI (plus:DI (reg/f:DI 181 [163])
                (reg:DI 173 [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: base, index: ivtmp.121_15, offset: 0B]+0 S4 A32])
        (reg:SI 159)) tiles.cpp:112 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 159)
        (nil)))
(debug_insn 143 141 144 15 (var_location:SI i (debug_expr:SI D#8)) -1
     (nil))
(insn 144 143 145 15 (parallel [
            (set (reg:DI 173 [orig:63 ivtmp.121 ] [63])
                (plus:DI (reg:DI 173 [orig:63 ivtmp.121 ] [63])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 145 144 147 15 (parallel [
            (set (reg:SI 175 [orig:72 ivtmp.127 ] [72])
                (plus:SI (reg:SI 175 [orig:72 ivtmp.127 ] [72])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 147 145 148 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 173 [orig:63 ivtmp.121 ] [63])
            (reg:DI 174 [orig:71 D.26059 ] [71]))) tiles.cpp:103 8 {*cmpdi_1}
     (nil))
(jump_insn 148 147 181 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 174)
            (pc))) tiles.cpp:103 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 174)
;;  succ:       12 [95.2%]  (DFS_BACK)
;;              16 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 173 174 175 176 177 178 179 180 181 182

;; basic block 16, loop depth 1, count 0, freq 453, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u158(6){ }u159(7){ }u160(16){ }u161(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 174 176 177 178 179 180
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174 176 177 178 179 180
;; lr  def 	 96 165 166 167 168 169 170
(note 181 148 230 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 230 181 231 16 (set (reg:DI 165 [orig:71 D.26059 ] [71])
        (reg:DI 174 [orig:71 D.26059 ] [71])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 174 [orig:71 D.26059 ] [71])
        (nil)))
(insn 231 230 232 16 (set (reg:DI 166 [orig:91 ivtmp.132 ] [91])
        (reg:DI 176 [orig:91 ivtmp.132 ] [91])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 176 [orig:91 ivtmp.132 ] [91])
        (nil)))
(insn 232 231 233 16 (set (reg/v:SI 167 [orig:95 j ] [95])
        (reg/v:SI 177 [orig:95 j ] [95])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 177 [orig:95 j ] [95])
        (nil)))
(insn 233 232 234 16 (set (reg/v:SI 168 [orig:109 num_tilings ] [109])
        (reg/v:SI 178 [orig:109 num_tilings ] [109])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 178 [orig:109 num_tilings ] [109])
        (nil)))
(insn 234 233 235 16 (set (reg/v:SI 169 [orig:112 num_floats ] [112])
        (reg/v:SI 179 [orig:112 num_floats ] [112])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 179 [orig:112 num_floats ] [112])
        (nil)))
(insn 235 234 15 16 (set (reg/f:DI 170 [162])
        (reg/f:DI 180 [162])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 180 [162])
        (nil)))
(insn 15 235 212 16 (set (reg/v:SI 96 [ num_floats ])
        (reg/v:SI 169 [orig:112 num_floats ] [112])) 89 {*movsi_internal}
     (nil))
(jump_insn 212 15 213 16 (set (pc)
        (label_ref 170)) 650 {jump}
     (nil)
 -> 170)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 96 110 165 166 167 168 169 170

(barrier 213 212 185)
;; basic block 17, loop depth 1, count 0, freq 23, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       19 [4.8%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u163(6){ }u164(7){ }u165(16){ }u166(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 165 166 167 168 169 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 96
(code_label 185 213 184 17 65 "" [1 uses])
(note 184 185 16 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 16 184 170 17 (set (reg/v:SI 96 [ num_floats ])
        (const_int 0 [0])) tiles.cpp:103 89 {*movsi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 96 110 165 166 167 168 169 170

;; basic block 18, loop depth 1, count 0, freq 476, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u167(6){ }u168(7){ }u169(16){ }u170(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 96 110 165 166 167 168 169 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 96 110 166 167 168 170
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 94 160 166 167
(code_label 170 16 149 18 63 "" [1 uses])
(note 149 170 150 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 18 (set (reg:DI 160 [ num_floats ])
        (sign_extend:DI (reg/v:SI 96 [ num_floats ]))) tiles.cpp:115 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 96 [ num_floats ])
        (nil)))
(insn 151 150 153 18 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 160 [ num_floats ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -176 [0xffffffffffffff50])) [0 coordinates S4 A32])
        (reg/v:SI 167 [orig:95 j ] [95])) tiles.cpp:115 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 160 [ num_floats ])
        (nil)))
(insn 153 151 154 18 (set (reg:DI 1 dx)
        (reg/v/f:DI 110 [ ctable ])) tiles.cpp:117 87 {*movdi_internal_rex64}
     (nil))
(insn 154 153 155 18 (set (reg:SI 4 si)
        (reg/v:SI 62 [ num_coordinates ])) tiles.cpp:117 89 {*movsi_internal}
     (nil))
(insn 155 154 156 18 (set (reg:DI 5 di)
        (reg/f:DI 170 [162])) tiles.cpp:117 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(call_insn 156 155 157 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z4hashPiiP15collision_table") [flags 0x1]  <function_decl 0x2b82f1f16800 hash>) [0 hash S1 A8])
            (const_int 0 [0]))) tiles.cpp:117 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 157 156 158 18 (set (reg:SI 94 [ D.26056 ])
        (reg:SI 0 ax)) tiles.cpp:117 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (expr_list:REG_EQUIV (mem:SI (reg:DI 166 [orig:91 ivtmp.132 ] [91]) [0 MEM[base: _31, offset: 0B]+0 S4 A32])
            (nil))))
(insn 158 157 159 18 (set (mem:SI (reg:DI 166 [orig:91 ivtmp.132 ] [91]) [0 MEM[base: _31, offset: 0B]+0 S4 A32])
        (reg:SI 94 [ D.26056 ])) tiles.cpp:117 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94 [ D.26056 ])
        (nil)))
(insn 159 158 161 18 (parallel [
            (set (reg/v:SI 167 [orig:95 j ] [95])
                (plus:SI (reg/v:SI 167 [orig:95 j ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:100 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 161 159 162 18 (var_location:SI j (reg/v:SI 167 [orig:95 j ] [95])) -1
     (nil))
(insn 162 161 163 18 (parallel [
            (set (reg:DI 166 [orig:91 ivtmp.132 ] [91])
                (plus:DI (reg:DI 166 [orig:91 ivtmp.132 ] [91])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 163 162 164 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 167 [orig:95 j ] [95])
            (reg/v:SI 168 [orig:109 num_tilings ] [109]))) tiles.cpp:100 7 {*cmpsi_1}
     (nil))
(jump_insn 164 163 166 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 179)
            (pc))) tiles.cpp:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 179)
;;  succ:       19 [91.0%]  (FALLTHRU,DFS_BACK)
;;              21 [9.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 165 166 167 168 169 170

;; basic block 19, loop depth 1, count 0, freq 476, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 [91.0%]  (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u192(6){ }u193(7){ }u194(16){ }u195(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 165 166 167 168 169 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 169
;; lr  def 	 17 [flags]
(code_label 166 164 167 19 59 "" [1 uses])
(note 167 166 168 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(debug_insn 168 167 169 19 (var_location:SI j (reg/v:SI 167 [orig:95 j ] [95])) -1
     (nil))
(debug_insn 169 168 171 19 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 171 169 172 19 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 169 [orig:112 num_floats ] [112])
            (const_int 0 [0]))) tiles.cpp:103 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 172 171 173 19 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 185)
            (pc))) tiles.cpp:103 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 185)
;;  succ:       20 [95.2%]  (FALLTHRU)
;;              17 [4.8%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 165 166 167 168 169 170

;; basic block 20, loop depth 1, count 0, freq 453, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [95.2%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u199(6){ }u200(7){ }u201(16){ }u202(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 165 166 167 168 169 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 165 166 167 168 169 170
;; lr  def 	 63 72 171 172 173 174 175 176 177 178 179 180 181 182
(note 173 172 13 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 13 173 14 20 (set (reg:SI 72 [ ivtmp.127 ])
        (const_int 1 [0x1])) tiles.cpp:103 89 {*movsi_internal}
     (nil))
(insn 14 13 194 20 (set (reg:DI 63 [ ivtmp.121 ])
        (const_int 0 [0])) tiles.cpp:103 87 {*movdi_internal_rex64}
     (nil))
(insn 194 14 195 20 (set (reg/f:DI 172 [164])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 195 194 236 20 (set (reg/f:DI 171 [163])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -256 [0xffffffffffffff00]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -256 [0xffffffffffffff00]))
        (nil)))
(insn 236 195 237 20 (set (reg:DI 173 [orig:63 ivtmp.121 ] [63])
        (reg:DI 63 [ ivtmp.121 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 63 [ ivtmp.121 ])
        (nil)))
(insn 237 236 238 20 (set (reg:DI 174 [orig:71 D.26059 ] [71])
        (reg:DI 165 [orig:71 D.26059 ] [71])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 165 [orig:71 D.26059 ] [71])
        (nil)))
(insn 238 237 239 20 (set (reg:SI 175 [orig:72 ivtmp.127 ] [72])
        (reg:SI 72 [ ivtmp.127 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 72 [ ivtmp.127 ])
        (nil)))
(insn 239 238 240 20 (set (reg:DI 176 [orig:91 ivtmp.132 ] [91])
        (reg:DI 166 [orig:91 ivtmp.132 ] [91])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 166 [orig:91 ivtmp.132 ] [91])
        (nil)))
(insn 240 239 241 20 (set (reg/v:SI 177 [orig:95 j ] [95])
        (reg/v:SI 167 [orig:95 j ] [95])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 167 [orig:95 j ] [95])
        (nil)))
(insn 241 240 242 20 (set (reg/v:SI 178 [orig:109 num_tilings ] [109])
        (reg/v:SI 168 [orig:109 num_tilings ] [109])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 168 [orig:109 num_tilings ] [109])
        (nil)))
(insn 242 241 243 20 (set (reg/v:SI 179 [orig:112 num_floats ] [112])
        (reg/v:SI 169 [orig:112 num_floats ] [112])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 169 [orig:112 num_floats ] [112])
        (nil)))
(insn 243 242 244 20 (set (reg/f:DI 180 [162])
        (reg/f:DI 170 [162])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 170 [162])
        (nil)))
(insn 244 243 245 20 (set (reg/f:DI 181 [163])
        (reg/f:DI 171 [163])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 171 [163])
        (nil)))
(insn 245 244 214 20 (set (reg/f:DI 182 [164])
        (reg/f:DI 172 [164])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 172 [164])
        (nil)))
(jump_insn 214 245 215 20 (set (pc)
        (label_ref 174)) 650 {jump}
     (nil)
 -> 174)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 110 173 174 175 176 177 178 179 180 181 182

(barrier 215 214 179)
;; basic block 21, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       18 [9.0%]  (LOOP_EXIT)
;;              7 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u205(6){ }u206(7){ }u207(16){ }u208(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 179 215 180 21 50 "" [2 uses])
(note 180 179 0 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void collision_table::reset() (_ZN15collision_table5resetEv, funcdef_no=1065, decl_uid=23655, cgraph_uid=309)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Ignoring reg 67, has equiv memory
Reg 59: local to bb 4 def dominates all uses has unique first use
Examining insn 28, def for 59
  all ok
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 4, latch 4
;;  depth 1, outer 0
;;  nodes: 4
;; 2 succs { 4 3 }
;; 3 succs { 6 }
;; 4 succs { 4 5 }
;; 5 succs { 3 }
;; 6 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 67: (insn_list:REG_DEP_TRUE 22 (nil))

Pass 0 for finding pseudo/allocno costs

    a7 (r67,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r66,l1) best DIREG, allocno DIREG
    a0 (r66,l0) best DIREG, allocno DIREG
    a4 (r65,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r63,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r59,l1) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-90,-90 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5850,41340 SSE_REGS:5850,41340 MMX_REGS:5850,41340 FP_TOP_SSE_REGS:24592600,203503150 FP_SECOND_SSE_REGS:24592600,203503150 FLOAT_SSE_REGS:24592600,203503150 FLOAT_INT_REGS:24592600,203503150 INT_SSE_REGS:5850,41340 FLOAT_INT_SSE_REGS:24592600,203503150 ALL_REGS:24592600,203503150 MEM:1800,12720
  a1(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,36660 SSE_REGS:1170,36660 MMX_REGS:1170,36660 FP_TOP_SSE_REGS:1000000,62636850 FP_SECOND_SSE_REGS:1000000,62636850 FLOAT_SSE_REGS:1000000,62636850 FLOAT_INT_REGS:1000000,62636850 INT_SSE_REGS:1170,36660 FLOAT_INT_SSE_REGS:1000000,62636850 ALL_REGS:1000000,62636850 MEM:360,9460
  a2(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,36660 SSE_REGS:1170,36660 MMX_REGS:1170,36660 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:1170,36660 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:360,8550
  a3(r63,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:8190,8190
  a4(r65,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:61636850,61636850 FP_SECOND_SSE_REGS:61636850,61636850 FLOAT_SSE_REGS:61636850,61636850 FLOAT_INT_REGS:61636850,61636850 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:61636850,61636850 ALL_REGS:61636850,61636850 MEM:9100,9100
  a5(r66,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:178910550,178910550 FP_SECOND_SSE_REGS:178910550,178910550 FLOAT_SSE_REGS:178910550,178910550 FLOAT_INT_REGS:178910550,178910550 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:178910550,178910550 ALL_REGS:178910550,178910550 MEM:10920,10920
  a6(r59,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7280,7280
  a7(r67,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:60636850,60636850 FP_SECOND_SSE_REGS:60636850,60636850 FLOAT_SSE_REGS:60636850,60636850 FLOAT_INT_REGS:60636850,60636850 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:60636850,60636850 ALL_REGS:60636850,60636850 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r66,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-90,-90 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5850,41340 SSE_REGS:5850,41340 MMX_REGS:5850,41340 FP_TOP_SSE_REGS:24592600,203503150 FP_SECOND_SSE_REGS:24592600,203503150 FLOAT_SSE_REGS:24592600,203503150 FLOAT_INT_REGS:24592600,203503150 INT_SSE_REGS:5850,41340 FLOAT_INT_SSE_REGS:24592600,203503150 ALL_REGS:24592600,203503150 MEM:1800,12720
  a1(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1170,36660 SSE_REGS:1170,36660 MMX_REGS:1170,36660 FP_TOP_SSE_REGS:1000000,62636850 FP_SECOND_SSE_REGS:1000000,62636850 FLOAT_SSE_REGS:1000000,62636850 FLOAT_INT_REGS:1000000,62636850 INT_SSE_REGS:1170,36660 FLOAT_INT_SSE_REGS:1000000,62636850 ALL_REGS:1000000,62636850 MEM:360,9460
  a2(r63,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1170,36660 SSE_REGS:1170,36660 MMX_REGS:1170,36660 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:1170,36660 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:360,8550
  a3(r63,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:8190,8190
  a4(r65,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:61636850,61636850 FP_SECOND_SSE_REGS:61636850,61636850 FLOAT_SSE_REGS:61636850,61636850 FLOAT_INT_REGS:61636850,61636850 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:61636850,61636850 ALL_REGS:61636850,61636850 MEM:9100,9100
  a5(r66,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:178910550,178910550 FP_SECOND_SSE_REGS:178910550,178910550 FLOAT_SSE_REGS:178910550,178910550 FLOAT_INT_REGS:178910550,178910550 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:178910550,178910550 ALL_REGS:178910550,178910550 MEM:10920,10920
  a6(r59,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7280,7280
  a7(r67,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:60636850,60636850 FP_SECOND_SSE_REGS:60636850,60636850 FLOAT_SSE_REGS:60636850,60636850 FLOAT_INT_REGS:60636850,60636850 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:60636850,60636850 ALL_REGS:60636850,60636850 MEM:0,0

   Insn 43(l0): point = 1
   Insn 15(l0): point = 3
   Insn 14(l0): point = 5
   Insn 13(l0): point = 7
   Insn 46(l0): point = 10
   Insn 11(l0): point = 13
   Insn 10(l0): point = 15
   Insn 5(l0): point = 17
   Insn 4(l0): point = 19
   Insn 2(l0): point = 21
   Insn 33(l1): point = 24
   Insn 32(l1): point = 26
   Insn 30(l1): point = 28
   Insn 29(l1): point = 30
   Insn 28(l1): point = 32
   Insn 24(l1): point = 34
   Insn 22(l1): point = 36
 a0(r66): [4..21]
 a1(r65): [13..17]
 a2(r63): [13..19]
 a3(r63): [24..38]
 a4(r65): [24..38]
 a5(r66): [24..38]
 a6(r59): [27..32]
 a7(r67): [35..36]
 Rebuilding regno allocno list for 67
      Moving ranges of a5r66 to a0r66:  [24..38]
      Moving ranges of a4r65 to a1r65:  [24..38]
      Moving ranges of a3r63 to a2r63:  [24..38]
 Rebuilding regno allocno list for 59
Compressing live ranges: from 39 to 6 - 15%
Ranges after the compression:
 a0(r66): [0..5]
 a1(r65): [0..5]
 a2(r63): [0..5]
 a6(r59): [2..3]
 a7(r67): [4..5]
+++Allocating 40 bytes for conflict table (uncompressed size 64)
;; a0(r66,l0) conflicts: a1(r65,l0) a2(r63,l0) a6(r59,l0) a7(r67,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r65,l0) conflicts: a0(r66,l0) a2(r63,l0) a6(r59,l0) a7(r67,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r63,l0) conflicts: a0(r66,l0) a1(r65,l0) a6(r59,l0) a7(r67,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r59,l0) conflicts: a0(r66,l0) a1(r65,l0) a2(r63,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a7(r67,l0) conflicts: a0(r66,l0) a1(r65,l0) a2(r63,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=2, blocks=7, points=6
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 6 5 4 3 2
    all: 0r66 1r65 2r63 6r59 7r67
    modified regnos: 59 63 65 66 67
    border:
    Pressure: GENERAL_REGS=4
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@76560
      Allocno a0r66 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r65 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a2r63 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a6r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a7r67 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a7(r67,l0)(cost 0)
      Pushing a6(r59,l0)(cost 0)
      Pushing a0(r66,l0)(cost 0)
      Pushing a2(r63,l0)(cost 0)
      Pushing a1(r65,l0)(cost 0)
      Popping a1(r65,l0)  -- assign reg 0
      Popping a2(r63,l0)  -- assign reg 1
      Popping a0(r66,l0)  -- assign reg 5
      Popping a6(r59,l0)  -- assign reg 2
      Popping a7(r67,l0)  -- assign reg 2
Disposition:
    6:r59  l0     2    2:r63  l0     1    1:r65  l0     0    0:r66  l0     5
    7:r67  l0     2
New iteration of spill/restore move
+++Costs: overall -270, reg -270, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void collision_table::reset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5[di] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,6u} r7={1d,6u} r16={1d,5u} r17={4d,2u} r20={1d,6u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r59={1d,1u} r63={2d,4u} r65={2d,2u} r66={1d,6u,1e} r67={1d,1u} 
;;    total ref usage 71{30d,40u,1e} in 21{21 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 65 66
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/f:DI 66 [ this ])
        (reg:DI 5 di [ this ])) tiles.cpp:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(note 3 2 9 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 9 3 4 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 4 9 5 2 (set (reg:DI 63 [ ivtmp.147 ])
        (const_int 1 [0x1])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 5 4 10 2 (set (reg:DI 65 [ ivtmp.146 ])
        (const_int 0 [0])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 10 5 11 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/j:DI (reg/f:DI 66 [ this ]) [0 this_5(D)->m+0 S8 A64])
            (const_int 0 [0]))) tiles.cpp:202 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 31 2 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) tiles.cpp:202 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 41)
;;  succ:       4 [91.0%] 
;;              3 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63 65 66

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [9.0%]  (FALLTHRU)
;;              5 [100.0%]  (LOOP_EXIT)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u7(6){ }u8(7){ }u9(16){ }u10(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66
;; lr  def 	
(code_label 31 11 12 3 71 "" [1 uses])
(note 12 31 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (mem/j:DI (plus:DI (reg/f:DI 66 [ this ])
                (const_int 24 [0x18])) [0 this_5(D)->calls+0 S8 A64])
        (const_int 0 [0])) tiles.cpp:203 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 3 (set (mem/j:DI (plus:DI (reg/f:DI 66 [ this ])
                (const_int 32 [0x20])) [0 this_5(D)->clearhits+0 S8 A64])
        (const_int 0 [0])) tiles.cpp:204 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 43 3 (set (mem/j:DI (plus:DI (reg/f:DI 66 [ this ])
                (const_int 40 [0x28])) [0 this_5(D)->collisions+0 S8 A64])
        (const_int 0 [0])) tiles.cpp:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66 [ this ])
        (nil)))
(jump_insn 43 15 44 3 (set (pc)
        (label_ref 42)) 650 {jump}
     (nil)
 -> 42)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 44 43 41)
;; basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [91.0%] 
;;              4 [91.0%]  (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u14(6){ }u15(7){ }u16(16){ }u17(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63 65 66
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63 65 66
;; lr  def 	 17 [flags] 59 63 65 67
(code_label 41 44 40 4 73 "" [2 uses])
(note 40 41 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 21 40 22 4 (var_location:SI i (plus:SI (subreg:SI (reg:DI 63 [ ivtmp.147 ]) 0)
        (const_int -1 [0xffffffffffffffff]))) -1
     (nil))
(insn 22 21 24 4 (set (reg/f:DI 67 [ this_5(D)->data ])
        (mem/f/j:DI (plus:DI (reg/f:DI 66 [ this ])
                (const_int 8 [0x8])) [0 this_5(D)->data+0 S8 A64])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 66 [ this ])
                (const_int 8 [0x8])) [0 this_5(D)->data+0 S8 A64])
        (nil)))
(insn 24 22 25 4 (set (mem:DI (plus:DI (reg/f:DI 67 [ this_5(D)->data ])
                (reg:DI 65 [ ivtmp.146 ])) [0 *_10+0 S8 A64])
        (const_int -1 [0xffffffffffffffff])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67 [ this_5(D)->data ])
        (nil)))
(debug_insn 25 24 27 4 (var_location:SI D#10 (subreg:SI (reg:DI 63 [ ivtmp.147 ]) 0)) -1
     (nil))
(debug_insn 27 25 28 4 (var_location:SI i (debug_expr:SI D#10)) -1
     (nil))
(insn 28 27 29 4 (set (reg:DI 59 [ D.26075 ])
        (reg:DI 63 [ ivtmp.147 ])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 65 [ ivtmp.146 ])
                (plus:DI (reg:DI 65 [ ivtmp.146 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 30 29 32 4 (parallel [
            (set (reg:DI 63 [ ivtmp.147 ])
                (plus:DI (reg:DI 63 [ ivtmp.147 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 32 30 33 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 59 [ D.26075 ])
            (mem/j:DI (reg/f:DI 66 [ this ]) [0 this_5(D)->m+0 S8 A64]))) tiles.cpp:202 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 59 [ D.26075 ])
        (nil)))
(jump_insn 33 32 45 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) tiles.cpp:202 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 41)
;;  succ:       4 [91.0%]  (DFS_BACK)
;;              5 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63 65 66

;; basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 4, next block 6, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 [9.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 45 33 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 46 45 47 5 (set (pc)
        (label_ref 31)) 650 {jump}
     (nil)
 -> 31)
;;  succ:       3 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66

(barrier 47 46 42)
;; basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 5, next block 1, flags: (RTL)
;;  pred:       3 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u29(6){ }u30(7){ }u31(16){ }u32(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 42 47 39 6 74 "" [1 uses])
(note 39 42 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function collision_table::collision_table(int, int) (_ZN15collision_tableC2Eii, funcdef_no=1067, decl_uid=23671, cgraph_uid=311)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 12 (  1.2)
scanning new insn with uid = 89.
verify found no changes in insn with uid = 89.
deleting insn with uid = 53.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 12 (  1.2)
Reg 69 uninteresting (no unique first use)
Reg 70: def dominates all uses has unique first use
Reg 73 uninteresting
Ignoring reg 64, has equiv memory
Reg 70 not local to one basic block
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 8, latch 5
;;  depth 1, outer 0
;;  nodes: 8 5
;; 2 succs { 3 9 }
;; 3 succs { 4 7 }
;; 4 succs { 6 }
;; 5 succs { 6 8 }
;; 6 succs { }
;; 7 succs { 8 }
;; 8 succs { 5 9 }
;; 9 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 64: (insn_list:REG_DEP_TRUE 63 (nil))
init_insns for 73: (insn_list:REG_DEP_TRUE 89 (nil))

Pass 0 for finding pseudo/allocno costs

    a5 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r70,l1) best DREG, allocno DREG
    a1 (r70,l0) best DREG, allocno DREG
    a11 (r69,l1) best SIREG, allocno SIREG
    a7 (r69,l0) best SIREG, allocno SIREG
    a10 (r68,l1) best DIREG, allocno DIREG
    a0 (r68,l0) best DIREG, allocno DIREG
    a3 (r64,l0) best AREG, allocno AREG
    a9 (r62,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r59,l0) best DIREG, allocno DIREG

  a0(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-90,-90 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2925,2925 SSE_REGS:2925,2925 MMX_REGS:2925,2925 FP_TOP_SSE_REGS:10847225,10847225 FP_SECOND_SSE_REGS:10847225,10847225 FLOAT_SSE_REGS:10847225,10847225 FLOAT_INT_REGS:10847225,10847225 INT_SSE_REGS:2925,2925 FLOAT_INT_SSE_REGS:10847225,10847225 ALL_REGS:10847225,10847225 MEM:855,855
  a1(r70,l0) costs: AREG:0,0 DREG:-45,-45 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:360,360
  a2(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2340,2340 SSE_REGS:2340,2340 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2340,2340 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:675,675
  a3(r64,l0) costs: AREG:-45,-45 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:360,360
  a4(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-45,-45 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2340,2340 SSE_REGS:2340,2340 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2340,2340 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:630,630
  a5(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:315,315
  a6(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:315,315
  a7(r69,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:-45,-45 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2886,2886 SSE_REGS:2886,2886 MMX_REGS:2886,2886 FP_TOP_SSE_REGS:5065535,5065535 FP_SECOND_SSE_REGS:5065535,5065535 FLOAT_SSE_REGS:5065535,5065535 FLOAT_INT_REGS:5065535,5065535 INT_SSE_REGS:2886,2886 FLOAT_INT_SSE_REGS:5065535,5065535 ALL_REGS:5065535,5065535 MEM:711,711
  a8(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:559,49621 SSE_REGS:559,49621 MMX_REGS:559,49621 FP_TOP_SSE_REGS:1000000,5000000 FP_SECOND_SSE_REGS:1000000,5000000 FLOAT_SSE_REGS:1000000,5000000 FLOAT_INT_REGS:1000000,5000000 INT_SSE_REGS:559,49621 FLOAT_INT_SSE_REGS:1000000,5000000 ALL_REGS:1000000,5000000 MEM:172,11494
  a9(r62,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:49062,49062 SSE_REGS:49062,49062 MMX_REGS:49062,49062 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:49062,49062 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:11322,11322
  a10(r68,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a11(r69,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a12(r70,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r70: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r70,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r69,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r68,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-90,-90 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2925,2925 SSE_REGS:2925,2925 MMX_REGS:2925,2925 FP_TOP_SSE_REGS:10847225,10847225 FP_SECOND_SSE_REGS:10847225,10847225 FLOAT_SSE_REGS:10847225,10847225 FLOAT_INT_REGS:10847225,10847225 INT_SSE_REGS:2925,2925 FLOAT_INT_SSE_REGS:10847225,10847225 ALL_REGS:10847225,10847225 MEM:855,855
  a1(r70,l0) costs: AREG:0,0 DREG:-45,-45 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:360,360
  a2(r75,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2340,2340 SSE_REGS:2340,2340 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2340,2340 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:675,675
  a3(r64,l0) costs: AREG:-45,-45 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:360,360
  a4(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-45,-45 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2340,2340 SSE_REGS:2340,2340 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:2340,2340 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:630,630
  a5(r76,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:315,315
  a6(r73,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1170,1170 SSE_REGS:1170,1170 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:1170,1170 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:315,315
  a7(r69,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:-45,-45 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2886,2886 SSE_REGS:2886,2886 MMX_REGS:2886,2886 FP_TOP_SSE_REGS:5065535,5065535 FP_SECOND_SSE_REGS:5065535,5065535 FLOAT_SSE_REGS:5065535,5065535 FLOAT_INT_REGS:5065535,5065535 INT_SSE_REGS:2886,2886 FLOAT_INT_SSE_REGS:5065535,5065535 ALL_REGS:5065535,5065535 MEM:711,711
  a8(r62,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:559,49621 SSE_REGS:559,49621 MMX_REGS:559,49621 FP_TOP_SSE_REGS:1000000,5000000 FP_SECOND_SSE_REGS:1000000,5000000 FLOAT_SSE_REGS:1000000,5000000 FLOAT_INT_REGS:1000000,5000000 INT_SSE_REGS:559,49621 FLOAT_INT_SSE_REGS:1000000,5000000 ALL_REGS:1000000,5000000 MEM:172,11494
  a9(r62,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:49062,49062 SSE_REGS:49062,49062 MMX_REGS:49062,49062 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:49062,49062 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:11322,11322
  a10(r68,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a11(r69,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a12(r70,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0

   Insn 68(l0): point = 0
   Insn 67(l0): point = 2
   Insn 66(l0): point = 4
   Insn 65(l0): point = 6
   Insn 63(l0): point = 8
   Insn 62(l0): point = 10
   Insn 61(l0): point = 12
   Insn 60(l0): point = 14
   Insn 81(l0): point = 16
   Insn 79(l0): point = 18
   Insn 89(l0): point = 20
   Insn 80(l0): point = 22
   Insn 78(l0): point = 24
   Insn 52(l0): point = 26
   Insn 6(l0): point = 29
   Insn 37(l0): point = 32
   Insn 36(l0): point = 34
   Insn 35(l0): point = 36
   Insn 34(l0): point = 38
   Insn 33(l0): point = 40
   Insn 32(l0): point = 42
   Insn 31(l0): point = 44
   Insn 85(l0): point = 47
   Insn 17(l0): point = 50
   Insn 88(l0): point = 52
   Insn 13(l0): point = 55
   Insn 12(l0): point = 57
   Insn 4(l0): point = 59
   Insn 3(l0): point = 61
   Insn 2(l0): point = 63
   Insn 24(l1): point = 66
   Insn 87(l1): point = 68
   Insn 49(l1): point = 71
   Insn 48(l1): point = 73
   Insn 44(l1): point = 75
 a0(r68): [50..63] [3..31]
 a1(r70): [50..59] [5..31]
 a2(r75): [7..26]
 a3(r64): [9..10]
 a4(r59): [15..22]
 a5(r76): [17..24]
 a6(r73): [19..20]
 a7(r69): [45..61] [27..31]
 a8(r62): [29..29]
 a9(r62): [66..77]
 a10(r68): [66..77]
 a11(r69): [66..77]
 a12(r70): [66..77]
      Moving ranges of a12r70 to a1r70:  [66..77]
      Moving ranges of a11r69 to a7r69:  [66..77]
      Moving ranges of a10r68 to a0r68:  [66..77]
      Moving ranges of a9r62 to a8r62:  [66..77]
Compressing live ranges: from 78 to 11 - 14%
Ranges after the compression:
 a0(r68): [0..10]
 a1(r70): [0..10]
 a2(r75): [0..3]
 a3(r64): [0..1]
 a4(r59): [2..3]
 a5(r76): [2..3]
 a6(r73): [2..3]
 a7(r69): [4..10]
 a8(r62): [9..10] [5..5]
+++Allocating 72 bytes for conflict table (uncompressed size 104)
;; a0(r68,l0) conflicts: a3(r64,l0) a2(r75,l0) a1(r70,l0) a4(r59,l0) a5(r76,l0) a6(r73,l0) a7(r69,l0) a8(r62,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a1(r70,l0) conflicts: a3(r64,l0) a2(r75,l0) a0(r68,l0) a4(r59,l0) a5(r76,l0) a6(r73,l0) a7(r69,l0) a8(r62,l0)
;;     total conflict hard regs: 0 5
;;     conflict hard regs: 0 5

;; a2(r75,l0) conflicts: a3(r64,l0) a0(r68,l0) a1(r70,l0) a4(r59,l0) a5(r76,l0) a6(r73,l0)
;;     total conflict hard regs: 0 5
;;     conflict hard regs: 0 5

;; a3(r64,l0) conflicts: a2(r75,l0) a0(r68,l0) a1(r70,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r59,l0) conflicts: a2(r75,l0) a0(r68,l0) a1(r70,l0) a5(r76,l0) a6(r73,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r76,l0) conflicts: a2(r75,l0) a0(r68,l0) a1(r70,l0) a4(r59,l0) a6(r73,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r73,l0) conflicts: a2(r75,l0) a0(r68,l0) a1(r70,l0) a4(r59,l0) a5(r76,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a7(r69,l0) conflicts: a0(r68,l0) a1(r70,l0) a8(r62,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a8(r62,l0) conflicts: a0(r68,l0) a1(r70,l0) a7(r69,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a2(r75)<->a7(r69)@5:shuffle
  regions=2, blocks=10, points=11
    allocnos=13 (big 0), copies=1, conflicts=0, ranges=10

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 9 7 6 8 5 4 3 2
    all: 0r68 1r70 2r75 3r64 4r59 5r76 6r73 7r69 8r62
    modified regnos: 59 62 64 68 69 70 73 75 76
    border:
    Pressure: GENERAL_REGS=6
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@26768
          2:( 1-4 6 37-44)@2070
            3:( 2 3 6 37-44)@1710
      Allocno a0r68 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a1r70 of GENERAL_REGS(15) has 13 avail. regs  1-4 6 37-44, node:  1-4 6 37-44 (confl regs =  0 5 7-36 45-51)
      Allocno a2r75 of GENERAL_REGS(15) has 13 avail. regs  1-4 6 37-44, node:  1-4 6 37-44 (confl regs =  0 5 7-36 45-51)
      Allocno a3r64 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a4r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a5r76 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a6r73 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a7r69 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a8r62 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a6(r73,l0)(cost 0)
      Pushing a5(r76,l0)(cost 0)
      Pushing a3(r64,l0)(cost 0)
      Pushing a1(r70,l0)(cost 0)
      Pushing a4(r59,l0)(cost 0)
      Pushing a2(r75,l0)(cost 0)
      Pushing a7(r69,l0)(cost 0)
      Pushing a0(r68,l0)(cost 0)
      Pushing a8(r62,l0)(cost 0)
      Popping a8(r62,l0)  -- assign reg 0
      Popping a0(r68,l0)  -- assign reg 3
      Popping a7(r69,l0)  -- assign reg 4
      Popping a2(r75,l0)  -- assign reg 6
      Popping a4(r59,l0)  -- assign reg 5
      Popping a1(r70,l0)  -- assign reg 41
      Popping a3(r64,l0)  -- assign reg 0
      Popping a5(r76,l0)  -- assign reg 0
      Popping a6(r73,l0)  -- assign reg 1
Disposition:
    4:r59  l0     5    8:r62  l0     0    3:r64  l0     0    0:r68  l0     3
    7:r69  l0     4    1:r70  l0    41    6:r73  l0     1    2:r75  l0     6
    5:r76  l0     0
New iteration of spill/restore move
+++Costs: overall -405, reg -405, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


collision_table::collision_table(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={6d,2u} r1={6d,2u} r2={5d} r4={6d,2u} r5={9d,5u} r6={1d,9u} r7={1d,13u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,8u} r17={11d,5u,1e} r18={4d} r19={4d} r20={1d,9u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r59={2d,2u} r62={2d,5u} r64={1d,1u} r68={1d,4u,1e} r69={1d,6u} r70={1d,1u} r73={1d,1u} r75={1d,3u,1e} r76={1d,1u,1e} 
;;    total ref usage 303{220d,79u,4e} in 39{35 regular + 4 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 454, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 69 70
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/f:DI 68 [ this ])
        (reg:DI 5 di [ this ])) tiles.cpp:208 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 69 [ size ])
        (reg:SI 4 si [ size ])) tiles.cpp:208 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ size ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 70 [ safety ])
        (reg:SI 1 dx [ safety ])) tiles.cpp:208 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ safety ])
        (nil)))
(note 5 4 11 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 11 5 12 2 (var_location:SI tmp (reg/v:SI 69 [ size ])) -1
     (nil))
(insn 12 11 13 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 69 [ size ])
            (const_int 2 [0x2]))) tiles.cpp:210 7 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) tiles.cpp:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil)))
 -> 50)
;;  succ:       3 [95.5%]  (FALLTHRU)
;;              9 [4.5%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 69 70

;; basic block 3, loop depth 0, count 0, freq 430, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [95.5%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u10(6){ }u11(7){ }u12(16){ }u13(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 69 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 17 [flags]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 15 14 88 3 NOTE_INSN_DELETED)
(insn 88 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg/v:SI 69 [ size ])
                (const_int 1 [0x1]))
            (const_int 0 [0]))) tiles.cpp:211 385 {*testsi_1}
     (nil))
(jump_insn 17 88 84 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 83)
            (pc))) tiles.cpp:211 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil)))
 -> 83)
;;  succ:       4 [0.0%]  (FALLTHRU)
;;              7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 69 70

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       3 [0.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 84 17 85 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 85 84 86 4 (set (pc)
        (label_ref 28)) 650 {jump}
     (nil)
 -> 28)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69

(barrier 86 85 47)
;; basic block 5, loop depth 1, count 0, freq 9120, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       8 [95.5%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u17(6){ }u18(7){ }u19(16){ }u20(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 68 69 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  def 	 17 [flags]
(code_label 47 86 21 5 80 "" [1 uses])
(note 21 47 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 22 21 87 5 NOTE_INSN_DELETED)
(insn 87 22 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg/v:SI 62 [ size ])
                (const_int 1 [0x1]))
            (const_int 0 [0]))) tiles.cpp:211 385 {*testsi_1}
     (nil))
(jump_insn 24 87 28 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) tiles.cpp:211 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil)))
 -> 41)
;;  succ:       6 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 68 69 70

;; basic block 6, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u24(6){ }u25(7){ }u26(16){ }u27(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 28 24 29 6 77 "" [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 30 29 31 6 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b82f85a0130 *.LC1>)) -1
     (nil))
(insn 31 30 32 6 (set (reg:SI 1 dx)
        (reg/v:SI 69 [ size ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 69 [ size ])
        (nil)))
(insn 32 31 33 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b82f85a0130 *.LC1>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 6 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 91 {*movqi_internal}
     (nil))
(call_insn 35 34 36 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x2b82f0908600 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_BR_PRED (use (reg:SI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (nil))))))
(insn 36 35 37 6 (set (reg:SI 5 di)
        (const_int 0 [0])) tiles.cpp:213 89 {*movsi_internal}
     (nil))
(call_insn 37 36 38 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b82f08ee700 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) tiles.cpp:213 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 38 37 83)
;; basic block 7, loop depth 0, count 0, freq 430, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u36(6){ }u37(7){ }u38(16){ }u39(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 69 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 62
(code_label 83 38 40 7 83 "" [1 uses])
(note 40 83 6 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 6 40 41 7 (set (reg/v:SI 62 [ size ])
        (reg/v:SI 69 [ size ])) tiles.cpp:211 89 {*movsi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 68 69 70

;; basic block 8, loop depth 1, count 0, freq 9546, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       5 [100.0%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u41(6){ }u42(7){ }u43(16){ }u44(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 68 69 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  def 	 17 [flags] 62
(code_label 41 6 42 8 79 "" [1 uses])
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 43 42 44 8 (var_location:SI tmp (reg/v:SI 62 [ size ])) -1
     (nil))
(insn 44 43 46 8 (parallel [
            (set (reg/v:SI 62 [ size ])
                (ashiftrt:SI (reg/v:SI 62 [ size ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:215 546 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 46 44 48 8 (var_location:SI tmp (reg/v:SI 62 [ size ])) -1
     (nil))
(insn 48 46 49 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 62 [ size ])
            (const_int 2 [0x2]))) tiles.cpp:210 7 {*cmpsi_1}
     (nil))
(jump_insn 49 48 50 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) tiles.cpp:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil)))
 -> 47)
;;  succ:       5 [95.5%] 
;;              9 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 68 69 70

;; basic block 9, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8 [4.5%]  (FALLTHRU,LOOP_EXIT)
;;              2 [4.5%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u50(6){ }u51(7){ }u52(16){ }u53(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 69 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 69 70
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 64 73 75 76
(code_label 50 49 51 9 76 "" [1 uses])
(note 51 50 52 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 78 9 (set (reg:DI 75 [ size ])
        (sign_extend:DI (reg/v:SI 69 [ size ]))) tiles.cpp:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 69 [ size ])
        (nil)))
(insn 78 52 80 9 (parallel [
            (set (reg:DI 76)
                (ashift:DI (reg:DI 75 [ size ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:217 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 80 78 89 9 (set (reg:DI 59 [ iftmp.7 ])
        (const_int -1 [0xffffffffffffffff])) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))
(insn 89 80 79 9 (set (reg:DI 73)
        (const_int 1143914305352105984 [0xfe0000000000000])) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (const_int 1143914305352105984 [0xfe0000000000000])
        (nil)))
(insn 79 89 81 9 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 75 [ size ])
            (reg:DI 73))) tiles.cpp:217 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 73)
        (expr_list:REG_EQUAL (compare:CC (reg:DI 75 [ size ])
                (const_int 1143914305352105984 [0xfe0000000000000]))
            (nil))))
(insn 81 79 60 9 (set (reg:DI 59 [ iftmp.7 ])
        (if_then_else:DI (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (reg:DI 76)
            (reg:DI 59 [ iftmp.7 ]))) tiles.cpp:217 934 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 76)
        (expr_list:REG_DEAD (reg:CC 17 flags)
            (expr_list:REG_EQUAL (if_then_else:DI (leu (reg:CC 17 flags)
                        (const_int 0 [0]))
                    (reg:DI 76)
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 60 81 61 9 (set (reg:DI 5 di)
        (reg:DI 59 [ iftmp.7 ])) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 59 [ iftmp.7 ])
        (nil)))
(call_insn 61 60 62 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znam") [flags 0x41]  <function_decl 0x2b82f096c800 operator new []>) [0 operator new [] S1 A8])
            (const_int 0 [0]))) tiles.cpp:217 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 62 61 63 9 (set (reg/f:DI 64 [ D.26081 ])
        (reg:DI 0 ax)) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 8 [0x8])) [0 this_14(D)->data+0 S8 A64])
            (nil))))
(insn 63 62 65 9 (set (mem/f/j:DI (plus:DI (reg/f:DI 68 [ this ])
                (const_int 8 [0x8])) [0 this_14(D)->data+0 S8 A64])
        (reg/f:DI 64 [ D.26081 ])) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64 [ D.26081 ])
        (nil)))
(insn 65 63 66 9 (set (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_14(D)->m+0 S8 A64])
        (reg:DI 75 [ size ])) tiles.cpp:218 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 75 [ size ])
        (nil)))
(insn 66 65 67 9 (set (mem/j:SI (plus:DI (reg/f:DI 68 [ this ])
                (const_int 16 [0x10])) [0 this_14(D)->safe+0 S4 A64])
        (reg/v:SI 70 [ safety ])) tiles.cpp:219 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 70 [ safety ])
        (nil)))
(insn 67 66 68 9 (set (reg:DI 5 di)
        (reg/f:DI 68 [ this ])) tiles.cpp:220 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ this ])
        (nil)))
(call_insn/j 68 67 69 9 (call (mem:QI (symbol_ref:DI ("_ZN15collision_table5resetEv") [flags 0x1]  <function_decl 0x2b82f1f05500 reset>) [0 reset S1 A8])
        (const_int 0 [0])) tiles.cpp:220 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 69 68 0)

;; Function collision_table::~collision_table() (_ZN15collision_tableD2Ev, funcdef_no=1070, decl_uid=23678, cgraph_uid=314)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 60 uninteresting
Reg 59 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 1 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a1 (r60,l0) best DIREG, allocno DIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-783,-783 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:36179,36179 SSE_REGS:36179,36179 MMX_REGS:36179,36179 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:36179,36179 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:10349,10349
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000


Pass 1 for finding pseudo/allocno costs

    r60: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-783,-783 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:36179,36179 SSE_REGS:36179,36179 MMX_REGS:36179,36179 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:36179,36179 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:10349,10349
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000

   Insn 11(l0): point = 1
   Insn 10(l0): point = 3
   Insn 8(l0): point = 6
   Insn 7(l0): point = 8
   Insn 6(l0): point = 10
   Insn 2(l0): point = 12
 a0(r59): [4..10]
 a1(r60): [11..12]
Compressing live ranges: from 15 to 4 - 26%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r59,l0) conflicts:;; a1(r60,l0) conflicts:  regions=1, blocks=5, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 4 3 2
    all: 0r59 1r60
    modified regnos: 59 60
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@47396
      Allocno a0r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 5
Disposition:
    0:r59  l0     5    1:r60  l0     5
New iteration of spill/restore move
+++Costs: overall -5349, reg -5349, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


collision_table::~collision_table()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,3u} r17={2d,1u} r18={1d} r19={1d} r20={1d,4u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,2u} r60={1d,1u} 
;;    total ref usage 89{67d,22u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 60 [ this ])
        (reg:DI 5 di [ this ])) tiles.cpp:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 59 [ D.26086 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 60 [ this ])
                (const_int 8 [0x8])) [0 this_3(D)->data+0 S8 A64])) tiles.cpp:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 60 [ this ])
        (nil)))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 59 [ D.26086 ])
            (const_int 0 [0]))) tiles.cpp:224 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 15)
            (pc))) tiles.cpp:224 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil)))
 -> 15)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:DI 5 di)
        (reg/f:DI 59 [ D.26086 ])) tiles.cpp:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.26086 ])
        (nil)))
(call_insn/j 11 10 12 3 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x2b82f096ca00 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) tiles.cpp:224 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 12 11 15)
;; basic block 4, loop depth 0, count 0, freq 2165, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2 [21.6%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u15(6){ }u16(7){ }u17(16){ }u18(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 15 12 16 4 85 "" [1 uses])
(note 16 15 0 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int collision_table::usage() (_ZN15collision_table5usageEv, funcdef_no=1072, decl_uid=23657, cgraph_uid=316)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 8 (    1)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 92 uninteresting
Reg 87 uninteresting
Reg 88: def dominates all uses has unique first use
Reg 88 not local to one basic block
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 4, latch 4
;;  depth 1, outer 0
;;  nodes: 4
;; 2 succs { 3 6 }
;; 3 succs { 4 }
;; 4 succs { 4 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a4 (r92,l0) best DIREG, allocno DIREG
    a7 (r88,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r86,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r84,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r81,l1) best AREG, allocno AREG
    a0 (r81,l0) best AREG, allocno AREG

  a0(r81,l0) costs: AREG:-90,-90 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2327,37817 SSE_REGS:2327,37817 MMX_REGS:2327,37817 FP_TOP_SSE_REGS:2524280,5524280 FP_SECOND_SSE_REGS:2524280,5524280 FLOAT_SSE_REGS:2524280,5524280 FLOAT_INT_REGS:2524280,5524280 INT_SSE_REGS:2327,37817 FLOAT_INT_SSE_REGS:2524280,5524280 ALL_REGS:2524280,5524280 MEM:626,10636
  a1(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1053,12883 SSE_REGS:1053,12883 MMX_REGS:1053,12883 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:1053,12883 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:324,3054
  a2(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2106,49426 SSE_REGS:2106,49426 MMX_REGS:2106,49426 FP_TOP_SSE_REGS:6308335,68945185 FP_SECOND_SSE_REGS:6308335,68945185 FLOAT_SSE_REGS:6308335,68945185 FLOAT_INT_REGS:6308335,68945185 INT_SSE_REGS:2106,49426 FLOAT_INT_SSE_REGS:6308335,68945185 ALL_REGS:6308335,68945185 MEM:648,12478
  a3(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3393,3393 SSE_REGS:3393,3393 MMX_REGS:3393,3393 FP_TOP_SSE_REGS:7308335,7308335 FP_SECOND_SSE_REGS:7308335,7308335 FLOAT_SSE_REGS:7308335,7308335 FLOAT_INT_REGS:7308335,7308335 INT_SSE_REGS:3393,3393 FLOAT_INT_SSE_REGS:7308335,7308335 ALL_REGS:7308335,7308335 MEM:1044,1044
  a4(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-90,-90 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3393,3393 SSE_REGS:3393,3393 MMX_REGS:3393,3393 FP_TOP_SSE_REGS:12206485,12206485 FP_SECOND_SSE_REGS:12206485,12206485 FLOAT_SSE_REGS:12206485,12206485 FLOAT_INT_REGS:12206485,12206485 INT_SSE_REGS:3393,3393 FLOAT_INT_SSE_REGS:12206485,12206485 ALL_REGS:12206485,12206485 MEM:1044,1044
  a5(r81,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:10010,10010
  a6(r84,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:47320,47320 SSE_REGS:47320,47320 MMX_REGS:47320,47320 FP_TOP_SSE_REGS:62636850,62636850 FP_SECOND_SSE_REGS:62636850,62636850 FLOAT_SSE_REGS:62636850,62636850 FLOAT_INT_REGS:62636850,62636850 INT_SSE_REGS:47320,47320 FLOAT_INT_SSE_REGS:62636850,62636850 ALL_REGS:62636850,62636850 MEM:11830,11830
  a7(r88,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11830,11830 SSE_REGS:11830,11830 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:11830,11830 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2730,2730
  a8(r86,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6370,6370


Pass 1 for finding pseudo/allocno costs

    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r81: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r81,l1) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r81,l0) costs: AREG:-90,-90 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2327,37817 SSE_REGS:2327,37817 MMX_REGS:2327,37817 FP_TOP_SSE_REGS:2524280,5524280 FP_SECOND_SSE_REGS:2524280,5524280 FLOAT_SSE_REGS:2524280,5524280 FLOAT_INT_REGS:2524280,5524280 INT_SSE_REGS:2327,37817 FLOAT_INT_SSE_REGS:2524280,5524280 ALL_REGS:2524280,5524280 MEM:626,10636
  a1(r88,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1053,12883 SSE_REGS:1053,12883 MMX_REGS:1053,12883 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:1053,12883 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:324,3054
  a2(r84,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2106,49426 SSE_REGS:2106,49426 MMX_REGS:2106,49426 FP_TOP_SSE_REGS:6308335,68945185 FP_SECOND_SSE_REGS:6308335,68945185 FLOAT_SSE_REGS:6308335,68945185 FLOAT_INT_REGS:6308335,68945185 INT_SSE_REGS:2106,49426 FLOAT_INT_SSE_REGS:6308335,68945185 ALL_REGS:6308335,68945185 MEM:648,12478
  a3(r87,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:3393,3393 SSE_REGS:3393,3393 MMX_REGS:3393,3393 FP_TOP_SSE_REGS:7308335,7308335 FP_SECOND_SSE_REGS:7308335,7308335 FLOAT_SSE_REGS:7308335,7308335 FLOAT_INT_REGS:7308335,7308335 INT_SSE_REGS:3393,3393 FLOAT_INT_SSE_REGS:7308335,7308335 ALL_REGS:7308335,7308335 MEM:1044,1044
  a4(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-90,-90 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3393,3393 SSE_REGS:3393,3393 MMX_REGS:3393,3393 FP_TOP_SSE_REGS:12206485,12206485 FP_SECOND_SSE_REGS:12206485,12206485 FLOAT_SSE_REGS:12206485,12206485 FLOAT_INT_REGS:12206485,12206485 INT_SSE_REGS:3393,3393 FLOAT_INT_SSE_REGS:12206485,12206485 ALL_REGS:12206485,12206485 MEM:1044,1044
  a5(r81,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:35490,35490 SSE_REGS:35490,35490 MMX_REGS:35490,35490 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:35490,35490 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:10010,10010
  a6(r84,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:47320,47320 SSE_REGS:47320,47320 MMX_REGS:47320,47320 FP_TOP_SSE_REGS:62636850,62636850 FP_SECOND_SSE_REGS:62636850,62636850 FLOAT_SSE_REGS:62636850,62636850 FLOAT_INT_REGS:62636850,62636850 INT_SSE_REGS:47320,47320 FLOAT_INT_SSE_REGS:62636850,62636850 ALL_REGS:62636850,62636850 MEM:11830,11830
  a7(r88,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:11830,11830 SSE_REGS:11830,11830 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:11830,11830 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2730,2730
  a8(r86,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6370,6370

   Insn 69(l0): point = 0
   Insn 66(l0): point = 2
   Insn 27(l0): point = 5
   Insn 75(l0): point = 8
   Insn 26(l0): point = 11
   Insn 40(l0): point = 13
   Insn 38(l0): point = 15
   Insn 36(l0): point = 18
   Insn 35(l0): point = 20
   Insn 34(l0): point = 22
   Insn 24(l0): point = 24
   Insn 55(l1): point = 27
   Insn 54(l1): point = 29
   Insn 53(l1): point = 31
   Insn 47(l1): point = 33
   Insn 46(l1): point = 35
   Insn 44(l1): point = 37
 a0(r81): [8..11] [3..5]
 a1(r88): [11..13]
 a2(r84): [11..15]
 a3(r87): [14..22]
 a4(r92): [16..24]
 a5(r81): [27..39]
 a6(r84): [27..39]
 a7(r88): [27..39]
 a8(r86): [34..37]
      Moving ranges of a7r88 to a1r88:  [27..39]
 Rebuilding regno allocno list for 86
      Moving ranges of a6r84 to a2r84:  [27..39]
      Moving ranges of a5r81 to a0r81:  [27..39]
Compressing live ranges: from 40 to 11 - 27%
Ranges after the compression:
 a0(r81): [9..10] [0..3]
 a1(r88): [9..10] [3..4]
 a2(r84): [9..10] [3..6]
 a3(r87): [5..8]
 a4(r92): [7..8]
 a8(r86): [9..10]
+++Allocating 48 bytes for conflict table (uncompressed size 72)
;; a0(r81,l0) conflicts: a1(r88,l0) a2(r84,l0) a8(r86,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r88,l0) conflicts: a0(r81,l0) a2(r84,l0) a8(r86,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r84,l0) conflicts: a0(r81,l0) a1(r88,l0) a3(r87,l0) a8(r86,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r87,l0) conflicts: a2(r84,l0) a4(r92,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r92,l0) conflicts: a3(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a8(r86,l0) conflicts: a0(r81,l0) a1(r88,l0) a2(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=2, blocks=8, points=11
    allocnos=9 (big 0), copies=0, conflicts=0, ranges=9

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r81 1r88 2r84 3r87 4r92 8r86
    modified regnos: 81 84 86 87 88 92
    border:
    Pressure: GENERAL_REGS=4
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@70332
      Allocno a0r81 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r88 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a2r84 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a3r87 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a4r92 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a8r86 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a4(r92,l0)(cost 0)
      Pushing a3(r87,l0)(cost 0)
      Pushing a1(r88,l0)(cost 0)
      Pushing a8(r86,l0)(cost 0)
      Pushing a0(r81,l0)(cost 0)
      Pushing a2(r84,l0)(cost 0)
      Popping a2(r84,l0)  -- assign reg 1
      Popping a0(r81,l0)  -- assign reg 0
      Popping a8(r86,l0)  -- assign reg 2
      Popping a1(r88,l0)  -- assign reg 4
      Popping a3(r87,l0)  -- assign reg 0
      Popping a4(r92,l0)  -- assign reg 5
Disposition:
    0:r81  l0     0    2:r84  l0     1    8:r86  l0     2    3:r87  l0     0
    1:r88  l0     4    4:r92  l0     5
New iteration of spill/restore move
+++Costs: overall -540, reg -540, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int collision_table::usage()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,7u} r7={1d,7u} r16={1d,6u} r17={5d,3u} r20={1d,7u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r81={3d,4u} r84={2d,4u} r86={1d,1u} r87={1d,2u} r88={1d,1u} r92={1d,2u} 
;;    total ref usage 81{34d,47u,0e} in 24{24 regular + 0 call} insns.
(note 23 0 28 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 92
(note 28 23 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 24 28 25 2 (set (reg/f:DI 92 [ this ])
        (reg:DI 5 di [ this ])) tiles.cpp:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(note 25 24 32 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 32 25 33 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 33 32 34 2 (var_location:SI count (const_int 0 [0])) -1
     (nil))
(insn 34 33 35 2 (set (reg:DI 87 [ D.26097 ])
        (mem/j:DI (reg/f:DI 92 [ this ]) [0 this_6(D)->m+0 S8 A64])) tiles.cpp:229 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:DI 87 [ D.26097 ])
            (const_int 0 [0]))) tiles.cpp:229 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 36 35 37 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 72)
            (pc))) tiles.cpp:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 72)
;;  succ:       3 [91.0%]  (FALLTHRU)
;;              6 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 92

;; basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [91.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 92
;; lr  def 	 81 84 88
(note 37 36 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 3 (set (reg:DI 84 [ ivtmp.157 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 92 [ this ])
                (const_int 8 [0x8])) [0 this_6(D)->data+0 S8 A64])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 92 [ this ])
        (nil)))
(note 39 38 40 3 NOTE_INSN_DELETED)
(insn 40 39 26 3 (set (reg:DI 88 [ D.26095 ])
        (plus:DI (mult:DI (reg:DI 87 [ D.26097 ])
                (const_int 8 [0x8]))
            (reg:DI 84 [ ivtmp.157 ]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 87 [ D.26097 ])
        (nil)))
(insn 26 40 57 3 (set (reg/v:SI 81 [ count ])
        (const_int 0 [0])) tiles.cpp:228 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81 84 88

;; basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       4 [91.0%]  (DFS_BACK)
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u16(6){ }u17(7){ }u18(16){ }u19(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81 84 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81 84 88
;; lr  def 	 17 [flags] 81 84 86
(code_label 57 26 41 4 89 "" [1 uses])
(note 41 57 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 42 41 43 4 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 43 42 44 4 (var_location:SI count (clobber (const_int 0 [0]))) -1
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg/v:SI 86 [ count ])
                (plus:SI (reg/v:SI 81 [ count ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:232 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 45 44 46 4 (var_location:SI count (clobber (const_int 0 [0]))) tiles.cpp:232 -1
     (nil))
(insn 46 45 47 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:DI (reg:DI 84 [ ivtmp.157 ]) [0 MEM[base: _3, offset: 0B]+0 S8 A64])
            (const_int -1 [0xffffffffffffffff]))) 8 {*cmpdi_1}
     (nil))
(insn 47 46 51 4 (set (reg/v:SI 81 [ count ])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/v:SI 86 [ count ])
            (reg/v:SI 81 [ count ]))) 933 {*movsicc_noc}
     (expr_list:REG_DEAD (reg/v:SI 86 [ count ])
        (expr_list:REG_DEAD (reg:CCZ 17 flags)
            (nil))))
(debug_insn 51 47 52 4 (var_location:SI i (debug_expr:SI D#11)) -1
     (nil))
(debug_insn 52 51 53 4 (var_location:SI count (reg/v:SI 81 [ count ])) -1
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg:DI 84 [ ivtmp.157 ])
                (plus:DI (reg:DI 84 [ ivtmp.157 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 54 53 55 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 84 [ ivtmp.157 ])
            (reg:DI 88 [ D.26095 ]))) tiles.cpp:229 8 {*cmpdi_1}
     (nil))
(jump_insn 55 54 74 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) tiles.cpp:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 57)
;;  succ:       4 [91.0%]  (DFS_BACK)
;;              5 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81 84 88

;; basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 4, next block 6, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 [9.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 74 55 75 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 75 74 76 5 (set (pc)
        (label_ref 60)) 650 {jump}
     (nil)
 -> 60)
;;  succ:       7 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81

(barrier 76 75 72)
;; basic block 6, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       2 [9.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u30(6){ }u31(7){ }u32(16){ }u33(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 81
(code_label 72 76 71 6 90 "" [1 uses])
(note 71 72 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 71 60 6 (set (reg/v:SI 81 [ count ])
        (const_int 0 [0])) tiles.cpp:228 89 {*movsi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81

;; basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u34(6){ }u35(7){ }u36(16){ }u37(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81
;; lr  def 	 0 [ax]
(code_label 60 27 61 7 88 "" [1 uses])
(note 61 60 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 66 61 69 7 (set (reg/i:SI 0 ax)
        (reg/v:SI 81 [ count ])) tiles.cpp:236 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 81 [ count ])
        (nil)))
(insn 69 66 0 7 (use (reg/i:SI 0 ax)) tiles.cpp:236 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void collision_table::print() (_ZN15collision_table5printEv, funcdef_no=1073, decl_uid=23659, cgraph_uid=317)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 64 uninteresting
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 65: local to bb 2 def dominates all uses has unique first use
Found def insn 6 for 59 to be not moveable
Found def insn 7 for 60 to be not moveable
Found def insn 8 for 61 to be not moveable
Found def insn 11 for 62 to be not moveable
Found def insn 13 for 65 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a0 (r65,l0) best DREG, allocno DREG
    a5 (r64,l0) best DIREG, allocno DIREG
    a1 (r62,l0) best AREG, allocno AREG
    a2 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r65,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r62,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78000,78000 SSE_REGS:78000,78000 MMX_REGS:78000,78000 FP_TOP_SSE_REGS:264140000,264140000 FP_SECOND_SSE_REGS:264140000,264140000 FLOAT_SSE_REGS:264140000,264140000 FLOAT_INT_REGS:264140000,264140000 INT_SSE_REGS:78000,78000 FLOAT_INT_SSE_REGS:264140000,264140000 ALL_REGS:264140000,264140000 MEM:23000,23000


Pass 1 for finding pseudo/allocno costs

    r65: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r65,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r62,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r60,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r59,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78000,78000 SSE_REGS:78000,78000 MMX_REGS:78000,78000 FP_TOP_SSE_REGS:264140000,264140000 FP_SECOND_SSE_REGS:264140000,264140000 FLOAT_SSE_REGS:264140000,264140000 FLOAT_INT_REGS:264140000,264140000 INT_SSE_REGS:78000,78000 FLOAT_INT_SSE_REGS:264140000,264140000 ALL_REGS:264140000,264140000 MEM:23000,23000

   Insn 22(l0): point = 0
   Insn 21(l0): point = 2
   Insn 20(l0): point = 4
   Insn 19(l0): point = 6
   Insn 18(l0): point = 8
   Insn 17(l0): point = 10
   Insn 16(l0): point = 12
   Insn 15(l0): point = 14
   Insn 14(l0): point = 16
   Insn 13(l0): point = 18
   Insn 11(l0): point = 20
   Insn 10(l0): point = 22
   Insn 9(l0): point = 24
   Insn 8(l0): point = 26
   Insn 7(l0): point = 28
   Insn 6(l0): point = 30
   Insn 2(l0): point = 32
 a0(r65): [9..18]
 a1(r62): [11..20]
 a2(r61): [13..26]
 a3(r60): [15..28]
 a4(r59): [17..30]
 a5(r64): [19..32]
Compressing live ranges: from 35 to 4 - 11%
Ranges after the compression:
 a0(r65): [0..1]
 a1(r62): [0..3]
 a2(r61): [0..3]
 a3(r60): [0..3]
 a4(r59): [0..3]
 a5(r64): [2..3]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r65,l0) conflicts: a1(r62,l0) a2(r61,l0) a3(r60,l0) a4(r59,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a1(r62,l0) conflicts: a0(r65,l0) a2(r61,l0) a3(r60,l0) a4(r59,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a2(r61,l0) conflicts: a0(r65,l0) a1(r62,l0) a3(r60,l0) a4(r59,l0) a5(r64,l0)
;;     total conflict hard regs: 0 5 38
;;     conflict hard regs: 0 5 38

;; a3(r60,l0) conflicts: a0(r65,l0) a1(r62,l0) a2(r61,l0) a4(r59,l0) a5(r64,l0)
;;     total conflict hard regs: 0 5
;;     conflict hard regs: 0 5

;; a4(r59,l0) conflicts: a0(r65,l0) a1(r62,l0) a2(r61,l0) a3(r60,l0) a5(r64,l0)
;;     total conflict hard regs: 0 5
;;     conflict hard regs: 0 5

;; a5(r64,l0) conflicts: a1(r62,l0) a2(r61,l0) a3(r60,l0) a4(r59,l0)
;;     total conflict hard regs: 0 5
;;     conflict hard regs: 0 5

  regions=1, blocks=3, points=4
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r65 1r62 2r61 3r60 4r59 5r64
    modified regnos: 59 60 61 62 64 65
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 1-4 6 37-44)@62000
      Allocno a0r65 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, ^node:  0-6 8-15 21-51 (confl regs =  2 7-38 45-51)
      Allocno a1r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, ^node:  0-6 8-15 21-51 (confl regs =  7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 7 avail. regs  3 6 37 41-44, ^node:  1-4 6 37-44 (confl regs =  0 5 7-36 38 45-51)
      Allocno a3r60 of GENERAL_REGS(15) has 7 avail. regs  3 6 38 41-44, ^node:  1-4 6 37-44 (confl regs =  0 5 7-36 45-51)
      Allocno a4r59 of GENERAL_REGS(15) has 13 avail. regs  1-4 6 37-44, node:  1-4 6 37-44 (confl regs =  0 5 7-36 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 13 avail. regs  1-4 6 37-44, node:  1-4 6 37-44 (confl regs =  0 5 7-36 45-51)
      Pushing a4(r59,l0)(cost 0)
      Pushing a1(r62,l0)(cost 0)
      Pushing a0(r65,l0)(cost 0)
      Pushing a3(r60,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Popping a5(r64,l0)  -- assign reg 3
      Popping a2(r61,l0)  -- assign reg 6
      Popping a3(r60,l0)  -- assign reg 41
      Popping a0(r65,l0)  -- assign reg 1
      Popping a1(r62,l0)  -- assign reg 0
      Popping a4(r59,l0)  -- assign reg 42
Disposition:
    4:r59  l0    42    3:r60  l0    41    2:r61  l0     6    1:r62  l0     0
    5:r64  l0     3    0:r65  l0     1
New iteration of spill/restore move
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void collision_table::print()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={4d,2u} r1={4d,1u} r2={4d,1u} r4={4d,1u} r5={5d,3u} r6={1d,2u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,1u} r17={2d} r18={2d} r19={2d} r20={1d,2u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={4d,1u} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,5u} r65={1d,1u} 
;;    total ref usage 152{121d,31u,0e} in 18{16 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64 65
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 64 [ this ])
        (reg:DI 5 di [ this ])) tiles.cpp:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 59 [ D.26101 ])
        (mem/j:DI (plus:DI (reg/f:DI 64 [ this ])
                (const_int 40 [0x28])) [0 this_2(D)->collisions+0 S8 A64])) tiles.cpp:239 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 60 [ D.26101 ])
        (mem/j:DI (plus:DI (reg/f:DI 64 [ this ])
                (const_int 24 [0x18])) [0 this_2(D)->calls+0 S8 A64])) tiles.cpp:239 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 61 [ D.26101 ])
        (mem/j:DI (reg/f:DI 64 [ this ]) [0 this_2(D)->m+0 S8 A64])) tiles.cpp:239 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg/f:DI 64 [ this ])) tiles.cpp:239 87 {*movdi_internal_rex64}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN15collision_table5usageEv") [flags 0x1]  <function_decl 0x2b82f1f05900 usage>) [0 usage S1 A8])
            (const_int 0 [0]))) tiles.cpp:239 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:SI 62 [ D.26102 ])
        (reg:SI 0 ax)) tiles.cpp:239 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(debug_insn 12 11 13 2 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b82f85b8c78 *.LC2>)) tiles.cpp:239 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 65 [ this_2(D)->safe ])
        (mem/j:SI (plus:DI (reg/f:DI 64 [ this ])
                (const_int 16 [0x10])) [0 this_2(D)->safe+0 S4 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 64 [ this ])
        (nil)))
(insn 14 13 15 2 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 59 [ D.26101 ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 59 [ D.26101 ])
        (nil)))
(insn 15 14 16 2 (set (reg:DI 38 r9)
        (reg:DI 60 [ D.26101 ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 60 [ D.26101 ])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 37 r8)
        (reg:DI 61 [ D.26101 ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 61 [ D.26101 ])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 2 cx)
        (reg:SI 62 [ D.26102 ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 62 [ D.26102 ])
        (nil)))
(insn 18 17 19 2 (set (reg:SI 1 dx)
        (reg:SI 65 [ this_2(D)->safe ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 65 [ this_2(D)->safe ])
        (nil)))
(insn 19 18 20 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b82f85b8c78 *.LC2>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 91 {*movqi_internal}
     (nil))
(call_insn 22 21 0 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x2b82f0908600 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 8 [0x8]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:SI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_BR_PRED (use (reg:SI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                    (nil))))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void collision_table::save(int) (_ZN15collision_table4saveEi, funcdef_no=1074, decl_uid=23662, cgraph_uid=318)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 69: local to bb 2 def dominates all uses has unique first use
Ignoring reg 75, has equiv memory
Reg 76: local to bb 2 def dominates all uses has unique first use
Found def insn 3 for 69 to be not moveable
Found def insn 33 for 76 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 75: (insn_list:REG_DEP_TRUE 31 (nil))

Pass 0 for finding pseudo/allocno costs

    a1 (r76,l0) best SIREG, allocno SIREG
    a4 (r75,l0) best NO_REGS, allocno NO_REGS
    a2 (r74,l0) best DREG, allocno DREG
    a5 (r73,l0) best SIREG, allocno SIREG
    a6 (r72,l0) best SIREG, allocno SIREG
    a7 (r71,l0) best SIREG, allocno SIREG
    a8 (r70,l0) best SIREG, allocno SIREG
    a0 (r69,l0) best SIREG, allocno SIREG
    a3 (r68,l0) best DIREG, allocno DIREG

  a0(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:91000,91000 SSE_REGS:91000,91000 MMX_REGS:91000,91000 FP_TOP_SSE_REGS:7000000,7000000 FP_SECOND_SSE_REGS:7000000,7000000 FLOAT_SSE_REGS:7000000,7000000 FLOAT_INT_REGS:7000000,7000000 INT_SSE_REGS:91000,91000 FLOAT_INT_SSE_REGS:7000000,7000000 ALL_REGS:7000000,7000000 MEM:22000,22000
  a1(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r74,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6000,6000
  a3(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117000,117000 SSE_REGS:117000,117000 MMX_REGS:117000,117000 FP_TOP_SSE_REGS:202605000,202605000 FP_SECOND_SSE_REGS:202605000,202605000 FLOAT_SSE_REGS:202605000,202605000 FLOAT_INT_REGS:202605000,202605000 INT_SSE_REGS:117000,117000 FLOAT_INT_SSE_REGS:202605000,202605000 ALL_REGS:202605000,202605000 MEM:35000,35000
  a4(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-1000,-1000
  a5(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a7(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a8(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000


Pass 1 for finding pseudo/allocno costs

    r76: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    r74: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:91000,91000 SSE_REGS:91000,91000 MMX_REGS:91000,91000 FP_TOP_SSE_REGS:7000000,7000000 FP_SECOND_SSE_REGS:7000000,7000000 FLOAT_SSE_REGS:7000000,7000000 FLOAT_INT_REGS:7000000,7000000 INT_SSE_REGS:91000,91000 FLOAT_INT_SSE_REGS:7000000,7000000 ALL_REGS:7000000,7000000 MEM:22000,22000
  a1(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r74,l0) costs: AREG:4000,4000 DREG:3000,3000 CREG:4000,4000 BREG:4000,4000 SIREG:4000,4000 DIREG:4000,4000 AD_REGS:4000,4000 Q_REGS:4000,4000 NON_Q_REGS:4000,4000 INDEX_REGS:4000,4000 GENERAL_REGS:4000,4000 LEGACY_REGS:4000,4000 CLOBBERED_REGS:4000,4000 SSE_FIRST_REG:30000,30000 SSE_REGS:30000,30000 MMX_REGS:30000,30000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:30000,30000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:10000,10000
  a3(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117000,117000 SSE_REGS:117000,117000 MMX_REGS:117000,117000 FP_TOP_SSE_REGS:202605000,202605000 FP_SECOND_SSE_REGS:202605000,202605000 FLOAT_SSE_REGS:202605000,202605000 FLOAT_INT_REGS:202605000,202605000 INT_SSE_REGS:117000,117000 FLOAT_INT_SSE_REGS:202605000,202605000 ALL_REGS:202605000,202605000 MEM:35000,35000
  a4(r75,l0) costs: GENERAL_REGS:8000,8000 SSE_FIRST_REG:34000,34000 SSE_REGS:34000,34000 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:34000,34000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3000,3000
  a5(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a7(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a8(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 37(l0): point = 0
   Insn 36(l0): point = 2
   Insn 35(l0): point = 4
   Insn 34(l0): point = 6
   Insn 33(l0): point = 8
   Insn 32(l0): point = 10
   Insn 31(l0): point = 12
   Insn 30(l0): point = 14
   Insn 29(l0): point = 16
   Insn 28(l0): point = 18
   Insn 27(l0): point = 20
   Insn 26(l0): point = 22
   Insn 25(l0): point = 24
   Insn 24(l0): point = 26
   Insn 23(l0): point = 28
   Insn 22(l0): point = 30
   Insn 21(l0): point = 32
   Insn 20(l0): point = 34
   Insn 19(l0): point = 36
   Insn 18(l0): point = 38
   Insn 17(l0): point = 40
   Insn 16(l0): point = 42
   Insn 15(l0): point = 44
   Insn 14(l0): point = 46
   Insn 13(l0): point = 48
   Insn 12(l0): point = 50
   Insn 11(l0): point = 52
   Insn 10(l0): point = 54
   Insn 9(l0): point = 56
   Insn 8(l0): point = 58
   Insn 7(l0): point = 60
   Insn 3(l0): point = 62
   Insn 2(l0): point = 64
 a0(r69): [3..62]
 a1(r76): [5..8]
 a2(r74): [7..10]
 a3(r68): [9..64]
 a4(r75): [11..12]
 a5(r73): [19..22]
 a6(r72): [29..32]
 a7(r71): [39..42]
 a8(r70): [49..52]
Compressing live ranges: from 67 to 14 - 20%
Ranges after the compression:
 a0(r69): [0..13]
 a1(r76): [0..1]
 a2(r74): [0..3]
 a3(r68): [2..13]
 a4(r75): [4..5]
 a5(r73): [6..7]
 a6(r72): [8..9]
 a7(r71): [10..11]
 a8(r70): [12..13]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r69,l0) conflicts: a1(r76,l0) a2(r74,l0) a3(r68,l0) a5(r73,l0) a6(r72,l0) a7(r71,l0) a8(r70,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a1(r76,l0) conflicts: a2(r74,l0) a0(r69,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a2(r74,l0) conflicts: a1(r76,l0) a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r68,l0) conflicts: a2(r74,l0) a0(r69,l0) a5(r73,l0) a6(r72,l0) a7(r71,l0) a8(r70,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a4(r75,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r73,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a6(r72,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a7(r71,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a8(r70,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

  cp0:a2(r74)<->a4(r75)@125:shuffle
  regions=1, blocks=3, points=14
    allocnos=9 (big 0), copies=1, conflicts=0, ranges=9

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r69 1r76 2r74 3r68 4r75 5r73 6r72 7r71 8r70
    modified regnos: 68 69 70 71 72 73 74 75 76
    border:
    Pressure: GENERAL_REGS=5
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@18000
          2:( 0 2-6 37-44)@100000
            3:( 3 6 41-44)@114000
      Spill a4(r75,l0)
      Allocno a0r69 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a1r76 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a2r74 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a3r68 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a5r73 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a6r72 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a7r71 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a8r70 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Pushing a2(r74,l0)(cost 0)
        Making a3(r68,l0) colorable
      Pushing a8(r70,l0)(cost 0)
        Making a0(r69,l0) colorable
      Pushing a7(r71,l0)(cost 0)
      Pushing a6(r72,l0)(cost 0)
      Pushing a5(r73,l0)(cost 0)
      Pushing a1(r76,l0)(cost 0)
      Pushing a0(r69,l0)(cost 22000)
      Pushing a3(r68,l0)(cost 35000)
      Popping a3(r68,l0)  -- assign reg 3
      Popping a0(r69,l0)  -- assign reg 6
      Popping a1(r76,l0)  -- assign reg 4
      Popping a5(r73,l0)  -- assign reg 4
      Popping a6(r72,l0)  -- assign reg 4
      Popping a7(r71,l0)  -- assign reg 4
      Popping a8(r70,l0)  -- assign reg 4
      Popping a2(r74,l0)  -- assign reg 1
Disposition:
    3:r68  l0     3    0:r69  l0     6    8:r70  l0     4    7:r71  l0     4
    6:r72  l0     4    5:r73  l0     4    2:r74  l0     1    4:r75  l0   mem
    1:r76  l0     4
New iteration of spill/restore move
+++Costs: overall -11000, reg -14000, mem 3000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void collision_table::save(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d} r1={13d,6u} r2={7d} r4={13d,7u} r5={13d,7u} r6={1d,2u} r7={1d,8u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,1u} r17={11d} r18={6d} r19={6d} r20={1d,2u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r68={1d,7u,2e} r69={1d,6u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} 
;;    total ref usage 370{315d,53u,2e} in 33{27 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68 69 70 71 72 73 74 75 76
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:DI 68 [ this ])
        (reg:DI 5 di [ this ])) tiles.cpp:242 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 69 [ file ])
        (reg:SI 4 si [ file ])) tiles.cpp:242 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ file ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:243 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (reg/f:DI 68 [ this ])) tiles.cpp:243 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) tiles.cpp:243 89 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:243 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 70 [ D.26107 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:244 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 12 11 13 2 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) tiles.cpp:244 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (reg/f:DI 70 [ D.26107 ])) tiles.cpp:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 70 [ D.26107 ])
        (nil)))
(insn 14 13 15 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) tiles.cpp:244 89 {*movsi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:244 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 16 15 17 2 (parallel [
            (set (reg/f:DI 71 [ D.26106 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:245 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:245 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg:DI 4 si)
        (reg/f:DI 71 [ D.26106 ])) tiles.cpp:245 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.26106 ])
        (nil)))
(insn 19 18 20 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) tiles.cpp:245 89 {*movsi_internal}
     (nil))
(call_insn 20 19 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:245 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 21 20 22 2 (parallel [
            (set (reg/f:DI 72 [ D.26106 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:246 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 22 21 23 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:246 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg:DI 4 si)
        (reg/f:DI 72 [ D.26106 ])) tiles.cpp:246 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 72 [ D.26106 ])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) tiles.cpp:246 89 {*movsi_internal}
     (nil))
(call_insn 25 24 26 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:246 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 26 25 27 2 (parallel [
            (set (reg/f:DI 73 [ D.26106 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:247 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 27 26 28 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:247 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (set (reg:DI 4 si)
        (reg/f:DI 73 [ D.26106 ])) tiles.cpp:247 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.26106 ])
        (nil)))
(insn 29 28 30 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) tiles.cpp:247 89 {*movsi_internal}
     (nil))
(call_insn 30 29 31 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:247 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 31 30 32 2 (set (reg:DI 75 [ this_1(D)->m ])
        (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_1(D)->m+0 S8 A64])) tiles.cpp:248 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_1(D)->m+0 S8 A64])
        (nil)))
(insn 32 31 33 2 (parallel [
            (set (reg:DI 74 [ D.26109 ])
                (ashift:DI (reg:DI 75 [ this_1(D)->m ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 75 [ this_1(D)->m ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:DI (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_1(D)->m+0 S8 A64])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 33 32 34 2 (set (reg/f:DI 76 [ this_1(D)->data ])
        (mem/f/j:DI (plus:DI (reg/f:DI 68 [ this ])
                (const_int 8 [0x8])) [0 this_1(D)->data+0 S8 A64])) tiles.cpp:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ this ])
        (nil)))
(insn 34 33 35 2 (set (reg:DI 1 dx)
        (reg:DI 74 [ D.26109 ])) tiles.cpp:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 74 [ D.26109 ])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 4 si)
        (reg/f:DI 76 [ this_1(D)->data ])) tiles.cpp:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 76 [ this_1(D)->data ])
        (nil)))
(insn 36 35 37 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) tiles.cpp:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 69 [ file ])
        (nil)))
(call_insn/j 37 36 38 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:248 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 38 37 0)

;; Function void collision_table::restore(int) (_ZN15collision_table7restoreEi, funcdef_no=1075, decl_uid=23665, cgraph_uid=319)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 69: local to bb 2 def dominates all uses has unique first use
Ignoring reg 75, has equiv memory
Reg 76: local to bb 2 def dominates all uses has unique first use
Found def insn 3 for 69 to be not moveable
Found def insn 51 for 76 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 75: (insn_list:REG_DEP_TRUE 49 (nil))

Pass 0 for finding pseudo/allocno costs

    a1 (r76,l0) best SIREG, allocno SIREG
    a4 (r75,l0) best NO_REGS, allocno NO_REGS
    a2 (r74,l0) best DREG, allocno DREG
    a5 (r73,l0) best SIREG, allocno SIREG
    a6 (r72,l0) best SIREG, allocno SIREG
    a7 (r71,l0) best SIREG, allocno SIREG
    a8 (r70,l0) best SIREG, allocno SIREG
    a0 (r69,l0) best SIREG, allocno SIREG
    a3 (r68,l0) best DIREG, allocno DIREG

  a0(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:91000,91000 SSE_REGS:91000,91000 MMX_REGS:91000,91000 FP_TOP_SSE_REGS:7000000,7000000 FP_SECOND_SSE_REGS:7000000,7000000 FLOAT_SSE_REGS:7000000,7000000 FLOAT_INT_REGS:7000000,7000000 INT_SSE_REGS:91000,91000 FLOAT_INT_SSE_REGS:7000000,7000000 ALL_REGS:7000000,7000000 MEM:22000,22000
  a1(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r74,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6000,6000
  a3(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117000,117000 SSE_REGS:117000,117000 MMX_REGS:117000,117000 FP_TOP_SSE_REGS:202605000,202605000 FP_SECOND_SSE_REGS:202605000,202605000 FLOAT_SSE_REGS:202605000,202605000 FLOAT_INT_REGS:202605000,202605000 INT_SSE_REGS:117000,117000 FLOAT_INT_SSE_REGS:202605000,202605000 ALL_REGS:202605000,202605000 MEM:35000,35000
  a4(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-1000,-1000
  a5(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a7(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a8(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000


Pass 1 for finding pseudo/allocno costs

    r76: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    r74: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:91000,91000 SSE_REGS:91000,91000 MMX_REGS:91000,91000 FP_TOP_SSE_REGS:7000000,7000000 FP_SECOND_SSE_REGS:7000000,7000000 FLOAT_SSE_REGS:7000000,7000000 FLOAT_INT_REGS:7000000,7000000 INT_SSE_REGS:91000,91000 FLOAT_INT_SSE_REGS:7000000,7000000 ALL_REGS:7000000,7000000 MEM:22000,22000
  a1(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r74,l0) costs: AREG:4000,4000 DREG:3000,3000 CREG:4000,4000 BREG:4000,4000 SIREG:4000,4000 DIREG:4000,4000 AD_REGS:4000,4000 Q_REGS:4000,4000 NON_Q_REGS:4000,4000 INDEX_REGS:4000,4000 GENERAL_REGS:4000,4000 LEGACY_REGS:4000,4000 CLOBBERED_REGS:4000,4000 SSE_FIRST_REG:30000,30000 SSE_REGS:30000,30000 MMX_REGS:30000,30000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:30000,30000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:10000,10000
  a3(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117000,117000 SSE_REGS:117000,117000 MMX_REGS:117000,117000 FP_TOP_SSE_REGS:202605000,202605000 FP_SECOND_SSE_REGS:202605000,202605000 FLOAT_SSE_REGS:202605000,202605000 FLOAT_INT_REGS:202605000,202605000 INT_SSE_REGS:117000,117000 FLOAT_INT_SSE_REGS:202605000,202605000 ALL_REGS:202605000,202605000 MEM:35000,35000
  a4(r75,l0) costs: GENERAL_REGS:8000,8000 SSE_FIRST_REG:34000,34000 SSE_REGS:34000,34000 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:34000,34000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3000,3000
  a5(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a7(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a8(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 55(l0): point = 0
   Insn 54(l0): point = 2
   Insn 53(l0): point = 4
   Insn 52(l0): point = 6
   Insn 51(l0): point = 8
   Insn 50(l0): point = 10
   Insn 49(l0): point = 12
   Insn 45(l0): point = 14
   Insn 44(l0): point = 16
   Insn 43(l0): point = 18
   Insn 42(l0): point = 20
   Insn 41(l0): point = 22
   Insn 37(l0): point = 24
   Insn 36(l0): point = 26
   Insn 35(l0): point = 28
   Insn 34(l0): point = 30
   Insn 33(l0): point = 32
   Insn 29(l0): point = 34
   Insn 28(l0): point = 36
   Insn 27(l0): point = 38
   Insn 26(l0): point = 40
   Insn 25(l0): point = 42
   Insn 21(l0): point = 44
   Insn 20(l0): point = 46
   Insn 19(l0): point = 48
   Insn 18(l0): point = 50
   Insn 17(l0): point = 52
   Insn 13(l0): point = 54
   Insn 12(l0): point = 56
   Insn 11(l0): point = 58
   Insn 10(l0): point = 60
   Insn 3(l0): point = 62
   Insn 2(l0): point = 64
 a0(r69): [3..62]
 a1(r76): [5..8]
 a2(r74): [7..10]
 a3(r68): [9..64]
 a4(r75): [11..12]
 a5(r73): [19..22]
 a6(r72): [29..32]
 a7(r71): [39..42]
 a8(r70): [49..52]
Compressing live ranges: from 67 to 14 - 20%
Ranges after the compression:
 a0(r69): [0..13]
 a1(r76): [0..1]
 a2(r74): [0..3]
 a3(r68): [2..13]
 a4(r75): [4..5]
 a5(r73): [6..7]
 a6(r72): [8..9]
 a7(r71): [10..11]
 a8(r70): [12..13]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r69,l0) conflicts: a1(r76,l0) a2(r74,l0) a3(r68,l0) a5(r73,l0) a6(r72,l0) a7(r71,l0) a8(r70,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a1(r76,l0) conflicts: a2(r74,l0) a0(r69,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a2(r74,l0) conflicts: a1(r76,l0) a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r68,l0) conflicts: a2(r74,l0) a0(r69,l0) a5(r73,l0) a6(r72,l0) a7(r71,l0) a8(r70,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a4(r75,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r73,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a6(r72,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a7(r71,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a8(r70,l0) conflicts: a0(r69,l0) a3(r68,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

  cp0:a2(r74)<->a4(r75)@125:shuffle
  regions=1, blocks=3, points=14
    allocnos=9 (big 0), copies=1, conflicts=0, ranges=9

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r69 1r76 2r74 3r68 4r75 5r73 6r72 7r71 8r70
    modified regnos: 68 69 70 71 72 73 74 75 76
    border:
    Pressure: GENERAL_REGS=5
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@18000
          2:( 0 2-6 37-44)@100000
            3:( 3 6 41-44)@114000
      Spill a4(r75,l0)
      Allocno a0r69 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a1r76 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a2r74 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a3r68 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a5r73 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a6r72 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a7r71 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a8r70 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Pushing a2(r74,l0)(cost 0)
        Making a3(r68,l0) colorable
      Pushing a8(r70,l0)(cost 0)
        Making a0(r69,l0) colorable
      Pushing a7(r71,l0)(cost 0)
      Pushing a6(r72,l0)(cost 0)
      Pushing a5(r73,l0)(cost 0)
      Pushing a1(r76,l0)(cost 0)
      Pushing a0(r69,l0)(cost 22000)
      Pushing a3(r68,l0)(cost 35000)
      Popping a3(r68,l0)  -- assign reg 3
      Popping a0(r69,l0)  -- assign reg 6
      Popping a1(r76,l0)  -- assign reg 4
      Popping a5(r73,l0)  -- assign reg 4
      Popping a6(r72,l0)  -- assign reg 4
      Popping a7(r71,l0)  -- assign reg 4
      Popping a8(r70,l0)  -- assign reg 4
      Popping a2(r74,l0)  -- assign reg 1
Disposition:
    3:r68  l0     3    0:r69  l0     6    8:r70  l0     4    7:r71  l0     4
    6:r72  l0     4    5:r73  l0     4    2:r74  l0     1    4:r75  l0   mem
    1:r76  l0     4
New iteration of spill/restore move
+++Costs: overall -11000, reg -14000, mem 3000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void collision_table::restore(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d} r1={13d,6u} r2={7d} r4={13d,7u} r5={13d,7u} r6={1d,2u} r7={1d,8u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,1u} r17={11d} r18={6d} r19={6d} r20={1d,2u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r68={1d,14u,2e} r69={1d,12u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} 
;;    total ref usage 383{315d,66u,2e} in 51{45 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68 69 70 71 72 73 74 75 76
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:DI 68 [ this ])
        (reg:DI 5 di [ this ])) tiles.cpp:251 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 69 [ file ])
        (reg:SI 4 si [ file ])) tiles.cpp:251 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ file ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 8 2 (var_location:SI __fd (reg/v:SI 69 [ file ])) tiles.cpp:252 -1
     (nil))
(debug_insn 8 7 9 2 (var_location:DI __buf (reg/f:DI 68 [ this ])) tiles.cpp:252 -1
     (nil))
(debug_insn 9 8 10 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:252 -1
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg/f:DI 68 [ this ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 14 13 15 2 (var_location:SI __fd (reg/v:SI 69 [ file ])) tiles.cpp:253 -1
     (nil))
(debug_insn 15 14 16 2 (var_location:DI __buf (plus:DI (reg/f:DI 68 [ this ])
        (const_int 16 [0x10]))) tiles.cpp:253 -1
     (nil))
(debug_insn 16 15 17 2 (var_location:DI __nbytes (const_int 4 [0x4])) tiles.cpp:253 -1
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg/f:DI 70 [ D.26113 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:253 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 18 17 19 2 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (set (reg:DI 4 si)
        (reg/f:DI 70 [ D.26113 ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 70 [ D.26113 ])
        (nil)))
(insn 20 19 21 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(call_insn 21 20 22 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 22 21 23 2 (var_location:SI __fd (reg/v:SI 69 [ file ])) tiles.cpp:254 -1
     (nil))
(debug_insn 23 22 24 2 (var_location:DI __buf (plus:DI (reg/f:DI 68 [ this ])
        (const_int 24 [0x18]))) tiles.cpp:254 -1
     (nil))
(debug_insn 24 23 25 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:254 -1
     (nil))
(insn 25 24 26 2 (parallel [
            (set (reg/f:DI 71 [ D.26112 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:254 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 26 25 27 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:DI 4 si)
        (reg/f:DI 71 [ D.26112 ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.26112 ])
        (nil)))
(insn 28 27 29 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(call_insn 29 28 30 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 30 29 31 2 (var_location:SI __fd (reg/v:SI 69 [ file ])) tiles.cpp:255 -1
     (nil))
(debug_insn 31 30 32 2 (var_location:DI __buf (plus:DI (reg/f:DI 68 [ this ])
        (const_int 32 [0x20]))) tiles.cpp:255 -1
     (nil))
(debug_insn 32 31 33 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:255 -1
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg/f:DI 72 [ D.26112 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:255 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 34 33 35 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:DI 4 si)
        (reg/f:DI 72 [ D.26112 ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 72 [ D.26112 ])
        (nil)))
(insn 36 35 37 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(call_insn 37 36 38 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 38 37 39 2 (var_location:SI __fd (reg/v:SI 69 [ file ])) tiles.cpp:256 -1
     (nil))
(debug_insn 39 38 40 2 (var_location:DI __buf (plus:DI (reg/f:DI 68 [ this ])
        (const_int 40 [0x28]))) tiles.cpp:256 -1
     (nil))
(debug_insn 40 39 41 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:256 -1
     (nil))
(insn 41 40 42 2 (parallel [
            (set (reg/f:DI 73 [ D.26112 ])
                (plus:DI (reg/f:DI 68 [ this ])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:256 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 42 41 43 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 2 (set (reg:DI 4 si)
        (reg/f:DI 73 [ D.26112 ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.26112 ])
        (nil)))
(insn 44 43 45 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(call_insn 45 44 46 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 46 45 47 2 (var_location:SI __fd (reg/v:SI 69 [ file ])) tiles.cpp:257 -1
     (nil))
(debug_insn 47 46 48 2 (var_location:DI __buf (mem/f/j:DI (plus:DI (reg/f:DI 68 [ this ])
            (const_int 8 [0x8])) [0 this_1(D)->data+0 S8 A64])) tiles.cpp:257 -1
     (nil))
(debug_insn 48 47 49 2 (var_location:DI __nbytes (ashift:DI (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_1(D)->m+0 S8 A64])
        (const_int 3 [0x3]))) tiles.cpp:257 -1
     (nil))
(insn 49 48 50 2 (set (reg:DI 75 [ this_1(D)->m ])
        (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_1(D)->m+0 S8 A64])) tiles.cpp:257 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_1(D)->m+0 S8 A64])
        (nil)))
(insn 50 49 51 2 (parallel [
            (set (reg:DI 74 [ D.26115 ])
                (ashift:DI (reg:DI 75 [ this_1(D)->m ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:257 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 75 [ this_1(D)->m ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:DI (mem/j:DI (reg/f:DI 68 [ this ]) [0 this_1(D)->m+0 S8 A64])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 51 50 52 2 (set (reg/f:DI 76 [ this_1(D)->data ])
        (mem/f/j:DI (plus:DI (reg/f:DI 68 [ this ])
                (const_int 8 [0x8])) [0 this_1(D)->data+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ this ])
        (nil)))
(insn 52 51 53 2 (set (reg:DI 1 dx)
        (reg:DI 74 [ D.26115 ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 74 [ D.26115 ])
        (nil)))
(insn 53 52 54 2 (set (reg:DI 4 si)
        (reg/f:DI 76 [ this_1(D)->data ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 76 [ this_1(D)->data ])
        (nil)))
(insn 54 53 55 2 (set (reg:SI 5 di)
        (reg/v:SI 69 [ file ])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 69 [ file ])
        (nil)))
(call_insn/j 55 54 56 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 56 55 0)

;; Function void tiles(int*, int, int, float*, int) (_Z5tilesPiiiPfi, funcdef_no=1076, decl_uid=23709, cgraph_uid=320)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000


Pass 1 for finding pseudo/allocno costs

    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 18(l0): point = 0
   Insn 17(l0): point = 2
   Insn 16(l0): point = 4
   Insn 15(l0): point = 6
   Insn 14(l0): point = 8
   Insn 12(l0): point = 10
   Insn 10(l0): point = 12
   Insn 5(l0): point = 14
   Insn 4(l0): point = 16
   Insn 3(l0): point = 18
   Insn 2(l0): point = 20
 a0(r59): [3..20]
 a1(r60): [5..18]
 a2(r61): [7..16]
 a3(r62): [9..14]
Compressing live ranges: from 23 to 2 - 8%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r62): [0..1]
+++Allocating 32 bytes for conflict table (uncompressed size 32)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r62,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r62,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r62,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

  regions=1, blocks=3, points=2
    allocnos=4 (big 0), copies=0, conflicts=0, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62
    modified regnos: 59 60 61 62
    border:
    Pressure: GENERAL_REGS=6
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@26000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, int, float*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} 
;;    total ref usage 96{72d,24u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:275 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:275 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:275 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:275 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:276 89 {*movsi_internal}
     (nil))
(note 11 10 12 2 NOTE_INSN_DELETED)
(insn 12 11 14 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:276 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn 14 12 15 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:276 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:276 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:276 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:276 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 18 17 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:276 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles(int*, int, collision_table*, float*, int) (_Z5tilesPiiP15collision_tablePfi, funcdef_no=1077, decl_uid=23715, cgraph_uid=321)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000


Pass 1 for finding pseudo/allocno costs

    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 18(l0): point = 0
   Insn 17(l0): point = 2
   Insn 16(l0): point = 4
   Insn 15(l0): point = 6
   Insn 14(l0): point = 8
   Insn 12(l0): point = 10
   Insn 10(l0): point = 12
   Insn 5(l0): point = 14
   Insn 4(l0): point = 16
   Insn 3(l0): point = 18
   Insn 2(l0): point = 20
 a0(r59): [3..20]
 a1(r60): [5..18]
 a2(r61): [7..16]
 a3(r62): [9..14]
Compressing live ranges: from 23 to 2 - 8%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r62): [0..1]
+++Allocating 32 bytes for conflict table (uncompressed size 32)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r62,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r62,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r62,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

  regions=1, blocks=3, points=2
    allocnos=4 (big 0), copies=0, conflicts=0, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62
    modified regnos: 59 60 61 62
    border:
    Pressure: GENERAL_REGS=6
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@26000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, collision_table*, float*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} 
;;    total ref usage 96{72d,24u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:278 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:278 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:278 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:278 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:279 89 {*movsi_internal}
     (nil))
(note 11 10 12 2 NOTE_INSN_DELETED)
(insn 12 11 14 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:279 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn 14 12 15 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 15 14 16 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:279 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 18 17 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:279 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles(int*, int, int, float*, int, int) (_Z5tilesPiiiPfii, funcdef_no=1078, decl_uid=23722, cgraph_uid=322)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 65, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 11 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000


Pass 1 for finding pseudo/allocno costs

    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000

   Insn 21(l0): point = 0
   Insn 20(l0): point = 2
   Insn 19(l0): point = 4
   Insn 18(l0): point = 6
   Insn 17(l0): point = 8
   Insn 15(l0): point = 10
   Insn 13(l0): point = 12
   Insn 12(l0): point = 14
   Insn 11(l0): point = 16
   Insn 5(l0): point = 18
   Insn 4(l0): point = 20
   Insn 3(l0): point = 22
   Insn 2(l0): point = 24
 a0(r59): [3..24]
 a1(r60): [5..22]
 a2(r61): [7..20]
 a3(r62): [9..18]
 a4(r65): [11..16]
Compressing live ranges: from 27 to 2 - 7%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r62): [0..1]
 a4(r65): [0..1]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r65,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r62,l0) a4(r65,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r62,l0) a4(r65,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a4(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

  regions=1, blocks=3, points=2
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62 4r65
    modified regnos: 59 60 61 62 65
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@40000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r65 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r65,l0)(cost 0)
      Popping a4(r65,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
    4:r65  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, int, float*, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r65={1d,2u} 
;;    total ref usage 100{73d,27u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 65
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:283 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:283 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:284 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 11 13 2 (set (mem/j/c:SI (reg/f:DI 65) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:284 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 13 12 15 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:285 89 {*movsi_internal}
     (nil))
(insn 15 13 17 2 (set (reg:DI 38 r9)
        (reg/f:DI 65)) tiles.cpp:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 17 15 18 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 18 17 19 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:285 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 19 18 20 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:285 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 21 20 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:285 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles(int*, int, collision_table*, float*, int, int) (_Z5tilesPiiP15collision_tablePfii, funcdef_no=1079, decl_uid=23729, cgraph_uid=323)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 65, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 11 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000


Pass 1 for finding pseudo/allocno costs

    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000

   Insn 21(l0): point = 0
   Insn 20(l0): point = 2
   Insn 19(l0): point = 4
   Insn 18(l0): point = 6
   Insn 17(l0): point = 8
   Insn 15(l0): point = 10
   Insn 13(l0): point = 12
   Insn 12(l0): point = 14
   Insn 11(l0): point = 16
   Insn 5(l0): point = 18
   Insn 4(l0): point = 20
   Insn 3(l0): point = 22
   Insn 2(l0): point = 24
 a0(r59): [3..24]
 a1(r60): [5..22]
 a2(r61): [7..20]
 a3(r62): [9..18]
 a4(r65): [11..16]
Compressing live ranges: from 27 to 2 - 7%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r62): [0..1]
 a4(r65): [0..1]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r65,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r62,l0) a4(r65,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r62,l0) a4(r65,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a4(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

  regions=1, blocks=3, points=2
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62 4r65
    modified regnos: 59 60 61 62 65
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@40000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r65 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r65,l0)(cost 0)
      Popping a4(r65,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
    4:r65  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, collision_table*, float*, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r65={1d,2u} 
;;    total ref usage 100{73d,27u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 65
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:287 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:287 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:287 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:287 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:288 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 11 13 2 (set (mem/j/c:SI (reg/f:DI 65) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:288 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 13 12 15 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:289 89 {*movsi_internal}
     (nil))
(insn 15 13 17 2 (set (reg:DI 38 r9)
        (reg/f:DI 65)) tiles.cpp:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 17 15 18 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 18 17 19 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 19 18 20 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:289 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 21 20 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:289 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles(int*, int, int, float*, int, int, int) (_Z5tilesPiiiPfiii, funcdef_no=1080, decl_uid=23737, cgraph_uid=324)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 28.
rescanning insn with uid = 28.
deleting insn with uid = 28.
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 66, has equiv memory
Ignoring reg 65, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 66: (insn_list:REG_DEP_TRUE 12 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r66,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0

   Insn 24(l0): point = 0
   Insn 23(l0): point = 2
   Insn 22(l0): point = 4
   Insn 21(l0): point = 6
   Insn 20(l0): point = 8
   Insn 18(l0): point = 10
   Insn 16(l0): point = 12
   Insn 15(l0): point = 14
   Insn 28(l0): point = 16
   Insn 13(l0): point = 18
   Insn 12(l0): point = 20
   Insn 5(l0): point = 22
   Insn 4(l0): point = 24
   Insn 3(l0): point = 26
   Insn 2(l0): point = 28
 a0(r59): [3..28]
 a1(r60): [5..26]
 a2(r61): [7..24]
 a3(r62): [9..22]
 a4(r66): [11..20]
 a5(r65): [15..16]
Compressing live ranges: from 31 to 2 - 6%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r62): [0..1]
 a4(r66): [0..1]
 a5(r65): [0..1]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r62,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r62,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r66,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a5(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r66,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

  regions=1, blocks=3, points=2
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62 4r66 5r65
    modified regnos: 59 60 61 62 65 66
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 38-44)@0
          2:( 0-6 39-44)@48000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r66 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r65 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Pushing a5(r65,l0)(cost 0)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r66,l0)(cost 0)
      Popping a4(r66,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
      Popping a5(r65,l0)  -- assign reg 38
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
    5:r65  l0    38    4:r66  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, int, float*, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u,1e} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r65={1d,1u} r66={1d,3u} 
;;    total ref usage 105{74d,30u,1e} in 15{14 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 65 66
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:293 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:293 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:293 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:293 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 9 2 NOTE_INSN_DELETED)
(note 9 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:294 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 28 2 (set (mem/j/c:SI (reg/f:DI 66) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:294 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 28 13 15 2 (set (reg/v:SI 65 [ h2 ])
        (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])) tiles.cpp:295 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn 15 28 16 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 66)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 65 [ h2 ])) tiles.cpp:295 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 65 [ h2 ])
        (nil)))
(insn 16 15 18 2 (set (mem:SI (reg/f:DI 16 argp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:296 89 {*movsi_internal}
     (nil))
(insn 18 16 20 2 (set (reg:DI 38 r9)
        (reg/f:DI 66)) tiles.cpp:296 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 20 18 21 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:296 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:296 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:296 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:296 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn/j 24 23 25 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:296 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 25 24 0)

;; Function void tiles(int*, int, collision_table*, float*, int, int, int) (_Z5tilesPiiP15collision_tablePfiii, funcdef_no=1081, decl_uid=23745, cgraph_uid=325)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 28.
rescanning insn with uid = 28.
deleting insn with uid = 28.
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 66, has equiv memory
Ignoring reg 65, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 66: (insn_list:REG_DEP_TRUE 12 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r66,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0

   Insn 24(l0): point = 0
   Insn 23(l0): point = 2
   Insn 22(l0): point = 4
   Insn 21(l0): point = 6
   Insn 20(l0): point = 8
   Insn 18(l0): point = 10
   Insn 16(l0): point = 12
   Insn 15(l0): point = 14
   Insn 28(l0): point = 16
   Insn 13(l0): point = 18
   Insn 12(l0): point = 20
   Insn 5(l0): point = 22
   Insn 4(l0): point = 24
   Insn 3(l0): point = 26
   Insn 2(l0): point = 28
 a0(r59): [3..28]
 a1(r60): [5..26]
 a2(r61): [7..24]
 a3(r62): [9..22]
 a4(r66): [11..20]
 a5(r65): [15..16]
Compressing live ranges: from 31 to 2 - 6%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r62): [0..1]
 a4(r66): [0..1]
 a5(r65): [0..1]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r62,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r62,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a4(r66,l0) a5(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r66,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a5(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r66,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

  regions=1, blocks=3, points=2
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62 4r66 5r65
    modified regnos: 59 60 61 62 65 66
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 38-44)@0
          2:( 0-6 39-44)@48000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r66 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r65 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Pushing a5(r65,l0)(cost 0)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r66,l0)(cost 0)
      Popping a4(r66,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
      Popping a5(r65,l0)  -- assign reg 38
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
    5:r65  l0    38    4:r66  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, collision_table*, float*, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u,1e} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r65={1d,1u} r66={1d,3u} 
;;    total ref usage 105{74d,30u,1e} in 15{14 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 65 66
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:298 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 9 2 NOTE_INSN_DELETED)
(note 9 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:299 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 28 2 (set (mem/j/c:SI (reg/f:DI 66) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:299 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 28 13 15 2 (set (reg/v:SI 65 [ h2 ])
        (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])) tiles.cpp:300 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn 15 28 16 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 66)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 65 [ h2 ])) tiles.cpp:300 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 65 [ h2 ])
        (nil)))
(insn 16 15 18 2 (set (mem:SI (reg/f:DI 16 argp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:301 89 {*movsi_internal}
     (nil))
(insn 18 16 20 2 (set (reg:DI 38 r9)
        (reg/f:DI 66)) tiles.cpp:301 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 20 18 21 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:301 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:301 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:301 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:301 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn/j 24 23 25 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:301 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 25 24 0)

;; Function void tiles(int*, int, int, float*, int, int, int, int) (_Z5tilesPiiiPfiiii, funcdef_no=1082, decl_uid=23754, cgraph_uid=326)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 31.
rescanning insn with uid = 31.
deleting insn with uid = 31.
deleting insn with uid = 9.
scanning new insn with uid = 32.
rescanning insn with uid = 32.
deleting insn with uid = 32.
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 67, has equiv memory
Ignoring reg 65, has equiv memory
Ignoring reg 66, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 66: (insn_list:REG_DEP_TRUE 31 (nil))
init_insns for 67: (insn_list:REG_DEP_TRUE 13 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0
  a6(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r67,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r66,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0
  a6(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0

   Insn 27(l0): point = 0
   Insn 26(l0): point = 2
   Insn 25(l0): point = 4
   Insn 24(l0): point = 6
   Insn 23(l0): point = 8
   Insn 21(l0): point = 10
   Insn 19(l0): point = 12
   Insn 18(l0): point = 14
   Insn 31(l0): point = 16
   Insn 16(l0): point = 18
   Insn 32(l0): point = 20
   Insn 14(l0): point = 22
   Insn 13(l0): point = 24
   Insn 5(l0): point = 26
   Insn 4(l0): point = 28
   Insn 3(l0): point = 30
   Insn 2(l0): point = 32
 a0(r59): [3..32]
 a1(r60): [5..30]
 a2(r61): [7..28]
 a3(r62): [9..26]
 a4(r67): [11..24]
 a5(r66): [15..16]
 a6(r65): [19..20]
Compressing live ranges: from 35 to 4 - 11%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r62): [0..3]
 a4(r67): [0..3]
 a5(r66): [0..1]
 a6(r65): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a5(r66,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a5(r66,l0) a0(r59,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a5(r66,l0) a0(r59,l0) a1(r60,l0) a3(r62,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a5(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r67,l0) conflicts: a5(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a6(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r66,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a6(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62 4r67 5r66 6r65
    modified regnos: 59 60 61 62 65 66 67
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 38-44)@0
          2:( 0-6 39-44)@56000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r66 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a6r65 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Pushing a6(r65,l0)(cost 0)
      Pushing a5(r66,l0)(cost 0)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r67,l0)(cost 0)
      Popping a4(r67,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
      Popping a5(r66,l0)  -- assign reg 38
      Popping a6(r65,l0)  -- assign reg 38
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
    6:r65  l0    38    5:r66  l0    38    4:r67  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, int, float*, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,5u,2e} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,4u} 
;;    total ref usage 110{75d,33u,2e} in 17{16 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 65 66 67
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:305 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:305 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:305 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:305 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_DELETED)
(note 10 7 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:306 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 13 32 2 (set (mem/j/c:SI (reg/f:DI 67) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:306 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 32 14 16 2 (set (reg/v:SI 65 [ h2 ])
        (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])) tiles.cpp:307 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn 16 32 31 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 65 [ h2 ])) tiles.cpp:307 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 65 [ h2 ])
        (nil)))
(insn 31 16 18 2 (set (reg/v:SI 66 [ h3 ])
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 h3+0 S4 A64])) tiles.cpp:308 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 h3+0 S4 A64])
        (nil)))
(insn 18 31 19 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg/v:SI 66 [ h3 ])) tiles.cpp:308 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 66 [ h3 ])
        (nil)))
(insn 19 18 21 2 (set (mem:SI (reg/f:DI 16 argp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:309 89 {*movsi_internal}
     (nil))
(insn 21 19 23 2 (set (reg:DI 38 r9)
        (reg/f:DI 67)) tiles.cpp:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 23 21 24 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:309 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 25 24 26 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:309 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn/j 27 26 28 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:309 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 28 27 0)

;; Function void tiles(int*, int, collision_table*, float*, int, int, int, int) (_Z5tilesPiiP15collision_tablePfiiii, funcdef_no=1083, decl_uid=23763, cgraph_uid=327)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 31.
rescanning insn with uid = 31.
deleting insn with uid = 31.
deleting insn with uid = 9.
scanning new insn with uid = 32.
rescanning insn with uid = 32.
deleting insn with uid = 32.
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 67, has equiv memory
Ignoring reg 65, has equiv memory
Ignoring reg 66, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 66: (insn_list:REG_DEP_TRUE 31 (nil))
init_insns for 67: (insn_list:REG_DEP_TRUE 13 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best CREG, allocno CREG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0
  a6(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r67,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r66,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0
  a6(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:0,0

   Insn 27(l0): point = 0
   Insn 26(l0): point = 2
   Insn 25(l0): point = 4
   Insn 24(l0): point = 6
   Insn 23(l0): point = 8
   Insn 21(l0): point = 10
   Insn 19(l0): point = 12
   Insn 18(l0): point = 14
   Insn 31(l0): point = 16
   Insn 16(l0): point = 18
   Insn 32(l0): point = 20
   Insn 14(l0): point = 22
   Insn 13(l0): point = 24
   Insn 5(l0): point = 26
   Insn 4(l0): point = 28
   Insn 3(l0): point = 30
   Insn 2(l0): point = 32
 a0(r59): [3..32]
 a1(r60): [5..30]
 a2(r61): [7..28]
 a3(r62): [9..26]
 a4(r67): [11..24]
 a5(r66): [15..16]
 a6(r65): [19..20]
Compressing live ranges: from 35 to 4 - 11%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r62): [0..3]
 a4(r67): [0..3]
 a5(r66): [0..1]
 a6(r65): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a5(r66,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a5(r66,l0) a0(r59,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a5(r66,l0) a0(r59,l0) a1(r60,l0) a3(r62,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r62,l0) conflicts: a5(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a4(r67,l0) a6(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r67,l0) conflicts: a5(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a6(r65,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r66,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a6(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r62,l0) a4(r67,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r62 4r67 5r66 6r65
    modified regnos: 59 60 61 62 65 66 67
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 38-44)@0
          2:( 0-6 39-44)@56000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r62 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r66 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a6r65 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Pushing a6(r65,l0)(cost 0)
      Pushing a5(r66,l0)(cost 0)
      Pushing a3(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r67,l0)(cost 0)
      Popping a4(r67,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a3(r62,l0)  -- assign reg 2
      Popping a5(r66,l0)  -- assign reg 38
      Popping a6(r65,l0)  -- assign reg 38
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    3:r62  l0     2
    6:r65  l0    38    5:r66  l0    38    4:r67  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles(int*, int, collision_table*, float*, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,5u,2e} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,4u} 
;;    total ref usage 110{75d,33u,2e} in 17{16 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 65 66 67
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:311 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 62 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_DELETED)
(note 10 7 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:312 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 13 32 2 (set (mem/j/c:SI (reg/f:DI 67) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:312 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 32 14 16 2 (set (reg/v:SI 65 [ h2 ])
        (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])) tiles.cpp:313 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn 16 32 31 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 65 [ h2 ])) tiles.cpp:313 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 65 [ h2 ])
        (nil)))
(insn 31 16 18 2 (set (reg/v:SI 66 [ h3 ])
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 h3+0 S4 A64])) tiles.cpp:314 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 h3+0 S4 A64])
        (nil)))
(insn 18 31 19 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg/v:SI 66 [ h3 ])) tiles.cpp:314 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 66 [ h3 ])
        (nil)))
(insn 19 18 21 2 (set (mem:SI (reg/f:DI 16 argp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:315 89 {*movsi_internal}
     (nil))
(insn 21 19 23 2 (set (reg:DI 38 r9)
        (reg/f:DI 67)) tiles.cpp:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 23 21 24 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 62 [ floats ])) tiles.cpp:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ floats ])
        (nil)))
(insn 24 23 25 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 25 24 26 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:315 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn/j 27 26 28 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:315 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 28 27 0)

;; Function void tiles1(int*, int, int, float) (_Z6tiles1Piiif, funcdef_no=1084, decl_uid=23768, cgraph_uid=328)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 63, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 63: (insn_list:REG_DEP_TRUE 9 (nil))

Pass 0 for finding pseudo/allocno costs

    a3 (r63,l0) best CREG, allocno CREG
    a4 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 20(l0): point = 0
   Insn 19(l0): point = 2
   Insn 18(l0): point = 4
   Insn 17(l0): point = 6
   Insn 16(l0): point = 8
   Insn 14(l0): point = 10
   Insn 13(l0): point = 12
   Insn 11(l0): point = 14
   Insn 10(l0): point = 16
   Insn 9(l0): point = 18
   Insn 5(l0): point = 20
   Insn 4(l0): point = 22
   Insn 3(l0): point = 24
   Insn 2(l0): point = 26
 a0(r59): [3..26]
 a1(r60): [5..24]
 a2(r61): [7..22]
 a3(r63): [9..18]
 a4(r62): [17..20]
Compressing live ranges: from 29 to 2 - 6%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r63): [0..1]
 a4(r62): [0..1]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r63,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=2
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r63 4r62
    modified regnos: 59 60 61 62 63
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@12000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
        5:( 21-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r63 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a4(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r63,l0)(cost 0)
      Popping a3(r63,l0)  -- assign reg 2
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a4(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    4:r62  l0    21
    3:r63  l0     2
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, int, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,2u} 
;;    total ref usage 100{74d,26u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:319 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:319 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:319 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:319 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 63)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:320 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 10 9 11 2 (set (mem/j/c:SF (reg/f:DI 63) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:320 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 11 10 12 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:321 89 {*movsi_internal}
     (nil))
(note 12 11 13 2 NOTE_INSN_DELETED)
(insn 13 12 14 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:321 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn 14 13 16 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:321 89 {*movsi_internal}
     (nil))
(insn 16 14 17 2 (set (reg:DI 2 cx)
        (reg/f:DI 63)) tiles.cpp:321 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 63)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 17 16 18 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:321 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 18 17 19 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:321 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:321 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 20 19 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:321 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles1(int*, int, collision_table*, float) (_Z6tiles1PiiP15collision_tablef, funcdef_no=1085, decl_uid=23773, cgraph_uid=329)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 63, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 63: (insn_list:REG_DEP_TRUE 9 (nil))

Pass 0 for finding pseudo/allocno costs

    a3 (r63,l0) best CREG, allocno CREG
    a4 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 20(l0): point = 0
   Insn 19(l0): point = 2
   Insn 18(l0): point = 4
   Insn 17(l0): point = 6
   Insn 16(l0): point = 8
   Insn 14(l0): point = 10
   Insn 13(l0): point = 12
   Insn 11(l0): point = 14
   Insn 10(l0): point = 16
   Insn 9(l0): point = 18
   Insn 5(l0): point = 20
   Insn 4(l0): point = 22
   Insn 3(l0): point = 24
   Insn 2(l0): point = 26
 a0(r59): [3..26]
 a1(r60): [5..24]
 a2(r61): [7..22]
 a3(r63): [9..18]
 a4(r62): [17..20]
Compressing live ranges: from 29 to 2 - 6%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r63): [0..1]
 a4(r62): [0..1]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r63,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=2
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r63 4r62
    modified regnos: 59 60 61 62 63
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@12000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
        5:( 21-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r63 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a4(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r63,l0)(cost 0)
      Popping a3(r63,l0)  -- assign reg 2
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a4(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    4:r62  l0    21
    3:r63  l0     2
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, collision_table*, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,2u} 
;;    total ref usage 100{74d,26u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:323 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:323 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:323 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:323 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 63)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:324 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 10 9 11 2 (set (mem/j/c:SF (reg/f:DI 63) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:324 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 11 10 12 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:325 89 {*movsi_internal}
     (nil))
(note 12 11 13 2 NOTE_INSN_DELETED)
(insn 13 12 14 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:325 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn 14 13 16 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:325 89 {*movsi_internal}
     (nil))
(insn 16 14 17 2 (set (reg:DI 2 cx)
        (reg/f:DI 63)) tiles.cpp:325 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 63)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 17 16 18 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:325 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 18 17 19 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:325 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:325 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 20 19 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:325 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles1(int*, int, int, float, int) (_Z6tiles1Piiifi, funcdef_no=1086, decl_uid=23779, cgraph_uid=330)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 63: local to bb 2 def dominates all uses has unique first use
Ignoring reg 64, has equiv memory
Ignoring reg 65, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 6 for 63 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 64: (insn_list:REG_DEP_TRUE 10 (nil))
init_insns for 65: (insn_list:REG_DEP_TRUE 12 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r64,l0) best CREG, allocno CREG
    a5 (r63,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 23(l0): point = 0
   Insn 22(l0): point = 2
   Insn 21(l0): point = 4
   Insn 20(l0): point = 6
   Insn 19(l0): point = 8
   Insn 17(l0): point = 10
   Insn 16(l0): point = 12
   Insn 14(l0): point = 14
   Insn 13(l0): point = 16
   Insn 12(l0): point = 18
   Insn 11(l0): point = 20
   Insn 10(l0): point = 22
   Insn 6(l0): point = 24
   Insn 5(l0): point = 26
   Insn 4(l0): point = 28
   Insn 3(l0): point = 30
   Insn 2(l0): point = 32
 a0(r59): [3..32]
 a1(r60): [5..30]
 a2(r61): [7..28]
 a3(r64): [9..22]
 a4(r65): [13..18]
 a5(r63): [17..24]
 a6(r62): [21..26]
Compressing live ranges: from 35 to 4 - 11%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r64): [0..3]
 a4(r65): [0..1]
 a5(r63): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r65,l0) a1(r60,l0) a2(r61,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r65,l0) a0(r59,l0) a2(r61,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r65,l0) a0(r59,l0) a1(r60,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r64,l0) conflicts: a4(r65,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r63,l0) conflicts: a4(r65,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r64,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r64 4r65 5r63 6r62
    modified regnos: 59 60 61 62 63 64 65
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@36000
          2:( 0-6 39-44)@12000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
        6:( 21-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r64 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r65 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a5r63 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a6r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r63,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r65,l0)(cost 0)
      Pushing a3(r64,l0)(cost 0)
      Popping a3(r64,l0)  -- assign reg 0
      Popping a4(r65,l0)  -- assign reg 38
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r63,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r63  l0     2    3:r64  l0     0    4:r65  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, int, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,2u} r65={1d,2u} 
;;    total ref usage 106{76d,30u,0e} in 17{16 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:329 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:329 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:329 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:329 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 63 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:329 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 64)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:330 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 11 10 12 2 (set (mem/j/c:SF (reg/f:DI 64) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:330 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:331 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 14 2 (set (mem/j/c:SI (reg/f:DI 65) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 63 [ h1 ])) tiles.cpp:331 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 63 [ h1 ])
        (nil)))
(insn 14 13 16 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:332 89 {*movsi_internal}
     (nil))
(insn 16 14 17 2 (set (reg:DI 38 r9)
        (reg/f:DI 65)) tiles.cpp:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 17 16 19 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:332 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 2 cx)
        (reg/f:DI 64)) tiles.cpp:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 20 19 21 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:332 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:332 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 23 22 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:332 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles1(int*, int, collision_table*, float, int) (_Z6tiles1PiiP15collision_tablefi, funcdef_no=1087, decl_uid=23785, cgraph_uid=331)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 63: local to bb 2 def dominates all uses has unique first use
Ignoring reg 64, has equiv memory
Ignoring reg 65, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 6 for 63 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 64: (insn_list:REG_DEP_TRUE 10 (nil))
init_insns for 65: (insn_list:REG_DEP_TRUE 12 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r64,l0) best CREG, allocno CREG
    a5 (r63,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 23(l0): point = 0
   Insn 22(l0): point = 2
   Insn 21(l0): point = 4
   Insn 20(l0): point = 6
   Insn 19(l0): point = 8
   Insn 17(l0): point = 10
   Insn 16(l0): point = 12
   Insn 14(l0): point = 14
   Insn 13(l0): point = 16
   Insn 12(l0): point = 18
   Insn 11(l0): point = 20
   Insn 10(l0): point = 22
   Insn 6(l0): point = 24
   Insn 5(l0): point = 26
   Insn 4(l0): point = 28
   Insn 3(l0): point = 30
   Insn 2(l0): point = 32
 a0(r59): [3..32]
 a1(r60): [5..30]
 a2(r61): [7..28]
 a3(r64): [9..22]
 a4(r65): [13..18]
 a5(r63): [17..24]
 a6(r62): [21..26]
Compressing live ranges: from 35 to 4 - 11%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r64): [0..3]
 a4(r65): [0..1]
 a5(r63): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r65,l0) a1(r60,l0) a2(r61,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r65,l0) a0(r59,l0) a2(r61,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r65,l0) a0(r59,l0) a1(r60,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r64,l0) conflicts: a4(r65,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r65,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r64,l0) a5(r63,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r63,l0) conflicts: a4(r65,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r64,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r64 4r65 5r63 6r62
    modified regnos: 59 60 61 62 63 64 65
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@36000
          2:( 0-6 39-44)@12000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
        6:( 21-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r64 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r65 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a5r63 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a6r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r63,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r65,l0)(cost 0)
      Pushing a3(r64,l0)(cost 0)
      Popping a3(r64,l0)  -- assign reg 0
      Popping a4(r65,l0)  -- assign reg 38
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r63,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r63  l0     2    3:r64  l0     0    4:r65  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, collision_table*, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,2u} r65={1d,2u} 
;;    total ref usage 106{76d,30u,0e} in 17{16 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:334 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:334 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:334 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:334 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 63 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:334 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 64)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:335 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 11 10 12 2 (set (mem/j/c:SF (reg/f:DI 64) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:335 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:336 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 14 2 (set (mem/j/c:SI (reg/f:DI 65) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 63 [ h1 ])) tiles.cpp:336 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 63 [ h1 ])
        (nil)))
(insn 14 13 16 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:337 89 {*movsi_internal}
     (nil))
(insn 16 14 17 2 (set (reg:DI 38 r9)
        (reg/f:DI 65)) tiles.cpp:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 17 16 19 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:337 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 2 cx)
        (reg/f:DI 64)) tiles.cpp:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 20 19 21 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:337 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 23 22 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:337 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles1(int*, int, int, float, int, int) (_Z6tiles1Piiifii, funcdef_no=1088, decl_uid=23792, cgraph_uid=332)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 63: local to bb 2 def dominates all uses has unique first use
Ignoring reg 65, has equiv memory
Ignoring reg 66, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 6 for 63 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 66: (insn_list:REG_DEP_TRUE 13 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r65,l0) best CREG, allocno CREG
    a5 (r63,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r66,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 26(l0): point = 0
   Insn 25(l0): point = 2
   Insn 24(l0): point = 4
   Insn 23(l0): point = 6
   Insn 22(l0): point = 8
   Insn 20(l0): point = 10
   Insn 19(l0): point = 12
   Insn 17(l0): point = 14
   Insn 16(l0): point = 16
   Insn 14(l0): point = 18
   Insn 13(l0): point = 20
   Insn 12(l0): point = 22
   Insn 11(l0): point = 24
   Insn 6(l0): point = 26
   Insn 5(l0): point = 28
   Insn 4(l0): point = 30
   Insn 3(l0): point = 32
   Insn 2(l0): point = 34
 a0(r59): [3..34]
 a1(r60): [5..32]
 a2(r61): [7..30]
 a3(r65): [9..24]
 a4(r66): [13..20]
 a5(r63): [19..26]
 a6(r62): [23..28]
Compressing live ranges: from 37 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r65): [0..3]
 a4(r66): [0..1]
 a5(r63): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r66,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r66,l0) a0(r59,l0) a2(r61,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r66,l0) a0(r59,l0) a1(r60,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r65,l0) conflicts: a4(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r66,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a5(r63,l0) conflicts: a4(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a6(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r65 4r66 5r63 6r62
    modified regnos: 59 60 61 62 63 65 66
    border:
    Pressure: GENERAL_REGS=7 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@38000
        2:( 0-6 38-44)@44000
          3:( 0-6 39-44)@12000
            4:( 0 1 3-6 39-44)@26000
              5:( 0 3-6 39-44)@26000
                6:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r65 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r66 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a5r63 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a6r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r63,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r65,l0)(cost 0)
      Pushing a4(r66,l0)(cost 0)
      Popping a4(r66,l0)  -- assign reg 38
      Popping a3(r65,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r63,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r63  l0     2    3:r65  l0     0    4:r66  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, int, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r65={1d,2u} r66={1d,3u} 
;;    total ref usage 108{76d,32u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 65 66
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:341 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:341 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:341 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 63 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:341 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:342 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 11 13 2 (set (mem/j/c:SF (reg/f:DI 65) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:342 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:343 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 13 16 2 (set (mem/j/c:SI (reg/f:DI 66) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 63 [ h1 ])) tiles.cpp:343 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 63 [ h1 ])
        (nil)))
(insn 16 14 17 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 66)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:344 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 17 16 19 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:345 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 38 r9)
        (reg/f:DI 66)) tiles.cpp:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 20 19 22 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:345 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 2 cx)
        (reg/f:DI 65)) tiles.cpp:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 23 22 24 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:345 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:345 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 26 25 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:345 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles1(int*, int, collision_table*, float, int, int) (_Z6tiles1PiiP15collision_tablefii, funcdef_no=1089, decl_uid=23799, cgraph_uid=333)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 63: local to bb 2 def dominates all uses has unique first use
Ignoring reg 65, has equiv memory
Ignoring reg 66, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 6 for 63 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 66: (insn_list:REG_DEP_TRUE 13 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r65,l0) best CREG, allocno CREG
    a5 (r63,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r66,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 26(l0): point = 0
   Insn 25(l0): point = 2
   Insn 24(l0): point = 4
   Insn 23(l0): point = 6
   Insn 22(l0): point = 8
   Insn 20(l0): point = 10
   Insn 19(l0): point = 12
   Insn 17(l0): point = 14
   Insn 16(l0): point = 16
   Insn 14(l0): point = 18
   Insn 13(l0): point = 20
   Insn 12(l0): point = 22
   Insn 11(l0): point = 24
   Insn 6(l0): point = 26
   Insn 5(l0): point = 28
   Insn 4(l0): point = 30
   Insn 3(l0): point = 32
   Insn 2(l0): point = 34
 a0(r59): [3..34]
 a1(r60): [5..32]
 a2(r61): [7..30]
 a3(r65): [9..24]
 a4(r66): [13..20]
 a5(r63): [19..26]
 a6(r62): [23..28]
Compressing live ranges: from 37 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r65): [0..3]
 a4(r66): [0..1]
 a5(r63): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r66,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r66,l0) a0(r59,l0) a2(r61,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r66,l0) a0(r59,l0) a1(r60,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r65,l0) conflicts: a4(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r66,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r63,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a5(r63,l0) conflicts: a4(r66,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a6(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r65 4r66 5r63 6r62
    modified regnos: 59 60 61 62 63 65 66
    border:
    Pressure: GENERAL_REGS=7 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@38000
        2:( 0-6 38-44)@44000
          3:( 0-6 39-44)@12000
            4:( 0 1 3-6 39-44)@26000
              5:( 0 3-6 39-44)@26000
                6:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r65 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r66 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a5r63 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a6r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r63,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r65,l0)(cost 0)
      Pushing a4(r66,l0)(cost 0)
      Popping a4(r66,l0)  -- assign reg 38
      Popping a3(r65,l0)  -- assign reg 0
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r63,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r63  l0     2    3:r65  l0     0    4:r66  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, collision_table*, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r65={1d,2u} r66={1d,3u} 
;;    total ref usage 108{76d,32u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 65 66
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:347 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:347 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 63 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:347 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:348 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 11 13 2 (set (mem/j/c:SF (reg/f:DI 65) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:348 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:349 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 13 16 2 (set (mem/j/c:SI (reg/f:DI 66) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 63 [ h1 ])) tiles.cpp:349 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 63 [ h1 ])
        (nil)))
(insn 16 14 17 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 66)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 17 16 19 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:351 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 38 r9)
        (reg/f:DI 66)) tiles.cpp:351 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 20 19 22 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:351 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 2 cx)
        (reg/f:DI 65)) tiles.cpp:351 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 23 22 24 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:351 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:351 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:351 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 26 25 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:351 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles1(int*, int, int, float, int, int, int) (_Z6tiles1Piiifiii, funcdef_no=1090, decl_uid=23807, cgraph_uid=334)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 63: local to bb 2 def dominates all uses has unique first use
Ignoring reg 66, has equiv memory
Ignoring reg 67, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 6 for 63 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 66: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 67: (insn_list:REG_DEP_TRUE 14 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r66,l0) best CREG, allocno CREG
    a5 (r63,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r67,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 29(l0): point = 0
   Insn 28(l0): point = 2
   Insn 27(l0): point = 4
   Insn 26(l0): point = 6
   Insn 25(l0): point = 8
   Insn 23(l0): point = 10
   Insn 22(l0): point = 12
   Insn 20(l0): point = 14
   Insn 19(l0): point = 16
   Insn 17(l0): point = 18
   Insn 15(l0): point = 20
   Insn 14(l0): point = 22
   Insn 13(l0): point = 24
   Insn 12(l0): point = 26
   Insn 6(l0): point = 28
   Insn 5(l0): point = 30
   Insn 4(l0): point = 32
   Insn 3(l0): point = 34
   Insn 2(l0): point = 36
 a0(r59): [3..36]
 a1(r60): [5..34]
 a2(r61): [7..32]
 a3(r66): [9..26]
 a4(r67): [13..22]
 a5(r63): [21..28]
 a6(r62): [25..30]
Compressing live ranges: from 39 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r66): [0..3]
 a4(r67): [0..1]
 a5(r63): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r67,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r67,l0) a0(r59,l0) a2(r61,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r66,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r67,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r63,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a6(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r66 4r67 5r63 6r62
    modified regnos: 59 60 61 62 63 66 67
    border:
    Pressure: GENERAL_REGS=8 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@38000
        2:( 0-6 39-44)@64000
          3:( 0 1 3-6 39-44)@26000
            4:( 0 3-6 39-44)@26000
              5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r66 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r63 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a6r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r63,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r66,l0)(cost 0)
      Pushing a4(r67,l0)(cost 0)
      Popping a4(r67,l0)  -- assign reg 0
      Popping a3(r66,l0)  -- assign reg 39
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r63,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r63  l0     2    3:r66  l0    39    4:r67  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, int, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r66={1d,2u} r67={1d,4u} 
;;    total ref usage 110{76d,34u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 66 67
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:355 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:355 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:355 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 63 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:355 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:356 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 14 2 (set (mem/j/c:SF (reg/f:DI 66) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:356 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:357 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 15 14 17 2 (set (mem/j/c:SI (reg/f:DI 67) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 63 [ h1 ])) tiles.cpp:357 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 63 [ h1 ])
        (nil)))
(insn 17 15 19 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:358 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 19 17 20 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:359 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 20 19 22 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:360 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 38 r9)
        (reg/f:DI 67)) tiles.cpp:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 23 22 25 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:360 89 {*movsi_internal}
     (nil))
(insn 25 23 26 2 (set (reg:DI 2 cx)
        (reg/f:DI 66)) tiles.cpp:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 26 25 27 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:360 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 27 26 28 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:360 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 29 28 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:360 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles1(int*, int, collision_table*, float, int, int, int) (_Z6tiles1PiiP15collision_tablefiii, funcdef_no=1091, decl_uid=23815, cgraph_uid=335)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 63: local to bb 2 def dominates all uses has unique first use
Ignoring reg 66, has equiv memory
Ignoring reg 67, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 6 for 63 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 66: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 67: (insn_list:REG_DEP_TRUE 14 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r66,l0) best CREG, allocno CREG
    a5 (r63,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a4(r67,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 29(l0): point = 0
   Insn 28(l0): point = 2
   Insn 27(l0): point = 4
   Insn 26(l0): point = 6
   Insn 25(l0): point = 8
   Insn 23(l0): point = 10
   Insn 22(l0): point = 12
   Insn 20(l0): point = 14
   Insn 19(l0): point = 16
   Insn 17(l0): point = 18
   Insn 15(l0): point = 20
   Insn 14(l0): point = 22
   Insn 13(l0): point = 24
   Insn 12(l0): point = 26
   Insn 6(l0): point = 28
   Insn 5(l0): point = 30
   Insn 4(l0): point = 32
   Insn 3(l0): point = 34
   Insn 2(l0): point = 36
 a0(r59): [3..36]
 a1(r60): [5..34]
 a2(r61): [7..32]
 a3(r66): [9..26]
 a4(r67): [13..22]
 a5(r63): [21..28]
 a6(r62): [25..30]
Compressing live ranges: from 39 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r66): [0..3]
 a4(r67): [0..1]
 a5(r63): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r67,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r67,l0) a0(r59,l0) a2(r61,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r66,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r67,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r63,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r63,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a6(r62,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r66 4r67 5r63 6r62
    modified regnos: 59 60 61 62 63 66 67
    border:
    Pressure: GENERAL_REGS=8 SSE_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@38000
        2:( 0-6 39-44)@64000
          3:( 0 1 3-6 39-44)@26000
            4:( 0 3-6 39-44)@26000
              5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r66 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r63 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a6r62 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r63,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r66,l0)(cost 0)
      Pushing a4(r67,l0)(cost 0)
      Popping a4(r67,l0)  -- assign reg 0
      Popping a3(r66,l0)  -- assign reg 39
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r63,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r63  l0     2    3:r66  l0    39    4:r67  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles1(int*, int, collision_table*, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r66={1d,2u} r67={1d,4u} 
;;    total ref usage 110{76d,34u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 66 67
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:362 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:362 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:362 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:362 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 63 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:362 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:363 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 14 2 (set (mem/j/c:SF (reg/f:DI 66) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:363 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:364 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 15 14 17 2 (set (mem/j/c:SI (reg/f:DI 67) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 63 [ h1 ])) tiles.cpp:364 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 63 [ h1 ])
        (nil)))
(insn 17 15 19 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:365 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 19 17 20 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 67)
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:366 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 20 19 22 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:367 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 38 r9)
        (reg/f:DI 67)) tiles.cpp:367 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 23 22 25 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:367 89 {*movsi_internal}
     (nil))
(insn 25 23 26 2 (set (reg:DI 2 cx)
        (reg/f:DI 66)) tiles.cpp:367 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 26 25 27 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:367 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 27 26 28 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:367 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:367 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 29 28 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:367 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, int, float, float) (_Z6tiles2Piiiff, funcdef_no=1092, decl_uid=23821, cgraph_uid=336)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 64, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 64: (insn_list:REG_DEP_TRUE 10 (nil))

Pass 0 for finding pseudo/allocno costs

    a3 (r64,l0) best CREG, allocno CREG
    a4 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 23(l0): point = 0
   Insn 22(l0): point = 2
   Insn 21(l0): point = 4
   Insn 20(l0): point = 6
   Insn 19(l0): point = 8
   Insn 17(l0): point = 10
   Insn 16(l0): point = 12
   Insn 14(l0): point = 14
   Insn 13(l0): point = 16
   Insn 11(l0): point = 18
   Insn 10(l0): point = 20
   Insn 5(l0): point = 22
   Insn 4(l0): point = 24
   Insn 3(l0): point = 26
   Insn 2(l0): point = 28
 a0(r59): [3..28]
 a1(r60): [5..26]
 a2(r61): [7..24]
 a3(r64): [9..20]
 a4(r62): [19..22]
Compressing live ranges: from 31 to 2 - 6%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r64): [0..1]
 a4(r62): [0..1]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r64,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=2
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r64 4r62
    modified regnos: 59 60 61 62 64
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@20000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
        5:( 21 23-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r64 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a4(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r64,l0)(cost 0)
      Popping a3(r64,l0)  -- assign reg 2
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a4(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    4:r62  l0    21
    3:r64  l0     2
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, int, float, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,3u} 
;;    total ref usage 102{74d,28u,0e} in 15{14 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:371 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:371 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:371 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:371 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 64)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:372 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 11 10 13 2 (set (mem/j/c:SF (reg/f:DI 64) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:372 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 13 11 14 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 64)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:373 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 14 13 15 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:374 89 {*movsi_internal}
     (nil))
(note 15 14 16 2 NOTE_INSN_DELETED)
(insn 16 15 17 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:374 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn 17 16 19 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:374 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 2 cx)
        (reg/f:DI 64)) tiles.cpp:374 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 20 19 21 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:374 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:374 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:374 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 23 22 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:374 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, collision_table*, float, float) (_Z6tiles2PiiP15collision_tableff, funcdef_no=1093, decl_uid=23827, cgraph_uid=337)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Ignoring reg 64, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 64: (insn_list:REG_DEP_TRUE 10 (nil))

Pass 0 for finding pseudo/allocno costs

    a3 (r64,l0) best CREG, allocno CREG
    a4 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 23(l0): point = 0
   Insn 22(l0): point = 2
   Insn 21(l0): point = 4
   Insn 20(l0): point = 6
   Insn 19(l0): point = 8
   Insn 17(l0): point = 10
   Insn 16(l0): point = 12
   Insn 14(l0): point = 14
   Insn 13(l0): point = 16
   Insn 11(l0): point = 18
   Insn 10(l0): point = 20
   Insn 5(l0): point = 22
   Insn 4(l0): point = 24
   Insn 3(l0): point = 26
   Insn 2(l0): point = 28
 a0(r59): [3..28]
 a1(r60): [5..26]
 a2(r61): [7..24]
 a3(r64): [9..20]
 a4(r62): [19..22]
Compressing live ranges: from 31 to 2 - 6%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
 a3(r64): [0..1]
 a4(r62): [0..1]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0) a3(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0) a3(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0) a3(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r64,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=2
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r64 4r62
    modified regnos: 59 60 61 62 64
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 39-44)@20000
          2:( 0 1 3-6 39-44)@26000
            3:( 0 3-6 39-44)@26000
              4:( 0 3 5 6 39-44)@26000
        5:( 21 23-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r64 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a4(r62,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r64,l0)(cost 0)
      Popping a3(r64,l0)  -- assign reg 2
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a4(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    4:r62  l0    21
    3:r64  l0     2
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, collision_table*, float, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,3u} 
;;    total ref usage 102{74d,28u,0e} in 15{14 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:376 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:376 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:376 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:376 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 64)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:377 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 11 10 13 2 (set (mem/j/c:SF (reg/f:DI 64) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:377 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 13 11 14 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 64)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:378 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 14 13 15 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:379 89 {*movsi_internal}
     (nil))
(note 15 14 16 2 NOTE_INSN_DELETED)
(insn 16 15 17 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:379 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn 17 16 19 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:379 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 2 cx)
        (reg/f:DI 64)) tiles.cpp:379 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 20 19 21 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:379 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:379 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:379 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 23 22 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:379 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, int, float, float, int) (_Z6tiles2Piiiffi, funcdef_no=1094, decl_uid=23834, cgraph_uid=338)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 64: local to bb 2 def dominates all uses has unique first use
Ignoring reg 65, has equiv memory
Ignoring reg 67, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 7 for 64 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 67: (insn_list:REG_DEP_TRUE 15 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r65,l0) best CREG, allocno CREG
    a5 (r64,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r67,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 26(l0): point = 0
   Insn 25(l0): point = 2
   Insn 24(l0): point = 4
   Insn 23(l0): point = 6
   Insn 22(l0): point = 8
   Insn 20(l0): point = 10
   Insn 19(l0): point = 12
   Insn 17(l0): point = 14
   Insn 16(l0): point = 16
   Insn 15(l0): point = 18
   Insn 14(l0): point = 20
   Insn 12(l0): point = 22
   Insn 11(l0): point = 24
   Insn 7(l0): point = 26
   Insn 5(l0): point = 28
   Insn 4(l0): point = 30
   Insn 3(l0): point = 32
   Insn 2(l0): point = 34
 a0(r59): [3..34]
 a1(r60): [5..32]
 a2(r61): [7..30]
 a3(r65): [9..24]
 a4(r67): [13..18]
 a5(r64): [17..26]
 a6(r62): [23..28]
Compressing live ranges: from 37 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r65): [0..3]
 a4(r67): [0..1]
 a5(r64): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r67,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r67,l0) a0(r59,l0) a2(r61,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r65,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r67,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r64,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r65 4r67 5r64 6r62
    modified regnos: 59 60 61 62 64 65 67
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@36000
          2:( 0-6 39-44)@20000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
        6:( 21 23-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r65 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a6r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r67,l0)(cost 0)
      Pushing a3(r65,l0)(cost 0)
      Popping a3(r65,l0)  -- assign reg 0
      Popping a4(r67,l0)  -- assign reg 38
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r64,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r64  l0     2    3:r65  l0     0    4:r67  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, int, float, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,1u} r65={1d,3u} r67={1d,2u} 
;;    total ref usage 108{76d,32u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64 65 67
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:383 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:383 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:383 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:383 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(insn 7 6 8 2 (set (reg/v:SI 64 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:383 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:384 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 11 14 2 (set (mem/j/c:SF (reg/f:DI 65) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:384 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 14 12 15 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 65)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:385 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:386 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 16 15 17 2 (set (mem/j/c:SI (reg/f:DI 67) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 64 [ h1 ])) tiles.cpp:386 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 64 [ h1 ])
        (nil)))
(insn 17 16 19 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:387 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 38 r9)
        (reg/f:DI 67)) tiles.cpp:387 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 20 19 22 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:387 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 2 cx)
        (reg/f:DI 65)) tiles.cpp:387 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 23 22 24 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:387 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:387 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:387 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 26 25 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:387 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, collision_table*, float, float, int) (_Z6tiles2PiiP15collision_tableffi, funcdef_no=1095, decl_uid=23841, cgraph_uid=339)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 64: local to bb 2 def dominates all uses has unique first use
Ignoring reg 65, has equiv memory
Ignoring reg 67, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 7 for 64 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 67: (insn_list:REG_DEP_TRUE 15 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r65,l0) best CREG, allocno CREG
    a5 (r64,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r67,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:3000,3000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 26(l0): point = 0
   Insn 25(l0): point = 2
   Insn 24(l0): point = 4
   Insn 23(l0): point = 6
   Insn 22(l0): point = 8
   Insn 20(l0): point = 10
   Insn 19(l0): point = 12
   Insn 17(l0): point = 14
   Insn 16(l0): point = 16
   Insn 15(l0): point = 18
   Insn 14(l0): point = 20
   Insn 12(l0): point = 22
   Insn 11(l0): point = 24
   Insn 7(l0): point = 26
   Insn 5(l0): point = 28
   Insn 4(l0): point = 30
   Insn 3(l0): point = 32
   Insn 2(l0): point = 34
 a0(r59): [3..34]
 a1(r60): [5..32]
 a2(r61): [7..30]
 a3(r65): [9..24]
 a4(r67): [13..18]
 a5(r64): [17..26]
 a6(r62): [23..28]
Compressing live ranges: from 37 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r65): [0..3]
 a4(r67): [0..1]
 a5(r64): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r67,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r67,l0) a0(r59,l0) a2(r61,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r65,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r67,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0) a5(r64,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r64,l0) conflicts: a4(r67,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r65,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r65 4r67 5r64 6r62
    modified regnos: 59 60 61 62 64 65 67
    border:
    Pressure: GENERAL_REGS=6 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@36000
          2:( 0-6 39-44)@20000
            3:( 0 1 3-6 39-44)@26000
              4:( 0 3-6 39-44)@26000
                5:( 0 3 5 6 39-44)@26000
        6:( 21 23-28 45-51)@38000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r65 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a6r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r67,l0)(cost 0)
      Pushing a3(r65,l0)(cost 0)
      Popping a3(r65,l0)  -- assign reg 0
      Popping a4(r67,l0)  -- assign reg 38
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r64,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r64  l0     2    3:r65  l0     0    4:r67  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, collision_table*, float, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,1u} r65={1d,3u} r67={1d,2u} 
;;    total ref usage 108{76d,32u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64 65 67
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:389 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:389 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:389 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:389 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(insn 7 6 8 2 (set (reg/v:SI 64 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:389 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 65)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:390 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 11 14 2 (set (mem/j/c:SF (reg/f:DI 65) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:390 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 14 12 15 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 65)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:391 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:392 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 16 15 17 2 (set (mem/j/c:SI (reg/f:DI 67) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 64 [ h1 ])) tiles.cpp:392 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 64 [ h1 ])
        (nil)))
(insn 17 16 19 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:393 89 {*movsi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:DI 38 r9)
        (reg/f:DI 67)) tiles.cpp:393 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 20 19 22 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:393 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 2 cx)
        (reg/f:DI 65)) tiles.cpp:393 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 23 22 24 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:393 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:393 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:393 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 26 25 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:393 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, int, float, float, int, int) (_Z6tiles2Piiiffii, funcdef_no=1096, decl_uid=23849, cgraph_uid=340)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 64: local to bb 2 def dominates all uses has unique first use
Ignoring reg 66, has equiv memory
Ignoring reg 68, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 7 for 64 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 66: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 68: (insn_list:REG_DEP_TRUE 16 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r66,l0) best CREG, allocno CREG
    a5 (r64,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r68,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 29(l0): point = 0
   Insn 28(l0): point = 2
   Insn 27(l0): point = 4
   Insn 26(l0): point = 6
   Insn 25(l0): point = 8
   Insn 23(l0): point = 10
   Insn 22(l0): point = 12
   Insn 20(l0): point = 14
   Insn 19(l0): point = 16
   Insn 17(l0): point = 18
   Insn 16(l0): point = 20
   Insn 15(l0): point = 22
   Insn 13(l0): point = 24
   Insn 12(l0): point = 26
   Insn 7(l0): point = 28
   Insn 5(l0): point = 30
   Insn 4(l0): point = 32
   Insn 3(l0): point = 34
   Insn 2(l0): point = 36
 a0(r59): [3..36]
 a1(r60): [5..34]
 a2(r61): [7..32]
 a3(r66): [9..26]
 a4(r68): [13..20]
 a5(r64): [19..28]
 a6(r62): [25..30]
Compressing live ranges: from 39 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r66): [0..3]
 a4(r68): [0..1]
 a5(r64): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r68,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r68,l0) a0(r59,l0) a2(r61,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r68,l0) a0(r59,l0) a1(r60,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r66,l0) conflicts: a4(r68,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r68,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a5(r64,l0) conflicts: a4(r68,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a6(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r66 4r68 5r64 6r62
    modified regnos: 59 60 61 62 64 66 68
    border:
    Pressure: GENERAL_REGS=7 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21 23-28 45-51)@38000
        2:( 0-6 38-44)@44000
          3:( 0-6 39-44)@20000
            4:( 0 1 3-6 39-44)@26000
              5:( 0 3-6 39-44)@26000
                6:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r66 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r68 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a6r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r68,l0)(cost 0)
      Pushing a3(r66,l0)(cost 0)
      Popping a3(r66,l0)  -- assign reg 0
      Popping a4(r68,l0)  -- assign reg 38
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r64,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r64  l0     2    3:r66  l0     0    4:r68  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, int, float, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,1u} r66={1d,3u} r68={1d,3u} 
;;    total ref usage 110{76d,34u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64 66 68
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:397 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:397 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:397 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:397 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(insn 7 6 8 2 (set (reg/v:SI 64 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:397 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:398 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 15 2 (set (mem/j/c:SF (reg/f:DI 66) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:398 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 15 13 16 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 66)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:399 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 68)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:400 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 17 16 19 2 (set (mem/j/c:SI (reg/f:DI 68) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 64 [ h1 ])) tiles.cpp:400 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 64 [ h1 ])
        (nil)))
(insn 19 17 20 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 68)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:401 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 20 19 22 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:402 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 38 r9)
        (reg/f:DI 68)) tiles.cpp:402 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 23 22 25 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:402 89 {*movsi_internal}
     (nil))
(insn 25 23 26 2 (set (reg:DI 2 cx)
        (reg/f:DI 66)) tiles.cpp:402 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 26 25 27 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:402 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 27 26 28 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:402 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:402 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 29 28 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:402 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, collision_table*, float, float, int, int) (_Z6tiles2PiiP15collision_tableffii, funcdef_no=1097, decl_uid=23857, cgraph_uid=341)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 64: local to bb 2 def dominates all uses has unique first use
Ignoring reg 66, has equiv memory
Ignoring reg 68, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 7 for 64 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 66: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 68: (insn_list:REG_DEP_TRUE 16 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r66,l0) best CREG, allocno CREG
    a5 (r64,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r68,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 29(l0): point = 0
   Insn 28(l0): point = 2
   Insn 27(l0): point = 4
   Insn 26(l0): point = 6
   Insn 25(l0): point = 8
   Insn 23(l0): point = 10
   Insn 22(l0): point = 12
   Insn 20(l0): point = 14
   Insn 19(l0): point = 16
   Insn 17(l0): point = 18
   Insn 16(l0): point = 20
   Insn 15(l0): point = 22
   Insn 13(l0): point = 24
   Insn 12(l0): point = 26
   Insn 7(l0): point = 28
   Insn 5(l0): point = 30
   Insn 4(l0): point = 32
   Insn 3(l0): point = 34
   Insn 2(l0): point = 36
 a0(r59): [3..36]
 a1(r60): [5..34]
 a2(r61): [7..32]
 a3(r66): [9..26]
 a4(r68): [13..20]
 a5(r64): [19..28]
 a6(r62): [25..30]
Compressing live ranges: from 39 to 4 - 10%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r66): [0..3]
 a4(r68): [0..1]
 a5(r64): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r68,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r68,l0) a0(r59,l0) a2(r61,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r68,l0) a0(r59,l0) a1(r60,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r66,l0) conflicts: a4(r68,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r68,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0) a5(r64,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a5(r64,l0) conflicts: a4(r68,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r66,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a6(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r66 4r68 5r64 6r62
    modified regnos: 59 60 61 62 64 66 68
    border:
    Pressure: GENERAL_REGS=7 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21 23-28 45-51)@38000
        2:( 0-6 38-44)@44000
          3:( 0-6 39-44)@20000
            4:( 0 1 3-6 39-44)@26000
              5:( 0 3-6 39-44)@26000
                6:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r66 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r68 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a6r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a4(r68,l0)(cost 0)
      Pushing a3(r66,l0)(cost 0)
      Popping a3(r66,l0)  -- assign reg 0
      Popping a4(r68,l0)  -- assign reg 38
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r64,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r64  l0     2    3:r66  l0     0    4:r68  l0    38
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, collision_table*, float, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,1u} r66={1d,3u} r68={1d,3u} 
;;    total ref usage 110{76d,34u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64 66 68
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:404 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:404 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:404 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:404 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(insn 7 6 8 2 (set (reg/v:SI 64 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:404 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 66)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:405 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 12 15 2 (set (mem/j/c:SF (reg/f:DI 66) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:405 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 15 13 16 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 66)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:406 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 68)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:407 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 17 16 19 2 (set (mem/j/c:SI (reg/f:DI 68) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 64 [ h1 ])) tiles.cpp:407 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 64 [ h1 ])
        (nil)))
(insn 19 17 20 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 68)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:408 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 20 19 22 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:409 89 {*movsi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 38 r9)
        (reg/f:DI 68)) tiles.cpp:409 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 23 22 25 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:409 89 {*movsi_internal}
     (nil))
(insn 25 23 26 2 (set (reg:DI 2 cx)
        (reg/f:DI 66)) tiles.cpp:409 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 26 25 27 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:409 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 27 26 28 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:409 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:409 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 29 28 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:409 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, int, float, float, int, int, int) (_Z6tiles2Piiiffiii, funcdef_no=1098, decl_uid=23866, cgraph_uid=342)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 64: local to bb 2 def dominates all uses has unique first use
Ignoring reg 67, has equiv memory
Ignoring reg 69, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 7 for 64 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 67: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 69: (insn_list:REG_DEP_TRUE 17 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r67,l0) best CREG, allocno CREG
    a5 (r64,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r67: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r69,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 32(l0): point = 0
   Insn 31(l0): point = 2
   Insn 30(l0): point = 4
   Insn 29(l0): point = 6
   Insn 28(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 23(l0): point = 14
   Insn 22(l0): point = 16
   Insn 20(l0): point = 18
   Insn 18(l0): point = 20
   Insn 17(l0): point = 22
   Insn 16(l0): point = 24
   Insn 14(l0): point = 26
   Insn 13(l0): point = 28
   Insn 7(l0): point = 30
   Insn 5(l0): point = 32
   Insn 4(l0): point = 34
   Insn 3(l0): point = 36
   Insn 2(l0): point = 38
 a0(r59): [3..38]
 a1(r60): [5..36]
 a2(r61): [7..34]
 a3(r67): [9..28]
 a4(r69): [13..22]
 a5(r64): [21..30]
 a6(r62): [27..32]
Compressing live ranges: from 41 to 4 - 9%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r67): [0..3]
 a4(r69): [0..1]
 a5(r64): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r69,l0) a1(r60,l0) a2(r61,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r69,l0) a0(r59,l0) a2(r61,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r69,l0) a0(r59,l0) a1(r60,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r67,l0) conflicts: a4(r69,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r69,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r64,l0) conflicts: a4(r69,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r67,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a6(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r67 4r69 5r64 6r62
    modified regnos: 59 60 61 62 64 67 69
    border:
    Pressure: GENERAL_REGS=8 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21 23-28 45-51)@38000
        2:( 0-6 39-44)@72000
          3:( 0 1 3-6 39-44)@26000
            4:( 0 3-6 39-44)@26000
              5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r67 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r69 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a6r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r67,l0)(cost 0)
      Pushing a4(r69,l0)(cost 0)
      Popping a4(r69,l0)  -- assign reg 0
      Popping a3(r67,l0)  -- assign reg 39
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r64,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r64  l0     2    3:r67  l0    39    4:r69  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, int, float, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,1u} r67={1d,3u} r69={1d,4u} 
;;    total ref usage 112{76d,36u,0e} in 20{19 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64 67 69
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:413 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:413 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v:SI 61 [ memory ])
        (reg:SI 1 dx [ memory ])) tiles.cpp:413 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:413 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(insn 7 6 8 2 (set (reg/v:SI 64 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:413 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 10 2 NOTE_INSN_DELETED)
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:414 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 13 16 2 (set (mem/j/c:SF (reg/f:DI 67) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:414 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 16 14 17 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 67)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:415 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 69)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:416 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 18 17 20 2 (set (mem/j/c:SI (reg/f:DI 69) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 64 [ h1 ])) tiles.cpp:416 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 64 [ h1 ])
        (nil)))
(insn 20 18 22 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 69)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:417 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 22 20 23 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 69)
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:418 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 23 22 25 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:419 89 {*movsi_internal}
     (nil))
(insn 25 23 26 2 (set (reg:DI 38 r9)
        (reg/f:DI 69)) tiles.cpp:419 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 69)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 26 25 28 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:419 89 {*movsi_internal}
     (nil))
(insn 28 26 29 2 (set (reg:DI 2 cx)
        (reg/f:DI 67)) tiles.cpp:419 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 29 28 30 2 (set (reg:SI 1 dx)
        (reg/v:SI 61 [ memory ])) tiles.cpp:419 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 61 [ memory ])
        (nil)))
(insn 30 29 31 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:419 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:419 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 32 31 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:419 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tiles2(int*, int, collision_table*, float, float, int, int, int) (_Z6tiles2PiiP15collision_tableffiii, funcdef_no=1099, decl_uid=23875, cgraph_uid=343)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59: local to bb 2 def dominates all uses has unique first use
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 64: local to bb 2 def dominates all uses has unique first use
Ignoring reg 67, has equiv memory
Ignoring reg 69, has equiv memory
Found def insn 2 for 59 to be not moveable
Found def insn 3 for 60 to be not moveable
Found def insn 4 for 61 to be not moveable
Found def insn 5 for 62 to be not moveable
Found def insn 7 for 64 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 67: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 69: (insn_list:REG_DEP_TRUE 17 (nil))

Pass 0 for finding pseudo/allocno costs

    a4 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r67,l0) best CREG, allocno CREG
    a5 (r64,l0) best CREG, allocno CREG
    a6 (r62,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a2 (r61,l0) best DREG, allocno DREG
    a1 (r60,l0) best SIREG, allocno SIREG
    a0 (r59,l0) best DIREG, allocno DIREG

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:8000,8000 DREG:8000,8000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 FP_TOP_REG:40000,40000 FP_SECOND_REG:40000,40000 FLOAT_REGS:40000,40000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:32000,32000 FP_TOP_SSE_REGS:40000,40000 FP_SECOND_SSE_REGS:40000,40000 FLOAT_SSE_REGS:40000,40000 FLOAT_INT_REGS:40000,40000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:40000,40000 ALL_REGS:40000,40000 MEM:14000,14000


Pass 1 for finding pseudo/allocno costs

    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r67: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a3(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52000,52000 SSE_REGS:52000,52000 MMX_REGS:52000,52000 FP_TOP_SSE_REGS:133070000,133070000 FP_SECOND_SSE_REGS:133070000,133070000 FLOAT_SSE_REGS:133070000,133070000 FLOAT_INT_REGS:133070000,133070000 INT_SSE_REGS:52000,52000 FLOAT_INT_SSE_REGS:133070000,133070000 ALL_REGS:133070000,133070000 MEM:7000,7000
  a4(r69,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:65000,65000 SSE_REGS:65000,65000 MMX_REGS:65000,65000 FP_TOP_SSE_REGS:198605000,198605000 FP_SECOND_SSE_REGS:198605000,198605000 FLOAT_SSE_REGS:198605000,198605000 FLOAT_INT_REGS:198605000,198605000 INT_SSE_REGS:65000,65000 FLOAT_INT_SSE_REGS:198605000,198605000 ALL_REGS:198605000,198605000 MEM:11000,11000
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a6(r62,l0) costs: AREG:26000,26000 DREG:26000,26000 CREG:26000,26000 BREG:26000,26000 SIREG:26000,26000 DIREG:26000,26000 AD_REGS:26000,26000 Q_REGS:26000,26000 NON_Q_REGS:26000,26000 INDEX_REGS:26000,26000 GENERAL_REGS:26000,26000 LEGACY_REGS:26000,26000 CLOBBERED_REGS:26000,26000 FP_TOP_REG:42000,42000 FP_SECOND_REG:42000,42000 FLOAT_REGS:42000,42000 SSE_FIRST_REG:-1000,-1000 SSE_REGS:0,0 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:42000,42000 FP_SECOND_SSE_REGS:42000,42000 FLOAT_SSE_REGS:42000,42000 FLOAT_INT_REGS:42000,42000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:42000,42000 ALL_REGS:42000,42000 MEM:16000,16000

   Insn 32(l0): point = 0
   Insn 31(l0): point = 2
   Insn 30(l0): point = 4
   Insn 29(l0): point = 6
   Insn 28(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 23(l0): point = 14
   Insn 22(l0): point = 16
   Insn 20(l0): point = 18
   Insn 18(l0): point = 20
   Insn 17(l0): point = 22
   Insn 16(l0): point = 24
   Insn 14(l0): point = 26
   Insn 13(l0): point = 28
   Insn 7(l0): point = 30
   Insn 5(l0): point = 32
   Insn 4(l0): point = 34
   Insn 3(l0): point = 36
   Insn 2(l0): point = 38
 a0(r59): [3..38]
 a1(r60): [5..36]
 a2(r61): [7..34]
 a3(r67): [9..28]
 a4(r69): [13..22]
 a5(r64): [21..30]
 a6(r62): [27..32]
Compressing live ranges: from 41 to 4 - 9%
Ranges after the compression:
 a0(r59): [0..3]
 a1(r60): [0..3]
 a2(r61): [0..3]
 a3(r67): [0..3]
 a4(r69): [0..1]
 a5(r64): [0..3]
 a6(r62): [2..3]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r59,l0) conflicts: a4(r69,l0) a1(r60,l0) a2(r61,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 4 37 38
;;     conflict hard regs: 1 2 4 37 38

;; a1(r60,l0) conflicts: a4(r69,l0) a0(r59,l0) a2(r61,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 1 2 37 38
;;     conflict hard regs: 1 2 37 38

;; a2(r61,l0) conflicts: a4(r69,l0) a0(r59,l0) a1(r60,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 2 37 38
;;     conflict hard regs: 2 37 38

;; a3(r67,l0) conflicts: a4(r69,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a4(r69,l0) conflicts: a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r67,l0) a5(r64,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a5(r64,l0) conflicts: a4(r69,l0) a0(r59,l0) a1(r60,l0) a2(r61,l0) a3(r67,l0)
;;     total conflict hard regs: 37 38
;;     conflict hard regs: 37 38

;; a6(r62,l0) conflicts:
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

  regions=1, blocks=3, points=4
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61 3r67 4r69 5r64 6r62
    modified regnos: 59 60 61 62 64 67 69
    border:
    Pressure: GENERAL_REGS=8 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21 23-28 45-51)@38000
        2:( 0-6 39-44)@72000
          3:( 0 1 3-6 39-44)@26000
            4:( 0 3-6 39-44)@26000
              5:( 0 3 5 6 39-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 10 avail. regs  0 3 5 6 39-44, node:  0 3 5 6 39-44 (confl regs =  1 2 4 7-38 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 11 avail. regs  0 3-6 39-44, node:  0 3-6 39-44 (confl regs =  1 2 7-38 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 12 avail. regs  0 1 3-6 39-44, node:  0 1 3-6 39-44 (confl regs =  2 7-38 45-51)
      Allocno a3r67 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a4r69 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 13 avail. regs  0-6 39-44, node:  0-6 39-44 (confl regs =  7-38 45-51)
      Allocno a6r62 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Pushing a6(r62,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Pushing a0(r59,l0)(cost 0)
      Pushing a3(r67,l0)(cost 0)
      Pushing a4(r69,l0)(cost 0)
      Popping a4(r69,l0)  -- assign reg 0
      Popping a3(r67,l0)  -- assign reg 39
      Popping a0(r59,l0)  -- assign reg 5
      Popping a1(r60,l0)  -- assign reg 4
      Popping a2(r61,l0)  -- assign reg 1
      Popping a5(r64,l0)  -- assign reg 2
      Popping a6(r62,l0)  -- assign reg 21
Disposition:
    0:r59  l0     5    1:r60  l0     4    2:r61  l0     1    6:r62  l0    21
    5:r64  l0     2    3:r67  l0    39    4:r69  l0     0
New iteration of spill/restore move
+++Costs: overall -24000, reg -24000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void tiles2(int*, int, collision_table*, float, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r64={1d,1u} r67={1d,3u} r69={1d,4u} 
;;    total ref usage 112{76d,36u,0e} in 20{19 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 64 67 69
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v/f:DI 59 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:421 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 60 [ nt ])
        (reg:SI 4 si [ nt ])) tiles.cpp:421 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ nt ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 61 [ ct ])
        (reg:DI 1 dx [ ct ])) tiles.cpp:421 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ct ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SF 62 [ f1 ])
        (reg:SF 21 xmm0 [ f1 ])) tiles.cpp:421 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [ f1 ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(insn 7 6 8 2 (set (reg/v:SI 64 [ h1 ])
        (reg:SI 2 cx [ h1 ])) tiles.cpp:421 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ h1 ])
        (nil)))
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 10 2 NOTE_INSN_DELETED)
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (reg/f:DI 67)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:422 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 13 16 2 (set (mem/j/c:SF (reg/f:DI 67) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 62 [ f1 ])) tiles.cpp:422 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 62 [ f1 ])
        (nil)))
(insn 16 14 17 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 67)
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:423 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 69)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:424 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 18 17 20 2 (set (mem/j/c:SI (reg/f:DI 69) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 64 [ h1 ])) tiles.cpp:424 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 64 [ h1 ])
        (nil)))
(insn 20 18 22 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 69)
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:425 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn 22 20 23 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 69)
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:426 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 23 22 25 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:427 89 {*movsi_internal}
     (nil))
(insn 25 23 26 2 (set (reg:DI 38 r9)
        (reg/f:DI 69)) tiles.cpp:427 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 69)
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 26 25 28 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:427 89 {*movsi_internal}
     (nil))
(insn 28 26 29 2 (set (reg:DI 2 cx)
        (reg/f:DI 67)) tiles.cpp:427 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67)
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 29 28 30 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ ct ])) tiles.cpp:427 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ ct ])
        (nil)))
(insn 30 29 31 2 (set (reg:SI 4 si)
        (reg/v:SI 60 [ nt ])) tiles.cpp:427 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 60 [ nt ])
        (nil)))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (reg/v/f:DI 59 [ the_tiles ])) tiles.cpp:427 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 59 [ the_tiles ])
        (nil)))
(call_insn 32 31 0 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:427 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tileswrap(int*, int, int, float*, int, int*, int*, int) (_Z9tileswrapPiiiPfiS_S_i, funcdef_no=1100, decl_uid=23884, cgraph_uid=344)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 41 n_edges 60 count 57 (  1.4)
rescanning insn with uid = 50.
deleting insn with uid = 50.
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 41 n_edges 60 count 57 (  1.4)
Reg 147: def dominates all uses has unique first use
Reg 148 uninteresting (no unique first use)
Reg 149: def dominates all uses has unique first use
Reg 150: def dominates all uses has unique first use
Reg 151 uninteresting (no unique first use)
Reg 152 uninteresting (no unique first use)
Ignoring reg 154, has equiv memory
Reg 71: def dominates all uses has unique first use
Reg 157 uninteresting
Reg 160: local to bb 5 def dominates all uses has unique first use
Reg 161 uninteresting
Reg 131: def dominates all uses has unique first use
Reg 169 uninteresting
Reg 146: def dominates all uses has unique first use
Reg 171 uninteresting
Reg 75 uninteresting
Ignoring reg 173, has equiv memory
Reg 174 uninteresting
Reg 185: def dominates all uses has unique first use
Reg 186 uninteresting
Reg 188: local to bb 12 def dominates all uses has unique first use
Reg 190: local to bb 12 def dominates all uses has unique first use
Reg 191 uninteresting
Reg 192 uninteresting
Reg 194: local to bb 13 def dominates all uses has unique first use
Reg 196 uninteresting
Reg 198 uninteresting
Reg 200: local to bb 14 def dominates all uses has unique first use
Reg 202 uninteresting
Reg 204 uninteresting
Reg 206: local to bb 15 def dominates all uses has unique first use
Reg 208 uninteresting
Reg 210 uninteresting
Reg 212: local to bb 16 def dominates all uses has unique first use
Reg 214 uninteresting
Reg 122: def dominates all uses has unique first use
Reg 229 uninteresting
Reg 144: def dominates all uses has unique first use
Reg 256 uninteresting (no unique first use)
Reg 83 uninteresting (no unique first use)
Reg 84 uninteresting (no unique first use)
Reg 129: def dominates all uses has unique first use
Reg 254 uninteresting
Ignoring reg 106, has equiv memory
Reg 71 not local to one basic block
Reg 122 not local to one basic block
Reg 129 not local to one basic block
Reg 131 not local to one basic block
Reg 144 not local to one basic block
Reg 146 not local to one basic block
Reg 147 not local to one basic block
Reg 149 not local to one basic block
Reg 150 not local to one basic block
Examining insn 43, def for 160
  all ok
Reg 185 not local to one basic block
Examining insn 122, def for 190
  all ok
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
;;
;; Loop 2
;;  header 38, latch 37
;;  depth 1, outer 0
;;  nodes: 38 37 36 32 31 30 35 34 33 28 29 27 26 25 39
;;
;; Loop 3
;;  header 25, latch 31
;;  depth 2, outer 2
;;  nodes: 25 31 30 35 34 33 28 29 27 26
;;
;; Loop 4
;;  header 34, latch 34
;;  depth 3, outer 3
;;  nodes: 34
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 24 7 }
;; 7 succs { 40 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 20 11 }
;; 11 succs { 12 20 }
;; 12 succs { 13 18 }
;; 13 succs { 14 18 }
;; 14 succs { 15 18 }
;; 15 succs { 16 18 }
;; 16 succs { 18 }
;; 17 succs { 6 }
;; 18 succs { 21 19 }
;; 19 succs { 6 }
;; 20 succs { 21 }
;; 21 succs { 22 6 }
;; 22 succs { 17 23 }
;; 23 succs { 6 }
;; 24 succs { 38 }
;; 25 succs { 26 27 }
;; 26 succs { 28 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 33 31 }
;; 31 succs { 25 32 }
;; 32 succs { 37 }
;; 33 succs { 34 }
;; 34 succs { 34 35 }
;; 35 succs { 31 }
;; 36 succs { 37 }
;; 37 succs { 38 40 }
;; 38 succs { 39 36 }
;; 39 succs { 25 }
;; 40 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 106: (insn_list:REG_DEP_TRUE 333 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 173: (insn_list:REG_DEP_TRUE 83 (nil))
init_insns for 218: (insn_list:REG_DEP_TRUE 199 (nil))
init_insns for 222: (insn_list:REG_DEP_TRUE 218 (nil))
init_insns for 226: (insn_list:REG_DEP_TRUE 230 (nil))
init_insns for 251: (insn_list:REG_DEP_TRUE 292 (nil))
Reg 256 had equivalence, but can't be eliminated

Pass 0 for finding pseudo/allocno costs

    a132 (r258,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a121 (r258,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a92 (r258,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a74 (r258,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a53 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a120 (r257,l4) best DIREG, allocno DIREG
    a91 (r257,l3) best DIREG, allocno DIREG
    a73 (r257,l2) best DIREG, allocno DIREG
    a50 (r257,l0) best DIREG, allocno DIREG
    a119 (r256,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a90 (r256,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a72 (r256,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a78 (r254,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a96 (r251,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a97 (r248,l3) best AREG, allocno AREG
    a100 (r242,l3) best AREG, allocno AREG
    a98 (r241,l3) best DREG, allocno DREG
    a101 (r239,l3) best AREG, allocno AREG
    a102 (r238,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a104 (r236,l3) best AREG, allocno AREG
    a103 (r235,l3) best DREG, allocno DREG
    a105 (r233,l3) best AREG, allocno AREG
    a3 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a21 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a26 (r214,l0) best SSE_REGS, allocno SSE_REGS
    a23 (r213,l0) best SSE_REGS, allocno SSE_REGS
    a24 (r212,l0) best SSE_REGS, allocno SSE_REGS
    a22 (r211,l0) best SSE_REGS, allocno SSE_REGS
    a27 (r210,l0) best SSE_REGS, allocno SSE_REGS
    a33 (r208,l0) best SSE_REGS, allocno SSE_REGS
    a31 (r207,l0) best SSE_REGS, allocno SSE_REGS
    a32 (r206,l0) best SSE_REGS, allocno SSE_REGS
    a30 (r205,l0) best SSE_REGS, allocno SSE_REGS
    a34 (r204,l0) best SSE_REGS, allocno SSE_REGS
    a38 (r202,l0) best SSE_REGS, allocno SSE_REGS
    a36 (r201,l0) best SSE_REGS, allocno SSE_REGS
    a37 (r200,l0) best SSE_REGS, allocno SSE_REGS
    a35 (r199,l0) best SSE_REGS, allocno SSE_REGS
    a39 (r198,l0) best SSE_REGS, allocno SSE_REGS
    a43 (r196,l0) best SSE_REGS, allocno SSE_REGS
    a41 (r195,l0) best SSE_REGS, allocno SSE_REGS
    a42 (r194,l0) best SSE_REGS, allocno SSE_REGS
    a40 (r193,l0) best SSE_REGS, allocno SSE_REGS
    a44 (r192,l0) best SSE_REGS, allocno SSE_REGS
    a25 (r191,l0) best SSE_REGS, allocno SSE_REGS
    a48 (r190,l0) best SSE_REGS, allocno SSE_REGS
    a46 (r189,l0) best SSE_REGS, allocno SSE_REGS
    a47 (r188,l0) best SSE_REGS, allocno SSE_REGS
    a45 (r187,l0) best SSE_REGS, allocno SSE_REGS
    a49 (r186,l0) best SSE_REGS, allocno SSE_REGS
    a28 (r185,l0) best SSE_REGS, allocno SSE_REGS
    a51 (r175,l0) best DREG, allocno DREG
    a52 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a133 (r173,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a135 (r171,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a56 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a60 (r162,l0) best DREG, allocno DREG
    a61 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a59 (r160,l0) best DIREG, allocno DIREG
    a63 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a62 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a131 (r152,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a118 (r152,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a89 (r152,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a71 (r152,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a130 (r151,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a117 (r151,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a88 (r151,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a70 (r151,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a129 (r150,l1) best CREG, allocno CREG
    a58 (r150,l0) best CREG, allocno CREG
    a128 (r149,l1) best DREG, allocno DREG
    a8 (r149,l0) best DREG, allocno DREG
    a127 (r148,l1) best SIREG, allocno SIREG
    a116 (r148,l4) best SIREG, allocno SIREG
    a87 (r148,l3) best SIREG, allocno SIREG
    a69 (r148,l2) best SIREG, allocno SIREG
    a10 (r148,l0) best SIREG, allocno SIREG
    a126 (r147,l1) best DIREG, allocno DIREG
    a6 (r147,l0) best DIREG, allocno DIREG
    a125 (r146,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a55 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a115 (r144,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a86 (r144,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a68 (r144,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a124 (r131,l1) best SSE_REGS, allocno SSE_REGS
    a57 (r131,l0) best SSE_REGS, allocno SSE_REGS
    a114 (r129,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a95 (r129,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a113 (r122,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a85 (r122,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a67 (r122,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a79 (r110,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a112 (r107,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a84 (r107,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a66 (r107,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a77 (r106,l2) best AREG, allocno AREG
    a123 (r104,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a54 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a111 (r94,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a83 (r94,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a65 (r94,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a110 (r93,l4) best AD_REGS, allocno AD_REGS
    a93 (r93,l3) best AD_REGS, allocno AD_REGS
    a109 (r84,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a94 (r84,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a99 (r83,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a29 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a134 (r75,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a108 (r72,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a82 (r72,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a75 (r72,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a122 (r71,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a107 (r71,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a81 (r71,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a64 (r71,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a106 (r63,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a80 (r63,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a76 (r63,l2) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r256,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,7761 SSE_REGS:13,7761 MMX_REGS:13,7761 FP_TOP_SSE_REGS:65535,39075835 FP_SECOND_SSE_REGS:65535,39075835 FLOAT_SSE_REGS:65535,39075835 FLOAT_INT_REGS:65535,39075835 INT_SSE_REGS:13,7761 FLOAT_INT_SSE_REGS:65535,39075835 ALL_REGS:65535,39075835 MEM:4,2372
  a1(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,845 SSE_REGS:13,845 MMX_REGS:13,845 FP_TOP_SSE_REGS:65535,4065535 FP_SECOND_SSE_REGS:65535,4065535 FLOAT_SSE_REGS:65535,4065535 FLOAT_INT_REGS:65535,4065535 INT_SSE_REGS:13,845 FLOAT_INT_SSE_REGS:65535,4065535 ALL_REGS:65535,4065535 MEM:4,212
  a2(r144,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,4342 SSE_REGS:13,4342 MMX_REGS:13,4342 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,4342 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,1003
  a3(r229,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a4(r151,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:157,560 SSE_REGS:157,560 MMX_REGS:157,560 FP_TOP_SSE_REGS:786421,2769446 FP_SECOND_SSE_REGS:786421,2769446 FLOAT_SSE_REGS:786421,2769446 FLOAT_INT_REGS:786421,2769446 INT_SSE_REGS:157,560 FLOAT_INT_SSE_REGS:786421,2769446 ALL_REGS:786421,2769446 MEM:43,152
  a5(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,637 SSE_REGS:13,637 MMX_REGS:13,637 FP_TOP_SSE_REGS:65535,3114095 FP_SECOND_SSE_REGS:65535,3114095 FLOAT_SSE_REGS:65535,3114095 FLOAT_INT_REGS:65535,3114095 INT_SSE_REGS:13,637 FLOAT_INT_SSE_REGS:65535,3114095 ALL_REGS:65535,3114095 MEM:4,164
  a6(r147,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a7(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a8(r149,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a9(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a10(r148,l0) costs: AREG:19,19 DREG:19,19 CREG:19,19 BREG:19,19 SIREG:18,18 DIREG:19,19 AD_REGS:19,19 Q_REGS:19,19 NON_Q_REGS:19,19 INDEX_REGS:19,19 GENERAL_REGS:19,19 LEGACY_REGS:19,19 CLOBBERED_REGS:19,19 SSE_FIRST_REG:84,6766 SSE_REGS:84,6766 MMX_REGS:101,6783 FP_TOP_SSE_REGS:458751,4458751 FP_SECOND_SSE_REGS:458751,4458751 FLOAT_SSE_REGS:458751,4458751 FLOAT_INT_REGS:458751,4458751 INT_SSE_REGS:97,6779 FLOAT_INT_SSE_REGS:458751,4458751 ALL_REGS:458751,4458751 MEM:38,1580
  a11(r152,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117,4446 SSE_REGS:117,4446 MMX_REGS:117,4446 FP_TOP_SSE_REGS:589815,22412970 FP_SECOND_SSE_REGS:589815,22412970 FLOAT_SSE_REGS:589815,22412970 FLOAT_INT_REGS:589815,22412970 INT_SSE_REGS:117,4446 FLOAT_INT_SSE_REGS:589815,22412970 ALL_REGS:589815,22412970 MEM:36,1368
  a12(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:9,9
  a13(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:21,21
  a14(r224,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a15(r226,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a16(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:10,10
  a17(r220,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a18(r222,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a19(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:11,11
  a20(r216,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a21(r218,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a22(r211,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a23(r213,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a24(r212,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a25(r191,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:393212,393212 MEM:45,45
  a26(r214,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a27(r210,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:196605,196605 MEM:23,23
  a28(r185,l0) costs: SSE_FIRST_REG:10,10 SSE_REGS:10,10 INT_SSE_REGS:458755,458755 MEM:62,62
  a29(r80,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:80,80 SSE_REGS:80,80 MMX_REGS:80,80 FP_TOP_SSE_REGS:393212,393212 FP_SECOND_SSE_REGS:393212,393212 FLOAT_SSE_REGS:393212,393212 FLOAT_INT_REGS:393212,393212 INT_SSE_REGS:80,80 FLOAT_INT_SSE_REGS:393212,393212 ALL_REGS:393212,393212 MEM:21,21
  a30(r205,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a31(r207,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a32(r206,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a33(r208,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a34(r204,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a35(r199,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a36(r201,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a37(r200,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a38(r202,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a39(r198,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a40(r193,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a41(r195,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a42(r194,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a43(r196,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a44(r192,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a45(r187,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a46(r189,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a47(r188,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a48(r190,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a49(r186,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a50(r257,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a51(r175,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a52(r174,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a53(r258,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a54(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,2158 SSE_REGS:13,2158 MMX_REGS:13,2158 FP_TOP_SSE_REGS:65535,7390845 FP_SECOND_SSE_REGS:65535,7390845 FLOAT_SSE_REGS:65535,7390845 FLOAT_INT_REGS:65535,7390845 INT_SSE_REGS:13,2158 FLOAT_INT_SSE_REGS:65535,7390845 ALL_REGS:65535,7390845 MEM:4,565
  a55(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,103
  a56(r169,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a57(r131,l0) costs: AREG:13,508 DREG:13,508 CREG:13,508 BREG:13,508 SIREG:13,508 DIREG:13,508 AD_REGS:13,508 Q_REGS:13,508 NON_Q_REGS:13,508 INDEX_REGS:13,508 GENERAL_REGS:13,508 LEGACY_REGS:13,508 CLOBBERED_REGS:13,508 FP_TOP_REG:21,780 FP_SECOND_REG:21,780 FLOAT_REGS:21,780 SSE_FIRST_REG:0,66 SSE_REGS:0,66 MMX_REGS:17,644 FP_TOP_SSE_REGS:21,780 FP_SECOND_SSE_REGS:21,780 FLOAT_SSE_REGS:21,780 FLOAT_INT_REGS:21,780 INT_SSE_REGS:13,508 FLOAT_INT_SSE_REGS:21,780 ALL_REGS:21,780 MEM:8,338
  a58(r150,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a59(r160,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a60(r162,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a61(r161,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a62(r154,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:51,51 SSE_REGS:51,51 MMX_REGS:51,51 FP_TOP_SSE_REGS:262139,262139 FP_SECOND_SSE_REGS:262139,262139 FLOAT_SSE_REGS:262139,262139 FLOAT_INT_REGS:262139,262139 INT_SSE_REGS:51,51 FLOAT_INT_SSE_REGS:262139,262139 ALL_REGS:262139,262139 MEM:7,7
  a63(r157,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a64(r71,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a65(r94,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:624,624 SSE_REGS:624,624 MMX_REGS:624,624 FP_TOP_SSE_REGS:3048560,3048560 FP_SECOND_SSE_REGS:3048560,3048560 FLOAT_SSE_REGS:3048560,3048560 FLOAT_INT_REGS:3048560,3048560 INT_SSE_REGS:624,624 FLOAT_INT_SSE_REGS:3048560,3048560 ALL_REGS:3048560,3048560 MEM:160,160
  a66(r107,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:832,832 SSE_REGS:832,832 MMX_REGS:832,832 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:832,832 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:208,208
  a67(r122,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a68(r144,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,999
  a69(r148,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,6682 SSE_REGS:208,6682 MMX_REGS:208,6682 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:208,6682 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:48,1542
  a70(r151,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:403,403 SSE_REGS:403,403 MMX_REGS:403,403 FP_TOP_SSE_REGS:1983025,1983025 FP_SECOND_SSE_REGS:1983025,1983025 FLOAT_SSE_REGS:1983025,1983025 FLOAT_INT_REGS:1983025,1983025 INT_SSE_REGS:403,403 FLOAT_INT_SSE_REGS:1983025,1983025 ALL_REGS:1983025,1983025 MEM:109,109
  a71(r152,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,21823155 FP_SECOND_SSE_REGS:0,21823155 FLOAT_SSE_REGS:0,21823155 FLOAT_INT_REGS:0,21823155 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,21823155 ALL_REGS:0,21823155 MEM:0,1332
  a72(r256,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,7748 SSE_REGS:208,7748 MMX_REGS:208,7748 FP_TOP_SSE_REGS:1000000,39010300 FP_SECOND_SSE_REGS:1000000,39010300 FLOAT_SSE_REGS:1000000,39010300 FLOAT_INT_REGS:1000000,39010300 INT_SSE_REGS:208,7748 FLOAT_INT_SSE_REGS:1000000,39010300 ALL_REGS:1000000,39010300 MEM:48,2368
  a73(r257,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,8853 SSE_REGS:195,8853 MMX_REGS:195,8853 FP_TOP_SSE_REGS:983025,44629335 FP_SECOND_SSE_REGS:983025,44629335 FLOAT_SSE_REGS:983025,44629335 FLOAT_INT_REGS:983025,44629335 INT_SSE_REGS:195,8853 FLOAT_INT_SSE_REGS:983025,44629335 ALL_REGS:983025,44629335 MEM:60,2724
  a74(r258,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,4524 SSE_REGS:195,4524 MMX_REGS:195,4524 FP_TOP_SSE_REGS:983025,22806180 FP_SECOND_SSE_REGS:983025,22806180 FLOAT_SSE_REGS:983025,22806180 FLOAT_INT_REGS:983025,22806180 INT_SSE_REGS:195,4524 FLOAT_INT_SSE_REGS:983025,22806180 ALL_REGS:983025,22806180 MEM:60,1392
  a75(r72,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,41249 SSE_REGS:195,41249 MMX_REGS:195,41249 FP_TOP_SSE_REGS:983025,145473090 FP_SECOND_SSE_REGS:983025,145473090 FLOAT_SSE_REGS:983025,145473090 FLOAT_INT_REGS:983025,145473090 INT_SSE_REGS:195,41249 FLOAT_INT_SSE_REGS:983025,145473090 ALL_REGS:983025,145473090 MEM:60,11693
  a76(r63,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,13182 SSE_REGS:195,13182 MMX_REGS:195,13182 FP_TOP_SSE_REGS:983025,3983025 FP_SECOND_SSE_REGS:983025,3983025 FLOAT_SSE_REGS:983025,3983025 FLOAT_INT_REGS:983025,3983025 INT_SSE_REGS:195,13182 FLOAT_INT_SSE_REGS:983025,3983025 ALL_REGS:983025,3983025 MEM:60,3057
  a77(r106,l2) costs: AREG:-16,-16 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:128,128
  a78(r254,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:128,128
  a79(r110,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:112,112
  a80(r63,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12987,12987 SSE_REGS:12987,12987 MMX_REGS:12987,12987 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:12987,12987 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:2997,2997
  a81(r71,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a82(r72,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:41054,41054 SSE_REGS:41054,41054 MMX_REGS:41054,41054 FP_TOP_SSE_REGS:144490065,144490065 FP_SECOND_SSE_REGS:144490065,144490065 FLOAT_SSE_REGS:144490065,144490065 FLOAT_INT_REGS:144490065,144490065 INT_SSE_REGS:41054,41054 FLOAT_INT_SSE_REGS:144490065,144490065 ALL_REGS:144490065,144490065 MEM:11633,11633
  a83(r94,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a84(r107,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a85(r122,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a86(r144,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:999,999
  a87(r148,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6474,6474 SSE_REGS:6474,6474 MMX_REGS:6474,6474 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:6474,6474 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:1494,1494
  a88(r151,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a89(r152,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a90(r256,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:7540,7540 SSE_REGS:7540,7540 MMX_REGS:7540,7540 FP_TOP_SSE_REGS:38010300,38010300 FP_SECOND_SSE_REGS:38010300,38010300 FLOAT_SSE_REGS:38010300,38010300 FLOAT_INT_REGS:38010300,38010300 INT_SSE_REGS:7540,7540 FLOAT_INT_SSE_REGS:38010300,38010300 ALL_REGS:38010300,38010300 MEM:2320,2320
  a91(r257,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:43646310,43646310 FP_SECOND_SSE_REGS:43646310,43646310 FLOAT_SSE_REGS:43646310,43646310 FLOAT_INT_REGS:43646310,43646310 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:43646310,43646310 ALL_REGS:43646310,43646310 MEM:2664,2664
  a92(r258,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a93(r93,l3) costs: AREG:996,996 DREG:996,996 CREG:1328,1328 BREG:1328,1328 SIREG:1328,1328 DIREG:1328,1328 AD_REGS:1328,1328 Q_REGS:1328,1328 NON_Q_REGS:1328,1328 INDEX_REGS:1328,1328 GENERAL_REGS:1328,1328 LEGACY_REGS:1328,1328 CLOBBERED_REGS:1328,1328 SSE_FIRST_REG:25481,49141 SSE_REGS:25481,49141 MMX_REGS:25481,49141 FP_TOP_SSE_REGS:10000000,12000000 FP_SECOND_SSE_REGS:10000000,12000000 FLOAT_SSE_REGS:10000000,12000000 FLOAT_INT_REGS:10000000,12000000 INT_SSE_REGS:25481,49141 FLOAT_INT_SSE_REGS:10000000,12000000 ALL_REGS:10000000,12000000 MEM:7802,13262
  a94(r84,l3) costs: AREG:664,664 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:17967,17967 SSE_REGS:17967,17967 MMX_REGS:17967,17967 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:17967,17967 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:4990,4990
  a95(r129,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1053,12883 SSE_REGS:1053,12883 MMX_REGS:1053,12883 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:1053,12883 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:324,3054
  a96(r251,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2331,2331
  a97(r248,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:2490,2490 SSE_REGS:2490,2490 MMX_REGS:2490,2490 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2490,2490 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:996,996
  a98(r241,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:11878810,11878810 FP_SECOND_SSE_REGS:11878810,11878810 FLOAT_SSE_REGS:11878810,11878810 FLOAT_INT_REGS:11878810,11878810 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:11878810,11878810 ALL_REGS:11878810,11878810 MEM:1328,1328
  a99(r83,l3) costs: AREG:664,664 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:17954,17954 SSE_REGS:17954,17954 MMX_REGS:17954,17954 FP_TOP_SSE_REGS:15878810,15878810 FP_SECOND_SSE_REGS:15878810,15878810 FLOAT_SSE_REGS:15878810,15878810 FLOAT_INT_REGS:15878810,15878810 INT_SSE_REGS:17954,17954 FLOAT_INT_SSE_REGS:15878810,15878810 ALL_REGS:15878810,15878810 MEM:5153,5153
  a100(r242,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a101(r239,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a102(r238,l3) costs: AREG:332,332 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1328,1328
  a103(r235,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a104(r236,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a105(r233,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1494,1494
  a106(r63,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a107(r71,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a108(r72,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a109(r84,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a110(r93,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:5460,5460
  a111(r94,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a112(r107,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a113(r122,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a114(r129,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11830,11830 SSE_REGS:11830,11830 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:11830,11830 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2730,2730
  a115(r144,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a116(r148,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a117(r151,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a118(r152,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a119(r256,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a120(r257,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a121(r258,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a122(r71,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a123(r104,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2145,2145 SSE_REGS:2145,2145 MMX_REGS:2145,2145 FP_TOP_SSE_REGS:7325310,7325310 FP_SECOND_SSE_REGS:7325310,7325310 FLOAT_SSE_REGS:7325310,7325310 FLOAT_INT_REGS:7325310,7325310 INT_SSE_REGS:2145,2145 FLOAT_INT_SSE_REGS:7325310,7325310 ALL_REGS:7325310,7325310 MEM:561,561
  a124(r131,l1) costs: AREG:495,495 DREG:495,495 CREG:495,495 BREG:495,495 SIREG:495,495 DIREG:495,495 AD_REGS:495,495 Q_REGS:495,495 NON_Q_REGS:495,495 INDEX_REGS:495,495 GENERAL_REGS:495,495 LEGACY_REGS:495,495 CLOBBERED_REGS:495,495 FP_TOP_REG:759,759 FP_SECOND_REG:759,759 FLOAT_REGS:759,759 SSE_FIRST_REG:66,66 SSE_REGS:66,66 MMX_REGS:627,627 FP_TOP_SSE_REGS:759,759 FP_SECOND_SSE_REGS:759,759 FLOAT_SSE_REGS:759,759 FLOAT_INT_REGS:759,759 INT_SSE_REGS:495,495 FLOAT_INT_SSE_REGS:759,759 ALL_REGS:759,759 MEM:330,330
  a125(r146,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:99,99
  a126(r147,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a127(r148,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a128(r149,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a129(r150,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a130(r151,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a131(r152,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a132(r258,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a133(r173,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:858,858 SSE_REGS:858,858 MMX_REGS:858,858 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:264,264
  a134(r75,l1) costs: AREG:627,627 DREG:627,627 CREG:627,627 BREG:627,627 SIREG:627,627 DIREG:627,627 AD_REGS:627,627 Q_REGS:627,627 NON_Q_REGS:627,627 INDEX_REGS:627,627 GENERAL_REGS:627,627 LEGACY_REGS:627,627 CLOBBERED_REGS:627,627 FP_TOP_REG:1386,1386 FP_SECOND_REG:1386,1386 FLOAT_REGS:1386,1386 SSE_FIRST_REG:-33,-33 SSE_REGS:0,0 MMX_REGS:1122,1122 FP_TOP_SSE_REGS:1386,1386 FP_SECOND_SSE_REGS:1386,1386 FLOAT_SSE_REGS:1386,1386 FLOAT_INT_REGS:1386,1386 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:1386,1386 ALL_REGS:1386,1386 MEM:528,528
  a135(r171,l1) costs: AREG:693,693 DREG:693,693 CREG:693,693 BREG:693,693 SIREG:693,693 DIREG:693,693 AD_REGS:693,693 Q_REGS:693,693 NON_Q_REGS:693,693 INDEX_REGS:693,693 GENERAL_REGS:693,693 LEGACY_REGS:693,693 CLOBBERED_REGS:693,693 FP_TOP_REG:1452,1452 FP_SECOND_REG:1452,1452 FLOAT_REGS:1452,1452 SSE_FIRST_REG:33,33 SSE_REGS:66,66 MMX_REGS:1188,1188 FP_TOP_SSE_REGS:1452,1452 FP_SECOND_SSE_REGS:1452,1452 FLOAT_SSE_REGS:1452,1452 FLOAT_INT_REGS:1452,1452 INT_SSE_REGS:924,924 FLOAT_INT_SSE_REGS:1452,1452 ALL_REGS:1452,1452 MEM:594,594


Pass 1 for finding pseudo/allocno costs

    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r257: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a120 (r257,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a91 (r257,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a73 (r257,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r248: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r236: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r214: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r213: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r212: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r211: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r210: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r208: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r207: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r206: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r205: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r204: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r202: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r201: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r200: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r199: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r198: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r196: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r195: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r194: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r193: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r192: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r191: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r190: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r189: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r188: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r187: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r186: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r185: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r175: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r171: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r162: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r160: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r150: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a129 (r150,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a128 (r149,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a127 (r148,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a116 (r148,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a87 (r148,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a69 (r148,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a126 (r147,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r131: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r106: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r93,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a93 (r93,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r75: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r256,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,7761 SSE_REGS:13,7761 MMX_REGS:13,7761 FP_TOP_SSE_REGS:65535,39075835 FP_SECOND_SSE_REGS:65535,39075835 FLOAT_SSE_REGS:65535,39075835 FLOAT_INT_REGS:65535,39075835 INT_SSE_REGS:13,7761 FLOAT_INT_SSE_REGS:65535,39075835 ALL_REGS:65535,39075835 MEM:4,2372
  a1(r107,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,845 SSE_REGS:13,845 MMX_REGS:13,845 FP_TOP_SSE_REGS:65535,4065535 FP_SECOND_SSE_REGS:65535,4065535 FLOAT_SSE_REGS:65535,4065535 FLOAT_INT_REGS:65535,4065535 INT_SSE_REGS:13,845 FLOAT_INT_SSE_REGS:65535,4065535 ALL_REGS:65535,4065535 MEM:4,212
  a2(r144,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,4342 SSE_REGS:13,4342 MMX_REGS:13,4342 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,4342 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,1003
  a3(r229,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a4(r151,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:157,560 SSE_REGS:157,560 MMX_REGS:157,560 FP_TOP_SSE_REGS:786421,2769446 FP_SECOND_SSE_REGS:786421,2769446 FLOAT_SSE_REGS:786421,2769446 FLOAT_INT_REGS:786421,2769446 INT_SSE_REGS:157,560 FLOAT_INT_SSE_REGS:786421,2769446 ALL_REGS:786421,2769446 MEM:43,152
  a5(r94,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,637 SSE_REGS:13,637 MMX_REGS:13,637 FP_TOP_SSE_REGS:65535,3114095 FP_SECOND_SSE_REGS:65535,3114095 FLOAT_SSE_REGS:65535,3114095 FLOAT_INT_REGS:65535,3114095 INT_SSE_REGS:13,637 FLOAT_INT_SSE_REGS:65535,3114095 ALL_REGS:65535,3114095 MEM:4,164
  a6(r147,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a7(r122,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a8(r149,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a9(r71,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a10(r148,l0) costs: AREG:32,32 DREG:32,32 CREG:32,32 BREG:32,32 SIREG:31,31 DIREG:32,32 AD_REGS:32,32 Q_REGS:32,32 NON_Q_REGS:32,32 INDEX_REGS:32,32 GENERAL_REGS:32,32 LEGACY_REGS:32,32 CLOBBERED_REGS:32,32 SSE_FIRST_REG:97,6779 SSE_REGS:97,6779 MMX_REGS:114,6796 FP_TOP_SSE_REGS:458764,4458764 FP_SECOND_SSE_REGS:458764,4458764 FLOAT_SSE_REGS:458764,4458764 FLOAT_INT_REGS:458764,4458764 INT_SSE_REGS:110,6792 FLOAT_INT_SSE_REGS:458764,4458764 ALL_REGS:458764,4458764 MEM:51,1593
  a11(r152,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:117,4446 SSE_REGS:117,4446 MMX_REGS:117,4446 FP_TOP_SSE_REGS:589815,22412970 FP_SECOND_SSE_REGS:589815,22412970 FLOAT_SSE_REGS:589815,22412970 FLOAT_INT_REGS:589815,22412970 INT_SSE_REGS:117,4446 FLOAT_INT_SSE_REGS:589815,22412970 ALL_REGS:589815,22412970 MEM:36,1368
  a12(r66,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:9,9
  a13(r114,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:21,21
  a14(r224,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a15(r226,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a16(r81,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:10,10
  a17(r220,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a18(r222,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a19(r79,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:11,11
  a20(r216,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a21(r218,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a22(r211,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a23(r213,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a24(r212,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a25(r191,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:393212,393212 MEM:45,45
  a26(r214,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a27(r210,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:196605,196605 MEM:23,23
  a28(r185,l0) costs: SSE_REGS:23,23 INT_SSE_REGS:458768,458768 MEM:75,75
  a29(r80,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:80,80 SSE_REGS:80,80 MMX_REGS:80,80 FP_TOP_SSE_REGS:393212,393212 FP_SECOND_SSE_REGS:393212,393212 FLOAT_SSE_REGS:393212,393212 FLOAT_INT_REGS:393212,393212 INT_SSE_REGS:80,80 FLOAT_INT_SSE_REGS:393212,393212 ALL_REGS:393212,393212 MEM:21,21
  a30(r205,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a31(r207,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a32(r206,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a33(r208,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a34(r204,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a35(r199,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a36(r201,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a37(r200,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a38(r202,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a39(r198,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a40(r193,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a41(r195,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a42(r194,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a43(r196,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a44(r192,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a45(r187,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a46(r189,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a47(r188,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a48(r190,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a49(r186,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a50(r257,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a51(r175,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a52(r174,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a53(r258,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a54(r104,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,2158 SSE_REGS:13,2158 MMX_REGS:13,2158 FP_TOP_SSE_REGS:65535,7390845 FP_SECOND_SSE_REGS:65535,7390845 FLOAT_SSE_REGS:65535,7390845 FLOAT_INT_REGS:65535,7390845 INT_SSE_REGS:13,2158 FLOAT_INT_SSE_REGS:65535,7390845 ALL_REGS:65535,7390845 MEM:4,565
  a55(r146,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,103
  a56(r169,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a57(r131,l0) costs: AREG:13,508 DREG:13,508 CREG:13,508 BREG:13,508 SIREG:13,508 DIREG:13,508 AD_REGS:13,508 Q_REGS:13,508 NON_Q_REGS:13,508 INDEX_REGS:13,508 GENERAL_REGS:13,508 LEGACY_REGS:13,508 CLOBBERED_REGS:13,508 FP_TOP_REG:21,780 FP_SECOND_REG:21,780 FLOAT_REGS:21,780 SSE_REGS:0,66 MMX_REGS:17,644 FP_TOP_SSE_REGS:21,780 FP_SECOND_SSE_REGS:21,780 FLOAT_SSE_REGS:21,780 FLOAT_INT_REGS:21,780 INT_SSE_REGS:13,508 FLOAT_INT_SSE_REGS:21,780 ALL_REGS:21,780 MEM:8,338
  a58(r150,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a59(r160,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a60(r162,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a61(r161,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a62(r154,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:51,51 SSE_REGS:51,51 MMX_REGS:51,51 FP_TOP_SSE_REGS:262139,262139 FP_SECOND_SSE_REGS:262139,262139 FLOAT_SSE_REGS:262139,262139 FLOAT_INT_REGS:262139,262139 INT_SSE_REGS:51,51 FLOAT_INT_SSE_REGS:262139,262139 ALL_REGS:262139,262139 MEM:7,7
  a63(r157,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a64(r71,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a65(r94,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:624,624 SSE_REGS:624,624 MMX_REGS:624,624 FP_TOP_SSE_REGS:3048560,3048560 FP_SECOND_SSE_REGS:3048560,3048560 FLOAT_SSE_REGS:3048560,3048560 FLOAT_INT_REGS:3048560,3048560 INT_SSE_REGS:624,624 FLOAT_INT_SSE_REGS:3048560,3048560 ALL_REGS:3048560,3048560 MEM:160,160
  a66(r107,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:832,832 SSE_REGS:832,832 MMX_REGS:832,832 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:832,832 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:208,208
  a67(r122,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a68(r144,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,999
  a69(r148,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,6682 SSE_REGS:208,6682 MMX_REGS:208,6682 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:208,6682 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:48,1542
  a70(r151,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:403,403 SSE_REGS:403,403 MMX_REGS:403,403 FP_TOP_SSE_REGS:1983025,1983025 FP_SECOND_SSE_REGS:1983025,1983025 FLOAT_SSE_REGS:1983025,1983025 FLOAT_INT_REGS:1983025,1983025 INT_SSE_REGS:403,403 FLOAT_INT_SSE_REGS:1983025,1983025 ALL_REGS:1983025,1983025 MEM:109,109
  a71(r152,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,21823155 FP_SECOND_SSE_REGS:0,21823155 FLOAT_SSE_REGS:0,21823155 FLOAT_INT_REGS:0,21823155 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,21823155 ALL_REGS:0,21823155 MEM:0,1332
  a72(r256,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:208,7748 SSE_REGS:208,7748 MMX_REGS:208,7748 FP_TOP_SSE_REGS:1000000,39010300 FP_SECOND_SSE_REGS:1000000,39010300 FLOAT_SSE_REGS:1000000,39010300 FLOAT_INT_REGS:1000000,39010300 INT_SSE_REGS:208,7748 FLOAT_INT_SSE_REGS:1000000,39010300 ALL_REGS:1000000,39010300 MEM:48,2368
  a73(r257,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,8853 SSE_REGS:195,8853 MMX_REGS:195,8853 FP_TOP_SSE_REGS:983025,44629335 FP_SECOND_SSE_REGS:983025,44629335 FLOAT_SSE_REGS:983025,44629335 FLOAT_INT_REGS:983025,44629335 INT_SSE_REGS:195,8853 FLOAT_INT_SSE_REGS:983025,44629335 ALL_REGS:983025,44629335 MEM:60,2724
  a74(r258,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:195,4524 SSE_REGS:195,4524 MMX_REGS:195,4524 FP_TOP_SSE_REGS:983025,22806180 FP_SECOND_SSE_REGS:983025,22806180 FLOAT_SSE_REGS:983025,22806180 FLOAT_INT_REGS:983025,22806180 INT_SSE_REGS:195,4524 FLOAT_INT_SSE_REGS:983025,22806180 ALL_REGS:983025,22806180 MEM:60,1392
  a75(r72,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:195,41249 SSE_REGS:195,41249 MMX_REGS:195,41249 FP_TOP_SSE_REGS:983025,145473090 FP_SECOND_SSE_REGS:983025,145473090 FLOAT_SSE_REGS:983025,145473090 FLOAT_INT_REGS:983025,145473090 INT_SSE_REGS:195,41249 FLOAT_INT_SSE_REGS:983025,145473090 ALL_REGS:983025,145473090 MEM:60,11693
  a76(r63,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:195,13182 SSE_REGS:195,13182 MMX_REGS:195,13182 FP_TOP_SSE_REGS:983025,3983025 FP_SECOND_SSE_REGS:983025,3983025 FLOAT_SSE_REGS:983025,3983025 FLOAT_INT_REGS:983025,3983025 INT_SSE_REGS:195,13182 FLOAT_INT_SSE_REGS:983025,3983025 ALL_REGS:983025,3983025 MEM:60,3057
  a77(r106,l2) costs: AREG:-16,-16 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:128,128
  a78(r254,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:128,128
  a79(r110,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:112,112
  a80(r63,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12987,12987 SSE_REGS:12987,12987 MMX_REGS:12987,12987 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:12987,12987 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:2997,2997
  a81(r71,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a82(r72,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:41054,41054 SSE_REGS:41054,41054 MMX_REGS:41054,41054 FP_TOP_SSE_REGS:144490065,144490065 FP_SECOND_SSE_REGS:144490065,144490065 FLOAT_SSE_REGS:144490065,144490065 FLOAT_INT_REGS:144490065,144490065 INT_SSE_REGS:41054,41054 FLOAT_INT_SSE_REGS:144490065,144490065 ALL_REGS:144490065,144490065 MEM:11633,11633
  a83(r94,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a84(r107,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a85(r122,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a86(r144,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:999,999
  a87(r148,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6474,6474 SSE_REGS:6474,6474 MMX_REGS:6474,6474 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:6474,6474 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:1494,1494
  a88(r151,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a89(r152,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a90(r256,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:7540,7540 SSE_REGS:7540,7540 MMX_REGS:7540,7540 FP_TOP_SSE_REGS:38010300,38010300 FP_SECOND_SSE_REGS:38010300,38010300 FLOAT_SSE_REGS:38010300,38010300 FLOAT_INT_REGS:38010300,38010300 INT_SSE_REGS:7540,7540 FLOAT_INT_SSE_REGS:38010300,38010300 ALL_REGS:38010300,38010300 MEM:2320,2320
  a91(r257,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:43646310,43646310 FP_SECOND_SSE_REGS:43646310,43646310 FLOAT_SSE_REGS:43646310,43646310 FLOAT_INT_REGS:43646310,43646310 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:43646310,43646310 ALL_REGS:43646310,43646310 MEM:2664,2664
  a92(r258,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a93(r93,l3) costs: CREG:1328,1328 BREG:1328,1328 SIREG:1328,1328 DIREG:1328,1328 AD_REGS:1328,1328 Q_REGS:1328,1328 NON_Q_REGS:1328,1328 INDEX_REGS:1328,1328 GENERAL_REGS:1328,1328 LEGACY_REGS:1328,1328 CLOBBERED_REGS:1328,1328 SSE_FIRST_REG:25481,49141 SSE_REGS:25481,49141 MMX_REGS:25481,49141 FP_TOP_SSE_REGS:10000000,12000000 FP_SECOND_SSE_REGS:10000000,12000000 FLOAT_SSE_REGS:10000000,12000000 FLOAT_INT_REGS:10000000,12000000 INT_SSE_REGS:25481,49141 FLOAT_INT_SSE_REGS:10000000,12000000 ALL_REGS:10000000,12000000 MEM:7802,13262
  a94(r84,l3) costs: GENERAL_REGS:664,664 SSE_FIRST_REG:17967,17967 SSE_REGS:17967,17967 MMX_REGS:17967,17967 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:17967,17967 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:4990,4990
  a95(r129,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1053,12883 SSE_REGS:1053,12883 MMX_REGS:1053,12883 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:1053,12883 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:324,3054
  a96(r251,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2331,2331
  a97(r248,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:2490,2490 SSE_REGS:2490,2490 MMX_REGS:2490,2490 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2490,2490 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:996,996
  a98(r241,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:11878810,11878810 FP_SECOND_SSE_REGS:11878810,11878810 FLOAT_SSE_REGS:11878810,11878810 FLOAT_INT_REGS:11878810,11878810 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:11878810,11878810 ALL_REGS:11878810,11878810 MEM:1328,1328
  a99(r83,l3) costs: GENERAL_REGS:664,664 SSE_FIRST_REG:17954,17954 SSE_REGS:17954,17954 MMX_REGS:17954,17954 FP_TOP_SSE_REGS:15878810,15878810 FP_SECOND_SSE_REGS:15878810,15878810 FLOAT_SSE_REGS:15878810,15878810 FLOAT_INT_REGS:15878810,15878810 INT_SSE_REGS:17954,17954 FLOAT_INT_SSE_REGS:15878810,15878810 ALL_REGS:15878810,15878810 MEM:5153,5153
  a100(r242,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a101(r239,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a102(r238,l3) costs: GENERAL_REGS:332,332 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1328,1328
  a103(r235,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a104(r236,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a105(r233,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1494,1494
  a106(r63,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a107(r71,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a108(r72,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a109(r84,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a110(r93,l4) costs: CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:5460,5460
  a111(r94,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a112(r107,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a113(r122,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a114(r129,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:11830,11830 SSE_REGS:11830,11830 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:11830,11830 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2730,2730
  a115(r144,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a116(r148,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a117(r151,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a118(r152,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a119(r256,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a120(r257,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a121(r258,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a122(r71,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a123(r104,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2145,2145 SSE_REGS:2145,2145 MMX_REGS:2145,2145 FP_TOP_SSE_REGS:7325310,7325310 FP_SECOND_SSE_REGS:7325310,7325310 FLOAT_SSE_REGS:7325310,7325310 FLOAT_INT_REGS:7325310,7325310 INT_SSE_REGS:2145,2145 FLOAT_INT_SSE_REGS:7325310,7325310 ALL_REGS:7325310,7325310 MEM:561,561
  a124(r131,l1) costs: AREG:495,495 DREG:495,495 CREG:495,495 BREG:495,495 SIREG:495,495 DIREG:495,495 AD_REGS:495,495 Q_REGS:495,495 NON_Q_REGS:495,495 INDEX_REGS:495,495 GENERAL_REGS:495,495 LEGACY_REGS:495,495 CLOBBERED_REGS:495,495 FP_TOP_REG:759,759 FP_SECOND_REG:759,759 FLOAT_REGS:759,759 SSE_REGS:66,66 MMX_REGS:627,627 FP_TOP_SSE_REGS:759,759 FP_SECOND_SSE_REGS:759,759 FLOAT_SSE_REGS:759,759 FLOAT_INT_REGS:759,759 INT_SSE_REGS:495,495 FLOAT_INT_SSE_REGS:759,759 ALL_REGS:759,759 MEM:330,330
  a125(r146,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:99,99
  a126(r147,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a127(r148,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a128(r149,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a129(r150,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a130(r151,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a131(r152,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a132(r258,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a133(r173,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:858,858 SSE_REGS:858,858 MMX_REGS:858,858 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:264,264
  a134(r75,l1) costs: AREG:858,858 DREG:858,858 CREG:858,858 BREG:858,858 SIREG:858,858 DIREG:858,858 AD_REGS:858,858 Q_REGS:858,858 NON_Q_REGS:858,858 INDEX_REGS:858,858 GENERAL_REGS:858,858 LEGACY_REGS:858,858 CLOBBERED_REGS:858,858 FP_TOP_REG:1386,1386 FP_SECOND_REG:1386,1386 FLOAT_REGS:1386,1386 SSE_FIRST_REG:-33,-33 SSE_REGS:0,0 MMX_REGS:1122,1122 FP_TOP_SSE_REGS:1386,1386 FP_SECOND_SSE_REGS:1386,1386 FLOAT_SSE_REGS:1386,1386 FLOAT_INT_REGS:1386,1386 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:1386,1386 ALL_REGS:1386,1386 MEM:528,528
  a135(r171,l1) costs: AREG:924,924 DREG:924,924 CREG:924,924 BREG:924,924 SIREG:924,924 DIREG:924,924 AD_REGS:924,924 Q_REGS:924,924 NON_Q_REGS:924,924 INDEX_REGS:924,924 GENERAL_REGS:924,924 LEGACY_REGS:924,924 CLOBBERED_REGS:924,924 FP_TOP_REG:1452,1452 FP_SECOND_REG:1452,1452 FLOAT_REGS:1452,1452 SSE_FIRST_REG:33,33 SSE_REGS:66,66 MMX_REGS:1188,1188 FP_TOP_SSE_REGS:1452,1452 FP_SECOND_SSE_REGS:1452,1452 FLOAT_SSE_REGS:1452,1452 FLOAT_INT_REGS:1452,1452 INT_SSE_REGS:924,924 FLOAT_INT_SSE_REGS:1452,1452 ALL_REGS:1452,1452 MEM:594,594

   Insn 395(l0): point = 1
   Insn 372(l0): point = 3
   Insn 20(l0): point = 5
   Insn 247(l0): point = 7
   Insn 245(l0): point = 9
   Insn 243(l0): point = 11
   Insn 242(l0): point = 13
   Insn 371(l0): point = 16
   Insn 13(l0): point = 18
   Insn 74(l0): point = 20
   Insn 72(l0): point = 22
   Insn 69(l0): point = 24
   Insn 383(l0): point = 27
   Insn 63(l0): point = 30
   Insn 62(l0): point = 32
   Insn 390(l0): point = 35
   Insn 223(l0): point = 38
   Insn 222(l0): point = 40
   Insn 219(l0): point = 42
   Insn 218(l0): point = 44
   Insn 217(l0): point = 46
   Insn 214(l0): point = 48
   Insn 14(l0): point = 51
   Insn 210(l0): point = 54
   Insn 209(l0): point = 56
   Insn 208(l0): point = 58
   Insn 177(l0): point = 61
   Insn 176(l0): point = 63
   Insn 173(l0): point = 65
   Insn 172(l0): point = 67
   Insn 171(l0): point = 69
   Insn 170(l0): point = 71
   Insn 169(l0): point = 73
   Insn 167(l0): point = 75
   Insn 166(l0): point = 77
   Insn 165(l0): point = 79
   Insn 132(l0): point = 82
   Insn 131(l0): point = 84
   Insn 128(l0): point = 86
   Insn 127(l0): point = 88
   Insn 126(l0): point = 90
   Insn 125(l0): point = 92
   Insn 124(l0): point = 94
   Insn 123(l0): point = 96
   Insn 122(l0): point = 98
   Insn 121(l0): point = 100
   Insn 120(l0): point = 102
   Insn 117(l0): point = 104
   Insn 115(l0): point = 107
   Insn 114(l0): point = 109
   Insn 111(l0): point = 112
   Insn 110(l0): point = 114
   Insn 107(l0): point = 116
   Insn 106(l0): point = 118
   Insn 103(l0): point = 120
   Insn 102(l0): point = 122
   Insn 101(l0): point = 124
   Insn 100(l0): point = 126
   Insn 97(l0): point = 128
   Insn 96(l0): point = 130
   Insn 95(l0): point = 132
   Insn 147(l0): point = 135
   Insn 146(l0): point = 137
   Insn 143(l0): point = 139
   Insn 142(l0): point = 141
   Insn 141(l0): point = 143
   Insn 140(l0): point = 145
   Insn 139(l0): point = 147
   Insn 137(l0): point = 149
   Insn 136(l0): point = 151
   Insn 135(l0): point = 153
   Insn 162(l0): point = 156
   Insn 161(l0): point = 158
   Insn 158(l0): point = 160
   Insn 157(l0): point = 162
   Insn 156(l0): point = 164
   Insn 155(l0): point = 166
   Insn 154(l0): point = 168
   Insn 152(l0): point = 170
   Insn 151(l0): point = 172
   Insn 150(l0): point = 174
   Insn 385(l0): point = 177
   Insn 188(l0): point = 179
   Insn 187(l0): point = 181
   Insn 186(l0): point = 183
   Insn 185(l0): point = 185
   Insn 184(l0): point = 187
   Insn 182(l0): point = 189
   Insn 181(l0): point = 191
   Insn 180(l0): point = 193
   Insn 387(l0): point = 196
   Insn 199(l0): point = 198
   Insn 198(l0): point = 200
   Insn 195(l0): point = 202
   Insn 393(l0): point = 205
   Insn 236(l0): point = 208
   Insn 235(l0): point = 210
   Insn 231(l0): point = 212
   Insn 230(l0): point = 214
   Insn 229(l0): point = 216
   Insn 226(l0): point = 218
   Insn 378(l0): point = 221
   Insn 33(l0): point = 224
   Insn 32(l0): point = 226
   Insn 380(l0): point = 229
   Insn 52(l0): point = 231
   Insn 51(l0): point = 233
   Insn 50(l0): point = 235
   Insn 49(l0): point = 237
   Insn 45(l0): point = 239
   Insn 44(l0): point = 241
   Insn 43(l0): point = 243
   Insn 40(l0): point = 245
   Insn 29(l0): point = 248
   Insn 28(l0): point = 250
   Insn 24(l0): point = 252
   Insn 11(l0): point = 254
   Insn 9(l0): point = 256
   Insn 8(l0): point = 258
   Insn 7(l0): point = 260
   Insn 6(l0): point = 262
   Insn 5(l0): point = 264
   Insn 4(l0): point = 266
   Insn 403(l2): point = 269
   Insn 374(l2): point = 271
   Insn 373(l2): point = 273
   Insn 16(l2): point = 275
   Insn 15(l2): point = 277
   Insn 19(l2): point = 280
   Insn 346(l2): point = 283
   Insn 345(l2): point = 285
   Insn 339(l2): point = 288
   Insn 338(l2): point = 290
   Insn 337(l2): point = 292
   Insn 334(l2): point = 294
   Insn 333(l2): point = 296
   Insn 332(l2): point = 298
   Insn 331(l2): point = 300
   Insn 330(l2): point = 302
   Insn 329(l2): point = 304
   Insn 328(l2): point = 306
   Insn 327(l2): point = 308
   Insn 325(l2): point = 310
   Insn 324(l2): point = 312
   Insn 399(l2): point = 315
   Insn 18(l2): point = 317
   Insn 306(l3): point = 320
   Insn 258(l3): point = 323
   Insn 257(l3): point = 325
   Insn 256(l3): point = 327
   Insn 254(l3): point = 329
   Insn 299(l3): point = 332
   Insn 298(l3): point = 334
   Insn 296(l3): point = 336
   Insn 295(l3): point = 338
   Insn 292(l3): point = 340
   Insn 291(l3): point = 342
   Insn 288(l3): point = 345
   Insn 287(l3): point = 347
   Insn 278(l3): point = 350
   Insn 277(l3): point = 352
   Insn 276(l3): point = 354
   Insn 272(l3): point = 357
   Insn 271(l3): point = 359
   Insn 270(l3): point = 361
   Insn 269(l3): point = 364
   Insn 268(l3): point = 366
   Insn 397(l3): point = 369
   Insn 262(l3): point = 371
   Insn 261(l3): point = 373
   Insn 260(l3): point = 376
   Insn 284(l3): point = 379
   Insn 282(l3): point = 381
   Insn 401(l3): point = 384
   Insn 313(l3): point = 386
   Insn 310(l4): point = 389
   Insn 309(l4): point = 391
   Insn 88(l1): point = 394
   Insn 87(l1): point = 396
   Insn 86(l1): point = 398
   Insn 83(l1): point = 400
   Insn 82(l1): point = 402
   Insn 80(l1): point = 404
   Insn 79(l1): point = 406
   Insn 78(l1): point = 408
   Insn 77(l1): point = 410
 a0(r256): [1..3]
 a1(r107): [1..5]
 a2(r144): [1..7]
 a3(r229): [8..9]
 a4(r151): [30..258] [1..26]
 a5(r94): [1..11]
 a6(r147): [30..266] [12..26]
 a7(r122): [1..13]
 a8(r149): [30..262] [14..26]
 a9(r71): [30..252] [1..26]
 a10(r148): [30..264] [1..26]
 a11(r152): [30..256] [1..26]
 a12(r66): [208..212] [203..204]
 a13(r114): [213..220] [54..58] [38..51]
 a14(r224): [215..218]
 a15(r226): [215..216]
 a16(r81): [219..220] [38..42]
 a17(r220): [45..48]
 a18(r222): [45..46]
 a19(r79): [135..195] [59..116]
 a20(r216): [199..202]
 a21(r218): [199..200]
 a22(r211): [180..185]
 a23(r213): [182..187]
 a24(r212): [186..191]
 a25(r191): [188..195] [135..176] [61..96]
 a26(r214): [188..189]
 a27(r210): [190..193]
 a28(r185): [192..195] [135..176] [61..104]
 a29(r80): [135..176] [64..118]
 a30(r205): [66..71]
 a31(r207): [68..73]
 a32(r206): [72..77]
 a33(r208): [74..75]
 a34(r204): [76..79]
 a35(r199): [161..166]
 a36(r201): [163..168]
 a37(r200): [167..172]
 a38(r202): [169..170]
 a39(r198): [171..174]
 a40(r193): [140..145]
 a41(r195): [142..147]
 a42(r194): [146..151]
 a43(r196): [148..149]
 a44(r192): [150..153]
 a45(r187): [87..92]
 a46(r189): [89..94]
 a47(r188): [93..100]
 a48(r190): [95..98]
 a49(r186): [99..102]
 a50(r257): [123..128]
 a51(r175): [127..130]
 a52(r174): [131..132]
 a53(r258): [16..16]
 a54(r104): [16..18]
 a55(r146): [16..20]
 a56(r169): [21..22]
 a57(r131): [16..24]
 a58(r150): [224..260] [16..26]
 a59(r160): [234..243]
 a60(r162): [238..239]
 a61(r161): [240..241]
 a62(r154): [242..254]
 a63(r157): [244..245]
 a64(r71): [269..319]
 a65(r94): [269..319]
 a66(r107): [269..319]
 a67(r122): [269..319]
 a68(r144): [269..319]
 a69(r148): [269..319]
 a70(r151): [269..319]
 a71(r152): [269..319]
 a72(r256): [269..319]
 a73(r257): [269..271]
 a74(r258): [269..273]
 a75(r72): [269..275]
 a76(r63): [269..277]
 a77(r106): [297..298]
 a78(r254): [311..312]
 a79(r110): [313..317] [280..280]
 a80(r63): [320..388]
 a81(r71): [320..388]
 a82(r72): [320..388]
 a83(r94): [320..388]
 a84(r107): [320..388]
 a85(r122): [320..388]
 a86(r144): [320..388]
 a87(r148): [320..388]
 a88(r151): [320..388]
 a89(r152): [320..388]
 a90(r256): [320..388]
 a91(r257): [320..388]
 a92(r258): [320..388]
 a93(r93): [387..388] [379..383] [369..371] [345..359] [320..322]
 a94(r84): [343..388] [320..327]
 a95(r129): [320..320]
 a96(r251): [341..342]
 a97(r248): [381..381]
 a98(r241): [360..362]
 a99(r83): [372..378] [360..368] [323..329]
 a100(r242): [361..361]
 a101(r239): [363..364]
 a102(r238): [365..366]
 a103(r235): [372..374]
 a104(r236): [373..373]
 a105(r233): [375..376]
 a106(r63): [389..393]
 a107(r71): [389..393]
 a108(r72): [389..393]
 a109(r84): [389..393]
 a110(r93): [389..393]
 a111(r94): [389..393]
 a112(r107): [389..393]
 a113(r122): [389..393]
 a114(r129): [389..393]
 a115(r144): [389..393]
 a116(r148): [389..393]
 a117(r151): [389..393]
 a118(r152): [389..393]
 a119(r256): [389..393]
 a120(r257): [389..393]
 a121(r258): [389..393]
 a122(r71): [394..412]
 a123(r104): [394..412]
 a124(r131): [394..412]
 a125(r146): [394..412]
 a126(r147): [394..412]
 a127(r148): [394..412]
 a128(r149): [394..412]
 a129(r150): [394..412]
 a130(r151): [394..412]
 a131(r152): [394..412]
 a132(r258): [394..412]
 a133(r173): [401..402]
 a134(r75): [403..404]
 a135(r171): [409..410]
Compressing live ranges: from 413 to 125 - 30%
Ranges after the compression:
 a0(r256): [0..1]
 a1(r107): [0..1]
 a2(r144): [0..1]
 a3(r229): [2..3]
 a4(r151): [0..80]
 a5(r94): [0..3]
 a6(r147): [4..80]
 a7(r122): [0..5]
 a8(r149): [6..80]
 a9(r71): [0..80]
 a10(r148): [0..80]
 a11(r152): [0..80]
 a12(r66): [65..68]
 a13(r114): [69..72] [11..16]
 a14(r224): [69..70]
 a15(r226): [69..70]
 a16(r81): [71..72] [11..12]
 a17(r220): [13..14]
 a18(r222): [13..14]
 a19(r79): [37..62] [17..32]
 a20(r216): [63..64]
 a21(r218): [63..64]
 a22(r211): [53..54]
 a23(r213): [53..56]
 a24(r212): [55..60]
 a25(r191): [57..62] [37..52] [17..30]
 a26(r214): [57..58]
 a27(r210): [59..62]
 a28(r185): [61..62] [37..52] [17..32]
 a29(r80): [37..52] [17..32]
 a30(r205): [17..18]
 a31(r207): [17..20]
 a32(r206): [19..24]
 a33(r208): [21..22]
 a34(r204): [23..24]
 a35(r199): [45..46]
 a36(r201): [45..48]
 a37(r200): [47..52]
 a38(r202): [49..50]
 a39(r198): [51..52]
 a40(r193): [37..38]
 a41(r195): [37..40]
 a42(r194): [39..44]
 a43(r196): [41..42]
 a44(r192): [43..44]
 a45(r187): [25..26]
 a46(r189): [25..28]
 a47(r188): [27..32]
 a48(r190): [29..30]
 a49(r186): [31..32]
 a50(r257): [33..34]
 a51(r175): [33..34]
 a52(r174): [35..36]
 a53(r258): [7..7]
 a54(r104): [7..8]
 a55(r146): [7..8]
 a56(r169): [9..10]
 a57(r131): [7..10]
 a58(r150): [73..80] [7..10]
 a59(r160): [73..78]
 a60(r162): [73..74]
 a61(r161): [75..76]
 a62(r154): [77..80]
 a63(r157): [79..80]
 a64(r71): [81..89]
 a65(r94): [81..89]
 a66(r107): [81..89]
 a67(r122): [81..89]
 a68(r144): [81..89]
 a69(r148): [81..89]
 a70(r151): [81..89]
 a71(r152): [81..89]
 a72(r256): [81..89]
 a73(r257): [81..82]
 a74(r258): [81..82]
 a75(r72): [81..82]
 a76(r63): [81..82]
 a77(r106): [84..85]
 a78(r254): [86..87]
 a79(r110): [88..89] [83..83]
 a80(r63): [90..116]
 a81(r71): [90..116]
 a82(r72): [90..116]
 a83(r94): [90..116]
 a84(r107): [90..116]
 a85(r122): [90..116]
 a86(r144): [90..116]
 a87(r148): [90..116]
 a88(r151): [90..116]
 a89(r152): [90..116]
 a90(r256): [90..116]
 a91(r257): [90..116]
 a92(r258): [90..116]
 a93(r93): [112..116] [105..106] [96..97] [90..91]
 a94(r84): [96..116] [90..93]
 a95(r129): [90..90]
 a96(r251): [94..95]
 a97(r248): [113..113]
 a98(r241): [98..100]
 a99(r83): [107..111] [98..104] [92..93]
 a100(r242): [99..99]
 a101(r239): [101..102]
 a102(r238): [103..104]
 a103(r235): [107..109]
 a104(r236): [108..108]
 a105(r233): [110..111]
 a106(r63): [117..118]
 a107(r71): [117..118]
 a108(r72): [117..118]
 a109(r84): [117..118]
 a110(r93): [117..118]
 a111(r94): [117..118]
 a112(r107): [117..118]
 a113(r122): [117..118]
 a114(r129): [117..118]
 a115(r144): [117..118]
 a116(r148): [117..118]
 a117(r151): [117..118]
 a118(r152): [117..118]
 a119(r256): [117..118]
 a120(r257): [117..118]
 a121(r258): [117..118]
 a122(r71): [119..124]
 a123(r104): [119..124]
 a124(r131): [119..124]
 a125(r146): [119..124]
 a126(r147): [119..124]
 a127(r148): [119..124]
 a128(r149): [119..124]
 a129(r150): [119..124]
 a130(r151): [119..124]
 a131(r152): [119..124]
 a132(r258): [119..124]
 a133(r173): [119..120]
 a134(r75): [121..122]
 a135(r171): [123..124]
    Creating cap  a136(r257,l0: a73(r257,l2))
    Creating cap  a137(r258,l0: a74(r258,l2))
    Creating cap  a138(r72,l0: a75(r72,l2))
    Creating cap  a139(r63,l0: a76(r63,l2))
    Creating cap  a140(r106,l0: a77(r106,l2))
    Creating cap  a141(r254,l0: a78(r254,l2))
    Creating cap  a142(r110,l0: a79(r110,l2))
    Creating cap  a143(r93,l2: a93(r93,l3))
    Creating cap  a144(r84,l2: a94(r84,l3))
    Creating cap  a145(r129,l2: a95(r129,l3))
    Creating cap  a146(r251,l2: a96(r251,l3))
    Creating cap  a147(r248,l2: a97(r248,l3))
    Creating cap  a148(r241,l2: a98(r241,l3))
    Creating cap  a149(r83,l2: a99(r83,l3))
    Creating cap  a150(r242,l2: a100(r242,l3))
    Creating cap  a151(r239,l2: a101(r239,l3))
    Creating cap  a152(r238,l2: a102(r238,l3))
    Creating cap  a153(r235,l2: a103(r235,l3))
    Creating cap  a154(r236,l2: a104(r236,l3))
    Creating cap  a155(r233,l2: a105(r233,l3))
    Creating cap  a156(r173,l0: a133(r173,l1))
    Creating cap  a157(r75,l0: a134(r75,l1))
    Creating cap  a158(r171,l0: a135(r171,l1))
    Creating cap  a159(r93,l0: a143(r93,l2: a93(r93,l3)))
    Creating cap  a160(r84,l0: a144(r84,l2: a94(r84,l3)))
    Creating cap  a161(r129,l0: a145(r129,l2: a95(r129,l3)))
    Creating cap  a162(r251,l0: a146(r251,l2: a96(r251,l3)))
    Creating cap  a163(r248,l0: a147(r248,l2: a97(r248,l3)))
    Creating cap  a164(r241,l0: a148(r241,l2: a98(r241,l3)))
    Creating cap  a165(r83,l0: a149(r83,l2: a99(r83,l3)))
    Creating cap  a166(r242,l0: a150(r242,l2: a100(r242,l3)))
    Creating cap  a167(r239,l0: a151(r239,l2: a101(r239,l3)))
    Creating cap  a168(r238,l0: a152(r238,l2: a102(r238,l3)))
    Creating cap  a169(r235,l0: a153(r235,l2: a103(r235,l3)))
    Creating cap  a170(r236,l0: a154(r236,l2: a104(r236,l3)))
    Creating cap  a171(r233,l0: a155(r233,l2: a105(r233,l3)))
+++Allocating 3192 bytes for conflict table (uncompressed size 4128)
;; a0(r256,l0) conflicts: a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a1(r107,l0) conflicts: a0(r256,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a2(r144,l0) conflicts: a0(r256,l0) a1(r107,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a3(r229,l0) conflicts: a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r151,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a3(r229,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0) a56(r169,l0) a13(r114,l0) a16(r81,l0) a17(r220,l0) a18(r222,l0) a29(r80,l0) a19(r79,l0) a50(r257,l0) a51(r175,l0) a52(r174,l0) a20(r216,l0) a21(r218,l0) a12(r66,l0) a14(r224,l0) a15(r226,l0) a60(r162,l0) a59(r160,l0) a61(r161,l0) a62(r154,l0) a63(r157,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0) a156(r173,l0)
;;     total conflict hard regs: 0-2 4 5 38
;;     conflict hard regs: 0 1 4 5 38

;; a5(r94,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a3(r229,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a6(r147,l0) conflicts: a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0) a56(r169,l0) a13(r114,l0) a16(r81,l0) a17(r220,l0) a18(r222,l0) a29(r80,l0) a19(r79,l0) a50(r257,l0) a51(r175,l0) a52(r174,l0) a20(r216,l0) a21(r218,l0) a12(r66,l0) a14(r224,l0) a15(r226,l0) a60(r162,l0) a59(r160,l0) a61(r161,l0) a62(r154,l0) a63(r157,l0) a156(r173,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a7(r122,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a3(r229,l0) a6(r147,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs:

;; a8(r149,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0) a56(r169,l0) a13(r114,l0) a16(r81,l0) a17(r220,l0) a18(r222,l0) a29(r80,l0) a19(r79,l0) a50(r257,l0) a51(r175,l0) a52(r174,l0) a20(r216,l0) a21(r218,l0) a12(r66,l0) a14(r224,l0) a15(r226,l0) a60(r162,l0) a59(r160,l0) a61(r161,l0) a62(r154,l0) a63(r157,l0) a156(r173,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a9(r71,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a10(r148,l0) a11(r152,l0) a3(r229,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0) a56(r169,l0) a13(r114,l0) a16(r81,l0) a17(r220,l0) a18(r222,l0) a29(r80,l0) a19(r79,l0) a50(r257,l0) a51(r175,l0) a52(r174,l0) a20(r216,l0) a21(r218,l0) a12(r66,l0) a14(r224,l0) a15(r226,l0) a60(r162,l0) a59(r160,l0) a61(r161,l0) a62(r154,l0) a63(r157,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0) a156(r173,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0 1 4 5

;; a10(r148,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a11(r152,l0) a3(r229,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0) a56(r169,l0) a13(r114,l0) a16(r81,l0) a17(r220,l0) a18(r222,l0) a29(r80,l0) a19(r79,l0) a50(r257,l0) a51(r175,l0) a52(r174,l0) a20(r216,l0) a21(r218,l0) a12(r66,l0) a14(r224,l0) a15(r226,l0) a60(r162,l0) a59(r160,l0) a61(r161,l0) a62(r154,l0) a63(r157,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0) a156(r173,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a11(r152,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a3(r229,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0) a56(r169,l0) a13(r114,l0) a16(r81,l0) a17(r220,l0) a18(r222,l0) a29(r80,l0) a19(r79,l0) a50(r257,l0) a51(r175,l0) a52(r174,l0) a20(r216,l0) a21(r218,l0) a12(r66,l0) a14(r224,l0) a15(r226,l0) a60(r162,l0) a59(r160,l0) a61(r161,l0) a62(r154,l0) a63(r157,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a142(r110,l0) a140(r106,l0) a141(r254,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0) a156(r173,l0)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0 1 4 5

;; a12(r66,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r114,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a16(r81,l0) a17(r220,l0) a18(r222,l0) a14(r224,l0) a15(r226,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r224,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a13(r114,l0) a15(r226,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r226,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a13(r114,l0) a14(r224,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a16(r81,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a13(r114,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a17(r220,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a13(r114,l0) a18(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a18(r222,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a13(r114,l0) a17(r220,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a19(r79,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a29(r80,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a20(r216,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a21(r218,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a21(r218,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a20(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a22(r211,l0) conflicts: a23(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r213,l0) conflicts: a22(r211,l0) a24(r212,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a24(r212,l0) conflicts: a25(r191,l0) a23(r213,l0) a26(r214,l0) a27(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a25(r191,l0) conflicts: a30(r205,l0) a31(r207,l0) a28(r185,l0) a32(r206,l0) a33(r208,l0) a34(r204,l0) a45(r187,l0) a46(r189,l0) a47(r188,l0) a48(r190,l0) a40(r193,l0) a41(r195,l0) a42(r194,l0) a43(r196,l0) a44(r192,l0) a35(r199,l0) a36(r201,l0) a37(r200,l0) a38(r202,l0) a39(r198,l0) a24(r212,l0) a26(r214,l0) a27(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r214,l0) conflicts: a25(r191,l0) a24(r212,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a27(r210,l0) conflicts: a25(r191,l0) a28(r185,l0) a24(r212,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a28(r185,l0) conflicts: a30(r205,l0) a31(r207,l0) a25(r191,l0) a32(r206,l0) a33(r208,l0) a34(r204,l0) a45(r187,l0) a46(r189,l0) a47(r188,l0) a48(r190,l0) a49(r186,l0) a40(r193,l0) a41(r195,l0) a42(r194,l0) a43(r196,l0) a44(r192,l0) a35(r199,l0) a36(r201,l0) a37(r200,l0) a38(r202,l0) a39(r198,l0) a27(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a29(r80,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a19(r79,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a30(r205,l0) conflicts: a31(r207,l0) a25(r191,l0) a28(r185,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a31(r207,l0) conflicts: a30(r205,l0) a25(r191,l0) a28(r185,l0) a32(r206,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a32(r206,l0) conflicts: a31(r207,l0) a25(r191,l0) a28(r185,l0) a33(r208,l0) a34(r204,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a33(r208,l0) conflicts: a25(r191,l0) a28(r185,l0) a32(r206,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a34(r204,l0) conflicts: a25(r191,l0) a28(r185,l0) a32(r206,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a35(r199,l0) conflicts: a25(r191,l0) a28(r185,l0) a36(r201,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a36(r201,l0) conflicts: a25(r191,l0) a28(r185,l0) a35(r199,l0) a37(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a37(r200,l0) conflicts: a25(r191,l0) a28(r185,l0) a36(r201,l0) a38(r202,l0) a39(r198,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a38(r202,l0) conflicts: a25(r191,l0) a28(r185,l0) a37(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a39(r198,l0) conflicts: a25(r191,l0) a28(r185,l0) a37(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a40(r193,l0) conflicts: a25(r191,l0) a28(r185,l0) a41(r195,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a41(r195,l0) conflicts: a25(r191,l0) a28(r185,l0) a40(r193,l0) a42(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a42(r194,l0) conflicts: a25(r191,l0) a28(r185,l0) a41(r195,l0) a43(r196,l0) a44(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a43(r196,l0) conflicts: a25(r191,l0) a28(r185,l0) a42(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a44(r192,l0) conflicts: a25(r191,l0) a28(r185,l0) a42(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a45(r187,l0) conflicts: a25(r191,l0) a28(r185,l0) a46(r189,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a46(r189,l0) conflicts: a25(r191,l0) a28(r185,l0) a45(r187,l0) a47(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a47(r188,l0) conflicts: a25(r191,l0) a28(r185,l0) a46(r189,l0) a48(r190,l0) a49(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a48(r190,l0) conflicts: a25(r191,l0) a28(r185,l0) a47(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a49(r186,l0) conflicts: a28(r185,l0) a47(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a50(r257,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a51(r175,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a51(r175,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a50(r257,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a52(r174,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a53(r258,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0) a156(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a54(r104,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a55(r146,l0) a58(r150,l0) a156(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a55(r146,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a58(r150,l0) a156(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a56(r169,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a58(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a57(r131,l0) conflicts: a157(r75,l0) a158(r171,l0)
;;     total conflict hard regs: 21
;;     conflict hard regs:

;; a58(r150,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a56(r169,l0) a60(r162,l0) a59(r160,l0) a61(r161,l0) a62(r154,l0) a63(r157,l0) a156(r173,l0)
;;     total conflict hard regs: 0 1 4 5 37 38
;;     conflict hard regs: 0 1 4 5 37 38

;; a59(r160,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a58(r150,l0) a60(r162,l0) a61(r161,l0) a62(r154,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a60(r162,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a58(r150,l0) a59(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a61(r161,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a58(r150,l0) a59(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a62(r154,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a58(r150,l0) a59(r160,l0) a63(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a63(r157,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a58(r150,l0) a62(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a64(r71,l2) conflicts: a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a65(r94,l2) conflicts: a64(r71,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a66(r107,l2) conflicts: a64(r71,l2) a65(r94,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a67(r122,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a68(r144,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a69(r148,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a70(r151,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a71(r152,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a72(r256,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a79(r110,l2) a77(r106,l2) a78(r254,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0-2 4 5
;;     conflict hard regs: 0-2 4 5

;; a73(r257,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a74(r258,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a75(r72,l2) a76(r63,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a75(r72,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a76(r63,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a76(r63,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a143(r93,l2) a144(r84,l2) a145(r129,l2) a149(r83,l2) a146(r251,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a77(r106,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a78(r254,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a79(r110,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a80(r63,l3) conflicts: a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a81(r71,l3) conflicts: a80(r63,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a82(r72,l3) conflicts: a80(r63,l3) a81(r71,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a83(r94,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a84(r107,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a85(r122,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a86(r144,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a87(r148,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a88(r151,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a89(r152,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a90(r256,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a91(r257,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a92(r258,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a93(r93,l3) a94(r84,l3) a95(r129,l3) a99(r83,l3) a96(r251,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a93(r93,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a95(r129,l3) a97(r248,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a94(r84,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a95(r129,l3) a99(r83,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3) a97(r248,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a95(r129,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a96(r251,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a97(r248,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a93(r93,l3) a94(r84,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a98(r241,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a99(r83,l3) a100(r242,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a99(r83,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a98(r241,l3) a100(r242,l3) a101(r239,l3) a102(r238,l3) a103(r235,l3) a104(r236,l3) a105(r233,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a100(r242,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a99(r83,l3) a98(r241,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a101(r239,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a99(r83,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a102(r238,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a99(r83,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a103(r235,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a99(r83,l3) a104(r236,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a104(r236,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a99(r83,l3) a103(r235,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a105(r233,l3) conflicts: a80(r63,l3) a81(r71,l3) a82(r72,l3) a83(r94,l3) a84(r107,l3) a85(r122,l3) a86(r144,l3) a87(r148,l3) a88(r151,l3) a89(r152,l3) a90(r256,l3) a91(r257,l3) a92(r258,l3) a94(r84,l3) a99(r83,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a106(r63,l4) conflicts: a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a107(r71,l4) conflicts: a106(r63,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a108(r72,l4) conflicts: a106(r63,l4) a107(r71,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a109(r84,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a110(r93,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a111(r94,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a112(r107,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a113(r122,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a114(r129,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a115(r144,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a116(r148,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a117(r151,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a118(r152,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a119(r256,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a119(r256,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a120(r257,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a120(r257,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a121(r258,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a121(r258,l4) conflicts: a106(r63,l4) a107(r71,l4) a108(r72,l4) a109(r84,l4) a110(r93,l4) a111(r94,l4) a112(r107,l4) a113(r122,l4) a114(r129,l4) a115(r144,l4) a116(r148,l4) a117(r151,l4) a118(r152,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a122(r71,l1) conflicts: a133(r173,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a123(r104,l1) conflicts: a133(r173,l1) a122(r71,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a124(r131,l1) conflicts: a134(r75,l1) a135(r171,l1)
;;     total conflict hard regs: 21
;;     conflict hard regs: 21

;; a125(r146,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a126(r147,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a125(r146,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a127(r148,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a128(r149,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a129(r150,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a130(r151,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a131(r152,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a132(r258,l1) conflicts: a133(r173,l1) a122(r71,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a133(r173,l1) conflicts: a122(r71,l1) a123(r104,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r152,l1) a132(r258,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a134(r75,l1) conflicts: a124(r131,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a135(r171,l1) conflicts: a124(r131,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a136(r257,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a137(r258,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a138(r72,l0) a139(r63,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a138(r72,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a139(r63,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a139(r63,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a159(r93,l0) a160(r84,l0) a161(r129,l0) a165(r83,l0) a162(r251,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a140(r106,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a141(r254,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a142(r110,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a143(r93,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a145(r129,l2) a147(r248,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a144(r84,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a143(r93,l2) a145(r129,l2) a149(r83,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2) a147(r248,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a145(r129,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a143(r93,l2) a144(r84,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a146(r251,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a147(r248,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a143(r93,l2) a144(r84,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a148(r241,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a149(r83,l2) a150(r242,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a149(r83,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a148(r241,l2) a150(r242,l2) a151(r239,l2) a152(r238,l2) a153(r235,l2) a154(r236,l2) a155(r233,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a150(r242,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a149(r83,l2) a148(r241,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a151(r239,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a149(r83,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a152(r238,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a149(r83,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a153(r235,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a149(r83,l2) a154(r236,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a154(r236,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a149(r83,l2) a153(r235,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a155(r233,l2) conflicts: a64(r71,l2) a65(r94,l2) a66(r107,l2) a67(r122,l2) a68(r144,l2) a69(r148,l2) a70(r151,l2) a71(r152,l2) a72(r256,l2) a73(r257,l2) a74(r258,l2) a75(r72,l2) a76(r63,l2) a144(r84,l2) a149(r83,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a156(r173,l0) conflicts: a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a6(r147,l0) a8(r149,l0) a53(r258,l0) a54(r104,l0) a55(r146,l0) a58(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a157(r75,l0) conflicts: a57(r131,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a158(r171,l0) conflicts: a57(r131,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a159(r93,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a161(r129,l0) a163(r248,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a160(r84,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a159(r93,l0) a161(r129,l0) a165(r83,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0) a163(r248,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a161(r129,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a159(r93,l0) a160(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a162(r251,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a163(r248,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a159(r93,l0) a160(r84,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a164(r241,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a165(r83,l0) a166(r242,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a165(r83,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a164(r241,l0) a166(r242,l0) a167(r239,l0) a168(r238,l0) a169(r235,l0) a170(r236,l0) a171(r233,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a166(r242,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a165(r83,l0) a164(r241,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a167(r239,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a165(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a168(r238,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a165(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a169(r235,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a165(r83,l0) a170(r236,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a170(r236,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a165(r83,l0) a169(r235,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a171(r233,l0) conflicts: a0(r256,l0) a1(r107,l0) a2(r144,l0) a5(r94,l0) a7(r122,l0) a4(r151,l0) a9(r71,l0) a10(r148,l0) a11(r152,l0) a136(r257,l0) a137(r258,l0) a138(r72,l0) a139(r63,l0) a160(r84,l0) a165(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a7(r122)<->a8(r149)@1:shuffle
  cp1:a5(r94)<->a6(r147)@1:move
  cp2:a14(r224)<->a16(r81)@1:shuffle
  cp3:a12(r66)<->a13(r114)@1:shuffle
  cp4:a13(r114)<->a19(r79)@1:move
  cp5:a12(r66)<->a20(r216)@1:shuffle
  cp6:a24(r212)<->a28(r185)@1:constraint
  cp7:a26(r214)<->a27(r210)@1:constraint
  cp8:a23(r213)<->a26(r214)@1:constraint
  cp9:a23(r213)<->a25(r191)@1:constraint
  cp10:a22(r211)<->a24(r212)@1:shuffle
  cp11:a33(r208)<->a34(r204)@1:constraint
  cp12:a31(r207)<->a33(r208)@1:constraint
  cp13:a30(r205)<->a32(r206)@1:shuffle
  cp14:a38(r202)<->a39(r198)@1:constraint
  cp15:a36(r201)<->a38(r202)@1:constraint
  cp16:a35(r199)<->a37(r200)@1:shuffle
  cp17:a43(r196)<->a44(r192)@1:constraint
  cp18:a41(r195)<->a43(r196)@1:constraint
  cp19:a40(r193)<->a42(r194)@1:shuffle
  cp20:a48(r190)<->a49(r186)@1:constraint
  cp21:a46(r189)<->a48(r190)@1:constraint
  cp22:a45(r187)<->a47(r188)@1:shuffle
  cp23:a51(r175)<->a52(r174)@1:shuffle
  cp24:a61(r161)<->a62(r154)@1:shuffle
  cp25:a60(r162)<->a61(r161)@1:shuffle
  cp26:a78(r254)<->a79(r110)@2:shuffle
  cp27:a94(r84)<->a96(r251)@41:shuffle
  cp28:a101(r239)<->a102(r238)@20:shuffle
  cp29:a100(r242)<->a101(r239)@166:constraint
  cp30:a98(r241)<->a101(r239)@20:shuffle
  cp31:a104(r236)<->a105(r233)@166:constraint
  cp32:a103(r235)<->a105(r233)@20:shuffle
  cp33:a93(r93)<->a99(r83)@166:constraint
  cp34:a133(r173)<->a134(r75)@4:shuffle
  cp35:a141(r254)<->a142(r110)@2:shuffle
  cp36:a144(r84)<->a146(r251)@41:shuffle
  cp37:a151(r239)<->a152(r238)@20:shuffle
  cp38:a150(r242)<->a151(r239)@166:constraint
  cp39:a148(r241)<->a151(r239)@20:shuffle
  cp40:a154(r236)<->a155(r233)@166:constraint
  cp41:a153(r235)<->a155(r233)@20:shuffle
  cp42:a143(r93)<->a149(r83)@166:constraint
  cp43:a156(r173)<->a157(r75)@4:shuffle
  cp44:a160(r84)<->a162(r251)@41:shuffle
  cp45:a167(r239)<->a168(r238)@20:shuffle
  cp46:a166(r242)<->a167(r239)@166:constraint
  cp47:a164(r241)<->a167(r239)@20:shuffle
  cp48:a170(r236)<->a171(r233)@166:constraint
  cp49:a169(r235)<->a171(r233)@20:shuffle
  cp50:a159(r93)<->a165(r83)@166:constraint
  regions=5, blocks=41, points=125
    allocnos=172 (big 0), copies=51, conflicts=8, ranges=152

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 40 24(->38:l2) 23 22 21 20 19 18 17 16 15 14 13 12 11 10 8(->9:l1) 7 6 5 4 3 2
    all: 0r256 1r107 2r144 3r229 4r151 5r94 6r147 7r122 8r149 9r71 10r148 11r152 12r66 13r114 14r224 15r226 16r81 17r220 18r222 19r79 20r216 21r218 22r211 23r213 24r212 25r191 26r214 27r210 28r185 29r80 30r205 31r207 32r206 33r208 34r204 35r199 36r201 37r200 38r202 39r198 40r193 41r195 42r194 43r196 44r192 45r187 46r189 47r188 48r190 49r186 50r257 51r175 52r174 53r258 54r104 55r146 56r169 57r131 58r150 59r160 60r162 61r161 62r154 63r157 136r257 137r258 138r72 139r63 140r106 141r254 142r110 156r173 157r75 158r171 159r93 160r84 161r129 162r251 163r248 164r241 165r83 166r242 167r239 168r238 169r235 170r236 171r233
    modified regnos: 63 66 71 72 75 79 80 81 83 84 93 94 104 106 107 110 114 122 129 131 144 146 147 148 149 150 151 152 154 157 160 161 162 169 171 173 174 175 185 186 187 188 189 190 191 192 193 194 195 196 198 199 200 201 202 204 205 206 207 208 210 211 212 213 214 216 218 220 222 224 226 229 233 235 236 238 239 241 242 248 251 254 256 257 258
    border:
    Pressure: GENERAL_REGS=17 SSE_REGS=4
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@3856
        2:( 0-6 37-44)@20286
          3:( 1-6 37-44)@28848
            4:( 2-6 37-44)@57354
              5:( 3 6 37-44)@10238
                6:( 3 6 39-44)@3122
                  7:( 3 6 41-44)@1286
      Spill a57(r131,l0)
      Allocno a0r256 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a1r107 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a2r144 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a3r229 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a4r151 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 38 45-51)
      Allocno a5r94 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a6r147 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a7r122 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a8r149 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a9r71 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a10r148 of GENERAL_REGS(15) has 8 avail. regs  3 6 39-44, node:  3 6 39-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a11r152 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a12r66 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a13r114 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a14r224 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a15r226 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a16r81 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a17r220 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a18r222 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a19r79 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a20r216 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a21r218 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a22r211 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a23r213 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a24r212 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a25r191 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a26r214 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a27r210 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a28r185 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a29r80 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a30r205 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a31r207 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a32r206 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a33r208 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a34r204 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a35r199 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a36r201 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a37r200 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a38r202 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a39r198 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a40r193 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a41r195 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a42r194 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a43r196 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a44r192 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a45r187 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a46r189 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a47r188 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a48r190 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a49r186 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a50r257 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a51r175 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a52r174 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a53r258 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a54r104 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a55r146 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a56r169 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a58r150 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-38 45-51)
      Allocno a59r160 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a60r162 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a61r161 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a62r154 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a63r157 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a136r257 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a137r258 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a138r72 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a139r63 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a140r106 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a141r254 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a142r110 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a156r173 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a157r75 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a158r171 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a159r93 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a160r84 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a161r129 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a162r251 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a163r248 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a164r241 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a165r83 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a166r242 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a167r239 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a168r238 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a169r235 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a170r236 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a171r233 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a48(r190,l0)(cost 0)
      Pushing a47(r188,l0)(cost 0)
      Pushing a43(r196,l0)(cost 0)
      Pushing a42(r194,l0)(cost 0)
      Pushing a38(r202,l0)(cost 0)
      Pushing a37(r200,l0)(cost 0)
      Pushing a33(r208,l0)(cost 0)
        Making a28(r185,l0) colorable
      Pushing a32(r206,l0)(cost 0)
        Making a25(r191,l0) colorable
      Pushing a26(r214,l0)(cost 0)
      Pushing a24(r212,l0)(cost 0)
      Pushing a63(r157,l0)(cost 0)
      Pushing a61(r161,l0)(cost 0)
      Pushing a60(r162,l0)(cost 0)
      Pushing a56(r169,l0)(cost 0)
      Pushing a52(r174,l0)(cost 0)
      Pushing a51(r175,l0)(cost 0)
      Pushing a21(r218,l0)(cost 0)
      Pushing a18(r222,l0)(cost 0)
      Pushing a15(r226,l0)(cost 0)
      Pushing a3(r229,l0)(cost 0)
      Pushing a59(r160,l0)(cost 0)
      Pushing a50(r257,l0)(cost 0)
      Pushing a49(r186,l0)(cost 0)
      Pushing a44(r192,l0)(cost 0)
      Pushing a39(r198,l0)(cost 0)
      Pushing a34(r204,l0)(cost 0)
      Pushing a27(r210,l0)(cost 0)
      Pushing a20(r216,l0)(cost 0)
      Pushing a19(r79,l0)(cost 0)
      Pushing a17(r220,l0)(cost 0)
      Pushing a16(r81,l0)(cost 0)
      Pushing a14(r224,l0)(cost 0)
      Pushing a12(r66,l0)(cost 0)
      Pushing a46(r189,l0)(cost 0)
      Pushing a45(r187,l0)(cost 0)
      Pushing a41(r195,l0)(cost 0)
      Pushing a40(r193,l0)(cost 0)
      Pushing a36(r201,l0)(cost 0)
      Pushing a35(r199,l0)(cost 0)
      Pushing a31(r207,l0)(cost 0)
      Pushing a30(r205,l0)(cost 0)
      Pushing a23(r213,l0)(cost 0)
      Pushing a22(r211,l0)(cost 0)
      Pushing a62(r154,l0)(cost 0)
      Pushing a25(r191,l0)(cost 43)
      Pushing a29(r80,l0)(cost 0)
      Pushing a13(r114,l0)(cost 0)
      Pushing a28(r185,l0)(cost 52)
      Pushing a142(r110,l0: a79(r110,l2))(cost 0)
      Pushing a141(r254,l0: a78(r254,l2))(cost 0)
      Pushing a140(r106,l0: a77(r106,l2))(cost 0)
      Pushing a158(r171,l0: a135(r171,l1))(cost 0)
      Pushing a157(r75,l0: a134(r75,l1))(cost 0)
      Pushing a156(r173,l0: a133(r173,l1))(cost 0)
      Pushing a54(r104,l0)(cost 0)
      Pushing a170(r236,l0: a154(r236,l2: a104(r236,l3)))(cost 0)
        Making a169(r235,l0: a153(r235,l2: a103(r235,l3))) colorable
      Pushing a166(r242,l0: a150(r242,l2: a100(r242,l3)))(cost 0)
        Making a164(r241,l0: a148(r241,l2: a98(r241,l3))) colorable
      Pushing a163(r248,l0: a147(r248,l2: a97(r248,l3)))(cost 0)
      Pushing a168(r238,l0: a152(r238,l2: a102(r238,l3)))(cost 0)
      Pushing a169(r235,l0: a153(r235,l2: a103(r235,l3)))(cost 1162)
      Pushing a164(r241,l0: a148(r241,l2: a98(r241,l3)))(cost 1328)
      Pushing a171(r233,l0: a155(r233,l2: a105(r233,l3)))(cost 0)
      Pushing a167(r239,l0: a151(r239,l2: a101(r239,l3)))(cost 0)
      Pushing a162(r251,l0: a146(r251,l2: a96(r251,l3)))(cost 0)
      Pushing a161(r129,l0: a145(r129,l2: a95(r129,l3)))(cost 0)
        Making a159(r93,l0: a143(r93,l2: a93(r93,l3))) colorable
      Pushing a159(r93,l0: a143(r93,l2: a93(r93,l3)))(cost 11934)
      Pushing a7(r122,l0)(potential spill: pri=2, cost=52)
      Pushing a9(r71,l0)(potential spill: pri=2, cost=52)
        Making a136(r257,l0: a73(r257,l2)) colorable
        Making a137(r258,l0: a74(r258,l2)) colorable
        Making a138(r72,l0: a75(r72,l2)) colorable
        Making a139(r63,l0: a76(r63,l2)) colorable
        Making a160(r84,l0: a144(r84,l2: a94(r84,l3))) colorable
        Making a165(r83,l0: a149(r83,l2: a99(r83,l3))) colorable
      Pushing a137(r258,l0: a74(r258,l2))(cost 1392)
      Pushing a136(r257,l0: a73(r257,l2))(cost 2724)
      Pushing a139(r63,l0: a76(r63,l2))(cost 3057)
        Making a0(r256,l0) colorable
        Making a1(r107,l0) colorable
        Making a2(r144,l0) colorable
        Making a5(r94,l0) colorable
      Pushing a5(r94,l0)(cost 164)
      Pushing a1(r107,l0)(cost 212)
      Pushing a2(r144,l0)(cost 1003)
      Pushing a0(r256,l0)(cost 2372)
      Pushing a165(r83,l0: a149(r83,l2: a99(r83,l3)))(cost 4489)
        Making a11(r152,l0) colorable
      Pushing a11(r152,l0)(cost 1368)
      Pushing a160(r84,l0: a144(r84,l2: a94(r84,l3)))(cost 4326)
        Making a10(r148,l0) colorable
      Pushing a10(r148,l0)(cost 1561)
        Making a6(r147,l0) colorable
        Making a8(r149,l0) colorable
        Making a53(r258,l0) colorable
        Making a55(r146,l0) colorable
        Making a58(r150,l0) colorable
      Pushing a8(r149,l0)(cost 7)
        Making a4(r151,l0) colorable
      Pushing a6(r147,l0)(cost 7)
      Pushing a58(r150,l0)(cost 136)
      Pushing a55(r146,l0)(cost 103)
      Pushing a53(r258,l0)(cost 136)
      Pushing a4(r151,l0)(cost 150)
      Pushing a138(r72,l0: a75(r72,l2))(cost 11693)
      Popping a138(r72,l0: a75(r72,l2))  -- assign reg 2
      Popping a4(r151,l0)  -- assign reg 3
      Popping a53(r258,l0)  -- assign reg 6
      Popping a55(r146,l0)  -- assign reg 41
      Popping a58(r150,l0)  -- assign reg 42
      Popping a6(r147,l0)  -- assign reg 43
      Popping a8(r149,l0)  -- assign reg 44
      Popping a10(r148,l0)  -- assign reg 39
      Popping a160(r84,l0: a144(r84,l2: a94(r84,l3)))  -- assign reg 4
      Popping a11(r152,l0)  -- assign reg 38
      Popping a165(r83,l0: a149(r83,l2: a99(r83,l3)))  -- assign reg 37
      Popping a0(r256,l0)  -- assign reg 6
      Popping a2(r144,l0)  -- assign reg 41
      Popping a1(r107,l0)  -- assign reg 42
      Popping a5(r94,l0)  -- assign reg 43
      Popping a139(r63,l0: a76(r63,l2))  -- assign reg 5
      Popping a136(r257,l0: a73(r257,l2))  -- assign reg 40
      Popping a137(r258,l0: a74(r258,l2))  -- assign reg 44
      Popping a9(r71,l0)  -- spill
      Popping a7(r122,l0)  -- spill
      Popping a159(r93,l0: a143(r93,l2: a93(r93,l3)))  -- assign reg 37
      Popping a161(r129,l0: a145(r129,l2: a95(r129,l3)))  -- assign reg 0
      Popping a162(r251,l0: a146(r251,l2: a96(r251,l3)))  -- assign reg 4
      Popping a167(r239,l0: a151(r239,l2: a101(r239,l3)))  -- assign reg 0
      Popping a171(r233,l0: a155(r233,l2: a105(r233,l3)))  -- assign reg 0
      Popping a164(r241,l0: a148(r241,l2: a98(r241,l3)))  -- assign reg 1
      Popping a169(r235,l0: a153(r235,l2: a103(r235,l3)))  -- assign reg 1
      Popping a168(r238,l0: a152(r238,l2: a102(r238,l3)))  -- assign reg 0
      Popping a163(r248,l0: a147(r248,l2: a97(r248,l3)))  -- assign reg 0
      Popping a166(r242,l0: a150(r242,l2: a100(r242,l3)))  -- assign reg 0
      Popping a170(r236,l0: a154(r236,l2: a104(r236,l3)))  -- assign reg 0
      Popping a54(r104,l0)  -- assign reg 0
      Popping a156(r173,l0: a133(r173,l1))  -- assign reg 1
      Popping a157(r75,l0: a134(r75,l1))  -- assign reg 21
      Popping a158(r171,l0: a135(r171,l1))  -- assign reg 21
      Popping a140(r106,l0: a77(r106,l2))  -- assign reg 0
      Popping a141(r254,l0: a78(r254,l2))  -- assign reg 0
      Popping a142(r110,l0: a79(r110,l2))  -- assign reg 0
      Popping a28(r185,l0)  -- assign reg 21
      Popping a13(r114,l0)  -- assign reg 0
      Popping a29(r80,l0)  -- assign reg 1
      Popping a25(r191,l0)  -- assign reg 22
      Popping a62(r154,l0)  -- assign reg 0
      Popping a22(r211,l0)  -- assign reg 21
      Popping a23(r213,l0)  -- assign reg 22
      Popping a30(r205,l0)  -- assign reg 23
      Popping a31(r207,l0)  -- assign reg 24
      Popping a35(r199,l0)  -- assign reg 23
      Popping a36(r201,l0)  -- assign reg 24
      Popping a40(r193,l0)  -- assign reg 23
      Popping a41(r195,l0)  -- assign reg 24
      Popping a45(r187,l0)  -- assign reg 23
      Popping a46(r189,l0)  -- assign reg 24
      Popping a12(r66,l0)  -- assign reg 0
      Popping a14(r224,l0)  -- assign reg 1
      Popping a16(r81,l0)  -- assign reg 1
      Popping a17(r220,l0)  -- assign reg 1
      Popping a19(r79,l0)  -- assign reg 0
      Popping a20(r216,l0)  -- assign reg 0
      Popping a27(r210,l0)  -- assign reg 23
      Popping a34(r204,l0)  -- assign reg 24
      Popping a39(r198,l0)  -- assign reg 24
      Popping a44(r192,l0)  -- assign reg 24
      Popping a49(r186,l0)  -- assign reg 22
      Popping a50(r257,l0)  -- assign reg 5
      Popping a59(r160,l0)  -- assign reg 5
      Popping a3(r229,l0)  -- assign reg 0
      Popping a15(r226,l0)  -- assign reg 2
      Popping a18(r222,l0)  -- assign reg 2
      Popping a21(r218,l0)  -- assign reg 1
      Popping a51(r175,l0)  -- assign reg 1
      Popping a52(r174,l0)  -- assign reg 1
      Popping a56(r169,l0)  -- assign reg 0
      Popping a60(r162,l0)  -- assign reg 1
      Popping a61(r161,l0)  -- assign reg 0
      Popping a63(r157,l0)  -- assign reg 1
      Popping a24(r212,l0)  -- assign reg 21
      Popping a26(r214,l0)  -- assign reg 23
      Popping a32(r206,l0)  -- assign reg 23
      Popping a33(r208,l0)  -- assign reg 24
      Popping a37(r200,l0)  -- assign reg 23
      Popping a38(r202,l0)  -- assign reg 24
      Popping a42(r194,l0)  -- assign reg 23
      Popping a43(r196,l0)  -- assign reg 24
      Popping a47(r188,l0)  -- assign reg 23
      Popping a48(r190,l0)  -- assign reg 24
Spilling a4r151 for a10r148
Assigning 3 to a10r148
Spilling a5r94 for a11r152
Spilling a6r147 for a11r152
Assigning 43 to a11r152
Spilling a8r149 for a54r104
Assigning 44 to a54r104
       a6(r147,l0)  -- assign memory
       a8(r149,l0)  -- assign memory
       a4(r151,l0)  -- assign memory
       a5(r94,l0)  -- assign hard reg 38

  Loop 2 (parent 0, header bb38, depth 1)
    bbs: 39(->25:l3) 38 37(->40:l0) 36 32
    all: 64r71 65r94 66r107 67r122 68r144 69r148 70r151 71r152 72r256 73r257 74r258 75r72 76r63 77r106 78r254 79r110 143r93 144r84 145r129 146r251 147r248 148r241 149r83 150r242 151r239 152r238 153r235 154r236 155r233
    modified regnos: 63 72 83 84 93 94 106 107 110 129 233 235 236 238 239 241 242 248 251 254 257 258
    border: 64r71 65r94 66r107 67r122 68r144 69r148 70r151 71r152 72r256
    Pressure: GENERAL_REGS=17
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@18242
          2:( 1-6 37-44)@28848
            3:( 2-6 37-44)@57354
              4:( 3 6 37-44)@13218
                5:( 3 6 41-44)@410
      Allocno a64r71 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a65r94 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a66r107 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a67r122 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a68r144 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a69r148 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a70r151 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a71r152 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a72r256 of GENERAL_REGS(15) has 10 avail. regs  3 6 37-44, node:  3 6 37-44 (confl regs =  0-2 4 5 7-36 45-51)
      Allocno a73r257 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a74r258 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a75r72 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a76r63 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a77r106 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a78r254 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a79r110 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a143r93 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a144r84 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a145r129 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a146r251 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a147r248 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a148r241 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a149r83 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a150r242 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a151r239 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a152r238 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a153r235 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a154r236 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a155r233 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a79(r110,l2)(cost 0)
      Pushing a78(r254,l2)(cost 0)
      Pushing a77(r106,l2)(cost 0)
      Pushing a154(r236,l2: a104(r236,l3))(cost 0)
        Making a153(r235,l2: a103(r235,l3)) colorable
      Pushing a150(r242,l2: a100(r242,l3))(cost 0)
        Making a148(r241,l2: a98(r241,l3)) colorable
      Pushing a147(r248,l2: a97(r248,l3))(cost 0)
      Pushing a152(r238,l2: a102(r238,l3))(cost 0)
      Pushing a153(r235,l2: a103(r235,l3))(cost 1162)
      Pushing a148(r241,l2: a98(r241,l3))(cost 1328)
      Pushing a155(r233,l2: a105(r233,l3))(cost 0)
      Pushing a151(r239,l2: a101(r239,l3))(cost 0)
      Pushing a146(r251,l2: a96(r251,l3))(cost 0)
      Pushing a145(r129,l2: a95(r129,l3))(cost 0)
        Making a143(r93,l2: a93(r93,l3)) colorable
      Pushing a143(r93,l2: a93(r93,l3))(cost 11934)
      Pushing a64(r71,l2)(potential spill: pri=1, cost=32)
      Pushing a67(r122,l2)(potential spill: pri=1, cost=32)
        Making a73(r257,l2) colorable
        Making a74(r258,l2) colorable
        Making a75(r72,l2) colorable
        Making a76(r63,l2) colorable
        Making a144(r84,l2: a94(r84,l3)) colorable
        Making a149(r83,l2: a99(r83,l3)) colorable
      Pushing a74(r258,l2)(cost 1392)
      Pushing a73(r257,l2)(cost 2724)
      Pushing a76(r63,l2)(cost 3057)
        Making a65(r94,l2) colorable
        Making a66(r107,l2) colorable
        Making a68(r144,l2) colorable
        Making a69(r148,l2) colorable
        Making a71(r152,l2) colorable
        Making a72(r256,l2) colorable
      Pushing a65(r94,l2)(cost 172)
      Pushing a66(r107,l2)(cost 224)
      Pushing a71(r152,l2)(cost 1348)
      Pushing a68(r144,l2)(cost 1015)
        Making a70(r151,l2) colorable
      Pushing a70(r151,l2)(cost 93)
      Pushing a72(r256,l2)(cost 2384)
      Pushing a69(r148,l2)(cost 1558)
      Pushing a149(r83,l2: a99(r83,l3))(cost 4489)
      Pushing a144(r84,l2: a94(r84,l3))(cost 4326)
      Pushing a75(r72,l2)(cost 11693)
      Popping a75(r72,l2)  -- assign reg 2
      Popping a144(r84,l2: a94(r84,l3))  -- assign reg 4
      Popping a149(r83,l2: a99(r83,l3))  -- assign reg 37
      Popping a69(r148,l2)  -- assign reg 3
      Popping a72(r256,l2)  -- assign reg 6
      Popping a70(r151,l2)  -- assign reg 44
      Popping a68(r144,l2)  -- assign reg 41
      Popping a71(r152,l2)  -- assign reg 43
      Popping a66(r107,l2)  -- assign reg 42
      Popping a65(r94,l2)  -- assign reg 38
      Popping a76(r63,l2)  -- assign reg 5
      Popping a73(r257,l2)  -- assign reg 39
      Popping a74(r258,l2)  -- assign reg 40
      Popping a67(r122,l2)  -- spill
      Popping a64(r71,l2)  -- spill
      Popping a143(r93,l2: a93(r93,l3))  -- assign reg 37
      Popping a145(r129,l2: a95(r129,l3))  -- assign reg 0
      Popping a146(r251,l2: a96(r251,l3))  -- assign reg 4
      Popping a151(r239,l2: a101(r239,l3))  -- assign reg 0
      Popping a155(r233,l2: a105(r233,l3))  -- assign reg 0
      Popping a148(r241,l2: a98(r241,l3))  -- assign reg 1
      Popping a153(r235,l2: a103(r235,l3))  -- assign reg 1
      Popping a152(r238,l2: a102(r238,l3))  -- assign reg 0
      Popping a147(r248,l2: a97(r248,l3))  -- assign reg 0
      Popping a150(r242,l2: a100(r242,l3))  -- assign reg 0
      Popping a154(r236,l2: a104(r236,l3))  -- assign reg 0
      Popping a77(r106,l2)  -- assign reg 0
      Popping a78(r254,l2)  -- assign reg 0
      Popping a79(r110,l2)  -- assign reg 0
Spilling a70r151 for a65r94
Assigning 44 to a65r94
       a70(r151,l2)  -- assign memory

  Loop 3 (parent 2, header bb25, depth 2)
    bbs: 35 33(->34:l4) 31(->32:l2) 30 29 28 27 26 25
    all: 80r63 81r71 82r72 83r94 84r107 85r122 86r144 87r148 88r151 89r152 90r256 91r257 92r258 93r93 94r84 95r129 96r251 97r248 98r241 99r83 100r242 101r239 102r238 103r235 104r236 105r233
    modified regnos: 63 72 83 84 93 129 233 235 236 238 239 241 242 248 251
    border: 80r63 81r71 82r72 83r94 84r107 85r122 86r144 87r148 88r151 89r152 90r256 91r257 92r258
    Pressure: GENERAL_REGS=17
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@17410
          2:( 1-6 37-44)@28848
            3:( 2-6 37-44)@69164
      Spill a81(r71,l3)
      Spill a85(r122,l3)
      Spill a88(r151,l3)
      Allocno a80r63 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a82r72 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a83r94 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a84r107 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a86r144 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a87r148 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a89r152 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a90r256 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a91r257 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a92r258 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a93r93 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a94r84 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a95r129 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a96r251 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a97r248 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a98r241 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a99r83 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a100r242 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a101r239 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a102r238 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a103r235 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a104r236 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a105r233 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a104(r236,l3)(cost 0)
      Pushing a100(r242,l3)(cost 0)
      Pushing a97(r248,l3)(cost 0)
      Pushing a102(r238,l3)(cost 0)
      Pushing a103(r235,l3)(cost 0)
      Pushing a98(r241,l3)(cost 0)
      Pushing a105(r233,l3)(cost 0)
        Making a99(r83,l3) colorable
      Pushing a101(r239,l3)(cost 0)
      Pushing a96(r251,l3)(cost 0)
      Pushing a99(r83,l3)(cost 4489)
        Making a80(r63,l3) colorable
        Making a82(r72,l3) colorable
        Making a83(r94,l3) colorable
        Making a84(r107,l3) colorable
        Making a86(r144,l3) colorable
        Making a87(r148,l3) colorable
        Making a89(r152,l3) colorable
        Making a90(r256,l3) colorable
        Making a91(r257,l3) colorable
        Making a92(r258,l3) colorable
        Making a94(r84,l3) colorable
      Pushing a84(r107,l3)(cost 240)
      Pushing a83(r94,l3)(cost 240)
      Pushing a92(r258,l3)(cost 1460)
      Pushing a89(r152,l3)(cost 1572)
      Pushing a86(r144,l3)(cost 1239)
      Pushing a90(r256,l3)(cost 2560)
      Pushing a91(r257,l3)(cost 2792)
      Pushing a87(r148,l3)(cost 1734)
      Pushing a80(r63,l3)(cost 3125)
      Pushing a94(r84,l3)(cost 4326)
      Pushing a95(r129,l3)(cost 0)
      Pushing a82(r72,l3)(cost 11761)
      Pushing a93(r93,l3)(cost 0)
      Popping a93(r93,l3)  -- assign reg 1
      Popping a82(r72,l3)  -- assign reg 2
      Popping a95(r129,l3)  -- assign reg 0
      Popping a94(r84,l3)  -- assign reg 4
      Popping a80(r63,l3)  -- assign reg 5
      Popping a87(r148,l3)  -- assign reg 3
      Popping a91(r257,l3)  -- assign reg 39
      Popping a90(r256,l3)  -- assign reg 6
      Popping a86(r144,l3)  -- assign reg 41
      Popping a89(r152,l3)  -- assign reg 43
      Popping a92(r258,l3)  -- assign reg 40
      Popping a83(r94,l3)  -- assign reg 44
      Popping a84(r107,l3)  -- assign reg 42
      Popping a99(r83,l3)  -- assign reg 37
      Popping a96(r251,l3)  -- assign reg 4
      Popping a101(r239,l3)  -- assign reg 0
      Popping a105(r233,l3)  -- assign reg 0
      Popping a98(r241,l3)  -- assign reg 1
      Popping a103(r235,l3)  -- assign reg 1
      Popping a102(r238,l3)  -- assign reg 0
      Popping a97(r248,l3)  -- assign reg 0
      Popping a100(r242,l3)  -- assign reg 0
      Popping a104(r236,l3)  -- assign reg 0

  Loop 4 (parent 3, header bb34, depth 3)
    bbs: 34(->35:l3)
    all: 106r63 107r71 108r72 109r84 110r93 111r94 112r107 113r122 114r129 115r144 116r148 117r151 118r152 119r256 120r257 121r258
    modified regnos: 93
    border: 106r63 107r71 108r72 109r84 110r93 111r94 112r107 113r122 114r129 115r144 116r148 117r151 118r152 119r256 120r257 121r258
    Pressure: GENERAL_REGS=16
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@16380
      Spill a107(r71,l4)
      Spill a113(r122,l4)
      Spill a117(r151,l4)
      Allocno a106r63 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a108r72 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a109r84 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a110r93 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a111r94 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a112r107 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a114r129 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a115r144 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a116r148 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a118r152 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a119r256 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a120r257 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a121r258 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a121(r258,l4)(cost 0)
      Pushing a120(r257,l4)(cost 0)
      Pushing a119(r256,l4)(cost 0)
      Pushing a118(r152,l4)(cost 0)
      Pushing a116(r148,l4)(cost 0)
      Pushing a115(r144,l4)(cost 0)
      Pushing a112(r107,l4)(cost 0)
      Pushing a111(r94,l4)(cost 0)
      Pushing a109(r84,l4)(cost 0)
      Pushing a108(r72,l4)(cost 0)
      Pushing a106(r63,l4)(cost 0)
      Pushing a114(r129,l4)(cost 0)
      Pushing a110(r93,l4)(cost 0)
      Popping a110(r93,l4)  -- assign reg 1
      Popping a114(r129,l4)  -- assign reg 0
      Popping a106(r63,l4)  -- assign reg 5
      Popping a108(r72,l4)  -- assign reg 2
      Popping a109(r84,l4)  -- assign reg 4
      Popping a111(r94,l4)  -- assign reg 44
      Popping a112(r107,l4)  -- assign reg 42
      Popping a115(r144,l4)  -- assign reg 41
      Popping a116(r148,l4)  -- assign reg 3
      Popping a118(r152,l4)  -- assign reg 43
      Popping a119(r256,l4)  -- assign reg 6
      Popping a120(r257,l4)  -- assign reg 39
      Popping a121(r258,l4)  -- assign reg 40

  Loop 1 (parent 0, header bb9, depth 1)
    bbs: 9(->10:l0)
    all: 122r71 123r104 124r131 125r146 126r147 127r148 128r149 129r150 130r151 131r152 132r258 133r173 134r75 135r171
    modified regnos: 75 104 171 173
    border: 122r71 123r104 124r131 125r146 126r147 127r148 128r149 129r150 130r151 131r152 132r258
    Pressure: GENERAL_REGS=11 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@1650
          2:( 3 6 41-44)@726
      Spill a122(r71,l1)
      Spill a126(r147,l1)
      Spill a128(r149,l1)
      Spill a130(r151,l1)
      Allocno a123r104 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a125r146 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a127r148 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a129r150 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a131r152 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a132r258 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a133r173 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a133(r173,l1)(cost 0)
        Making a125(r146,l1) colorable
        Making a127(r148,l1) colorable
        Making a129(r150,l1) colorable
        Making a131(r152,l1) colorable
        Making a132(r258,l1) colorable
      Pushing a131(r152,l1)(cost 16)
      Pushing a127(r148,l1)(cost 16)
      Pushing a132(r258,l1)(cost 148)
      Pushing a129(r150,l1)(cost 148)
      Pushing a125(r146,l1)(cost 115)
      Pushing a123(r104,l1)(cost 0)
      Popping a123(r104,l1)  -- assign reg 44
      Popping a125(r146,l1)  -- assign reg 41
      Popping a129(r150,l1)  -- assign reg 42
      Popping a132(r258,l1)  -- assign reg 6
      Popping a127(r148,l1)  -- assign reg 3
      Popping a131(r152,l1)  -- assign reg 43
      Popping a133(r173,l1)  -- assign reg 0
Disposition:
  106:r63  l4     5   80:r63  l3     5   76:r63  l2     5   12:r66  l0     0
  122:r71  l1   mem  107:r71  l4   mem   81:r71  l3   mem   64:r71  l2   mem
    9:r71  l0   mem  108:r72  l4     2   82:r72  l3     2   75:r72  l2     2
  134:r75  l1    21   19:r79  l0     0   29:r80  l0     1   16:r81  l0     1
   99:r83  l3    37  109:r84  l4     4   94:r84  l3     4  110:r93  l4     1
   93:r93  l3     1  111:r94  l4    44   83:r94  l3    44   65:r94  l2    44
    5:r94  l0    38  123:r104 l1    44   54:r104 l0    44   77:r106 l2     0
  112:r107 l4    42   84:r107 l3    42   66:r107 l2    42    1:r107 l0    42
   79:r110 l2     0   13:r114 l0     0  113:r122 l4   mem   85:r122 l3   mem
   67:r122 l2   mem    7:r122 l0   mem  114:r129 l4     0   95:r129 l3     0
  124:r131 l1   mem   57:r131 l0   mem  115:r144 l4    41   86:r144 l3    41
   68:r144 l2    41    2:r144 l0    41  125:r146 l1    41   55:r146 l0    41
  126:r147 l1   mem    6:r147 l0   mem  127:r148 l1     3  116:r148 l4     3
   87:r148 l3     3   69:r148 l2     3   10:r148 l0     3  128:r149 l1   mem
    8:r149 l0   mem  129:r150 l1    42   58:r150 l0    42  130:r151 l1   mem
  117:r151 l4   mem   88:r151 l3   mem   70:r151 l2   mem    4:r151 l0   mem
  131:r152 l1    43  118:r152 l4    43   89:r152 l3    43   71:r152 l2    43
   11:r152 l0    43   62:r154 l0     0   63:r157 l0     1   59:r160 l0     5
   61:r161 l0     0   60:r162 l0     1   56:r169 l0     0  135:r171 l1    21
  133:r173 l1     0   52:r174 l0     1   51:r175 l0     1   28:r185 l0    21
   49:r186 l0    22   45:r187 l0    23   47:r188 l0    23   46:r189 l0    24
   48:r190 l0    24   25:r191 l0    22   44:r192 l0    24   40:r193 l0    23
   42:r194 l0    23   41:r195 l0    24   43:r196 l0    24   39:r198 l0    24
   35:r199 l0    23   37:r200 l0    23   36:r201 l0    24   38:r202 l0    24
   34:r204 l0    24   30:r205 l0    23   32:r206 l0    23   31:r207 l0    24
   33:r208 l0    24   27:r210 l0    23   22:r211 l0    21   24:r212 l0    21
   23:r213 l0    22   26:r214 l0    23   20:r216 l0     0   21:r218 l0     1
   17:r220 l0     1   18:r222 l0     2   14:r224 l0     1   15:r226 l0     2
    3:r229 l0     0  105:r233 l3     0  103:r235 l3     1  104:r236 l3     0
  102:r238 l3     0  101:r239 l3     0   98:r241 l3     1  100:r242 l3     0
   97:r248 l3     0   96:r251 l3     4   78:r254 l2     0  119:r256 l4     6
   90:r256 l3     6   72:r256 l2     6    0:r256 l0     6  120:r257 l4    39
   91:r257 l3    39   73:r257 l2    39   50:r257 l0     5  132:r258 l1     6
  121:r258 l4    40   92:r258 l3    40   74:r258 l2    40   53:r258 l0     6
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb38)
  44 vs parent 38:      Creating newreg=259 from oldreg=94
  42 vs parent 42:      Creating newreg=260 from oldreg=107
  41 vs parent 41:      Creating newreg=261 from oldreg=144
  3 vs parent 3:      Creating newreg=262 from oldreg=148
  43 vs parent 43:      Creating newreg=263 from oldreg=152
  6 vs parent 6:      Creating newreg=264 from oldreg=256
      Creating newreg=265 from oldreg=257
      Creating newreg=266 from oldreg=258
rescanning insn with uid = 373.
deleting insn with uid = 373.
rescanning insn with uid = 374.
deleting insn with uid = 374.
rescanning insn with uid = 343.
deleting insn with uid = 343.
rescanning insn with uid = 325.
deleting insn with uid = 325.
rescanning insn with uid = 330.
deleting insn with uid = 330.
rescanning insn with uid = 332.
deleting insn with uid = 332.
rescanning insn with uid = 333.
deleting insn with uid = 333.
rescanning insn with uid = 334.
deleting insn with uid = 334.
rescanning insn with uid = 336.
deleting insn with uid = 336.
rescanning insn with uid = 337.
deleting insn with uid = 337.
rescanning insn with uid = 338.
deleting insn with uid = 338.
      Changing RTL for loop 3 (header bb25)
  5 vs parent 5:      Creating newreg=267 from oldreg=63
  2 vs parent 2:      Creating newreg=268 from oldreg=72
  44 vs parent 44:      Creating newreg=269 from oldreg=259
  42 vs parent 42:      Creating newreg=270 from oldreg=260
  41 vs parent 41:      Creating newreg=271 from oldreg=261
  3 vs parent 3:      Creating newreg=272 from oldreg=262
  43 vs parent 43:      Creating newreg=273 from oldreg=263
  6 vs parent 6:      Creating newreg=274 from oldreg=264
  39 vs parent 39:      Creating newreg=275 from oldreg=265
  40 vs parent 40:      Creating newreg=276 from oldreg=266
rescanning insn with uid = 313.
deleting insn with uid = 313.
rescanning insn with uid = 306.
deleting insn with uid = 306.
rescanning insn with uid = 291.
deleting insn with uid = 291.
rescanning insn with uid = 292.
deleting insn with uid = 292.
rescanning insn with uid = 295.
deleting insn with uid = 295.
rescanning insn with uid = 296.
deleting insn with uid = 296.
rescanning insn with uid = 298.
deleting insn with uid = 298.
rescanning insn with uid = 282.
deleting insn with uid = 282.
rescanning insn with uid = 284.
deleting insn with uid = 284.
rescanning insn with uid = 276.
deleting insn with uid = 276.
rescanning insn with uid = 277.
deleting insn with uid = 277.
rescanning insn with uid = 270.
deleting insn with uid = 270.
rescanning insn with uid = 272.
deleting insn with uid = 272.
rescanning insn with uid = 261.
deleting insn with uid = 261.
rescanning insn with uid = 254.
deleting insn with uid = 254.
rescanning insn with uid = 256.
deleting insn with uid = 256.
      Changing RTL for loop 4 (header bb34)
  5 vs parent 5:      Creating newreg=277 from oldreg=267
  2 vs parent 2:      Creating newreg=278 from oldreg=268
  4 vs parent 4:      Creating newreg=279 from oldreg=84
  1 vs parent 1:      Creating newreg=280 from oldreg=93
  44 vs parent 44:      Creating newreg=281 from oldreg=269
  42 vs parent 42:      Creating newreg=282 from oldreg=270
  0 vs parent 0:      Creating newreg=283 from oldreg=129
  41 vs parent 41:      Creating newreg=284 from oldreg=271
  3 vs parent 3:      Creating newreg=285 from oldreg=272
  43 vs parent 43:      Creating newreg=286 from oldreg=273
  6 vs parent 6:      Creating newreg=287 from oldreg=274
  39 vs parent 39:      Creating newreg=288 from oldreg=275
  40 vs parent 40:      Creating newreg=289 from oldreg=276
rescanning insn with uid = 309.
deleting insn with uid = 309.
      Changing RTL for loop 1 (header bb9)
  44 vs parent 44:      Creating newreg=290 from oldreg=104
  41 vs parent 41:      Creating newreg=291 from oldreg=146
  3 vs parent 3:      Creating newreg=292 from oldreg=148
  42 vs parent 42:      Creating newreg=293 from oldreg=150
  43 vs parent 43:      Creating newreg=294 from oldreg=152
  6 vs parent 6:      Creating newreg=295 from oldreg=258
rescanning insn with uid = 77.
deleting insn with uid = 77.
rescanning insn with uid = 82.
deleting insn with uid = 82.
rescanning insn with uid = 83.
deleting insn with uid = 83.
rescanning insn with uid = 86.
deleting insn with uid = 86.
rescanning insn with uid = 87.
deleting insn with uid = 87.
scanning new insn with uid = 405.
scanning new insn with uid = 406.
scanning new insn with uid = 407.
scanning new insn with uid = 408.
scanning new insn with uid = 409.
scanning new insn with uid = 410.
scanning new insn with uid = 411.
scanning new insn with uid = 412.
scanning new insn with uid = 419.
scanning new insn with uid = 420.
scanning new insn with uid = 421.
scanning new insn with uid = 422.
scanning new insn with uid = 423.
scanning new insn with uid = 424.
scanning new insn with uid = 425.
scanning new insn with uid = 426.
scanning new insn with uid = 427.
scanning new insn with uid = 428.
scanning new insn with uid = 429.
scanning new insn with uid = 430.
scanning new insn with uid = 431.
scanning new insn with uid = 432.
scanning new insn with uid = 433.
scanning new insn with uid = 434.
scanning new insn with uid = 435.
scanning new insn with uid = 436.
scanning new insn with uid = 437.
scanning new insn with uid = 438.
scanning new insn with uid = 439.
scanning new insn with uid = 440.
scanning new insn with uid = 441.
scanning new insn with uid = 442.
scanning new insn with uid = 443.
scanning new insn with uid = 444.
scanning new insn with uid = 445.
scanning new insn with uid = 446.
scanning new insn with uid = 447.
scanning new insn with uid = 448.
scanning new insn with uid = 449.
    Adding cp51:a54r104-a123r290
    Adding range [126..126] to allocno a54r104
    Adding cp52:a55r146-a125r291
    Adding range [126..128] to allocno a55r146
    Adding cp53:a10r148-a127r292
    Adding range [126..130] to allocno a10r148
    Adding cp54:a58r150-a129r293
    Adding range [126..132] to allocno a58r150
    Adding cp55:a11r152-a131r294
    Adding range [126..134] to allocno a11r152
    Adding cp56:a53r258-a132r295
    Adding range [126..136] to allocno a53r258
    Adding range [127..137] to allocno a123r290
    Adding range [129..137] to allocno a125r291
    Adding range [131..137] to allocno a127r292
    Adding range [133..137] to allocno a129r293
    Adding range [135..137] to allocno a131r294
    Adding range [137..137] to allocno a132r295
    Adding range [126..137] to live through  allocno a9r71
    Adding range [126..137] to live through  allocno a57r131
    Adding range [126..137] to live through  allocno a6r147
    Adding range [126..137] to live through  allocno a8r149
    Adding range [126..137] to live through  allocno a4r151
    Adding cp57:a10r148-a127r292
    Adding range [139..139] to allocno a127r292
    Adding cp58:a11r152-a131r294
    Adding range [139..141] to allocno a131r294
    Adding range [140..142] to allocno a10r148
    Adding range [142..142] to allocno a11r152
    Adding range [139..142] to live through  allocno a9r71
    Adding range [139..142] to live through  allocno a6r147
    Adding range [139..142] to live through  allocno a8r149
    Adding range [139..142] to live through  allocno a4r151
    Adding cp59:a5r94-a65r259
    Adding range [144..144] to allocno a5r94
    Adding cp60:a1r107-a66r260
    Adding range [144..146] to allocno a1r107
    Adding cp61:a2r144-a68r261
    Adding range [144..148] to allocno a2r144
    Adding cp62:a10r148-a69r262
    Adding range [144..150] to allocno a10r148
    Adding cp63:a11r152-a71r263
    Adding range [144..152] to allocno a11r152
    Adding cp64:a0r256-a72r264
    Adding range [144..154] to allocno a0r256
    Adding range [145..155] to allocno a65r259
    Adding range [147..155] to allocno a66r260
    Adding range [149..155] to allocno a68r261
    Adding range [151..155] to allocno a69r262
    Adding range [153..155] to allocno a71r263
    Adding range [155..155] to allocno a72r264
    Adding range [144..155] to live through  allocno a9r71
    Adding range [144..155] to live through  allocno a7r122
    Adding range [144..155] to live through  allocno a4r151
    Adding cp65:a65r259-a83r269
    Adding range [157..157] to allocno a83r269
    Adding cp66:a66r260-a84r270
    Adding range [157..159] to allocno a84r270
    Adding cp67:a68r261-a86r271
    Adding range [157..161] to allocno a86r271
    Adding cp68:a69r262-a87r272
    Adding range [157..163] to allocno a87r272
    Adding cp69:a71r263-a89r273
    Adding range [157..165] to allocno a89r273
    Adding cp70:a72r264-a90r274
    Adding range [157..167] to allocno a90r274
    Adding range [158..168] to allocno a65r259
    Adding range [160..168] to allocno a66r260
    Adding range [162..168] to allocno a68r261
    Adding range [164..168] to allocno a69r262
    Adding range [166..168] to allocno a71r263
    Adding range [168..168] to allocno a72r264
    Adding range [157..168] to live through  allocno a64r71
    Adding range [157..168] to live through  allocno a67r122
    Adding range [157..168] to live through  allocno a70r151
    Adding cp71:a80r267-a106r277
    Adding range [170..170] to allocno a80r267
    Adding cp72:a82r268-a108r278
    Adding range [170..172] to allocno a82r268
    Adding cp73:a94r84-a109r279
    Adding range [170..174] to allocno a94r84
    Adding cp74:a93r93-a110r280
    Adding range [170..176] to allocno a93r93
    Adding cp75:a83r269-a111r281
    Adding range [170..178] to allocno a83r269
    Adding cp76:a84r270-a112r282
    Adding range [170..180] to allocno a84r270
    Adding cp77:a95r129-a114r283
    Adding range [170..182] to allocno a95r129
    Adding cp78:a86r271-a115r284
    Adding range [170..184] to allocno a86r271
    Adding cp79:a87r272-a116r285
    Adding range [170..186] to allocno a87r272
    Adding cp80:a89r273-a118r286
    Adding range [170..188] to allocno a89r273
    Adding cp81:a90r274-a119r287
    Adding range [170..190] to allocno a90r274
    Adding cp82:a91r275-a120r288
    Adding range [170..192] to allocno a91r275
    Adding cp83:a92r276-a121r289
    Adding range [170..194] to allocno a92r276
    Adding range [171..195] to allocno a106r277
    Adding range [173..195] to allocno a108r278
    Adding range [175..195] to allocno a109r279
    Adding range [177..195] to allocno a110r280
    Adding range [179..195] to allocno a111r281
    Adding range [181..195] to allocno a112r282
    Adding range [183..195] to allocno a114r283
    Adding range [185..195] to allocno a115r284
    Adding range [187..195] to allocno a116r285
    Adding range [189..195] to allocno a118r286
    Adding range [191..195] to allocno a119r287
    Adding range [193..195] to allocno a120r288
    Adding range [195..195] to allocno a121r289
    Adding range [170..195] to live through  allocno a81r71
    Adding range [170..195] to live through  allocno a85r122
    Adding range [170..195] to live through  allocno a88r151
    Adding cp84:a80r267-a106r277
    Adding range [197..197] to allocno a106r277
    Adding cp85:a82r268-a108r278
    Adding range [197..199] to allocno a108r278
    Adding cp86:a94r84-a109r279
    Adding range [197..201] to allocno a109r279
    Adding cp87:a93r93-a110r280
    Adding range [197..203] to allocno a110r280
    Adding cp88:a83r269-a111r281
    Adding range [197..205] to allocno a111r281
    Adding cp89:a84r270-a112r282
    Adding range [197..207] to allocno a112r282
    Adding cp90:a86r271-a115r284
    Adding range [197..209] to allocno a115r284
    Adding cp91:a87r272-a116r285
    Adding range [197..211] to allocno a116r285
    Adding cp92:a89r273-a118r286
    Adding range [197..213] to allocno a118r286
    Adding cp93:a90r274-a119r287
    Adding range [197..215] to allocno a119r287
    Adding cp94:a91r275-a120r288
    Adding range [197..217] to allocno a120r288
    Adding cp95:a92r276-a121r289
    Adding range [197..219] to allocno a121r289
    Adding range [198..220] to allocno a80r267
    Adding range [200..220] to allocno a82r268
    Adding range [202..220] to allocno a94r84
    Adding range [204..220] to allocno a93r93
    Adding range [206..220] to allocno a83r269
    Adding range [208..220] to allocno a84r270
    Adding range [210..220] to allocno a86r271
    Adding range [212..220] to allocno a87r272
    Adding range [214..220] to allocno a89r273
    Adding range [216..220] to allocno a90r274
    Adding range [218..220] to allocno a91r275
    Adding range [220..220] to allocno a92r276
    Adding range [197..220] to live through  allocno a81r71
    Adding range [197..220] to live through  allocno a85r122
    Adding range [197..220] to live through  allocno a88r151
    Adding cp96:a76r63-a80r267
    Adding range [222..222] to allocno a76r63
    Adding cp97:a75r72-a82r268
    Adding range [222..224] to allocno a75r72
    Adding cp98:a65r259-a83r269
    Adding range [222..226] to allocno a65r259
    Adding cp99:a66r260-a84r270
    Adding range [222..228] to allocno a66r260
    Adding cp100:a68r261-a86r271
    Adding range [222..230] to allocno a68r261
    Adding cp101:a69r262-a87r272
    Adding range [222..232] to allocno a69r262
    Adding cp102:a71r263-a89r273
    Adding range [222..234] to allocno a71r263
    Adding cp103:a72r264-a90r274
    Adding range [222..236] to allocno a72r264
    Adding cp104:a73r265-a91r275
    Adding range [222..238] to allocno a73r265
    Adding cp105:a74r266-a92r276
    Adding range [222..240] to allocno a74r266
    Adding range [223..241] to allocno a80r267
    Adding range [225..241] to allocno a82r268
    Adding range [227..241] to allocno a83r269
    Adding range [229..241] to allocno a84r270
    Adding range [231..241] to allocno a86r271
    Adding range [233..241] to allocno a87r272
    Adding range [235..241] to allocno a89r273
    Adding range [237..241] to allocno a90r274
    Adding range [239..241] to allocno a91r275
    Adding range [241..241] to allocno a92r276
    Adding range [222..241] to live through  allocno a64r71
    Adding range [222..241] to live through  allocno a67r122
    Adding range [222..241] to live through  allocno a70r151
scanning new insn with uid = 413.
scanning new insn with uid = 414.
scanning new insn with uid = 415.
scanning new insn with uid = 416.
scanning new insn with uid = 417.
scanning new insn with uid = 418.
scanning new insn with uid = 450.
scanning new insn with uid = 451.
scanning new insn with uid = 452.
scanning new insn with uid = 453.
scanning new insn with uid = 454.
scanning new insn with uid = 455.
scanning new insn with uid = 456.
scanning new insn with uid = 457.
scanning new insn with uid = 458.
scanning new insn with uid = 459.
    New r259: setting preferred GENERAL_REGS, alternative NO_REGS
    New r260: setting preferred GENERAL_REGS, alternative NO_REGS
    New r261: setting preferred GENERAL_REGS, alternative NO_REGS
    New r262: setting preferred SIREG, alternative GENERAL_REGS
    New r263: setting preferred GENERAL_REGS, alternative NO_REGS
    New r264: setting preferred GENERAL_REGS, alternative NO_REGS
    New r265: setting preferred DIREG, alternative GENERAL_REGS
    New r266: setting preferred GENERAL_REGS, alternative NO_REGS
    New r267: setting preferred GENERAL_REGS, alternative NO_REGS
    New r268: setting preferred GENERAL_REGS, alternative NO_REGS
    New r269: setting preferred GENERAL_REGS, alternative NO_REGS
    New r270: setting preferred GENERAL_REGS, alternative NO_REGS
    New r271: setting preferred GENERAL_REGS, alternative NO_REGS
    New r272: setting preferred SIREG, alternative GENERAL_REGS
    New r273: setting preferred GENERAL_REGS, alternative NO_REGS
    New r274: setting preferred GENERAL_REGS, alternative NO_REGS
    New r275: setting preferred DIREG, alternative GENERAL_REGS
    New r276: setting preferred GENERAL_REGS, alternative NO_REGS
    New r277: setting preferred GENERAL_REGS, alternative NO_REGS
    New r278: setting preferred GENERAL_REGS, alternative NO_REGS
    New r279: setting preferred GENERAL_REGS, alternative NO_REGS
    New r280: setting preferred GENERAL_REGS, alternative NO_REGS
    New r281: setting preferred GENERAL_REGS, alternative NO_REGS
    New r282: setting preferred GENERAL_REGS, alternative NO_REGS
    New r283: setting preferred GENERAL_REGS, alternative NO_REGS
    New r284: setting preferred GENERAL_REGS, alternative NO_REGS
    New r285: setting preferred SIREG, alternative GENERAL_REGS
    New r286: setting preferred GENERAL_REGS, alternative NO_REGS
    New r287: setting preferred GENERAL_REGS, alternative NO_REGS
    New r288: setting preferred DIREG, alternative GENERAL_REGS
    New r289: setting preferred GENERAL_REGS, alternative NO_REGS
    New r290: setting preferred GENERAL_REGS, alternative NO_REGS
    New r291: setting preferred GENERAL_REGS, alternative NO_REGS
    New r292: setting preferred SIREG, alternative GENERAL_REGS
    New r293: setting preferred CREG, alternative GENERAL_REGS
    New r294: setting preferred GENERAL_REGS, alternative NO_REGS
    New r295: setting preferred GENERAL_REGS, alternative NO_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 41 n_edges 60 count 48 (  1.2)
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
;;
;; Loop 2
;;  header 38, latch 37
;;  depth 1, outer 0
;;  nodes: 38 37 36 32 31 30 35 34 33 28 29 27 26 25 39
;;
;; Loop 3
;;  header 25, latch 31
;;  depth 2, outer 2
;;  nodes: 25 31 30 35 34 33 28 29 27 26
;;
;; Loop 4
;;  header 34, latch 34
;;  depth 3, outer 3
;;  nodes: 34
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 24 7 }
;; 7 succs { 40 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 20 11 }
;; 11 succs { 12 20 }
;; 12 succs { 13 18 }
;; 13 succs { 14 18 }
;; 14 succs { 15 18 }
;; 15 succs { 16 18 }
;; 16 succs { 18 }
;; 17 succs { 6 }
;; 18 succs { 21 19 }
;; 19 succs { 6 }
;; 20 succs { 21 }
;; 21 succs { 22 6 }
;; 22 succs { 17 23 }
;; 23 succs { 6 }
;; 24 succs { 38 }
;; 25 succs { 26 27 }
;; 26 succs { 28 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 33 31 }
;; 31 succs { 25 32 }
;; 32 succs { 37 }
;; 33 succs { 34 }
;; 34 succs { 34 35 }
;; 35 succs { 31 }
;; 36 succs { 37 }
;; 37 succs { 38 40 }
;; 38 succs { 39 36 }
;; 39 succs { 25 }
;; 40 succs { 1 }
+++Costs: overall 11936, reg 10793, mem 1143, ld 0, st 0, move 4558
+++       move loops 0, new jumps 2


void tileswrap(int*, int, int, float*, int, int*, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={5d,1u} r1={8d,4u} r2={6d,2u} r4={8d,4u} r5={8d,4u} r6={1d,40u} r7={1d,44u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,41u,1e} r17={48d,20u} r18={4d} r19={4d} r20={1d,58u,10e} r21={6d,2u} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,1u} r38={5d,1u} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r63={1d,1u} r66={1d,2u} r71={1d,2u} r72={1d,1u} r75={1d,1u} r79={1d,2u} r80={1d,5u} r81={1d,4u} r83={1d,5u} r84={2d,5u} r93={5d,8u} r94={1d,1u} r104={1d,1u} r106={1d,1u} r107={1d,1u} r110={2d,1u} r114={2d,6u} r122={1d,1u} r129={1d,1u} r131={1d,1u} r144={1d,1u} r146={1d,1u} r147={1d,1u} r148={2d,8u} r149={1d,1u} r150={1d,1u} r151={1d,13u} r152={2d,10u} r154={1d,3u} r157={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r169={1d,1u} r171={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r185={1d,6u} r186={1d,2u} r187={2d,2u} r188={1d,1u} r189={2d,2u} r190={1d,1u} r191={1d,5u} r192={1d,2u} r193={2d,2u} r194={1d,1u} r195={2d,2u} r196={1d,1u} r198={1d,2u} r199={2d,2u} r200={1d,1u} r201={2d,2u} r202={1d,1u} r204={1d,2u} r205={2d,2u} r206={1d,1u} r207={2d,2u} r208={1d,1u} r210={1d,2u} r211={2d,2u} r212={1d,1u} r213={2d,2u} r214={1d,1u} r216={1d,2u,1e} r218={1d,1u} r220={1d,2u,1e} r222={1d,1u} r224={1d,2u,1e} r226={1d,1u} r229={1d,1u} r233={1d,2u} r235={1d,1u} r236={1d} r238={1d,1u} r239={1d,2u} r241={1d,1u} r242={1d} r248={1d} r251={1d,1u} r254={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={3d,3u,1e} r260={3d,6u} r261={2d,1u} r262={2d,2u} r263={2d,1u} r264={2d,2u} r265={1d,1u} r266={1d,1u} r267={3d,3u} r268={3d,13u,1e} r269={2d,2u} r270={2d,2u} r271={2d,3u} r272={2d,7u} r273={2d,3u} r274={2d,5u} r275={2d,3u,1e} r276={2d,2u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={2d,3u} r281={1d,1u} r282={1d,1u} r283={1d,2u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={2d,4u,1e} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u,1e} 
;;    total ref usage 910{413d,478u,19e} in 270{266 regular + 4 call} insns.
(note 3 0 21 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 71 147 148 149 150 151 152 154
(note 21 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 4 21 5 2 (set (reg/v/f:DI 147 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:439 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SI 148 [ num_tilings ])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:439 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 149 [ memory_size ])
        (reg:SI 1 dx [ memory_size ])) tiles.cpp:439 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory_size ])
        (nil)))
(insn 7 6 8 2 (set (reg/v/f:DI 150 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:439 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn 8 7 9 2 (set (reg/v:SI 151 [ num_floats ])
        (reg:SI 37 r8 [ num_floats ])) tiles.cpp:439 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ num_floats ])
        (nil)))
(insn 9 8 11 2 (set (reg/v/f:DI 152 [ wrap_widths ])
        (reg:DI 38 r9 [ wrap_widths ])) tiles.cpp:439 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ wrap_widths ])
        (nil)))
(insn 11 9 12 2 (set (reg/v:SI 154 [ num_ints ])
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 num_ints+0 S4 A64])) tiles.cpp:439 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 num_ints+0 S4 A64])
        (nil)))
(note 12 11 23 2 NOTE_INSN_FUNCTION_BEG)
(note 23 12 24 2 NOTE_INSN_DELETED)
(insn 24 23 25 2 (set (reg/v:SI 71 [ num_coordinates ])
        (plus:SI (plus:SI (reg/v:SI 151 [ num_floats ])
                (reg/v:SI 154 [ num_ints ]))
            (const_int 1 [0x1]))) tiles.cpp:445 266 {*leasi}
     (nil))
(debug_insn 25 24 27 2 (var_location:SI num_coordinates (reg/v:SI 71 [ num_coordinates ])) tiles.cpp:445 -1
     (nil))
(debug_insn 27 25 28 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 28 27 29 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 154 [ num_ints ])
            (const_int 0 [0]))) tiles.cpp:447 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 29 28 55 2 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) tiles.cpp:447 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9762 [0x2622])
            (nil)))
 -> 37)
;;  succ:       5 [97.6%] 
;;              3 [2.4%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 150 151 152 154

;; basic block 3, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [2.4%]  (FALLTHRU)
;;              5 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(6){ }u21(7){ }u22(16){ }u23(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 150 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 17 [flags]
(code_label 55 29 30 3 145 "" [1 uses])
(note 30 55 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 32 3 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 32 31 33 3 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 151 [ num_floats ])
            (const_int 0 [0]))) tiles.cpp:450 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 33 32 377 3 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 67)
;;  succ:       8 [95.2%] 
;;              4 [4.8%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 150 151 152

;; basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       3 [4.8%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 377 33 378 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 378 377 379 4 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152

(barrier 379 378 37)
;; basic block 5, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2 [97.6%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u26(6){ }u27(7){ }u28(16){ }u29(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 150 151 152 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 157 160 161 162
(code_label 37 379 38 5 142 "" [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 39 38 40 5 NOTE_INSN_DELETED)
(insn 40 39 41 5 (set (reg:DI 157 [ D.26221 ])
        (sign_extend:DI (reg/v:SI 151 [ num_floats ]))) tiles.cpp:447 149 {*extendsidi2_rex64}
     (nil))
(note 41 40 42 5 NOTE_INSN_DELETED)
(note 42 41 43 5 NOTE_INSN_DELETED)
(insn 43 42 44 5 (set (reg:DI 160 [ D.26220 ])
        (plus:DI (plus:DI (mult:DI (reg:DI 157 [ D.26221 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 20 frame))
            (const_int -172 [0xffffffffffffff54]))) tiles.cpp:447 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 157 [ D.26221 ])
        (nil)))
(insn 44 43 45 5 (set (reg:DI 161 [ D.26221 ])
        (sign_extend:DI (reg/v:SI 154 [ num_ints ]))) tiles.cpp:447 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 154 [ num_ints ])
        (nil)))
(insn 45 44 49 5 (parallel [
            (set (reg:DI 162 [ D.26221 ])
                (ashift:DI (reg:DI 161 [ D.26221 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:447 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 161 [ D.26221 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 49 45 50 5 (set (reg:DI 1 dx)
        (reg:DI 162 [ D.26221 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 162 [ D.26221 ])
        (nil)))
(insn 50 49 51 5 (set (reg:DI 4 si)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 ints+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 5 (set (reg:DI 5 di)
        (reg:DI 160 [ D.26220 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 160 [ D.26220 ])
        (nil)))
(call_insn 52 51 380 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 380 52 381 5 (set (pc)
        (label_ref 55)) 650 {jump}
     (nil)
 -> 55)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 150 151 152

(barrier 381 380 59)
;; basic block 6, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       19 [100.0%] 
;;              21 [25.0%] 
;;              4 [100.0%] 
;;              17 [100.0%] 
;;              23 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u45(6){ }u46(7){ }u47(16){ }u48(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 148
;; lr  def 	 17 [flags]
(code_label 59 381 60 6 144 "" [5 uses])
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 61 60 62 6 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn 62 61 63 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 148 [ num_tilings ])
            (const_int 0 [0]))) tiles.cpp:457 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 63 62 382 6 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) tiles.cpp:457 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 240)
;;  succ:       24 [91.0%] 
;;              7 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152

;; basic block 7, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 6, next block 8, flags: (NEW, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 382 63 383 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 383 382 384 7 (set (pc)
        (label_ref 353)) 650 {jump}
     (nil)
 -> 353)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 384 383 67)
;; basic block 8, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 [95.2%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u51(6){ }u52(7){ }u53(16){ }u54(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 150 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 148 150 151 152
;; lr  def 	 104 131 146 169 258 290 291 292 293 294 295
(code_label 67 384 68 8 143 "" [1 uses])
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 71 8 (set (reg:SF 131 [ D.26217 ])
        (float:SF (reg/v:SI 148 [ num_tilings ]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(note 71 69 72 8 NOTE_INSN_DELETED)
(insn 72 71 73 8 (set (reg:DI 169 [ D.26221 ])
        (zero_extend:DI (plus:SI (reg/v:SI 151 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 73 72 74 8 NOTE_INSN_DELETED)
(insn 74 73 13 8 (set (reg:DI 146 [ D.26221 ])
        (plus:DI (mult:DI (reg:DI 169 [ D.26221 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 169 [ D.26221 ])
        (nil)))
(insn 13 74 371 8 (set (reg:DI 104 [ ivtmp.261 ])
        (const_int 0 [0])) tiles.cpp:450 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 371 13 405 8 (set (reg/f:DI 258)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn 405 371 406 8 (set (reg:DI 290 [orig:104 ivtmp.261 ] [104])
        (reg:DI 104 [ ivtmp.261 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 104 [ ivtmp.261 ])
        (nil)))
(insn 406 405 407 8 (set (reg:DI 291 [orig:146 D.26221 ] [146])
        (reg:DI 146 [ D.26221 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 146 [ D.26221 ])
        (nil)))
(insn 407 406 408 8 (set (reg/v:SI 292 [orig:148 num_tilings ] [148])
        (reg/v:SI 148 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 148 [ num_tilings ])
        (nil)))
(insn 408 407 409 8 (set (reg/v/f:DI 293 [orig:150 floats ] [150])
        (reg/v/f:DI 150 [ floats ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 150 [ floats ])
        (nil)))
(insn 409 408 410 8 (set (reg/v/f:DI 294 [orig:152 wrap_widths ] [152])
        (reg/v/f:DI 152 [ wrap_widths ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 152 [ wrap_widths ])
        (nil)))
(insn 410 409 90 8 (set (reg/f:DI 295 [258])
        (reg/f:DI 258)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 258)
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 131 147 149 151 290 291 292 293 294 295

;; basic block 9, loop depth 1, count 0, freq 330, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       9 [95.2%]  (DFS_BACK)
;;              8 [100.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(6){ }u62(7){ }u63(16){ }u64(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 131 147 149 151 290 291 292 293 294 295
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131 290 291 293 295
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 75 171 173 290
(code_label 90 410 75 9 149 "" [1 uses])
(note 75 90 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 76 75 77 9 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 77 76 78 9 (set (reg:SF 171 [ D.26217 ])
        (mult:SF (reg:SF 131 [ D.26217 ])
            (mem:SF (plus:DI (reg/v/f:DI 293 [orig:150 floats ] [150])
                    (reg:DI 290 [orig:104 ivtmp.261 ] [104])) [0 MEM[base: floats_29(D), index: ivtmp.261_79, offset: 0B]+0 S4 A32]))) tiles.cpp:451 777 {*fop_sf_comm_sse}
     (nil))
(insn 78 77 79 9 (set (reg:SF 21 xmm0)
        (reg:SF 171 [ D.26217 ])) tiles.cpp:451 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 171 [ D.26217 ])
        (nil)))
(call_insn/u 79 78 80 9 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:451 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 80 79 82 9 (set (reg:SF 75 [ D.26217 ])
        (reg:SF 21 xmm0)) tiles.cpp:451 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0)
        (nil)))
(insn 82 80 83 9 (set (reg:SI 173)
        (fix:SI (reg:SF 75 [ D.26217 ]))) tiles.cpp:451 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 75 [ D.26217 ])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 295 [258])
                    (reg:DI 290 [orig:104 ivtmp.261 ] [104])) [0 MEM[symbol: qstate, index: ivtmp.261_79, offset: 0B]+0 S4 A32])
            (nil))))
(insn 83 82 85 9 (set (mem:SI (plus:DI (reg/f:DI 295 [258])
                (reg:DI 290 [orig:104 ivtmp.261 ] [104])) [0 MEM[symbol: qstate, index: ivtmp.261_79, offset: 0B]+0 S4 A32])
        (reg:SI 173)) tiles.cpp:451 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(debug_insn 85 83 86 9 (var_location:SI i (debug_expr:SI D#14)) -1
     (nil))
(insn 86 85 87 9 (parallel [
            (set (reg:DI 290 [orig:104 ivtmp.261 ] [104])
                (plus:DI (reg:DI 290 [orig:104 ivtmp.261 ] [104])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 87 86 88 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 290 [orig:104 ivtmp.261 ] [104])
            (reg:DI 291 [orig:146 D.26221 ] [146]))) tiles.cpp:450 8 {*cmpdi_1}
     (nil))
(jump_insn 88 87 94 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 90)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 90)
;;  succ:       9 [95.2%]  (DFS_BACK)
;;              10 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 131 147 149 151 290 291 292 293 294 295

;; basic block 10, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u80(6){ }u81(7){ }u82(16){ }u83(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 149 151 292 294
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151 292 294
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 148 152 174 175 257
(note 94 88 411 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 411 94 412 10 (set (reg/v:SI 148 [ num_tilings ])
        (reg/v:SI 292 [orig:148 num_tilings ] [148])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 292 [orig:148 num_tilings ] [148])
        (nil)))
(insn 412 411 95 10 (set (reg/v/f:DI 152 [ wrap_widths ])
        (reg/v/f:DI 294 [orig:152 wrap_widths ] [152])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 294 [orig:152 wrap_widths ] [152])
        (nil)))
(insn 95 412 96 10 (set (reg:DI 174 [ D.26221 ])
        (sign_extend:DI (reg/v:SI 151 [ num_floats ]))) tiles.cpp:452 149 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 10 (parallel [
            (set (reg:DI 175 [ D.26221 ])
                (ashift:DI (reg:DI 174 [ D.26221 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:452 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 174 [ D.26221 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 97 96 100 10 (parallel [
            (set (reg/f:DI 257)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -336 [0xfffffffffffffeb0]))
            (nil))))
(insn 100 97 101 10 (set (reg:DI 1 dx)
        (reg:DI 175 [ D.26221 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 175 [ D.26221 ])
        (nil)))
(insn 101 100 102 10 (set (reg:SI 4 si)
        (const_int 0 [0])) 89 {*movsi_internal}
     (nil))
(insn 102 101 103 10 (set (reg:DI 5 di)
        (reg/f:DI 257)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 257)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -336 [0xfffffffffffffeb0]))
            (nil))))
(call_insn 103 102 106 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 106 103 107 10 (parallel [
            (set (reg:SI 80 [ bnd.218 ])
                (lshiftrt:SI (reg/v:SI 151 [ num_floats ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 545 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 107 106 108 10 (parallel [
            (set (reg:SI 79 [ ratio_mult_vf.219 ])
                (ashift:SI (reg:SI 80 [ bnd.218 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 108 107 109 10 NOTE_INSN_DELETED)
(note 109 108 110 10 NOTE_INSN_DELETED)
(insn 110 109 111 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 79 [ ratio_mult_vf.219 ])
            (const_int 0 [0]))) 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 111 110 362 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 359)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 359)
;;  succ:       20 [33.3%] 
;;              11 [66.7%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152

;; basic block 11, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [66.7%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u100(6){ }u101(7){ }u102(16){ }u103(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 17 [flags]
(note 362 111 112 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 112 362 113 11 NOTE_INSN_DELETED)
(note 113 112 114 11 NOTE_INSN_DELETED)
(insn 114 113 115 11 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 151 [ num_floats ])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 115 114 116 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 359)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 359)
;;  succ:       12 [66.7%]  (FALLTHRU)
;;              20 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152

;; basic block 12, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [66.7%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u108(6){ }u109(7){ }u110(16){ }u111(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 80 148 152
;; lr  def 	 17 [flags] 185 186 187 188 189 190 191
(note 116 115 117 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 119 12 (set (reg:V4SI 185)
        (vec_duplicate:V4SI (reg/v:SI 148 [ num_tilings ]))) 1643 {*vec_dupv4si}
     (nil))
(debug_insn 119 117 120 12 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 120 119 121 12 (set (subreg:V16QI (reg:V4SI 186 [ vect_var_.225 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (reg/v/f:DI 152 [ wrap_widths ]) [0 MEM[(int *)wrap_widths_39(D)]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn 121 120 122 12 (set (subreg:V2DI (reg:V4SI 188) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 186 [ vect_var_.225 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 185)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 122 121 123 12 (set (reg:V2DI 190)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 186 [ vect_var_.225 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 186 [ vect_var_.225 ])
        (nil)))
(insn 123 122 124 12 (set (reg:V2DI 191)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 185) 0)
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (nil))
(insn 124 123 125 12 (set (subreg:V2DI (reg:V4SI 189) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 190) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 191) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 190)
        (nil)))
(insn 125 124 126 12 (set (reg:V4SI 187 [ vect_var_.226 ])
        (vec_select:V4SI (reg:V4SI 188)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 188)
        (nil)))
(insn 126 125 127 12 (set (reg:V4SI 189)
        (vec_select:V4SI (reg:V4SI 189)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn 127 126 128 12 (set (reg:V4SI 187 [ vect_var_.226 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 187 [ vect_var_.226 ])
                (reg:V4SI 189))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 189)
        (nil)))
(insn 128 127 130 12 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -256 [0xffffffffffffff00])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings]+0 S16 A128])
        (reg:V4SI 187 [ vect_var_.226 ])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 187 [ vect_var_.226 ])
        (nil)))
(debug_insn 130 128 131 12 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(insn 131 130 132 12 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 80 [ bnd.218 ])
            (const_int 1 [0x1]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 132 131 133 12 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       13 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152 185 191

;; basic block 13, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [66.7%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u128(6){ }u129(7){ }u130(16){ }u131(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152 185 191
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 80 152 185 191
;; lr  def 	 17 [flags] 192 193 194 195 196
(note 133 132 134 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 134 133 135 13 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 135 134 136 13 (set (subreg:V16QI (reg:V4SI 192 [ vect_var_.225 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 152 [ wrap_widths ])
                        (const_int 16 [0x10])) [0 MEM[(int *)wrap_widths_39(D) + 16B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn 136 135 137 13 (set (subreg:V2DI (reg:V4SI 194) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 192 [ vect_var_.225 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 185)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 137 136 139 13 (set (reg:V2DI 196)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 192 [ vect_var_.225 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 192 [ vect_var_.225 ])
        (nil)))
(insn 139 137 140 13 (set (subreg:V2DI (reg:V4SI 195) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 196) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 191) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 196)
        (nil)))
(insn 140 139 141 13 (set (reg:V4SI 193 [ vect_var_.226 ])
        (vec_select:V4SI (reg:V4SI 194)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 194)
        (nil)))
(insn 141 140 142 13 (set (reg:V4SI 195)
        (vec_select:V4SI (reg:V4SI 195)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn 142 141 143 13 (set (reg:V4SI 193 [ vect_var_.226 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 193 [ vect_var_.226 ])
                (reg:V4SI 195))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 195)
        (nil)))
(insn 143 142 145 13 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 16B]+0 S16 A128])
        (reg:V4SI 193 [ vect_var_.226 ])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 193 [ vect_var_.226 ])
        (nil)))
(debug_insn 145 143 146 13 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(insn 146 145 147 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 80 [ bnd.218 ])
            (const_int 2 [0x2]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 147 146 148 13 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       14 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152 185 191

;; basic block 14, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [66.7%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u146(6){ }u147(7){ }u148(16){ }u149(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152 185 191
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 80 152 185 191
;; lr  def 	 17 [flags] 198 199 200 201 202
(note 148 147 149 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 149 148 150 14 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 150 149 151 14 (set (subreg:V16QI (reg:V4SI 198 [ vect_var_.225 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 152 [ wrap_widths ])
                        (const_int 32 [0x20])) [0 MEM[(int *)wrap_widths_39(D) + 32B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn 151 150 152 14 (set (subreg:V2DI (reg:V4SI 200) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 198 [ vect_var_.225 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 185)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 152 151 154 14 (set (reg:V2DI 202)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 198 [ vect_var_.225 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 198 [ vect_var_.225 ])
        (nil)))
(insn 154 152 155 14 (set (subreg:V2DI (reg:V4SI 201) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 202) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 191) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 202)
        (nil)))
(insn 155 154 156 14 (set (reg:V4SI 199 [ vect_var_.226 ])
        (vec_select:V4SI (reg:V4SI 200)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 200)
        (nil)))
(insn 156 155 157 14 (set (reg:V4SI 201)
        (vec_select:V4SI (reg:V4SI 201)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn 157 156 158 14 (set (reg:V4SI 199 [ vect_var_.226 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 199 [ vect_var_.226 ])
                (reg:V4SI 201))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 201)
        (nil)))
(insn 158 157 160 14 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 32B]+0 S16 A128])
        (reg:V4SI 199 [ vect_var_.226 ])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 199 [ vect_var_.226 ])
        (nil)))
(debug_insn 160 158 161 14 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(insn 161 160 162 14 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 80 [ bnd.218 ])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 162 161 163 14 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       15 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152 185 191

;; basic block 15, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [66.7%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u164(6){ }u165(7){ }u166(16){ }u167(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 80 147 148 149 151 152 185 191
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 80 152 185 191
;; lr  def 	 17 [flags] 204 205 206 207 208
(note 163 162 164 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(debug_insn 164 163 165 15 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 165 164 166 15 (set (subreg:V16QI (reg:V4SI 204 [ vect_var_.225 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 152 [ wrap_widths ])
                        (const_int 48 [0x30])) [0 MEM[(int *)wrap_widths_39(D) + 48B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn 166 165 167 15 (set (subreg:V2DI (reg:V4SI 206) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 204 [ vect_var_.225 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 185)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 167 166 169 15 (set (reg:V2DI 208)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 204 [ vect_var_.225 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 204 [ vect_var_.225 ])
        (nil)))
(insn 169 167 170 15 (set (subreg:V2DI (reg:V4SI 207) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 208) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 191) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 208)
        (nil)))
(insn 170 169 171 15 (set (reg:V4SI 205 [ vect_var_.226 ])
        (vec_select:V4SI (reg:V4SI 206)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 206)
        (nil)))
(insn 171 170 172 15 (set (reg:V4SI 207)
        (vec_select:V4SI (reg:V4SI 207)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn 172 171 173 15 (set (reg:V4SI 205 [ vect_var_.226 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 205 [ vect_var_.226 ])
                (reg:V4SI 207))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 207)
        (nil)))
(insn 173 172 175 15 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 48B]+0 S16 A128])
        (reg:V4SI 205 [ vect_var_.226 ])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 205 [ vect_var_.226 ])
        (nil)))
(debug_insn 175 173 176 15 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(insn 176 175 177 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 80 [ bnd.218 ])
            (const_int 4 [0x4]))) 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 80 [ bnd.218 ])
        (nil)))
(jump_insn 177 176 178 15 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       16 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 147 148 149 151 152 185 191

;; basic block 16, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [66.7%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u182(6){ }u183(7){ }u184(16){ }u185(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 147 148 149 151 152 185 191
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152 185 191
;; lr  def 	 210 211 212 213 214
(note 178 177 179 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(debug_insn 179 178 180 16 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 180 179 181 16 (set (subreg:V16QI (reg:V4SI 210 [ vect_var_.225 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 152 [ wrap_widths ])
                        (const_int 64 [0x40])) [0 MEM[(int *)wrap_widths_39(D) + 64B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn 181 180 182 16 (set (subreg:V2DI (reg:V4SI 212) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 210 [ vect_var_.225 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 185)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V4SI 185)
        (nil)))
(insn 182 181 184 16 (set (reg:V2DI 214)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 210 [ vect_var_.225 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 210 [ vect_var_.225 ])
        (nil)))
(insn 184 182 185 16 (set (subreg:V2DI (reg:V4SI 213) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 214) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 191) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 214)
        (expr_list:REG_DEAD (reg:V2DI 191)
            (nil))))
(insn 185 184 186 16 (set (reg:V4SI 211 [ vect_var_.226 ])
        (vec_select:V4SI (reg:V4SI 212)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 212)
        (nil)))
(insn 186 185 187 16 (set (reg:V4SI 213)
        (vec_select:V4SI (reg:V4SI 213)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn 187 186 188 16 (set (reg:V4SI 211 [ vect_var_.226 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 211 [ vect_var_.226 ])
                (reg:V4SI 213))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 213)
        (nil)))
(insn 188 187 190 16 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 64B]+0 S16 A128])
        (reg:V4SI 211 [ vect_var_.226 ])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 211 [ vect_var_.226 ])
        (nil)))
(debug_insn 190 188 385 16 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(jump_insn 385 190 386 16 (set (pc)
        (label_ref 206)) 650 {jump}
     (nil)
 -> 206)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 147 148 149 151 152

(barrier 386 385 234)
;; basic block 17, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       22 [75.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u198(6){ }u199(7){ }u200(16){ }u201(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66 71 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66 148 152
;; lr  def 	 17 [flags] 216 218
(code_label 234 386 193 17 153 "" [1 uses])
(note 193 234 194 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 194 193 195 17 (var_location:SI i (debug_expr:SI D#16)) -1
     (nil))
(insn 195 194 197 17 (set (reg:DI 216 [ i ])
        (sign_extend:DI (reg/v:SI 66 [ i ]))) tiles.cpp:453 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 66 [ i ])
        (nil)))
(note 197 195 198 17 NOTE_INSN_DELETED)
(insn 198 197 199 17 (parallel [
            (set (reg:SI 218 [ D.26216 ])
                (mult:SI (mem:SI (plus:DI (mult:DI (reg:DI 216 [ i ])
                                (const_int 4 [0x4]))
                            (reg/v/f:DI 152 [ wrap_widths ])) [0 *_152+0 S4 A32])
                    (reg/v:SI 148 [ num_tilings ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:453 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 216 [ i ])
                            (const_int 4 [0x4]))
                        (reg/f:DI 20 frame))
                    (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
            (nil))))
(insn 199 198 200 17 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 216 [ i ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 218 [ D.26216 ])) tiles.cpp:453 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 218 [ D.26216 ])
        (expr_list:REG_DEAD (reg:DI 216 [ i ])
            (nil))))
(debug_insn 200 199 202 17 (var_location:SI D#15 (plus:SI (debug_expr:SI D#16)
        (const_int 1 [0x1]))) tiles.cpp:450 -1
     (nil))
(debug_insn 202 200 387 17 (var_location:SI i (debug_expr:SI D#15)) -1
     (nil))
(jump_insn 387 202 388 17 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152

(barrier 388 387 206)
;; basic block 18, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       15 [33.3%] 
;;              12 [33.3%] 
;;              13 [33.3%] 
;;              14 [33.3%] 
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u210(6){ }u211(7){ }u212(16){ }u213(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 79 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79 151
;; lr  def 	 17 [flags] 114
(code_label 206 388 207 18 151 "" [5 uses])
(note 207 206 208 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 18 (set (reg/v:SI 114 [ i ])
        (reg:SI 79 [ ratio_mult_vf.219 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 79 [ ratio_mult_vf.219 ])
        (nil)))
(insn 209 208 210 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 114 [ i ])
            (reg/v:SI 151 [ num_floats ]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 210 209 389 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 211)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 6666 [0x1a0a])
            (nil)))
 -> 211)
;;  succ:       21 [66.7%] 
;;              19 [33.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 114 147 148 149 151 152

;; basic block 19, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 18, next block 20, flags: (NEW, RTL, MODIFIED)
;;  pred:       18 [33.3%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 389 210 390 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(jump_insn 390 389 391 19 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152

(barrier 391 390 359)
;; basic block 20, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       11 [33.3%] 
;;              10 [33.3%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u218(6){ }u219(7){ }u220(16){ }u221(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 114
(code_label 359 391 358 20 165 "" [2 uses])
(note 358 359 14 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 14 358 211 20 (set (reg/v:SI 114 [ i ])
        (const_int 0 [0])) tiles.cpp:452 89 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 114 147 148 149 151 152

;; basic block 21, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              18 [66.7%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u222(6){ }u223(7){ }u224(16){ }u225(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 114 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 148 151 152
;; lr  def 	 17 [flags] 81 220 222
(code_label 211 14 212 21 150 "" [1 uses])
(note 212 211 213 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(debug_insn 213 212 214 21 (var_location:SI i (reg/v:SI 114 [ i ])) -1
     (nil))
(insn 214 213 216 21 (set (reg:DI 220 [ i ])
        (sign_extend:DI (reg/v:SI 114 [ i ]))) tiles.cpp:453 149 {*extendsidi2_rex64}
     (nil))
(note 216 214 217 21 NOTE_INSN_DELETED)
(insn 217 216 218 21 (parallel [
            (set (reg:SI 222 [ D.26216 ])
                (mult:SI (mem:SI (plus:DI (mult:DI (reg:DI 220 [ i ])
                                (const_int 4 [0x4]))
                            (reg/v/f:DI 152 [ wrap_widths ])) [0 *_109+0 S4 A32])
                    (reg/v:SI 148 [ num_tilings ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:453 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 220 [ i ])
                            (const_int 4 [0x4]))
                        (reg/f:DI 20 frame))
                    (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
            (nil))))
(insn 218 217 219 21 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 220 [ i ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 222 [ D.26216 ])) tiles.cpp:453 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 222 [ D.26216 ])
        (expr_list:REG_DEAD (reg:DI 220 [ i ])
            (nil))))
(insn 219 218 221 21 (parallel [
            (set (reg/v:SI 81 [ i ])
                (plus:SI (reg/v:SI 114 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:450 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 221 219 222 21 (var_location:SI i (reg/v:SI 81 [ i ])) -1
     (nil))
(insn 222 221 223 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 151 [ num_floats ])
            (reg/v:SI 81 [ i ]))) tiles.cpp:450 7 {*cmpsi_1}
     (nil))
(jump_insn 223 222 224 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 2500 [0x9c4])
            (nil)))
 -> 59)
;;  succ:       22 [75.0%]  (FALLTHRU)
;;              6 [25.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 81 114 147 148 149 151 152

;; basic block 22, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 [75.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u240(6){ }u241(7){ }u242(16){ }u243(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 81 114 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 81 114 148 151 152
;; lr  def 	 17 [flags] 66 224 226
(note 224 223 225 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(debug_insn 225 224 226 22 (var_location:SI i (reg/v:SI 81 [ i ])) -1
     (nil))
(insn 226 225 228 22 (set (reg:DI 224 [ i ])
        (sign_extend:DI (reg/v:SI 81 [ i ]))) tiles.cpp:453 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 81 [ i ])
        (nil)))
(note 228 226 229 22 NOTE_INSN_DELETED)
(insn 229 228 230 22 (parallel [
            (set (reg:SI 226 [ D.26216 ])
                (mult:SI (mem:SI (plus:DI (mult:DI (reg:DI 224 [ i ])
                                (const_int 4 [0x4]))
                            (reg/v/f:DI 152 [ wrap_widths ])) [0 *_33+0 S4 A32])
                    (reg/v:SI 148 [ num_tilings ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:453 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 224 [ i ])
                            (const_int 4 [0x4]))
                        (reg/f:DI 20 frame))
                    (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
            (nil))))
(insn 230 229 363 22 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 224 [ i ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 226 [ D.26216 ])) tiles.cpp:453 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 226 [ D.26216 ])
        (expr_list:REG_DEAD (reg:DI 224 [ i ])
            (nil))))
(debug_insn 363 230 231 22 (var_location:SI D#16 (plus:SI (reg/v:SI 114 [ i ])
        (const_int 2 [0x2]))) -1
     (nil))
(insn 231 363 233 22 (parallel [
            (set (reg/v:SI 66 [ i ])
                (plus:SI (reg/v:SI 114 [ i ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:450 273 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 114 [ i ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(debug_insn 233 231 235 22 (var_location:SI i (debug_expr:SI D#16)) -1
     (nil))
(insn 235 233 236 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 66 [ i ])
            (reg/v:SI 151 [ num_floats ]))) tiles.cpp:450 7 {*cmpsi_1}
     (nil))
(jump_insn 236 235 392 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 234)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 7500 [0x1d4c])
            (nil)))
 -> 234)
;;  succ:       17 [75.0%] 
;;              23 [25.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66 71 147 148 149 151 152

;; basic block 23, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 22, next block 24, flags: (NEW, RTL, MODIFIED)
;;  pred:       22 [25.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 392 236 393 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(jump_insn 393 392 394 23 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152

(barrier 394 393 240)
;; basic block 24, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       6 [91.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u258(6){ }u259(7){ }u260(16){ }u261(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 147 148 149 151 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 147 148 149 151 152
;; lr  def 	 94 107 122 144 229 256 259 260 261 262 263 264
(code_label 240 394 241 24 146 "" [1 uses])
(note 241 240 242 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 24 (set (reg:DI 122 [ D.26224 ])
        (sign_extend:DI (reg/v:SI 149 [ memory_size ]))) 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 149 [ memory_size ])
        (nil)))
(insn 243 242 244 24 (set (reg:DI 94 [ ivtmp.255 ])
        (reg/v/f:DI 147 [ the_tiles ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 147 [ the_tiles ])
        (nil)))
(note 244 243 245 24 NOTE_INSN_DELETED)
(insn 245 244 246 24 (set (reg:DI 229 [ D.26221 ])
        (zero_extend:DI (plus:SI (reg/v:SI 151 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 246 245 247 24 NOTE_INSN_DELETED)
(insn 247 246 20 24 (set (reg:DI 144 [ D.26221 ])
        (plus:DI (mult:DI (reg:DI 229 [ D.26221 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 229 [ D.26221 ])
        (nil)))
(insn 20 247 372 24 (set (reg/v:SI 107 [ j ])
        (const_int 0 [0])) tiles.cpp:457 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 372 20 413 24 (set (reg/f:DI 256)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 413 372 414 24 (set (reg:DI 259 [orig:94 ivtmp.255 ] [94])
        (reg:DI 94 [ ivtmp.255 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 94 [ ivtmp.255 ])
        (nil)))
(insn 414 413 415 24 (set (reg/v:SI 260 [orig:107 j ] [107])
        (reg/v:SI 107 [ j ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 107 [ j ])
        (nil)))
(insn 415 414 416 24 (set (reg:DI 261 [orig:144 D.26221 ] [144])
        (reg:DI 144 [ D.26221 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 144 [ D.26221 ])
        (nil)))
(insn 416 415 417 24 (set (reg/v:SI 262 [orig:148 num_tilings ] [148])
        (reg/v:SI 148 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 148 [ num_tilings ])
        (nil)))
(insn 417 416 418 24 (set (reg/v/f:DI 263 [orig:152 wrap_widths ] [152])
        (reg/v/f:DI 152 [ wrap_widths ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 152 [ wrap_widths ])
        (nil)))
(insn 418 417 395 24 (set (reg/f:DI 264 [256])
        (reg/f:DI 256)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 256)
        (nil)))
(jump_insn 395 418 396 24 (set (pc)
        (label_ref 341)) 650 {jump}
     (nil)
 -> 341)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 259 260 261 262 263 264

(barrier 396 395 348)
;; basic block 25, loop depth 2, count 0, freq 3333, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       31 [95.2%]  (DFS_BACK)
;;              39 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u269(6){ }u270(7){ }u271(16){ }u272(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 268 275 276
;; lr  def 	 17 [flags] 83 84
(code_label 348 396 251 25 164 "" [2 uses])
(note 251 348 252 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(debug_insn 252 251 254 25 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 254 252 256 25 (set (reg:SI 83 [ D.26216 ])
        (mem:SI (plus:DI (reg/f:DI 276 [258])
                (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: qstate, index: ivtmp.241_108, offset: 0B]+0 S4 A32])) tiles.cpp:463 89 {*movsi_internal}
     (nil))
(insn 256 254 257 25 (set (reg:SI 84 [ D.26216 ])
        (mem:SI (plus:DI (reg/f:DI 275 [257])
                (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: base, index: ivtmp.241_108, offset: 0B]+0 S4 A32])) tiles.cpp:463 89 {*movsi_internal}
     (nil))
(insn 257 256 258 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 83 [ D.26216 ])
            (reg:SI 84 [ D.26216 ]))) tiles.cpp:463 7 {*cmpsi_1}
     (nil))
(jump_insn 258 257 259 25 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) tiles.cpp:463 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 265)
;;  succ:       26 [50.0%]  (FALLTHRU)
;;              27 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 83 84 122 151 267 268 269 270 271 272 273 274 275 276

;; basic block 26, loop depth 2, count 0, freq 1667, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 [50.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u280(6){ }u281(7){ }u282(16){ }u283(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 83 84 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 84 272
;; lr  def 	 17 [flags] 93 233 235 236
(note 259 258 260 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 26 (parallel [
            (set (reg:SI 233 [ D.26216 ])
                (minus:SI (reg:SI 83 [ D.26216 ])
                    (reg:SI 84 [ D.26216 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:464 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 261 260 262 26 (parallel [
            (set (reg:SI 236)
                (div:SI (reg:SI 233 [ D.26216 ])
                    (reg/v:SI 272 [orig:148 num_tilings ] [148])))
            (set (reg:SI 235 [ D.26216 ])
                (mod:SI (reg:SI 233 [ D.26216 ])
                    (reg/v:SI 272 [orig:148 num_tilings ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:464 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 233 [ D.26216 ])
        (expr_list:REG_UNUSED (reg:SI 236)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 262 261 397 26 (parallel [
            (set (reg:SI 93 [ D.26216 ])
                (minus:SI (reg:SI 83 [ D.26216 ])
                    (reg:SI 235 [ D.26216 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:464 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 235 [ D.26216 ])
        (expr_list:REG_DEAD (reg:SI 83 [ D.26216 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(jump_insn 397 262 398 26 (set (pc)
        (label_ref 273)) 650 {jump}
     (nil)
 -> 273)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276

(barrier 398 397 265)
;; basic block 27, loop depth 2, count 0, freq 1667, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       25 [50.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u292(6){ }u293(7){ }u294(16){ }u295(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 83 84 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 84 272
;; lr  def 	 17 [flags] 93 238 239 241 242
(code_label 265 398 266 27 155 "" [1 uses])
(note 266 265 267 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(note 267 266 268 27 NOTE_INSN_DELETED)
(insn 268 267 269 27 (parallel [
            (set (reg:SI 238 [ D.26216 ])
                (minus:SI (reg:SI 84 [ D.26216 ])
                    (reg:SI 83 [ D.26216 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 269 268 270 27 (parallel [
            (set (reg:SI 239 [ D.26216 ])
                (plus:SI (reg:SI 238 [ D.26216 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 238 [ D.26216 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 270 269 271 27 (parallel [
            (set (reg:SI 242)
                (div:SI (reg:SI 239 [ D.26216 ])
                    (reg/v:SI 272 [orig:148 num_tilings ] [148])))
            (set (reg:SI 241 [ D.26216 ])
                (mod:SI (reg:SI 239 [ D.26216 ])
                    (reg/v:SI 272 [orig:148 num_tilings ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 239 [ D.26216 ])
        (expr_list:REG_UNUSED (reg:SI 242)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 271 270 272 27 (set (reg:SI 93 [ D.26216 ])
        (plus:SI (plus:SI (reg:SI 83 [ D.26216 ])
                (reg:SI 241 [ D.26216 ]))
            (const_int 1 [0x1]))) tiles.cpp:466 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 241 [ D.26216 ])
        (expr_list:REG_DEAD (reg:SI 83 [ D.26216 ])
            (nil))))
(insn 272 271 273 27 (parallel [
            (set (reg:SI 93 [ D.26216 ])
                (minus:SI (reg:SI 93 [ D.26216 ])
                    (reg/v:SI 272 [orig:148 num_tilings ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       28 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276

;; basic block 28, loop depth 2, count 0, freq 3333, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 [100.0%]  (FALLTHRU)
;;              26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u308(6){ }u309(7){ }u310(16){ }u311(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 268 273 274
;; lr  def 	 17 [flags]
(code_label 273 272 274 28 156 "" [1 uses])
(note 274 273 276 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 276 274 277 28 (set (mem:SI (plus:DI (reg/f:DI 274 [256])
                (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: coordinates, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 93 [ D.26216 ])) 89 {*movsi_internal}
     (nil))
(insn 277 276 278 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 273 [orig:152 wrap_widths ] [152])
                    (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[base: wrap_widths_39(D), index: ivtmp.241_108, offset: 0B]+0 S4 A32])
            (const_int 0 [0]))) tiles.cpp:467 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 278 277 279 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) tiles.cpp:467 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 285)
;;  succ:       29 [50.0%]  (FALLTHRU)
;;              30 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276

;; basic block 29, loop depth 2, count 0, freq 1667, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 [50.0%]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u318(6){ }u319(7){ }u320(16){ }u321(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 268 274
;; lr  def 	 17 [flags] 93 248
(note 279 278 280 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(note 280 279 281 29 NOTE_INSN_DELETED)
(note 281 280 282 29 NOTE_INSN_DELETED)
(insn 282 281 284 29 (parallel [
            (set (reg:SI 248)
                (div:SI (reg:SI 93 [ D.26216 ])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 20 frame)
                                (reg:DI 268 [orig:72 ivtmp.241 ] [72]))
                            (const_int -256 [0xffffffffffffff00])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.241_108, offset: 0B]+0 S4 A32])))
            (set (reg:SI 93 [ D.26216 ])
                (mod:SI (reg:SI 93 [ D.26216 ])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 20 frame)
                                (reg:DI 268 [orig:72 ivtmp.241 ] [72]))
                            (const_int -256 [0xffffffffffffff00])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.241_108, offset: 0B]+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:467 366 {*divmodsi4}
     (expr_list:REG_UNUSED (reg:SI 248)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 284 282 285 29 (set (mem:SI (plus:DI (reg/f:DI 274 [256])
                (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: coordinates, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 93 [ D.26216 ])) tiles.cpp:467 89 {*movsi_internal}
     (nil))
;;  succ:       30 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276

;; basic block 30, loop depth 2, count 0, freq 3333, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       28 [50.0%] 
;;              29 [100.0%]  (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u333(6){ }u334(7){ }u335(16){ }u336(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(code_label 285 284 286 30 157 "" [1 uses])
(note 286 285 287 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 30 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 93 [ D.26216 ])
            (const_int 0 [0]))) tiles.cpp:469 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 288 287 314 30 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 303)
            (pc))) tiles.cpp:469 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 303)
;;  succ:       33 [91.0%] 
;;              31 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276

;; basic block 31, loop depth 2, count 0, freq 3333, maybe hot
;; Invalid sum of incoming frequencies 1119, should be 3333
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 [9.0%]  (FALLTHRU)
;;              35 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u339(6){ }u340(7){ }u341(16){ }u342(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 267 268 271 275
;; lr  def 	 17 [flags] 251 267 268
(code_label 314 288 289 31 162 "" [1 uses])
(note 289 314 291 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 291 289 292 31 (parallel [
            (set (reg:SI 251)
                (plus:SI (reg:SI 84 [ D.26216 ])
                    (reg:SI 267 [orig:63 ivtmp.245 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:473 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 84 [ D.26216 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 275 [257])
                        (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: base, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
                (nil)))))
(insn 292 291 294 31 (set (mem:SI (plus:DI (reg/f:DI 275 [257])
                (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: base, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 251)) tiles.cpp:473 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 251)
        (nil)))
(debug_insn 294 292 295 31 (var_location:SI i (debug_expr:SI D#13)) -1
     (nil))
(insn 295 294 296 31 (parallel [
            (set (reg:DI 268 [orig:72 ivtmp.241 ] [72])
                (plus:DI (reg:DI 268 [orig:72 ivtmp.241 ] [72])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 296 295 298 31 (parallel [
            (set (reg:SI 267 [orig:63 ivtmp.245 ] [63])
                (plus:SI (reg:SI 267 [orig:63 ivtmp.245 ] [63])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 298 296 299 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 268 [orig:72 ivtmp.241 ] [72])
            (reg:DI 271 [orig:144 D.26221 ] [144]))) tiles.cpp:460 8 {*cmpdi_1}
     (nil))
(jump_insn 299 298 302 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 348)
            (pc))) tiles.cpp:460 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 348)
;;  succ:       25 [95.2%]  (DFS_BACK)
;;              32 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 267 268 269 270 271 272 273 274 275 276

;; basic block 32, loop depth 1, count 0, freq 159, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u353(6){ }u354(7){ }u355(16){ }u356(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 269 270 271 272 273 274
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151 269 270 271 272 273 274
;; lr  def 	 110 259 260 261 262 263 264
(note 302 299 419 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 419 302 420 32 (set (reg:DI 259 [orig:94 ivtmp.255 ] [94])
        (reg:DI 269 [orig:94 ivtmp.255 ] [94])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 269 [orig:94 ivtmp.255 ] [94])
        (nil)))
(insn 420 419 421 32 (set (reg/v:SI 260 [orig:107 j ] [107])
        (reg/v:SI 270 [orig:107 j ] [107])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 270 [orig:107 j ] [107])
        (nil)))
(insn 421 420 422 32 (set (reg:DI 261 [orig:144 D.26221 ] [144])
        (reg:DI 271 [orig:144 D.26221 ] [144])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 271 [orig:144 D.26221 ] [144])
        (nil)))
(insn 422 421 423 32 (set (reg/v:SI 262 [orig:148 num_tilings ] [148])
        (reg/v:SI 272 [orig:148 num_tilings ] [148])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 272 [orig:148 num_tilings ] [148])
        (nil)))
(insn 423 422 424 32 (set (reg/v/f:DI 263 [orig:152 wrap_widths ] [152])
        (reg/v/f:DI 273 [orig:152 wrap_widths ] [152])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 273 [orig:152 wrap_widths ] [152])
        (nil)))
(insn 424 423 18 32 (set (reg/f:DI 264 [256])
        (reg/f:DI 274 [256])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 274 [256])
        (nil)))
(insn 18 424 399 32 (set (reg/v:SI 110 [ num_floats ])
        (reg/v:SI 151 [ num_floats ])) 89 {*movsi_internal}
     (nil))
(jump_insn 399 18 400 32 (set (pc)
        (label_ref 322)) 650 {jump}
     (nil)
 -> 322)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 110 122 151 259 260 261 262 263 264

(barrier 400 399 303)
;; basic block 33, loop depth 2, count 0, freq 819, maybe hot
;; Invalid sum of incoming frequencies 3033, should be 819
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       30 [91.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u358(6){ }u359(7){ }u360(16){ }u361(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 93 122 151 267 268 269 270 271 272 273 274 275 276
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 93 267 268 269 270 271 272 273 274 275 276
;; lr  def 	 129 277 278 279 280 281 282 283 284 285 286 287 288 289
(code_label 303 400 304 33 158 "" [1 uses])
(note 304 303 306 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 306 304 425 33 (set (reg:SI 129 [ D.26216 ])
        (mem:SI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 268 [orig:72 ivtmp.241 ] [72]))
                (const_int -256 [0xffffffffffffff00])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.241_108, offset: 0B]+0 S4 A32])) 89 {*movsi_internal}
     (nil))
(insn 425 306 426 33 (set (reg:SI 277 [orig:63 ivtmp.245 ] [63])
        (reg:SI 267 [orig:63 ivtmp.245 ] [63])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 267 [orig:63 ivtmp.245 ] [63])
        (nil)))
(insn 426 425 427 33 (set (reg:DI 278 [orig:72 ivtmp.241 ] [72])
        (reg:DI 268 [orig:72 ivtmp.241 ] [72])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 268 [orig:72 ivtmp.241 ] [72])
        (nil)))
(insn 427 426 428 33 (set (reg:SI 279 [orig:84 D.26216 ] [84])
        (reg:SI 84 [ D.26216 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84 [ D.26216 ])
        (nil)))
(insn 428 427 429 33 (set (reg:SI 280 [orig:93 D.26216 ] [93])
        (reg:SI 93 [ D.26216 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ D.26216 ])
        (nil)))
(insn 429 428 430 33 (set (reg:DI 281 [orig:94 ivtmp.255 ] [94])
        (reg:DI 269 [orig:94 ivtmp.255 ] [94])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 269 [orig:94 ivtmp.255 ] [94])
        (nil)))
(insn 430 429 431 33 (set (reg/v:SI 282 [orig:107 j ] [107])
        (reg/v:SI 270 [orig:107 j ] [107])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 270 [orig:107 j ] [107])
        (nil)))
(insn 431 430 432 33 (set (reg:SI 283 [orig:129 D.26216 ] [129])
        (reg:SI 129 [ D.26216 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 129 [ D.26216 ])
        (nil)))
(insn 432 431 433 33 (set (reg:DI 284 [orig:144 D.26221 ] [144])
        (reg:DI 271 [orig:144 D.26221 ] [144])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 271 [orig:144 D.26221 ] [144])
        (nil)))
(insn 433 432 434 33 (set (reg/v:SI 285 [orig:148 num_tilings ] [148])
        (reg/v:SI 272 [orig:148 num_tilings ] [148])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 272 [orig:148 num_tilings ] [148])
        (nil)))
(insn 434 433 435 33 (set (reg/v/f:DI 286 [orig:152 wrap_widths ] [152])
        (reg/v/f:DI 273 [orig:152 wrap_widths ] [152])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 273 [orig:152 wrap_widths ] [152])
        (nil)))
(insn 435 434 436 33 (set (reg/f:DI 287 [256])
        (reg/f:DI 274 [256])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 274 [256])
        (nil)))
(insn 436 435 437 33 (set (reg/f:DI 288 [257])
        (reg/f:DI 275 [257])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 275 [257])
        (nil)))
(insn 437 436 319 33 (set (reg/f:DI 289 [258])
        (reg/f:DI 276 [258])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 276 [258])
        (nil)))
;;  succ:       34 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 277 278 279 280 281 282 283 284 285 286 287 288 289

;; basic block 34, loop depth 3, count 0, freq 9100, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       34 [91.0%]  (DFS_BACK)
;;              33 [100.0%]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u365(6){ }u366(7){ }u367(16){ }u368(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 277 278 279 280 281 282 283 284 285 286 287 288 289
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 280 283
;; lr  def 	 17 [flags] 280
(code_label 319 437 307 34 163 "" [1 uses])
(note 307 319 308 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(note 308 307 309 34 NOTE_INSN_DELETED)
(insn 309 308 310 34 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:SI (reg:SI 280 [orig:93 D.26216 ] [93])
                        (reg:SI 283 [orig:129 D.26216 ] [129]))
                    (const_int 0 [0])))
            (set (reg:SI 280 [orig:93 D.26216 ] [93])
                (plus:SI (reg:SI 280 [orig:93 D.26216 ] [93])
                    (reg:SI 283 [orig:129 D.26216 ] [129])))
        ]) tiles.cpp:469 281 {*addsi_2}
     (nil))
(jump_insn 310 309 311 34 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 319)
            (pc))) tiles.cpp:469 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 319)
;;  succ:       34 [91.0%]  (DFS_BACK)
;;              35 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 277 278 279 280 281 282 283 284 285 286 287 288 289

;; basic block 35, loop depth 2, count 0, freq 819, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u373(6){ }u374(7){ }u375(16){ }u376(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 277 278 279 280 281 282 284 285 286 287 288 289
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 277 278 279 280 281 282 284 285 286 287 288 289
;; lr  def 	 84 93 267 268 269 270 271 272 273 274 275 276
(note 311 310 438 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 438 311 439 35 (set (reg:SI 267 [orig:63 ivtmp.245 ] [63])
        (reg:SI 277 [orig:63 ivtmp.245 ] [63])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 277 [orig:63 ivtmp.245 ] [63])
        (nil)))
(insn 439 438 440 35 (set (reg:DI 268 [orig:72 ivtmp.241 ] [72])
        (reg:DI 278 [orig:72 ivtmp.241 ] [72])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 278 [orig:72 ivtmp.241 ] [72])
        (nil)))
(insn 440 439 441 35 (set (reg:SI 84 [ D.26216 ])
        (reg:SI 279 [orig:84 D.26216 ] [84])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 279 [orig:84 D.26216 ] [84])
        (nil)))
(insn 441 440 442 35 (set (reg:SI 93 [ D.26216 ])
        (reg:SI 280 [orig:93 D.26216 ] [93])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 280 [orig:93 D.26216 ] [93])
        (nil)))
(insn 442 441 443 35 (set (reg:DI 269 [orig:94 ivtmp.255 ] [94])
        (reg:DI 281 [orig:94 ivtmp.255 ] [94])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 281 [orig:94 ivtmp.255 ] [94])
        (nil)))
(insn 443 442 444 35 (set (reg/v:SI 270 [orig:107 j ] [107])
        (reg/v:SI 282 [orig:107 j ] [107])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 282 [orig:107 j ] [107])
        (nil)))
(insn 444 443 445 35 (set (reg:DI 271 [orig:144 D.26221 ] [144])
        (reg:DI 284 [orig:144 D.26221 ] [144])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 284 [orig:144 D.26221 ] [144])
        (nil)))
(insn 445 444 446 35 (set (reg/v:SI 272 [orig:148 num_tilings ] [148])
        (reg/v:SI 285 [orig:148 num_tilings ] [148])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 285 [orig:148 num_tilings ] [148])
        (nil)))
(insn 446 445 447 35 (set (reg/v/f:DI 273 [orig:152 wrap_widths ] [152])
        (reg/v/f:DI 286 [orig:152 wrap_widths ] [152])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 286 [orig:152 wrap_widths ] [152])
        (nil)))
(insn 447 446 448 35 (set (reg/f:DI 274 [256])
        (reg/f:DI 287 [256])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 287 [256])
        (nil)))
(insn 448 447 449 35 (set (reg/f:DI 275 [257])
        (reg/f:DI 288 [257])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 288 [257])
        (nil)))
(insn 449 448 313 35 (set (reg/f:DI 276 [258])
        (reg/f:DI 289 [258])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 289 [258])
        (nil)))
(insn 313 449 401 35 (set (mem:SI (plus:DI (reg/f:DI 274 [256])
                (reg:DI 268 [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: coordinates, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 93 [ D.26216 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ D.26216 ])
        (nil)))
(jump_insn 401 313 402 35 (set (pc)
        (label_ref 314)) 650 {jump}
     (nil)
 -> 314)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 84 122 151 267 268 269 270 271 272 273 274 275 276

(barrier 402 401 361)
;; basic block 36, loop depth 1, count 0, freq 8, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       38 [4.8%] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u380(6){ }u381(7){ }u382(16){ }u383(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 259 260 261 262 263 264
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110
(code_label 361 402 360 36 166 "" [1 uses])
(note 360 361 19 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 19 360 322 36 (set (reg/v:SI 110 [ num_floats ])
        (const_int 0 [0])) tiles.cpp:460 89 {*movsi_internal}
     (nil))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 110 122 151 259 260 261 262 263 264

;; basic block 37, loop depth 1, count 0, freq 167, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 [100.0%]  (FALLTHRU)
;;              32 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u384(6){ }u385(7){ }u386(16){ }u387(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 110 122 151 259 260 261 262 263 264
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 110 122 259 260 262 264
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 106 254 259 260
(code_label 322 19 323 37 160 "" [1 uses])
(note 323 322 324 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 324 323 325 37 (set (reg:DI 254 [ num_floats ])
        (sign_extend:DI (reg/v:SI 110 [ num_floats ]))) tiles.cpp:476 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 110 [ num_floats ])
        (nil)))
(insn 325 324 327 37 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 254 [ num_floats ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -176 [0xffffffffffffff50])) [0 coordinates S4 A32])
        (reg/v:SI 260 [orig:107 j ] [107])) tiles.cpp:476 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 254 [ num_floats ])
        (nil)))
(insn 327 325 328 37 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:478 89 {*movsi_internal}
     (nil))
(insn 328 327 329 37 (set (reg:DI 1 dx)
        (reg:DI 122 [ D.26224 ])) tiles.cpp:478 87 {*movdi_internal_rex64}
     (nil))
(insn 329 328 330 37 (set (reg:SI 4 si)
        (reg/v:SI 71 [ num_coordinates ])) tiles.cpp:478 89 {*movsi_internal}
     (nil))
(insn 330 329 331 37 (set (reg:DI 5 di)
        (reg/f:DI 264 [256])) tiles.cpp:478 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(call_insn 331 330 332 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:478 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(insn 332 331 333 37 (set (reg:SI 106 [ D.26216 ])
        (reg:SI 0 ax)) tiles.cpp:478 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (expr_list:REG_EQUIV (mem:SI (reg:DI 259 [orig:94 ivtmp.255 ] [94]) [0 MEM[base: _77, offset: 0B]+0 S4 A32])
            (nil))))
(insn 333 332 334 37 (set (mem:SI (reg:DI 259 [orig:94 ivtmp.255 ] [94]) [0 MEM[base: _77, offset: 0B]+0 S4 A32])
        (reg:SI 106 [ D.26216 ])) tiles.cpp:478 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106 [ D.26216 ])
        (nil)))
(insn 334 333 336 37 (parallel [
            (set (reg/v:SI 260 [orig:107 j ] [107])
                (plus:SI (reg/v:SI 260 [orig:107 j ] [107])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:457 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 336 334 337 37 (var_location:SI j (reg/v:SI 260 [orig:107 j ] [107])) -1
     (nil))
(insn 337 336 338 37 (parallel [
            (set (reg:DI 259 [orig:94 ivtmp.255 ] [94])
                (plus:DI (reg:DI 259 [orig:94 ivtmp.255 ] [94])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 338 337 339 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 260 [orig:107 j ] [107])
            (reg/v:SI 262 [orig:148 num_tilings ] [148]))) tiles.cpp:457 7 {*cmpsi_1}
     (nil))
(jump_insn 339 338 341 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 353)
            (pc))) tiles.cpp:457 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 353)
;;  succ:       38 [91.0%]  (FALLTHRU,DFS_BACK)
;;              40 [9.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 259 260 261 262 263 264

;; basic block 38, loop depth 1, count 0, freq 167, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       37 [91.0%]  (FALLTHRU,DFS_BACK)
;;              24 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u410(6){ }u411(7){ }u412(16){ }u413(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 259 260 261 262 263 264
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 17 [flags]
(code_label 341 339 342 38 154 "" [1 uses])
(note 342 341 343 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(debug_insn 343 342 344 38 (var_location:SI j (reg/v:SI 260 [orig:107 j ] [107])) -1
     (nil))
(debug_insn 344 343 345 38 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 345 344 346 38 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 151 [ num_floats ])
            (const_int 0 [0]))) tiles.cpp:460 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 346 345 347 38 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 361)
            (pc))) tiles.cpp:460 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 361)
;;  succ:       39 [95.2%]  (FALLTHRU)
;;              36 [4.8%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 259 260 261 262 263 264

;; basic block 39, loop depth 1, count 0, freq 159, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 [95.2%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u417(6){ }u418(7){ }u419(16){ }u420(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 259 260 261 262 263 264
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 259 260 261 262 263 264
;; lr  def 	 63 72 265 266 267 268 269 270 271 272 273 274 275 276
(note 347 346 15 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 15 347 16 39 (set (reg:SI 63 [ ivtmp.245 ])
        (const_int 1 [0x1])) tiles.cpp:460 89 {*movsi_internal}
     (nil))
(insn 16 15 373 39 (set (reg:DI 72 [ ivtmp.241 ])
        (const_int 0 [0])) tiles.cpp:460 87 {*movdi_internal_rex64}
     (nil))
(insn 373 16 374 39 (set (reg/f:DI 266 [258])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn 374 373 450 39 (set (reg/f:DI 265 [257])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 450 374 451 39 (set (reg:SI 267 [orig:63 ivtmp.245 ] [63])
        (reg:SI 63 [ ivtmp.245 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 63 [ ivtmp.245 ])
        (nil)))
(insn 451 450 452 39 (set (reg:DI 268 [orig:72 ivtmp.241 ] [72])
        (reg:DI 72 [ ivtmp.241 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 72 [ ivtmp.241 ])
        (nil)))
(insn 452 451 453 39 (set (reg:DI 269 [orig:94 ivtmp.255 ] [94])
        (reg:DI 259 [orig:94 ivtmp.255 ] [94])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 259 [orig:94 ivtmp.255 ] [94])
        (nil)))
(insn 453 452 454 39 (set (reg/v:SI 270 [orig:107 j ] [107])
        (reg/v:SI 260 [orig:107 j ] [107])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 260 [orig:107 j ] [107])
        (nil)))
(insn 454 453 455 39 (set (reg:DI 271 [orig:144 D.26221 ] [144])
        (reg:DI 261 [orig:144 D.26221 ] [144])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 261 [orig:144 D.26221 ] [144])
        (nil)))
(insn 455 454 456 39 (set (reg/v:SI 272 [orig:148 num_tilings ] [148])
        (reg/v:SI 262 [orig:148 num_tilings ] [148])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 262 [orig:148 num_tilings ] [148])
        (nil)))
(insn 456 455 457 39 (set (reg/v/f:DI 273 [orig:152 wrap_widths ] [152])
        (reg/v/f:DI 263 [orig:152 wrap_widths ] [152])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 263 [orig:152 wrap_widths ] [152])
        (nil)))
(insn 457 456 458 39 (set (reg/f:DI 274 [256])
        (reg/f:DI 264 [256])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 264 [256])
        (nil)))
(insn 458 457 459 39 (set (reg/f:DI 275 [257])
        (reg/f:DI 265 [257])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 265 [257])
        (nil)))
(insn 459 458 403 39 (set (reg/f:DI 276 [258])
        (reg/f:DI 266 [258])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 266 [258])
        (nil)))
(jump_insn 403 459 404 39 (set (pc)
        (label_ref 348)) 650 {jump}
     (nil)
 -> 348)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71 122 151 267 268 269 270 271 272 273 274 275 276

(barrier 404 403 353)
;; basic block 40, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 39, next block 1, flags: (RTL)
;;  pred:       37 [9.0%]  (LOOP_EXIT)
;;              7 [100.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u423(6){ }u424(7){ }u425(16){ }u426(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 353 404 354 40 141 "" [2 uses])
(note 354 353 0 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void tileswrap(int*, int, collision_table*, float*, int, int*, int*, int) (_Z9tileswrapPiiP15collision_tablePfiS_S_i, funcdef_no=1101, decl_uid=23893, cgraph_uid=345)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 41 n_edges 60 count 57 (  1.4)
rescanning insn with uid = 50.
deleting insn with uid = 50.
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 41 n_edges 60 count 57 (  1.4)
Reg 146: def dominates all uses has unique first use
Reg 147 uninteresting (no unique first use)
Reg 148: def dominates all uses has unique first use
Reg 149: def dominates all uses has unique first use
Reg 150 uninteresting (no unique first use)
Reg 151 uninteresting (no unique first use)
Ignoring reg 153, has equiv memory
Reg 70: def dominates all uses has unique first use
Reg 156 uninteresting
Reg 159: local to bb 5 def dominates all uses has unique first use
Reg 160 uninteresting
Reg 129: def dominates all uses has unique first use
Reg 168 uninteresting
Reg 145: def dominates all uses has unique first use
Reg 170 uninteresting
Reg 74 uninteresting
Ignoring reg 172, has equiv memory
Reg 173 uninteresting
Reg 184: def dominates all uses has unique first use
Reg 185 uninteresting
Reg 187: local to bb 12 def dominates all uses has unique first use
Reg 189: local to bb 12 def dominates all uses has unique first use
Reg 190 uninteresting
Reg 191 uninteresting
Reg 193: local to bb 13 def dominates all uses has unique first use
Reg 195 uninteresting
Reg 197 uninteresting
Reg 199: local to bb 14 def dominates all uses has unique first use
Reg 201 uninteresting
Reg 203 uninteresting
Reg 205: local to bb 15 def dominates all uses has unique first use
Reg 207 uninteresting
Reg 209 uninteresting
Reg 211: local to bb 16 def dominates all uses has unique first use
Reg 213 uninteresting
Reg 228 uninteresting
Reg 143: def dominates all uses has unique first use
Reg 255 uninteresting (no unique first use)
Reg 82 uninteresting (no unique first use)
Reg 83 uninteresting (no unique first use)
Reg 127: def dominates all uses has unique first use
Reg 253 uninteresting
Ignoring reg 105, has equiv memory
Reg 70 not local to one basic block
Reg 127 not local to one basic block
Reg 129 not local to one basic block
Reg 143 not local to one basic block
Reg 145 not local to one basic block
Reg 146 not local to one basic block
Reg 148 not local to one basic block
Reg 149 not local to one basic block
Examining insn 43, def for 159
  all ok
Reg 184 not local to one basic block
Examining insn 122, def for 189
  all ok
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
;;
;; Loop 2
;;  header 38, latch 37
;;  depth 1, outer 0
;;  nodes: 38 37 36 32 31 30 35 34 33 28 29 27 26 25 39
;;
;; Loop 3
;;  header 25, latch 31
;;  depth 2, outer 2
;;  nodes: 25 31 30 35 34 33 28 29 27 26
;;
;; Loop 4
;;  header 34, latch 34
;;  depth 3, outer 3
;;  nodes: 34
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 24 7 }
;; 7 succs { 40 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 20 11 }
;; 11 succs { 12 20 }
;; 12 succs { 13 18 }
;; 13 succs { 14 18 }
;; 14 succs { 15 18 }
;; 15 succs { 16 18 }
;; 16 succs { 18 }
;; 17 succs { 6 }
;; 18 succs { 21 19 }
;; 19 succs { 6 }
;; 20 succs { 21 }
;; 21 succs { 22 6 }
;; 22 succs { 17 23 }
;; 23 succs { 6 }
;; 24 succs { 38 }
;; 25 succs { 26 27 }
;; 26 succs { 28 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 33 31 }
;; 31 succs { 25 32 }
;; 32 succs { 37 }
;; 33 succs { 34 }
;; 34 succs { 34 35 }
;; 35 succs { 31 }
;; 36 succs { 37 }
;; 37 succs { 38 40 }
;; 38 succs { 39 36 }
;; 39 succs { 25 }
;; 40 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 105: (insn_list:REG_DEP_TRUE 331 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 172: (insn_list:REG_DEP_TRUE 83 (nil))
init_insns for 217: (insn_list:REG_DEP_TRUE 199 (nil))
init_insns for 221: (insn_list:REG_DEP_TRUE 218 (nil))
init_insns for 225: (insn_list:REG_DEP_TRUE 230 (nil))
init_insns for 250: (insn_list:REG_DEP_TRUE 291 (nil))
Reg 255 had equivalence, but can't be eliminated

Pass 0 for finding pseudo/allocno costs

    a131 (r257,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a120 (r257,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a91 (r257,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a73 (r257,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a52 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a119 (r256,l4) best DIREG, allocno DIREG
    a90 (r256,l3) best DIREG, allocno DIREG
    a72 (r256,l2) best DIREG, allocno DIREG
    a49 (r256,l0) best DIREG, allocno DIREG
    a118 (r255,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a89 (r255,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a71 (r255,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a77 (r253,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a95 (r250,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a96 (r247,l3) best AREG, allocno AREG
    a99 (r241,l3) best AREG, allocno AREG
    a97 (r240,l3) best DREG, allocno DREG
    a100 (r238,l3) best AREG, allocno AREG
    a101 (r237,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a103 (r235,l3) best AREG, allocno AREG
    a102 (r234,l3) best DREG, allocno DREG
    a104 (r232,l3) best AREG, allocno AREG
    a3 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a25 (r213,l0) best SSE_REGS, allocno SSE_REGS
    a22 (r212,l0) best SSE_REGS, allocno SSE_REGS
    a23 (r211,l0) best SSE_REGS, allocno SSE_REGS
    a21 (r210,l0) best SSE_REGS, allocno SSE_REGS
    a26 (r209,l0) best SSE_REGS, allocno SSE_REGS
    a32 (r207,l0) best SSE_REGS, allocno SSE_REGS
    a30 (r206,l0) best SSE_REGS, allocno SSE_REGS
    a31 (r205,l0) best SSE_REGS, allocno SSE_REGS
    a29 (r204,l0) best SSE_REGS, allocno SSE_REGS
    a33 (r203,l0) best SSE_REGS, allocno SSE_REGS
    a37 (r201,l0) best SSE_REGS, allocno SSE_REGS
    a35 (r200,l0) best SSE_REGS, allocno SSE_REGS
    a36 (r199,l0) best SSE_REGS, allocno SSE_REGS
    a34 (r198,l0) best SSE_REGS, allocno SSE_REGS
    a38 (r197,l0) best SSE_REGS, allocno SSE_REGS
    a42 (r195,l0) best SSE_REGS, allocno SSE_REGS
    a40 (r194,l0) best SSE_REGS, allocno SSE_REGS
    a41 (r193,l0) best SSE_REGS, allocno SSE_REGS
    a39 (r192,l0) best SSE_REGS, allocno SSE_REGS
    a43 (r191,l0) best SSE_REGS, allocno SSE_REGS
    a24 (r190,l0) best SSE_REGS, allocno SSE_REGS
    a47 (r189,l0) best SSE_REGS, allocno SSE_REGS
    a45 (r188,l0) best SSE_REGS, allocno SSE_REGS
    a46 (r187,l0) best SSE_REGS, allocno SSE_REGS
    a44 (r186,l0) best SSE_REGS, allocno SSE_REGS
    a48 (r185,l0) best SSE_REGS, allocno SSE_REGS
    a27 (r184,l0) best SSE_REGS, allocno SSE_REGS
    a50 (r174,l0) best DREG, allocno DREG
    a51 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a132 (r172,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a134 (r170,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a55 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a59 (r161,l0) best DREG, allocno DREG
    a60 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a58 (r159,l0) best DIREG, allocno DIREG
    a62 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a61 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a130 (r151,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a117 (r151,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a88 (r151,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a70 (r151,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a10 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a129 (r150,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a116 (r150,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a87 (r150,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a69 (r150,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a128 (r149,l1) best CREG, allocno CREG
    a57 (r149,l0) best CREG, allocno CREG
    a127 (r148,l1) best DREG, allocno DREG
    a115 (r148,l4) best DREG, allocno DREG
    a86 (r148,l3) best DREG, allocno DREG
    a68 (r148,l2) best DREG, allocno DREG
    a9 (r148,l0) best DREG, allocno DREG
    a126 (r147,l1) best SIREG, allocno SIREG
    a114 (r147,l4) best SIREG, allocno SIREG
    a85 (r147,l3) best SIREG, allocno SIREG
    a67 (r147,l2) best SIREG, allocno SIREG
    a8 (r147,l0) best SIREG, allocno SIREG
    a125 (r146,l1) best DIREG, allocno DIREG
    a6 (r146,l0) best DIREG, allocno DIREG
    a124 (r145,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a54 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a113 (r143,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a84 (r143,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a66 (r143,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a123 (r129,l1) best SSE_REGS, allocno SSE_REGS
    a56 (r129,l0) best SSE_REGS, allocno SSE_REGS
    a112 (r127,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a94 (r127,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a78 (r110,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a111 (r106,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a83 (r106,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a65 (r106,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a76 (r105,l2) best AREG, allocno AREG
    a122 (r103,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a53 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a110 (r93,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a82 (r93,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a64 (r93,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a109 (r92,l4) best AD_REGS, allocno AD_REGS
    a92 (r92,l3) best AD_REGS, allocno AD_REGS
    a108 (r83,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a93 (r83,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a98 (r82,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a28 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a133 (r74,l1) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a107 (r71,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a81 (r71,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a74 (r71,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a121 (r70,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a106 (r70,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a80 (r70,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a63 (r70,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a105 (r62,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a79 (r62,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a75 (r62,l2) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r255,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,7761 SSE_REGS:13,7761 MMX_REGS:13,7761 FP_TOP_SSE_REGS:65535,39075835 FP_SECOND_SSE_REGS:65535,39075835 FLOAT_SSE_REGS:65535,39075835 FLOAT_INT_REGS:65535,39075835 INT_SSE_REGS:13,7761 FLOAT_INT_SSE_REGS:65535,39075835 ALL_REGS:65535,39075835 MEM:4,2372
  a1(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,845 SSE_REGS:13,845 MMX_REGS:13,845 FP_TOP_SSE_REGS:65535,4065535 FP_SECOND_SSE_REGS:65535,4065535 FLOAT_SSE_REGS:65535,4065535 FLOAT_INT_REGS:65535,4065535 INT_SSE_REGS:13,845 FLOAT_INT_SSE_REGS:65535,4065535 ALL_REGS:65535,4065535 MEM:4,212
  a2(r143,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,4342 SSE_REGS:13,4342 MMX_REGS:13,4342 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,4342 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,1003
  a3(r228,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a4(r150,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:157,560 SSE_REGS:157,560 MMX_REGS:157,560 FP_TOP_SSE_REGS:786421,2769446 FP_SECOND_SSE_REGS:786421,2769446 FLOAT_SSE_REGS:786421,2769446 FLOAT_INT_REGS:786421,2769446 INT_SSE_REGS:157,560 FLOAT_INT_SSE_REGS:786421,2769446 ALL_REGS:786421,2769446 MEM:43,152
  a5(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,637 SSE_REGS:13,637 MMX_REGS:13,637 FP_TOP_SSE_REGS:65535,3114095 FP_SECOND_SSE_REGS:65535,3114095 FLOAT_SSE_REGS:65535,3114095 FLOAT_INT_REGS:65535,3114095 INT_SSE_REGS:13,637 FLOAT_INT_SSE_REGS:65535,3114095 ALL_REGS:65535,3114095 MEM:4,164
  a6(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a7(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a8(r147,l0) costs: AREG:19,19 DREG:19,19 CREG:19,19 BREG:19,19 SIREG:18,18 DIREG:19,19 AD_REGS:19,19 Q_REGS:19,19 NON_Q_REGS:19,19 INDEX_REGS:19,19 GENERAL_REGS:19,19 LEGACY_REGS:19,19 CLOBBERED_REGS:19,19 SSE_FIRST_REG:84,6766 SSE_REGS:84,6766 MMX_REGS:101,6783 FP_TOP_SSE_REGS:458751,4458751 FP_SECOND_SSE_REGS:458751,4458751 FLOAT_SSE_REGS:458751,4458751 FLOAT_INT_REGS:458751,4458751 INT_SSE_REGS:97,6779 FLOAT_INT_SSE_REGS:458751,4458751 ALL_REGS:458751,4458751 MEM:38,1580
  a9(r148,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a10(r151,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117,4446 SSE_REGS:117,4446 MMX_REGS:117,4446 FP_TOP_SSE_REGS:589815,22412970 FP_SECOND_SSE_REGS:589815,22412970 FLOAT_SSE_REGS:589815,22412970 FLOAT_INT_REGS:589815,22412970 INT_SSE_REGS:117,4446 FLOAT_INT_SSE_REGS:589815,22412970 ALL_REGS:589815,22412970 MEM:36,1368
  a11(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:9,9
  a12(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:21,21
  a13(r223,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a14(r225,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a15(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:10,10
  a16(r219,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a17(r221,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a18(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:11,11
  a19(r215,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a20(r217,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a21(r210,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a22(r212,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a23(r211,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a24(r190,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:393212,393212 MEM:45,45
  a25(r213,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a26(r209,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:196605,196605 MEM:23,23
  a27(r184,l0) costs: SSE_FIRST_REG:10,10 SSE_REGS:10,10 INT_SSE_REGS:458755,458755 MEM:62,62
  a28(r79,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:80,80 SSE_REGS:80,80 MMX_REGS:80,80 FP_TOP_SSE_REGS:393212,393212 FP_SECOND_SSE_REGS:393212,393212 FLOAT_SSE_REGS:393212,393212 FLOAT_INT_REGS:393212,393212 INT_SSE_REGS:80,80 FLOAT_INT_SSE_REGS:393212,393212 ALL_REGS:393212,393212 MEM:21,21
  a29(r204,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a30(r206,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a31(r205,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a32(r207,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a33(r203,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a34(r198,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a35(r200,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a36(r199,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a37(r201,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a38(r197,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a39(r192,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a40(r194,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a41(r193,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a42(r195,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a43(r191,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a44(r186,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a45(r188,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a46(r187,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a47(r189,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a48(r185,l0) costs: SSE_FIRST_REG:2,2 SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a49(r256,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a50(r174,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a51(r173,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a52(r257,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a53(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,2158 SSE_REGS:13,2158 MMX_REGS:13,2158 FP_TOP_SSE_REGS:65535,7390845 FP_SECOND_SSE_REGS:65535,7390845 FLOAT_SSE_REGS:65535,7390845 FLOAT_INT_REGS:65535,7390845 INT_SSE_REGS:13,2158 FLOAT_INT_SSE_REGS:65535,7390845 ALL_REGS:65535,7390845 MEM:4,565
  a54(r145,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,103
  a55(r168,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a56(r129,l0) costs: AREG:13,508 DREG:13,508 CREG:13,508 BREG:13,508 SIREG:13,508 DIREG:13,508 AD_REGS:13,508 Q_REGS:13,508 NON_Q_REGS:13,508 INDEX_REGS:13,508 GENERAL_REGS:13,508 LEGACY_REGS:13,508 CLOBBERED_REGS:13,508 FP_TOP_REG:21,780 FP_SECOND_REG:21,780 FLOAT_REGS:21,780 SSE_FIRST_REG:0,66 SSE_REGS:0,66 MMX_REGS:17,644 FP_TOP_SSE_REGS:21,780 FP_SECOND_SSE_REGS:21,780 FLOAT_SSE_REGS:21,780 FLOAT_INT_REGS:21,780 INT_SSE_REGS:13,508 FLOAT_INT_SSE_REGS:21,780 ALL_REGS:21,780 MEM:8,338
  a57(r149,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a58(r159,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a59(r161,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a60(r160,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a61(r153,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:51,51 SSE_REGS:51,51 MMX_REGS:51,51 FP_TOP_SSE_REGS:262139,262139 FP_SECOND_SSE_REGS:262139,262139 FLOAT_SSE_REGS:262139,262139 FLOAT_INT_REGS:262139,262139 INT_SSE_REGS:51,51 FLOAT_INT_SSE_REGS:262139,262139 ALL_REGS:262139,262139 MEM:7,7
  a62(r156,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a63(r70,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a64(r93,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:624,624 SSE_REGS:624,624 MMX_REGS:624,624 FP_TOP_SSE_REGS:3048560,3048560 FP_SECOND_SSE_REGS:3048560,3048560 FLOAT_SSE_REGS:3048560,3048560 FLOAT_INT_REGS:3048560,3048560 INT_SSE_REGS:624,624 FLOAT_INT_SSE_REGS:3048560,3048560 ALL_REGS:3048560,3048560 MEM:160,160
  a65(r106,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:832,832 SSE_REGS:832,832 MMX_REGS:832,832 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:832,832 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:208,208
  a66(r143,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,999
  a67(r147,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,6682 SSE_REGS:208,6682 MMX_REGS:208,6682 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:208,6682 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:48,1542
  a68(r148,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a69(r150,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:403,403 SSE_REGS:403,403 MMX_REGS:403,403 FP_TOP_SSE_REGS:1983025,1983025 FP_SECOND_SSE_REGS:1983025,1983025 FLOAT_SSE_REGS:1983025,1983025 FLOAT_INT_REGS:1983025,1983025 INT_SSE_REGS:403,403 FLOAT_INT_SSE_REGS:1983025,1983025 ALL_REGS:1983025,1983025 MEM:109,109
  a70(r151,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,21823155 FP_SECOND_SSE_REGS:0,21823155 FLOAT_SSE_REGS:0,21823155 FLOAT_INT_REGS:0,21823155 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,21823155 ALL_REGS:0,21823155 MEM:0,1332
  a71(r255,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,7748 SSE_REGS:208,7748 MMX_REGS:208,7748 FP_TOP_SSE_REGS:1000000,39010300 FP_SECOND_SSE_REGS:1000000,39010300 FLOAT_SSE_REGS:1000000,39010300 FLOAT_INT_REGS:1000000,39010300 INT_SSE_REGS:208,7748 FLOAT_INT_SSE_REGS:1000000,39010300 ALL_REGS:1000000,39010300 MEM:48,2368
  a72(r256,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,8853 SSE_REGS:195,8853 MMX_REGS:195,8853 FP_TOP_SSE_REGS:983025,44629335 FP_SECOND_SSE_REGS:983025,44629335 FLOAT_SSE_REGS:983025,44629335 FLOAT_INT_REGS:983025,44629335 INT_SSE_REGS:195,8853 FLOAT_INT_SSE_REGS:983025,44629335 ALL_REGS:983025,44629335 MEM:60,2724
  a73(r257,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,4524 SSE_REGS:195,4524 MMX_REGS:195,4524 FP_TOP_SSE_REGS:983025,22806180 FP_SECOND_SSE_REGS:983025,22806180 FLOAT_SSE_REGS:983025,22806180 FLOAT_INT_REGS:983025,22806180 INT_SSE_REGS:195,4524 FLOAT_INT_SSE_REGS:983025,22806180 ALL_REGS:983025,22806180 MEM:60,1392
  a74(r71,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,41249 SSE_REGS:195,41249 MMX_REGS:195,41249 FP_TOP_SSE_REGS:983025,145473090 FP_SECOND_SSE_REGS:983025,145473090 FLOAT_SSE_REGS:983025,145473090 FLOAT_INT_REGS:983025,145473090 INT_SSE_REGS:195,41249 FLOAT_INT_SSE_REGS:983025,145473090 ALL_REGS:983025,145473090 MEM:60,11693
  a75(r62,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,13182 SSE_REGS:195,13182 MMX_REGS:195,13182 FP_TOP_SSE_REGS:983025,3983025 FP_SECOND_SSE_REGS:983025,3983025 FLOAT_SSE_REGS:983025,3983025 FLOAT_INT_REGS:983025,3983025 INT_SSE_REGS:195,13182 FLOAT_INT_SSE_REGS:983025,3983025 ALL_REGS:983025,3983025 MEM:60,3057
  a76(r105,l2) costs: AREG:-16,-16 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:128,128
  a77(r253,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:128,128
  a78(r110,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:112,112
  a79(r62,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12987,12987 SSE_REGS:12987,12987 MMX_REGS:12987,12987 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:12987,12987 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:2997,2997
  a80(r70,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a81(r71,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:41054,41054 SSE_REGS:41054,41054 MMX_REGS:41054,41054 FP_TOP_SSE_REGS:144490065,144490065 FP_SECOND_SSE_REGS:144490065,144490065 FLOAT_SSE_REGS:144490065,144490065 FLOAT_INT_REGS:144490065,144490065 INT_SSE_REGS:41054,41054 FLOAT_INT_SSE_REGS:144490065,144490065 ALL_REGS:144490065,144490065 MEM:11633,11633
  a82(r93,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a83(r106,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a84(r143,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:999,999
  a85(r147,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6474,6474 SSE_REGS:6474,6474 MMX_REGS:6474,6474 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:6474,6474 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:1494,1494
  a86(r148,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a87(r150,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a88(r151,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a89(r255,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:7540,7540 SSE_REGS:7540,7540 MMX_REGS:7540,7540 FP_TOP_SSE_REGS:38010300,38010300 FP_SECOND_SSE_REGS:38010300,38010300 FLOAT_SSE_REGS:38010300,38010300 FLOAT_INT_REGS:38010300,38010300 INT_SSE_REGS:7540,7540 FLOAT_INT_SSE_REGS:38010300,38010300 ALL_REGS:38010300,38010300 MEM:2320,2320
  a90(r256,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:43646310,43646310 FP_SECOND_SSE_REGS:43646310,43646310 FLOAT_SSE_REGS:43646310,43646310 FLOAT_INT_REGS:43646310,43646310 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:43646310,43646310 ALL_REGS:43646310,43646310 MEM:2664,2664
  a91(r257,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a92(r92,l3) costs: AREG:996,996 DREG:996,996 CREG:1328,1328 BREG:1328,1328 SIREG:1328,1328 DIREG:1328,1328 AD_REGS:1328,1328 Q_REGS:1328,1328 NON_Q_REGS:1328,1328 INDEX_REGS:1328,1328 GENERAL_REGS:1328,1328 LEGACY_REGS:1328,1328 CLOBBERED_REGS:1328,1328 SSE_FIRST_REG:25481,49141 SSE_REGS:25481,49141 MMX_REGS:25481,49141 FP_TOP_SSE_REGS:10000000,12000000 FP_SECOND_SSE_REGS:10000000,12000000 FLOAT_SSE_REGS:10000000,12000000 FLOAT_INT_REGS:10000000,12000000 INT_SSE_REGS:25481,49141 FLOAT_INT_SSE_REGS:10000000,12000000 ALL_REGS:10000000,12000000 MEM:7802,13262
  a93(r83,l3) costs: AREG:664,664 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:17967,17967 SSE_REGS:17967,17967 MMX_REGS:17967,17967 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:17967,17967 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:4990,4990
  a94(r127,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1053,12883 SSE_REGS:1053,12883 MMX_REGS:1053,12883 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:1053,12883 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:324,3054
  a95(r250,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2331,2331
  a96(r247,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:2490,2490 SSE_REGS:2490,2490 MMX_REGS:2490,2490 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2490,2490 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:996,996
  a97(r240,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:11878810,11878810 FP_SECOND_SSE_REGS:11878810,11878810 FLOAT_SSE_REGS:11878810,11878810 FLOAT_INT_REGS:11878810,11878810 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:11878810,11878810 ALL_REGS:11878810,11878810 MEM:1328,1328
  a98(r82,l3) costs: AREG:664,664 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:17954,17954 SSE_REGS:17954,17954 MMX_REGS:17954,17954 FP_TOP_SSE_REGS:15878810,15878810 FP_SECOND_SSE_REGS:15878810,15878810 FLOAT_SSE_REGS:15878810,15878810 FLOAT_INT_REGS:15878810,15878810 INT_SSE_REGS:17954,17954 FLOAT_INT_SSE_REGS:15878810,15878810 ALL_REGS:15878810,15878810 MEM:5153,5153
  a99(r241,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a100(r238,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a101(r237,l3) costs: AREG:332,332 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1328,1328
  a102(r234,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a103(r235,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a104(r232,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1494,1494
  a105(r62,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a106(r70,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a107(r71,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a108(r83,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a109(r92,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:5460,5460
  a110(r93,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a111(r106,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a112(r127,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11830,11830 SSE_REGS:11830,11830 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:11830,11830 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2730,2730
  a113(r143,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a114(r147,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a115(r148,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a116(r150,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a117(r151,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a118(r255,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a119(r256,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a120(r257,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a121(r70,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a122(r103,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2145,2145 SSE_REGS:2145,2145 MMX_REGS:2145,2145 FP_TOP_SSE_REGS:7325310,7325310 FP_SECOND_SSE_REGS:7325310,7325310 FLOAT_SSE_REGS:7325310,7325310 FLOAT_INT_REGS:7325310,7325310 INT_SSE_REGS:2145,2145 FLOAT_INT_SSE_REGS:7325310,7325310 ALL_REGS:7325310,7325310 MEM:561,561
  a123(r129,l1) costs: AREG:495,495 DREG:495,495 CREG:495,495 BREG:495,495 SIREG:495,495 DIREG:495,495 AD_REGS:495,495 Q_REGS:495,495 NON_Q_REGS:495,495 INDEX_REGS:495,495 GENERAL_REGS:495,495 LEGACY_REGS:495,495 CLOBBERED_REGS:495,495 FP_TOP_REG:759,759 FP_SECOND_REG:759,759 FLOAT_REGS:759,759 SSE_FIRST_REG:66,66 SSE_REGS:66,66 MMX_REGS:627,627 FP_TOP_SSE_REGS:759,759 FP_SECOND_SSE_REGS:759,759 FLOAT_SSE_REGS:759,759 FLOAT_INT_REGS:759,759 INT_SSE_REGS:495,495 FLOAT_INT_SSE_REGS:759,759 ALL_REGS:759,759 MEM:330,330
  a124(r145,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:99,99
  a125(r146,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a126(r147,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a127(r148,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a128(r149,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a129(r150,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a130(r151,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a131(r257,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a132(r172,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:858,858 SSE_REGS:858,858 MMX_REGS:858,858 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:264,264
  a133(r74,l1) costs: AREG:627,627 DREG:627,627 CREG:627,627 BREG:627,627 SIREG:627,627 DIREG:627,627 AD_REGS:627,627 Q_REGS:627,627 NON_Q_REGS:627,627 INDEX_REGS:627,627 GENERAL_REGS:627,627 LEGACY_REGS:627,627 CLOBBERED_REGS:627,627 FP_TOP_REG:1386,1386 FP_SECOND_REG:1386,1386 FLOAT_REGS:1386,1386 SSE_FIRST_REG:-33,-33 SSE_REGS:0,0 MMX_REGS:1122,1122 FP_TOP_SSE_REGS:1386,1386 FP_SECOND_SSE_REGS:1386,1386 FLOAT_SSE_REGS:1386,1386 FLOAT_INT_REGS:1386,1386 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:1386,1386 ALL_REGS:1386,1386 MEM:528,528
  a134(r170,l1) costs: AREG:693,693 DREG:693,693 CREG:693,693 BREG:693,693 SIREG:693,693 DIREG:693,693 AD_REGS:693,693 Q_REGS:693,693 NON_Q_REGS:693,693 INDEX_REGS:693,693 GENERAL_REGS:693,693 LEGACY_REGS:693,693 CLOBBERED_REGS:693,693 FP_TOP_REG:1452,1452 FP_SECOND_REG:1452,1452 FLOAT_REGS:1452,1452 SSE_FIRST_REG:33,33 SSE_REGS:66,66 MMX_REGS:1188,1188 FP_TOP_SSE_REGS:1452,1452 FP_SECOND_SSE_REGS:1452,1452 FLOAT_SSE_REGS:1452,1452 FLOAT_INT_REGS:1452,1452 INT_SSE_REGS:924,924 FLOAT_INT_SSE_REGS:1452,1452 ALL_REGS:1452,1452 MEM:594,594


Pass 1 for finding pseudo/allocno costs

    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r256: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a119 (r256,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a90 (r256,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a72 (r256,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r247: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r235: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r213: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r212: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r211: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r210: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r209: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r207: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r206: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r205: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r204: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r203: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r201: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r200: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r199: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r198: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r197: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r195: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r194: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r193: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r192: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r191: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r190: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r189: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r188: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r187: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r186: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r185: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r184: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r174: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r170: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r161: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r149: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a128 (r149,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a127 (r148,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a115 (r148,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a86 (r148,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a68 (r148,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a126 (r147,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a114 (r147,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a85 (r147,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a67 (r147,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a125 (r146,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r129: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r92,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a92 (r92,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r74: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r255,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,7761 SSE_REGS:13,7761 MMX_REGS:13,7761 FP_TOP_SSE_REGS:65535,39075835 FP_SECOND_SSE_REGS:65535,39075835 FLOAT_SSE_REGS:65535,39075835 FLOAT_INT_REGS:65535,39075835 INT_SSE_REGS:13,7761 FLOAT_INT_SSE_REGS:65535,39075835 ALL_REGS:65535,39075835 MEM:4,2372
  a1(r106,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,845 SSE_REGS:13,845 MMX_REGS:13,845 FP_TOP_SSE_REGS:65535,4065535 FP_SECOND_SSE_REGS:65535,4065535 FLOAT_SSE_REGS:65535,4065535 FLOAT_INT_REGS:65535,4065535 INT_SSE_REGS:13,845 FLOAT_INT_SSE_REGS:65535,4065535 ALL_REGS:65535,4065535 MEM:4,212
  a2(r143,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,4342 SSE_REGS:13,4342 MMX_REGS:13,4342 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,4342 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,1003
  a3(r228,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a4(r150,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:157,560 SSE_REGS:157,560 MMX_REGS:157,560 FP_TOP_SSE_REGS:786421,2769446 FP_SECOND_SSE_REGS:786421,2769446 FLOAT_SSE_REGS:786421,2769446 FLOAT_INT_REGS:786421,2769446 INT_SSE_REGS:157,560 FLOAT_INT_SSE_REGS:786421,2769446 ALL_REGS:786421,2769446 MEM:43,152
  a5(r93,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,637 SSE_REGS:13,637 MMX_REGS:13,637 FP_TOP_SSE_REGS:65535,3114095 FP_SECOND_SSE_REGS:65535,3114095 FLOAT_SSE_REGS:65535,3114095 FLOAT_INT_REGS:65535,3114095 INT_SSE_REGS:13,637 FLOAT_INT_SSE_REGS:65535,3114095 ALL_REGS:65535,3114095 MEM:4,164
  a6(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a7(r70,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a8(r147,l0) costs: AREG:32,32 DREG:32,32 CREG:32,32 BREG:32,32 SIREG:31,31 DIREG:32,32 AD_REGS:32,32 Q_REGS:32,32 NON_Q_REGS:32,32 INDEX_REGS:32,32 GENERAL_REGS:32,32 LEGACY_REGS:32,32 CLOBBERED_REGS:32,32 SSE_FIRST_REG:97,6779 SSE_REGS:97,6779 MMX_REGS:114,6796 FP_TOP_SSE_REGS:458764,4458764 FP_SECOND_SSE_REGS:458764,4458764 FLOAT_SSE_REGS:458764,4458764 FLOAT_INT_REGS:458764,4458764 INT_SSE_REGS:110,6792 FLOAT_INT_SSE_REGS:458764,4458764 ALL_REGS:458764,4458764 MEM:51,1593
  a9(r148,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,221 SSE_REGS:13,221 MMX_REGS:13,221 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,221 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,52
  a10(r151,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:117,4446 SSE_REGS:117,4446 MMX_REGS:117,4446 FP_TOP_SSE_REGS:589815,22412970 FP_SECOND_SSE_REGS:589815,22412970 FLOAT_SSE_REGS:589815,22412970 FLOAT_INT_REGS:589815,22412970 INT_SSE_REGS:117,4446 FLOAT_INT_SSE_REGS:589815,22412970 ALL_REGS:589815,22412970 MEM:36,1368
  a11(r65,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:9,9
  a12(r113,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:21,21
  a13(r223,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a14(r225,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a15(r80,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:10,10
  a16(r219,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a17(r221,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a18(r78,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:11,11
  a19(r215,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a20(r217,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:10,10
  a21(r210,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a22(r212,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a23(r211,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a24(r190,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:393212,393212 MEM:45,45
  a25(r213,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:15,15
  a26(r209,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:196605,196605 MEM:23,23
  a27(r184,l0) costs: SSE_REGS:23,23 INT_SSE_REGS:458768,458768 MEM:75,75
  a28(r79,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:80,80 SSE_REGS:80,80 MMX_REGS:80,80 FP_TOP_SSE_REGS:393212,393212 FP_SECOND_SSE_REGS:393212,393212 FLOAT_SSE_REGS:393212,393212 FLOAT_INT_REGS:393212,393212 INT_SSE_REGS:80,80 FLOAT_INT_SSE_REGS:393212,393212 ALL_REGS:393212,393212 MEM:21,21
  a29(r204,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a30(r206,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a31(r205,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a32(r207,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a33(r203,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a34(r198,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a35(r200,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a36(r199,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a37(r201,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a38(r197,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a39(r192,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a40(r194,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a41(r193,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a42(r195,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a43(r191,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a44(r186,l0) costs: SSE_REGS:0,0 FP_TOP_SSE_REGS:262140,262140 FP_SECOND_SSE_REGS:262140,262140 FLOAT_SSE_REGS:262140,262140 INT_SSE_REGS:262140,262140 FLOAT_INT_SSE_REGS:262140,262140 ALL_REGS:262140,262140 MEM:32,32
  a45(r188,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:262140,262140 MEM:30,30
  a46(r187,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:131072,131072 MEM:17,17
  a47(r189,l0) costs: SSE_REGS:0,0 INT_SSE_REGS:131070,131070 MEM:16,16
  a48(r185,l0) costs: SSE_REGS:2,2 INT_SSE_REGS:196607,196607 MEM:25,25
  a49(r256,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a50(r174,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a51(r173,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a52(r257,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a53(r103,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,2158 SSE_REGS:13,2158 MMX_REGS:13,2158 FP_TOP_SSE_REGS:65535,7390845 FP_SECOND_SSE_REGS:65535,7390845 FLOAT_SSE_REGS:65535,7390845 FLOAT_INT_REGS:65535,7390845 INT_SSE_REGS:13,2158 FLOAT_INT_SSE_REGS:65535,7390845 ALL_REGS:65535,7390845 MEM:4,565
  a54(r145,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,1065535 FP_SECOND_SSE_REGS:65535,1065535 FLOAT_SSE_REGS:65535,1065535 FLOAT_INT_REGS:65535,1065535 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,1065535 ALL_REGS:65535,1065535 MEM:4,103
  a55(r168,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a56(r129,l0) costs: AREG:13,508 DREG:13,508 CREG:13,508 BREG:13,508 SIREG:13,508 DIREG:13,508 AD_REGS:13,508 Q_REGS:13,508 NON_Q_REGS:13,508 INDEX_REGS:13,508 GENERAL_REGS:13,508 LEGACY_REGS:13,508 CLOBBERED_REGS:13,508 FP_TOP_REG:21,780 FP_SECOND_REG:21,780 FLOAT_REGS:21,780 SSE_REGS:0,66 MMX_REGS:17,644 FP_TOP_SSE_REGS:21,780 FP_SECOND_SSE_REGS:21,780 FLOAT_SSE_REGS:21,780 FLOAT_INT_REGS:21,780 INT_SSE_REGS:13,508 FLOAT_INT_SSE_REGS:21,780 ALL_REGS:21,780 MEM:8,338
  a57(r149,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,442 SSE_REGS:13,442 MMX_REGS:13,442 FP_TOP_SSE_REGS:65535,2228190 FP_SECOND_SSE_REGS:65535,2228190 FLOAT_SSE_REGS:65535,2228190 FLOAT_INT_REGS:65535,2228190 INT_SSE_REGS:13,442 FLOAT_INT_SSE_REGS:65535,2228190 ALL_REGS:65535,2228190 MEM:4,136
  a58(r159,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a59(r161,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a60(r160,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a61(r153,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:51,51 SSE_REGS:51,51 MMX_REGS:51,51 FP_TOP_SSE_REGS:262139,262139 FP_SECOND_SSE_REGS:262139,262139 FLOAT_SSE_REGS:262139,262139 FLOAT_INT_REGS:262139,262139 INT_SSE_REGS:51,51 FLOAT_INT_SSE_REGS:262139,262139 ALL_REGS:262139,262139 MEM:7,7
  a62(r156,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a63(r70,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a64(r93,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:624,624 SSE_REGS:624,624 MMX_REGS:624,624 FP_TOP_SSE_REGS:3048560,3048560 FP_SECOND_SSE_REGS:3048560,3048560 FLOAT_SSE_REGS:3048560,3048560 FLOAT_INT_REGS:3048560,3048560 INT_SSE_REGS:624,624 FLOAT_INT_SSE_REGS:3048560,3048560 ALL_REGS:3048560,3048560 MEM:160,160
  a65(r106,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:832,832 SSE_REGS:832,832 MMX_REGS:832,832 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:832,832 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:208,208
  a66(r143,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,1000000 FP_SECOND_SSE_REGS:0,1000000 FLOAT_SSE_REGS:0,1000000 FLOAT_INT_REGS:0,1000000 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,1000000 ALL_REGS:0,1000000 MEM:0,999
  a67(r147,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,6682 SSE_REGS:208,6682 MMX_REGS:208,6682 FP_TOP_SSE_REGS:1000000,4000000 FP_SECOND_SSE_REGS:1000000,4000000 FLOAT_SSE_REGS:1000000,4000000 FLOAT_INT_REGS:1000000,4000000 INT_SSE_REGS:208,6682 FLOAT_INT_SSE_REGS:1000000,4000000 ALL_REGS:1000000,4000000 MEM:48,1542
  a68(r148,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:208,208 SSE_REGS:208,208 MMX_REGS:208,208 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:208,208 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:48,48
  a69(r150,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:403,403 SSE_REGS:403,403 MMX_REGS:403,403 FP_TOP_SSE_REGS:1983025,1983025 FP_SECOND_SSE_REGS:1983025,1983025 FLOAT_SSE_REGS:1983025,1983025 FLOAT_INT_REGS:1983025,1983025 INT_SSE_REGS:403,403 FLOAT_INT_SSE_REGS:1983025,1983025 ALL_REGS:1983025,1983025 MEM:109,109
  a70(r151,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,4329 SSE_REGS:0,4329 MMX_REGS:0,4329 FP_TOP_SSE_REGS:0,21823155 FP_SECOND_SSE_REGS:0,21823155 FLOAT_SSE_REGS:0,21823155 FLOAT_INT_REGS:0,21823155 INT_SSE_REGS:0,4329 FLOAT_INT_SSE_REGS:0,21823155 ALL_REGS:0,21823155 MEM:0,1332
  a71(r255,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:208,7748 SSE_REGS:208,7748 MMX_REGS:208,7748 FP_TOP_SSE_REGS:1000000,39010300 FP_SECOND_SSE_REGS:1000000,39010300 FLOAT_SSE_REGS:1000000,39010300 FLOAT_INT_REGS:1000000,39010300 INT_SSE_REGS:208,7748 FLOAT_INT_SSE_REGS:1000000,39010300 ALL_REGS:1000000,39010300 MEM:48,2368
  a72(r256,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:195,8853 SSE_REGS:195,8853 MMX_REGS:195,8853 FP_TOP_SSE_REGS:983025,44629335 FP_SECOND_SSE_REGS:983025,44629335 FLOAT_SSE_REGS:983025,44629335 FLOAT_INT_REGS:983025,44629335 INT_SSE_REGS:195,8853 FLOAT_INT_SSE_REGS:983025,44629335 ALL_REGS:983025,44629335 MEM:60,2724
  a73(r257,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:195,4524 SSE_REGS:195,4524 MMX_REGS:195,4524 FP_TOP_SSE_REGS:983025,22806180 FP_SECOND_SSE_REGS:983025,22806180 FLOAT_SSE_REGS:983025,22806180 FLOAT_INT_REGS:983025,22806180 INT_SSE_REGS:195,4524 FLOAT_INT_SSE_REGS:983025,22806180 ALL_REGS:983025,22806180 MEM:60,1392
  a74(r71,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:195,41249 SSE_REGS:195,41249 MMX_REGS:195,41249 FP_TOP_SSE_REGS:983025,145473090 FP_SECOND_SSE_REGS:983025,145473090 FLOAT_SSE_REGS:983025,145473090 FLOAT_INT_REGS:983025,145473090 INT_SSE_REGS:195,41249 FLOAT_INT_SSE_REGS:983025,145473090 ALL_REGS:983025,145473090 MEM:60,11693
  a75(r62,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:195,13182 SSE_REGS:195,13182 MMX_REGS:195,13182 FP_TOP_SSE_REGS:983025,3983025 FP_SECOND_SSE_REGS:983025,3983025 FLOAT_SSE_REGS:983025,3983025 FLOAT_INT_REGS:983025,3983025 INT_SSE_REGS:195,13182 FLOAT_INT_SSE_REGS:983025,3983025 ALL_REGS:983025,3983025 MEM:60,3057
  a76(r105,l2) costs: AREG:-16,-16 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:128,128
  a77(r253,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:128,128
  a78(r110,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:416,416 SSE_REGS:416,416 MMX_REGS:416,416 FP_TOP_SSE_REGS:2048560,2048560 FP_SECOND_SSE_REGS:2048560,2048560 FLOAT_SSE_REGS:2048560,2048560 FLOAT_INT_REGS:2048560,2048560 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:2048560,2048560 ALL_REGS:2048560,2048560 MEM:112,112
  a79(r62,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12987,12987 SSE_REGS:12987,12987 MMX_REGS:12987,12987 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:12987,12987 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:2997,2997
  a80(r70,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a81(r71,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:41054,41054 SSE_REGS:41054,41054 MMX_REGS:41054,41054 FP_TOP_SSE_REGS:144490065,144490065 FP_SECOND_SSE_REGS:144490065,144490065 FLOAT_SSE_REGS:144490065,144490065 FLOAT_INT_REGS:144490065,144490065 INT_SSE_REGS:41054,41054 FLOAT_INT_SSE_REGS:144490065,144490065 ALL_REGS:144490065,144490065 MEM:11633,11633
  a82(r93,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a83(r106,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a84(r143,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:999,999
  a85(r147,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6474,6474 SSE_REGS:6474,6474 MMX_REGS:6474,6474 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:6474,6474 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:1494,1494
  a86(r148,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a87(r150,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a88(r151,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a89(r255,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:7540,7540 SSE_REGS:7540,7540 MMX_REGS:7540,7540 FP_TOP_SSE_REGS:38010300,38010300 FP_SECOND_SSE_REGS:38010300,38010300 FLOAT_SSE_REGS:38010300,38010300 FLOAT_INT_REGS:38010300,38010300 INT_SSE_REGS:7540,7540 FLOAT_INT_SSE_REGS:38010300,38010300 ALL_REGS:38010300,38010300 MEM:2320,2320
  a90(r256,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:43646310,43646310 FP_SECOND_SSE_REGS:43646310,43646310 FLOAT_SSE_REGS:43646310,43646310 FLOAT_INT_REGS:43646310,43646310 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:43646310,43646310 ALL_REGS:43646310,43646310 MEM:2664,2664
  a91(r257,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4329,4329 SSE_REGS:4329,4329 MMX_REGS:4329,4329 FP_TOP_SSE_REGS:21823155,21823155 FP_SECOND_SSE_REGS:21823155,21823155 FLOAT_SSE_REGS:21823155,21823155 FLOAT_INT_REGS:21823155,21823155 INT_SSE_REGS:4329,4329 FLOAT_INT_SSE_REGS:21823155,21823155 ALL_REGS:21823155,21823155 MEM:1332,1332
  a92(r92,l3) costs: CREG:1328,1328 BREG:1328,1328 SIREG:1328,1328 DIREG:1328,1328 AD_REGS:1328,1328 Q_REGS:1328,1328 NON_Q_REGS:1328,1328 INDEX_REGS:1328,1328 GENERAL_REGS:1328,1328 LEGACY_REGS:1328,1328 CLOBBERED_REGS:1328,1328 SSE_FIRST_REG:25481,49141 SSE_REGS:25481,49141 MMX_REGS:25481,49141 FP_TOP_SSE_REGS:10000000,12000000 FP_SECOND_SSE_REGS:10000000,12000000 FLOAT_SSE_REGS:10000000,12000000 FLOAT_INT_REGS:10000000,12000000 INT_SSE_REGS:25481,49141 FLOAT_INT_SSE_REGS:10000000,12000000 ALL_REGS:10000000,12000000 MEM:7802,13262
  a93(r83,l3) costs: GENERAL_REGS:664,664 SSE_FIRST_REG:17967,17967 SSE_REGS:17967,17967 MMX_REGS:17967,17967 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:17967,17967 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:4990,4990
  a94(r127,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1053,12883 SSE_REGS:1053,12883 MMX_REGS:1053,12883 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:1053,12883 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:324,3054
  a95(r250,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:8658,8658 SSE_REGS:8658,8658 MMX_REGS:8658,8658 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:8658,8658 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2331,2331
  a96(r247,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:2490,2490 SSE_REGS:2490,2490 MMX_REGS:2490,2490 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2490,2490 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:996,996
  a97(r240,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:11878810,11878810 FP_SECOND_SSE_REGS:11878810,11878810 FLOAT_SSE_REGS:11878810,11878810 FLOAT_INT_REGS:11878810,11878810 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:11878810,11878810 ALL_REGS:11878810,11878810 MEM:1328,1328
  a98(r82,l3) costs: GENERAL_REGS:664,664 SSE_FIRST_REG:17954,17954 SSE_REGS:17954,17954 MMX_REGS:17954,17954 FP_TOP_SSE_REGS:15878810,15878810 FP_SECOND_SSE_REGS:15878810,15878810 FLOAT_SSE_REGS:15878810,15878810 FLOAT_INT_REGS:15878810,15878810 INT_SSE_REGS:17954,17954 FLOAT_INT_SSE_REGS:15878810,15878810 ALL_REGS:15878810,15878810 MEM:5153,5153
  a99(r241,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a100(r238,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a101(r237,l3) costs: GENERAL_REGS:332,332 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1328,1328
  a102(r234,l3) costs: AREG:332,332 DREG:0,0 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:4316,4316 SSE_REGS:4316,4316 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4316,4316 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1162,1162
  a103(r235,l3) costs: AREG:0,0 DREG:332,332 CREG:332,332 BREG:332,332 SIREG:332,332 DIREG:332,332 AD_REGS:332,332 Q_REGS:332,332 NON_Q_REGS:332,332 INDEX_REGS:332,332 GENERAL_REGS:332,332 LEGACY_REGS:332,332 CLOBBERED_REGS:332,332 SSE_FIRST_REG:2158,2158 SSE_REGS:2158,2158 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:2158,2158 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:664,664
  a104(r232,l3) costs: AREG:332,332 DREG:664,664 CREG:664,664 BREG:664,664 SIREG:664,664 DIREG:664,664 AD_REGS:664,664 Q_REGS:664,664 NON_Q_REGS:664,664 INDEX_REGS:664,664 GENERAL_REGS:664,664 LEGACY_REGS:664,664 CLOBBERED_REGS:664,664 SSE_FIRST_REG:4648,4648 SSE_REGS:4648,4648 MMX_REGS:4648,4648 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:4648,4648 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:1494,1494
  a105(r62,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a106(r70,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a107(r71,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a108(r83,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a109(r92,l4) costs: CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:5460,5460
  a110(r93,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a111(r106,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a112(r127,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:11830,11830 SSE_REGS:11830,11830 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:11830,11830 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2730,2730
  a113(r143,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a114(r147,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a115(r148,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a116(r150,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a117(r151,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a118(r255,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a119(r256,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a120(r257,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a121(r70,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a122(r103,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2145,2145 SSE_REGS:2145,2145 MMX_REGS:2145,2145 FP_TOP_SSE_REGS:7325310,7325310 FP_SECOND_SSE_REGS:7325310,7325310 FLOAT_SSE_REGS:7325310,7325310 FLOAT_INT_REGS:7325310,7325310 INT_SSE_REGS:2145,2145 FLOAT_INT_SSE_REGS:7325310,7325310 ALL_REGS:7325310,7325310 MEM:561,561
  a123(r129,l1) costs: AREG:495,495 DREG:495,495 CREG:495,495 BREG:495,495 SIREG:495,495 DIREG:495,495 AD_REGS:495,495 Q_REGS:495,495 NON_Q_REGS:495,495 INDEX_REGS:495,495 GENERAL_REGS:495,495 LEGACY_REGS:495,495 CLOBBERED_REGS:495,495 FP_TOP_REG:759,759 FP_SECOND_REG:759,759 FLOAT_REGS:759,759 SSE_REGS:66,66 MMX_REGS:627,627 FP_TOP_SSE_REGS:759,759 FP_SECOND_SSE_REGS:759,759 FLOAT_SSE_REGS:759,759 FLOAT_INT_REGS:759,759 INT_SSE_REGS:495,495 FLOAT_INT_SSE_REGS:759,759 ALL_REGS:759,759 MEM:330,330
  a124(r145,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:99,99
  a125(r146,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a126(r147,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a127(r148,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a128(r149,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a129(r150,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a130(r151,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a131(r257,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:429,429 SSE_REGS:429,429 MMX_REGS:429,429 FP_TOP_SSE_REGS:2162655,2162655 FP_SECOND_SSE_REGS:2162655,2162655 FLOAT_SSE_REGS:2162655,2162655 FLOAT_INT_REGS:2162655,2162655 INT_SSE_REGS:429,429 FLOAT_INT_SSE_REGS:2162655,2162655 ALL_REGS:2162655,2162655 MEM:132,132
  a132(r172,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:858,858 SSE_REGS:858,858 MMX_REGS:858,858 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:264,264
  a133(r74,l1) costs: AREG:858,858 DREG:858,858 CREG:858,858 BREG:858,858 SIREG:858,858 DIREG:858,858 AD_REGS:858,858 Q_REGS:858,858 NON_Q_REGS:858,858 INDEX_REGS:858,858 GENERAL_REGS:858,858 LEGACY_REGS:858,858 CLOBBERED_REGS:858,858 FP_TOP_REG:1386,1386 FP_SECOND_REG:1386,1386 FLOAT_REGS:1386,1386 SSE_FIRST_REG:-33,-33 SSE_REGS:0,0 MMX_REGS:1122,1122 FP_TOP_SSE_REGS:1386,1386 FP_SECOND_SSE_REGS:1386,1386 FLOAT_SSE_REGS:1386,1386 FLOAT_INT_REGS:1386,1386 INT_SSE_REGS:858,858 FLOAT_INT_SSE_REGS:1386,1386 ALL_REGS:1386,1386 MEM:528,528
  a134(r170,l1) costs: AREG:924,924 DREG:924,924 CREG:924,924 BREG:924,924 SIREG:924,924 DIREG:924,924 AD_REGS:924,924 Q_REGS:924,924 NON_Q_REGS:924,924 INDEX_REGS:924,924 GENERAL_REGS:924,924 LEGACY_REGS:924,924 CLOBBERED_REGS:924,924 FP_TOP_REG:1452,1452 FP_SECOND_REG:1452,1452 FLOAT_REGS:1452,1452 SSE_FIRST_REG:33,33 SSE_REGS:66,66 MMX_REGS:1188,1188 FP_TOP_SSE_REGS:1452,1452 FP_SECOND_SSE_REGS:1452,1452 FLOAT_SSE_REGS:1452,1452 FLOAT_INT_REGS:1452,1452 INT_SSE_REGS:924,924 FLOAT_INT_SSE_REGS:1452,1452 ALL_REGS:1452,1452 MEM:594,594

   Insn 393(l0): point = 1
   Insn 370(l0): point = 3
   Insn 20(l0): point = 5
   Insn 246(l0): point = 7
   Insn 244(l0): point = 9
   Insn 242(l0): point = 11
   Insn 369(l0): point = 14
   Insn 13(l0): point = 16
   Insn 74(l0): point = 18
   Insn 72(l0): point = 20
   Insn 69(l0): point = 22
   Insn 381(l0): point = 25
   Insn 63(l0): point = 28
   Insn 62(l0): point = 30
   Insn 388(l0): point = 33
   Insn 223(l0): point = 36
   Insn 222(l0): point = 38
   Insn 219(l0): point = 40
   Insn 218(l0): point = 42
   Insn 217(l0): point = 44
   Insn 214(l0): point = 46
   Insn 14(l0): point = 49
   Insn 210(l0): point = 52
   Insn 209(l0): point = 54
   Insn 208(l0): point = 56
   Insn 177(l0): point = 59
   Insn 176(l0): point = 61
   Insn 173(l0): point = 63
   Insn 172(l0): point = 65
   Insn 171(l0): point = 67
   Insn 170(l0): point = 69
   Insn 169(l0): point = 71
   Insn 167(l0): point = 73
   Insn 166(l0): point = 75
   Insn 165(l0): point = 77
   Insn 132(l0): point = 80
   Insn 131(l0): point = 82
   Insn 128(l0): point = 84
   Insn 127(l0): point = 86
   Insn 126(l0): point = 88
   Insn 125(l0): point = 90
   Insn 124(l0): point = 92
   Insn 123(l0): point = 94
   Insn 122(l0): point = 96
   Insn 121(l0): point = 98
   Insn 120(l0): point = 100
   Insn 117(l0): point = 102
   Insn 115(l0): point = 105
   Insn 114(l0): point = 107
   Insn 111(l0): point = 110
   Insn 110(l0): point = 112
   Insn 107(l0): point = 114
   Insn 106(l0): point = 116
   Insn 103(l0): point = 118
   Insn 102(l0): point = 120
   Insn 101(l0): point = 122
   Insn 100(l0): point = 124
   Insn 97(l0): point = 126
   Insn 96(l0): point = 128
   Insn 95(l0): point = 130
   Insn 147(l0): point = 133
   Insn 146(l0): point = 135
   Insn 143(l0): point = 137
   Insn 142(l0): point = 139
   Insn 141(l0): point = 141
   Insn 140(l0): point = 143
   Insn 139(l0): point = 145
   Insn 137(l0): point = 147
   Insn 136(l0): point = 149
   Insn 135(l0): point = 151
   Insn 162(l0): point = 154
   Insn 161(l0): point = 156
   Insn 158(l0): point = 158
   Insn 157(l0): point = 160
   Insn 156(l0): point = 162
   Insn 155(l0): point = 164
   Insn 154(l0): point = 166
   Insn 152(l0): point = 168
   Insn 151(l0): point = 170
   Insn 150(l0): point = 172
   Insn 383(l0): point = 175
   Insn 188(l0): point = 177
   Insn 187(l0): point = 179
   Insn 186(l0): point = 181
   Insn 185(l0): point = 183
   Insn 184(l0): point = 185
   Insn 182(l0): point = 187
   Insn 181(l0): point = 189
   Insn 180(l0): point = 191
   Insn 385(l0): point = 194
   Insn 199(l0): point = 196
   Insn 198(l0): point = 198
   Insn 195(l0): point = 200
   Insn 391(l0): point = 203
   Insn 236(l0): point = 206
   Insn 235(l0): point = 208
   Insn 231(l0): point = 210
   Insn 230(l0): point = 212
   Insn 229(l0): point = 214
   Insn 226(l0): point = 216
   Insn 376(l0): point = 219
   Insn 33(l0): point = 222
   Insn 32(l0): point = 224
   Insn 378(l0): point = 227
   Insn 52(l0): point = 229
   Insn 51(l0): point = 231
   Insn 50(l0): point = 233
   Insn 49(l0): point = 235
   Insn 45(l0): point = 237
   Insn 44(l0): point = 239
   Insn 43(l0): point = 241
   Insn 40(l0): point = 243
   Insn 29(l0): point = 246
   Insn 28(l0): point = 248
   Insn 24(l0): point = 250
   Insn 11(l0): point = 252
   Insn 9(l0): point = 254
   Insn 8(l0): point = 256
   Insn 7(l0): point = 258
   Insn 6(l0): point = 260
   Insn 5(l0): point = 262
   Insn 4(l0): point = 264
   Insn 401(l2): point = 267
   Insn 372(l2): point = 269
   Insn 371(l2): point = 271
   Insn 16(l2): point = 273
   Insn 15(l2): point = 275
   Insn 19(l2): point = 278
   Insn 344(l2): point = 281
   Insn 343(l2): point = 283
   Insn 337(l2): point = 286
   Insn 336(l2): point = 288
   Insn 335(l2): point = 290
   Insn 332(l2): point = 292
   Insn 331(l2): point = 294
   Insn 330(l2): point = 296
   Insn 329(l2): point = 298
   Insn 328(l2): point = 300
   Insn 327(l2): point = 302
   Insn 326(l2): point = 304
   Insn 324(l2): point = 306
   Insn 323(l2): point = 308
   Insn 397(l2): point = 311
   Insn 18(l2): point = 313
   Insn 305(l3): point = 316
   Insn 257(l3): point = 319
   Insn 256(l3): point = 321
   Insn 255(l3): point = 323
   Insn 253(l3): point = 325
   Insn 298(l3): point = 328
   Insn 297(l3): point = 330
   Insn 295(l3): point = 332
   Insn 294(l3): point = 334
   Insn 291(l3): point = 336
   Insn 290(l3): point = 338
   Insn 287(l3): point = 341
   Insn 286(l3): point = 343
   Insn 277(l3): point = 346
   Insn 276(l3): point = 348
   Insn 275(l3): point = 350
   Insn 271(l3): point = 353
   Insn 270(l3): point = 355
   Insn 269(l3): point = 357
   Insn 268(l3): point = 360
   Insn 267(l3): point = 362
   Insn 395(l3): point = 365
   Insn 261(l3): point = 367
   Insn 260(l3): point = 369
   Insn 259(l3): point = 372
   Insn 283(l3): point = 375
   Insn 281(l3): point = 377
   Insn 399(l3): point = 380
   Insn 312(l3): point = 382
   Insn 309(l4): point = 385
   Insn 308(l4): point = 387
   Insn 88(l1): point = 390
   Insn 87(l1): point = 392
   Insn 86(l1): point = 394
   Insn 83(l1): point = 396
   Insn 82(l1): point = 398
   Insn 80(l1): point = 400
   Insn 79(l1): point = 402
   Insn 78(l1): point = 404
   Insn 77(l1): point = 406
 a0(r255): [1..3]
 a1(r106): [1..5]
 a2(r143): [1..7]
 a3(r228): [8..9]
 a4(r150): [28..256] [1..24]
 a5(r93): [1..11]
 a6(r146): [28..264] [12..24]
 a7(r70): [28..250] [1..24]
 a8(r147): [28..262] [1..24]
 a9(r148): [28..260] [1..24]
 a10(r151): [28..254] [1..24]
 a11(r65): [206..210] [201..202]
 a12(r113): [211..218] [52..56] [36..49]
 a13(r223): [213..216]
 a14(r225): [213..214]
 a15(r80): [217..218] [36..40]
 a16(r219): [43..46]
 a17(r221): [43..44]
 a18(r78): [133..193] [57..114]
 a19(r215): [197..200]
 a20(r217): [197..198]
 a21(r210): [178..183]
 a22(r212): [180..185]
 a23(r211): [184..189]
 a24(r190): [186..193] [133..174] [59..94]
 a25(r213): [186..187]
 a26(r209): [188..191]
 a27(r184): [190..193] [133..174] [59..102]
 a28(r79): [133..174] [62..116]
 a29(r204): [64..69]
 a30(r206): [66..71]
 a31(r205): [70..75]
 a32(r207): [72..73]
 a33(r203): [74..77]
 a34(r198): [159..164]
 a35(r200): [161..166]
 a36(r199): [165..170]
 a37(r201): [167..168]
 a38(r197): [169..172]
 a39(r192): [138..143]
 a40(r194): [140..145]
 a41(r193): [144..149]
 a42(r195): [146..147]
 a43(r191): [148..151]
 a44(r186): [85..90]
 a45(r188): [87..92]
 a46(r187): [91..98]
 a47(r189): [93..96]
 a48(r185): [97..100]
 a49(r256): [121..126]
 a50(r174): [125..128]
 a51(r173): [129..130]
 a52(r257): [14..14]
 a53(r103): [14..16]
 a54(r145): [14..18]
 a55(r168): [19..20]
 a56(r129): [14..22]
 a57(r149): [222..258] [14..24]
 a58(r159): [232..241]
 a59(r161): [236..237]
 a60(r160): [238..239]
 a61(r153): [240..252]
 a62(r156): [242..243]
 a63(r70): [267..315]
 a64(r93): [267..315]
 a65(r106): [267..315]
 a66(r143): [267..315]
 a67(r147): [267..315]
 a68(r148): [267..315]
 a69(r150): [267..315]
 a70(r151): [267..315]
 a71(r255): [267..315]
 a72(r256): [267..269]
 a73(r257): [267..271]
 a74(r71): [267..273]
 a75(r62): [267..275]
 a76(r105): [295..296]
 a77(r253): [307..308]
 a78(r110): [309..313] [278..278]
 a79(r62): [316..384]
 a80(r70): [316..384]
 a81(r71): [316..384]
 a82(r93): [316..384]
 a83(r106): [316..384]
 a84(r143): [316..384]
 a85(r147): [316..384]
 a86(r148): [316..384]
 a87(r150): [316..384]
 a88(r151): [316..384]
 a89(r255): [316..384]
 a90(r256): [316..384]
 a91(r257): [316..384]
 a92(r92): [383..384] [375..379] [365..367] [341..355] [316..318]
 a93(r83): [339..384] [316..323]
 a94(r127): [316..316]
 a95(r250): [337..338]
 a96(r247): [377..377]
 a97(r240): [356..358]
 a98(r82): [368..374] [356..364] [319..325]
 a99(r241): [357..357]
 a100(r238): [359..360]
 a101(r237): [361..362]
 a102(r234): [368..370]
 a103(r235): [369..369]
 a104(r232): [371..372]
 a105(r62): [385..389]
 a106(r70): [385..389]
 a107(r71): [385..389]
 a108(r83): [385..389]
 a109(r92): [385..389]
 a110(r93): [385..389]
 a111(r106): [385..389]
 a112(r127): [385..389]
 a113(r143): [385..389]
 a114(r147): [385..389]
 a115(r148): [385..389]
 a116(r150): [385..389]
 a117(r151): [385..389]
 a118(r255): [385..389]
 a119(r256): [385..389]
 a120(r257): [385..389]
 a121(r70): [390..408]
 a122(r103): [390..408]
 a123(r129): [390..408]
 a124(r145): [390..408]
 a125(r146): [390..408]
 a126(r147): [390..408]
 a127(r148): [390..408]
 a128(r149): [390..408]
 a129(r150): [390..408]
 a130(r151): [390..408]
 a131(r257): [390..408]
 a132(r172): [397..398]
 a133(r74): [399..400]
 a134(r170): [405..406]
Compressing live ranges: from 409 to 123 - 30%
Ranges after the compression:
 a0(r255): [0..1]
 a1(r106): [0..1]
 a2(r143): [0..1]
 a3(r228): [2..3]
 a4(r150): [0..78]
 a5(r93): [0..3]
 a6(r146): [4..78]
 a7(r70): [0..78]
 a8(r147): [0..78]
 a9(r148): [0..78]
 a10(r151): [0..78]
 a11(r65): [63..66]
 a12(r113): [67..70] [9..14]
 a13(r223): [67..68]
 a14(r225): [67..68]
 a15(r80): [69..70] [9..10]
 a16(r219): [11..12]
 a17(r221): [11..12]
 a18(r78): [35..60] [15..30]
 a19(r215): [61..62]
 a20(r217): [61..62]
 a21(r210): [51..52]
 a22(r212): [51..54]
 a23(r211): [53..58]
 a24(r190): [55..60] [35..50] [15..28]
 a25(r213): [55..56]
 a26(r209): [57..60]
 a27(r184): [59..60] [35..50] [15..30]
 a28(r79): [35..50] [15..30]
 a29(r204): [15..16]
 a30(r206): [15..18]
 a31(r205): [17..22]
 a32(r207): [19..20]
 a33(r203): [21..22]
 a34(r198): [43..44]
 a35(r200): [43..46]
 a36(r199): [45..50]
 a37(r201): [47..48]
 a38(r197): [49..50]
 a39(r192): [35..36]
 a40(r194): [35..38]
 a41(r193): [37..42]
 a42(r195): [39..40]
 a43(r191): [41..42]
 a44(r186): [23..24]
 a45(r188): [23..26]
 a46(r187): [25..30]
 a47(r189): [27..28]
 a48(r185): [29..30]
 a49(r256): [31..32]
 a50(r174): [31..32]
 a51(r173): [33..34]
 a52(r257): [5..5]
 a53(r103): [5..6]
 a54(r145): [5..6]
 a55(r168): [7..8]
 a56(r129): [5..8]
 a57(r149): [71..78] [5..8]
 a58(r159): [71..76]
 a59(r161): [71..72]
 a60(r160): [73..74]
 a61(r153): [75..78]
 a62(r156): [77..78]
 a63(r70): [79..87]
 a64(r93): [79..87]
 a65(r106): [79..87]
 a66(r143): [79..87]
 a67(r147): [79..87]
 a68(r148): [79..87]
 a69(r150): [79..87]
 a70(r151): [79..87]
 a71(r255): [79..87]
 a72(r256): [79..80]
 a73(r257): [79..80]
 a74(r71): [79..80]
 a75(r62): [79..80]
 a76(r105): [82..83]
 a77(r253): [84..85]
 a78(r110): [86..87] [81..81]
 a79(r62): [88..114]
 a80(r70): [88..114]
 a81(r71): [88..114]
 a82(r93): [88..114]
 a83(r106): [88..114]
 a84(r143): [88..114]
 a85(r147): [88..114]
 a86(r148): [88..114]
 a87(r150): [88..114]
 a88(r151): [88..114]
 a89(r255): [88..114]
 a90(r256): [88..114]
 a91(r257): [88..114]
 a92(r92): [110..114] [103..104] [94..95] [88..89]
 a93(r83): [94..114] [88..91]
 a94(r127): [88..88]
 a95(r250): [92..93]
 a96(r247): [111..111]
 a97(r240): [96..98]
 a98(r82): [105..109] [96..102] [90..91]
 a99(r241): [97..97]
 a100(r238): [99..100]
 a101(r237): [101..102]
 a102(r234): [105..107]
 a103(r235): [106..106]
 a104(r232): [108..109]
 a105(r62): [115..116]
 a106(r70): [115..116]
 a107(r71): [115..116]
 a108(r83): [115..116]
 a109(r92): [115..116]
 a110(r93): [115..116]
 a111(r106): [115..116]
 a112(r127): [115..116]
 a113(r143): [115..116]
 a114(r147): [115..116]
 a115(r148): [115..116]
 a116(r150): [115..116]
 a117(r151): [115..116]
 a118(r255): [115..116]
 a119(r256): [115..116]
 a120(r257): [115..116]
 a121(r70): [117..122]
 a122(r103): [117..122]
 a123(r129): [117..122]
 a124(r145): [117..122]
 a125(r146): [117..122]
 a126(r147): [117..122]
 a127(r148): [117..122]
 a128(r149): [117..122]
 a129(r150): [117..122]
 a130(r151): [117..122]
 a131(r257): [117..122]
 a132(r172): [117..118]
 a133(r74): [119..120]
 a134(r170): [121..122]
    Creating cap  a135(r256,l0: a72(r256,l2))
    Creating cap  a136(r257,l0: a73(r257,l2))
    Creating cap  a137(r71,l0: a74(r71,l2))
    Creating cap  a138(r62,l0: a75(r62,l2))
    Creating cap  a139(r105,l0: a76(r105,l2))
    Creating cap  a140(r253,l0: a77(r253,l2))
    Creating cap  a141(r110,l0: a78(r110,l2))
    Creating cap  a142(r92,l2: a92(r92,l3))
    Creating cap  a143(r83,l2: a93(r83,l3))
    Creating cap  a144(r127,l2: a94(r127,l3))
    Creating cap  a145(r250,l2: a95(r250,l3))
    Creating cap  a146(r247,l2: a96(r247,l3))
    Creating cap  a147(r240,l2: a97(r240,l3))
    Creating cap  a148(r82,l2: a98(r82,l3))
    Creating cap  a149(r241,l2: a99(r241,l3))
    Creating cap  a150(r238,l2: a100(r238,l3))
    Creating cap  a151(r237,l2: a101(r237,l3))
    Creating cap  a152(r234,l2: a102(r234,l3))
    Creating cap  a153(r235,l2: a103(r235,l3))
    Creating cap  a154(r232,l2: a104(r232,l3))
    Creating cap  a155(r172,l0: a132(r172,l1))
    Creating cap  a156(r74,l0: a133(r74,l1))
    Creating cap  a157(r170,l0: a134(r170,l1))
    Creating cap  a158(r92,l0: a142(r92,l2: a92(r92,l3)))
    Creating cap  a159(r83,l0: a143(r83,l2: a93(r83,l3)))
    Creating cap  a160(r127,l0: a144(r127,l2: a94(r127,l3)))
    Creating cap  a161(r250,l0: a145(r250,l2: a95(r250,l3)))
    Creating cap  a162(r247,l0: a146(r247,l2: a96(r247,l3)))
    Creating cap  a163(r240,l0: a147(r240,l2: a97(r240,l3)))
    Creating cap  a164(r82,l0: a148(r82,l2: a98(r82,l3)))
    Creating cap  a165(r241,l0: a149(r241,l2: a99(r241,l3)))
    Creating cap  a166(r238,l0: a150(r238,l2: a100(r238,l3)))
    Creating cap  a167(r237,l0: a151(r237,l2: a101(r237,l3)))
    Creating cap  a168(r234,l0: a152(r234,l2: a102(r234,l3)))
    Creating cap  a169(r235,l0: a153(r235,l2: a103(r235,l3)))
    Creating cap  a170(r232,l0: a154(r232,l2: a104(r232,l3)))
+++Allocating 3168 bytes for conflict table (uncompressed size 4104)
;; a0(r255,l0) conflicts: a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a1(r106,l0) conflicts: a0(r255,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a2(r143,l0) conflicts: a0(r255,l0) a1(r106,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a3(r228,l0) conflicts: a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r150,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a3(r228,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0) a55(r168,l0) a12(r113,l0) a15(r80,l0) a16(r219,l0) a17(r221,l0) a28(r79,l0) a18(r78,l0) a49(r256,l0) a50(r174,l0) a51(r173,l0) a19(r215,l0) a20(r217,l0) a11(r65,l0) a13(r223,l0) a14(r225,l0) a59(r161,l0) a58(r159,l0) a60(r160,l0) a61(r153,l0) a62(r156,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0) a155(r172,l0)
;;     total conflict hard regs: 0 1 4 5 38
;;     conflict hard regs: 0 1 4 5 38

;; a5(r93,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a3(r228,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs:

;; a6(r146,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0) a55(r168,l0) a12(r113,l0) a15(r80,l0) a16(r219,l0) a17(r221,l0) a28(r79,l0) a18(r78,l0) a49(r256,l0) a50(r174,l0) a51(r173,l0) a19(r215,l0) a20(r217,l0) a11(r65,l0) a13(r223,l0) a14(r225,l0) a59(r161,l0) a58(r159,l0) a60(r160,l0) a61(r153,l0) a62(r156,l0) a155(r172,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a7(r70,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a3(r228,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0) a55(r168,l0) a12(r113,l0) a15(r80,l0) a16(r219,l0) a17(r221,l0) a28(r79,l0) a18(r78,l0) a49(r256,l0) a50(r174,l0) a51(r173,l0) a19(r215,l0) a20(r217,l0) a11(r65,l0) a13(r223,l0) a14(r225,l0) a59(r161,l0) a58(r159,l0) a60(r160,l0) a61(r153,l0) a62(r156,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0) a155(r172,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a8(r147,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a9(r148,l0) a10(r151,l0) a3(r228,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0) a55(r168,l0) a12(r113,l0) a15(r80,l0) a16(r219,l0) a17(r221,l0) a28(r79,l0) a18(r78,l0) a49(r256,l0) a50(r174,l0) a51(r173,l0) a19(r215,l0) a20(r217,l0) a11(r65,l0) a13(r223,l0) a14(r225,l0) a59(r161,l0) a58(r159,l0) a60(r160,l0) a61(r153,l0) a62(r156,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0) a155(r172,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a9(r148,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a10(r151,l0) a3(r228,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0) a55(r168,l0) a12(r113,l0) a15(r80,l0) a16(r219,l0) a17(r221,l0) a28(r79,l0) a18(r78,l0) a49(r256,l0) a50(r174,l0) a51(r173,l0) a19(r215,l0) a20(r217,l0) a11(r65,l0) a13(r223,l0) a14(r225,l0) a59(r161,l0) a58(r159,l0) a60(r160,l0) a61(r153,l0) a62(r156,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0) a155(r172,l0)
;;     total conflict hard regs: 0-2 4 5 37 38
;;     conflict hard regs: 0-2 4 5 37 38

;; a10(r151,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a3(r228,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0) a55(r168,l0) a12(r113,l0) a15(r80,l0) a16(r219,l0) a17(r221,l0) a28(r79,l0) a18(r78,l0) a49(r256,l0) a50(r174,l0) a51(r173,l0) a19(r215,l0) a20(r217,l0) a11(r65,l0) a13(r223,l0) a14(r225,l0) a59(r161,l0) a58(r159,l0) a60(r160,l0) a61(r153,l0) a62(r156,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a141(r110,l0) a139(r105,l0) a140(r253,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0) a155(r172,l0)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a11(r65,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a12(r113,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a15(r80,l0) a16(r219,l0) a17(r221,l0) a13(r223,l0) a14(r225,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r223,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a12(r113,l0) a14(r225,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r225,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a12(r113,l0) a13(r223,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r80,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a12(r113,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a16(r219,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a12(r113,l0) a17(r221,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a17(r221,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a12(r113,l0) a16(r219,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a18(r78,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a28(r79,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a19(r215,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a20(r217,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a20(r217,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a19(r215,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a21(r210,l0) conflicts: a22(r212,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a22(r212,l0) conflicts: a21(r210,l0) a23(r211,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r211,l0) conflicts: a24(r190,l0) a22(r212,l0) a25(r213,l0) a26(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a24(r190,l0) conflicts: a29(r204,l0) a30(r206,l0) a27(r184,l0) a31(r205,l0) a32(r207,l0) a33(r203,l0) a44(r186,l0) a45(r188,l0) a46(r187,l0) a47(r189,l0) a39(r192,l0) a40(r194,l0) a41(r193,l0) a42(r195,l0) a43(r191,l0) a34(r198,l0) a35(r200,l0) a36(r199,l0) a37(r201,l0) a38(r197,l0) a23(r211,l0) a25(r213,l0) a26(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a25(r213,l0) conflicts: a24(r190,l0) a23(r211,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r209,l0) conflicts: a24(r190,l0) a27(r184,l0) a23(r211,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a27(r184,l0) conflicts: a29(r204,l0) a30(r206,l0) a24(r190,l0) a31(r205,l0) a32(r207,l0) a33(r203,l0) a44(r186,l0) a45(r188,l0) a46(r187,l0) a47(r189,l0) a48(r185,l0) a39(r192,l0) a40(r194,l0) a41(r193,l0) a42(r195,l0) a43(r191,l0) a34(r198,l0) a35(r200,l0) a36(r199,l0) a37(r201,l0) a38(r197,l0) a26(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a28(r79,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a18(r78,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a29(r204,l0) conflicts: a30(r206,l0) a24(r190,l0) a27(r184,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a30(r206,l0) conflicts: a29(r204,l0) a24(r190,l0) a27(r184,l0) a31(r205,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a31(r205,l0) conflicts: a30(r206,l0) a24(r190,l0) a27(r184,l0) a32(r207,l0) a33(r203,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a32(r207,l0) conflicts: a24(r190,l0) a27(r184,l0) a31(r205,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a33(r203,l0) conflicts: a24(r190,l0) a27(r184,l0) a31(r205,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a34(r198,l0) conflicts: a24(r190,l0) a27(r184,l0) a35(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a35(r200,l0) conflicts: a24(r190,l0) a27(r184,l0) a34(r198,l0) a36(r199,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a36(r199,l0) conflicts: a24(r190,l0) a27(r184,l0) a35(r200,l0) a37(r201,l0) a38(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a37(r201,l0) conflicts: a24(r190,l0) a27(r184,l0) a36(r199,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a38(r197,l0) conflicts: a24(r190,l0) a27(r184,l0) a36(r199,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a39(r192,l0) conflicts: a24(r190,l0) a27(r184,l0) a40(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a40(r194,l0) conflicts: a24(r190,l0) a27(r184,l0) a39(r192,l0) a41(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a41(r193,l0) conflicts: a24(r190,l0) a27(r184,l0) a40(r194,l0) a42(r195,l0) a43(r191,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a42(r195,l0) conflicts: a24(r190,l0) a27(r184,l0) a41(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a43(r191,l0) conflicts: a24(r190,l0) a27(r184,l0) a41(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a44(r186,l0) conflicts: a24(r190,l0) a27(r184,l0) a45(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a45(r188,l0) conflicts: a24(r190,l0) a27(r184,l0) a44(r186,l0) a46(r187,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a46(r187,l0) conflicts: a24(r190,l0) a27(r184,l0) a45(r188,l0) a47(r189,l0) a48(r185,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a47(r189,l0) conflicts: a24(r190,l0) a27(r184,l0) a46(r187,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a48(r185,l0) conflicts: a27(r184,l0) a46(r187,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a49(r256,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a50(r174,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a50(r174,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a49(r256,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a51(r173,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a52(r257,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0) a155(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a53(r103,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a52(r257,l0) a54(r145,l0) a57(r149,l0) a155(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a54(r145,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a57(r149,l0) a155(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a55(r168,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a57(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a56(r129,l0) conflicts: a156(r74,l0) a157(r170,l0)
;;     total conflict hard regs: 21
;;     conflict hard regs:

;; a57(r149,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a55(r168,l0) a59(r161,l0) a58(r159,l0) a60(r160,l0) a61(r153,l0) a62(r156,l0) a155(r172,l0)
;;     total conflict hard regs: 0 1 4 5 37 38
;;     conflict hard regs: 0 1 4 5 37 38

;; a58(r159,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a57(r149,l0) a59(r161,l0) a60(r160,l0) a61(r153,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a59(r161,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a57(r149,l0) a58(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a60(r160,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a57(r149,l0) a58(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a61(r153,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a57(r149,l0) a58(r159,l0) a62(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a62(r156,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a57(r149,l0) a61(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a63(r70,l2) conflicts: a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a64(r93,l2) conflicts: a63(r70,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a65(r106,l2) conflicts: a63(r70,l2) a64(r93,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a66(r143,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a67(r147,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a68(r148,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a69(r150,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a70(r151,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a71(r255,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a78(r110,l2) a76(r105,l2) a77(r253,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1 4 5
;;     conflict hard regs: 0 1 4 5

;; a72(r256,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a73(r257,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a74(r71,l2) a75(r62,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a74(r71,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a75(r62,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a75(r62,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a142(r92,l2) a143(r83,l2) a144(r127,l2) a148(r82,l2) a145(r250,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a76(r105,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a77(r253,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a78(r110,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a79(r62,l3) conflicts: a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a80(r70,l3) conflicts: a79(r62,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a81(r71,l3) conflicts: a79(r62,l3) a80(r70,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a82(r93,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a83(r106,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a84(r143,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a85(r147,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a86(r148,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a87(r150,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a88(r151,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a89(r255,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a90(r256,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a91(r257,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a92(r92,l3) a93(r83,l3) a94(r127,l3) a98(r82,l3) a95(r250,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a92(r92,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a94(r127,l3) a96(r247,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a93(r83,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a94(r127,l3) a98(r82,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3) a96(r247,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a94(r127,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a95(r250,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a96(r247,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a92(r92,l3) a93(r83,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a97(r240,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a98(r82,l3) a99(r241,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a98(r82,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a97(r240,l3) a99(r241,l3) a100(r238,l3) a101(r237,l3) a102(r234,l3) a103(r235,l3) a104(r232,l3)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a99(r241,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a98(r82,l3) a97(r240,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a100(r238,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a98(r82,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a101(r237,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a98(r82,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a102(r234,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a98(r82,l3) a103(r235,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a103(r235,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a98(r82,l3) a102(r234,l3)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a104(r232,l3) conflicts: a79(r62,l3) a80(r70,l3) a81(r71,l3) a82(r93,l3) a83(r106,l3) a84(r143,l3) a85(r147,l3) a86(r148,l3) a87(r150,l3) a88(r151,l3) a89(r255,l3) a90(r256,l3) a91(r257,l3) a93(r83,l3) a98(r82,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a105(r62,l4) conflicts: a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a106(r70,l4) conflicts: a105(r62,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a107(r71,l4) conflicts: a105(r62,l4) a106(r70,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a108(r83,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a109(r92,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a110(r93,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a111(r106,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a112(r127,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a113(r143,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a114(r147,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a115(r148,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a116(r150,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a117(r151,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a118(r255,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a118(r255,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a119(r256,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a119(r256,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a120(r257,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a120(r257,l4) conflicts: a105(r62,l4) a106(r70,l4) a107(r71,l4) a108(r83,l4) a109(r92,l4) a110(r93,l4) a111(r106,l4) a112(r127,l4) a113(r143,l4) a114(r147,l4) a115(r148,l4) a116(r150,l4) a117(r151,l4) a118(r255,l4) a119(r256,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a121(r70,l1) conflicts: a132(r172,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a122(r103,l1) conflicts: a132(r172,l1) a121(r70,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a123(r129,l1) conflicts: a133(r74,l1) a134(r170,l1)
;;     total conflict hard regs: 21
;;     conflict hard regs: 21

;; a124(r145,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a125(r146,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a124(r145,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a126(r147,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a127(r148,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a128(r149,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a129(r150,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a130(r151,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a131(r257,l1) conflicts: a132(r172,l1) a121(r70,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a132(r172,l1) conflicts: a121(r70,l1) a122(r103,l1) a124(r145,l1) a125(r146,l1) a126(r147,l1) a127(r148,l1) a128(r149,l1) a129(r150,l1) a130(r151,l1) a131(r257,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a133(r74,l1) conflicts: a123(r129,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a134(r170,l1) conflicts: a123(r129,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a135(r256,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a136(r257,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a137(r71,l0) a138(r62,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a137(r71,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a138(r62,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a138(r62,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a158(r92,l0) a159(r83,l0) a160(r127,l0) a164(r82,l0) a161(r250,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a139(r105,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a140(r253,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a141(r110,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a142(r92,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a144(r127,l2) a146(r247,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a143(r83,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a142(r92,l2) a144(r127,l2) a148(r82,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2) a146(r247,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a144(r127,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a142(r92,l2) a143(r83,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a145(r250,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a146(r247,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a142(r92,l2) a143(r83,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a147(r240,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a148(r82,l2) a149(r241,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a148(r82,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a147(r240,l2) a149(r241,l2) a150(r238,l2) a151(r237,l2) a152(r234,l2) a153(r235,l2) a154(r232,l2)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a149(r241,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a148(r82,l2) a147(r240,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a150(r238,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a148(r82,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a151(r237,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a148(r82,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a152(r234,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a148(r82,l2) a153(r235,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a153(r235,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a148(r82,l2) a152(r234,l2)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a154(r232,l2) conflicts: a63(r70,l2) a64(r93,l2) a65(r106,l2) a66(r143,l2) a67(r147,l2) a68(r148,l2) a69(r150,l2) a70(r151,l2) a71(r255,l2) a72(r256,l2) a73(r257,l2) a74(r71,l2) a75(r62,l2) a143(r83,l2) a148(r82,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a155(r172,l0) conflicts: a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a6(r146,l0) a52(r257,l0) a53(r103,l0) a54(r145,l0) a57(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a156(r74,l0) conflicts: a56(r129,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a157(r170,l0) conflicts: a56(r129,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a158(r92,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a160(r127,l0) a162(r247,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a159(r83,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a158(r92,l0) a160(r127,l0) a164(r82,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0) a162(r247,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a160(r127,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a158(r92,l0) a159(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a161(r250,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a162(r247,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a158(r92,l0) a159(r83,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a163(r240,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a164(r82,l0) a165(r241,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a164(r82,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a163(r240,l0) a165(r241,l0) a166(r238,l0) a167(r237,l0) a168(r234,l0) a169(r235,l0) a170(r232,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a165(r241,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a164(r82,l0) a163(r240,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a166(r238,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a164(r82,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a167(r237,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a164(r82,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a168(r234,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a164(r82,l0) a169(r235,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a169(r235,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a164(r82,l0) a168(r234,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a170(r232,l0) conflicts: a0(r255,l0) a1(r106,l0) a2(r143,l0) a5(r93,l0) a4(r150,l0) a7(r70,l0) a8(r147,l0) a9(r148,l0) a10(r151,l0) a135(r256,l0) a136(r257,l0) a137(r71,l0) a138(r62,l0) a159(r83,l0) a164(r82,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a5(r93)<->a6(r146)@1:move
  cp1:a13(r223)<->a15(r80)@1:shuffle
  cp2:a11(r65)<->a12(r113)@1:shuffle
  cp3:a12(r113)<->a18(r78)@1:move
  cp4:a11(r65)<->a19(r215)@1:shuffle
  cp5:a23(r211)<->a27(r184)@1:constraint
  cp6:a25(r213)<->a26(r209)@1:constraint
  cp7:a22(r212)<->a25(r213)@1:constraint
  cp8:a22(r212)<->a24(r190)@1:constraint
  cp9:a21(r210)<->a23(r211)@1:shuffle
  cp10:a32(r207)<->a33(r203)@1:constraint
  cp11:a30(r206)<->a32(r207)@1:constraint
  cp12:a29(r204)<->a31(r205)@1:shuffle
  cp13:a37(r201)<->a38(r197)@1:constraint
  cp14:a35(r200)<->a37(r201)@1:constraint
  cp15:a34(r198)<->a36(r199)@1:shuffle
  cp16:a42(r195)<->a43(r191)@1:constraint
  cp17:a40(r194)<->a42(r195)@1:constraint
  cp18:a39(r192)<->a41(r193)@1:shuffle
  cp19:a47(r189)<->a48(r185)@1:constraint
  cp20:a45(r188)<->a47(r189)@1:constraint
  cp21:a44(r186)<->a46(r187)@1:shuffle
  cp22:a50(r174)<->a51(r173)@1:shuffle
  cp23:a60(r160)<->a61(r153)@1:shuffle
  cp24:a59(r161)<->a60(r160)@1:shuffle
  cp25:a77(r253)<->a78(r110)@2:shuffle
  cp26:a93(r83)<->a95(r250)@41:shuffle
  cp27:a100(r238)<->a101(r237)@20:shuffle
  cp28:a99(r241)<->a100(r238)@166:constraint
  cp29:a97(r240)<->a100(r238)@20:shuffle
  cp30:a103(r235)<->a104(r232)@166:constraint
  cp31:a102(r234)<->a104(r232)@20:shuffle
  cp32:a92(r92)<->a98(r82)@166:constraint
  cp33:a132(r172)<->a133(r74)@4:shuffle
  cp34:a140(r253)<->a141(r110)@2:shuffle
  cp35:a143(r83)<->a145(r250)@41:shuffle
  cp36:a150(r238)<->a151(r237)@20:shuffle
  cp37:a149(r241)<->a150(r238)@166:constraint
  cp38:a147(r240)<->a150(r238)@20:shuffle
  cp39:a153(r235)<->a154(r232)@166:constraint
  cp40:a152(r234)<->a154(r232)@20:shuffle
  cp41:a142(r92)<->a148(r82)@166:constraint
  cp42:a155(r172)<->a156(r74)@4:shuffle
  cp43:a159(r83)<->a161(r250)@41:shuffle
  cp44:a166(r238)<->a167(r237)@20:shuffle
  cp45:a165(r241)<->a166(r238)@166:constraint
  cp46:a163(r240)<->a166(r238)@20:shuffle
  cp47:a169(r235)<->a170(r232)@166:constraint
  cp48:a168(r234)<->a170(r232)@20:shuffle
  cp49:a158(r92)<->a164(r82)@166:constraint
  regions=5, blocks=41, points=123
    allocnos=171 (big 0), copies=50, conflicts=8, ranges=151

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 40 24(->38:l2) 23 22 21 20 19 18 17 16 15 14 13 12 11 10 8(->9:l1) 7 6 5 4 3 2
    all: 0r255 1r106 2r143 3r228 4r150 5r93 6r146 7r70 8r147 9r148 10r151 11r65 12r113 13r223 14r225 15r80 16r219 17r221 18r78 19r215 20r217 21r210 22r212 23r211 24r190 25r213 26r209 27r184 28r79 29r204 30r206 31r205 32r207 33r203 34r198 35r200 36r199 37r201 38r197 39r192 40r194 41r193 42r195 43r191 44r186 45r188 46r187 47r189 48r185 49r256 50r174 51r173 52r257 53r103 54r145 55r168 56r129 57r149 58r159 59r161 60r160 61r153 62r156 135r256 136r257 137r71 138r62 139r105 140r253 141r110 155r172 156r74 157r170 158r92 159r83 160r127 161r250 162r247 163r240 164r82 165r241 166r238 167r237 168r234 169r235 170r232
    modified regnos: 62 65 70 71 74 78 79 80 82 83 92 93 103 105 106 110 113 127 129 143 145 146 147 148 149 150 151 153 156 159 160 161 168 170 172 173 174 184 185 186 187 188 189 190 191 192 193 194 195 197 198 199 200 201 203 204 205 206 207 209 210 211 212 213 215 217 219 221 223 225 228 232 234 235 237 238 240 241 247 250 253 255 256 257
    border:
    Pressure: GENERAL_REGS=17 SSE_REGS=4
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 21-28 45-51)@3856
        2:( 0-6 37-44)@20286
          3:( 1-6 37-44)@28848
            4:( 2-6 37-44)@57354
              5:( 2 3 6 37-44)@10238
                6:( 3 6 39-44)@3122
                  7:( 3 6 41-44)@1272
      Spill a56(r129,l0)
      Allocno a0r255 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a1r106 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a2r143 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a3r228 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a4r150 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 38 45-51)
      Allocno a5r93 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a6r146 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a7r70 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a8r147 of GENERAL_REGS(15) has 8 avail. regs  3 6 39-44, node:  3 6 39-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a9r148 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-38 45-51)
      Allocno a10r151 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a11r65 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a12r113 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a13r223 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a14r225 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a15r80 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a16r219 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a17r221 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a18r78 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a19r215 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a20r217 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a21r210 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a22r212 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a23r211 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a24r190 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a25r213 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a26r209 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a27r184 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a28r79 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a29r204 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a30r206 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a31r205 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a32r207 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a33r203 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a34r198 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a35r200 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a36r199 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a37r201 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a38r197 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a39r192 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a40r194 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a41r193 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a42r195 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a43r191 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a44r186 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a45r188 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a46r187 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a47r189 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a48r185 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a49r256 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a50r174 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a51r173 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a52r257 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a53r103 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a54r145 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a55r168 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a57r149 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-38 45-51)
      Allocno a58r159 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a59r161 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a60r160 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a61r153 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a62r156 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a135r256 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a136r257 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a137r71 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a138r62 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a139r105 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a140r253 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a141r110 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a155r172 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a156r74 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a157r170 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a158r92 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a159r83 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a160r127 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a161r250 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a162r247 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a163r240 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a164r82 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a165r241 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a166r238 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a167r237 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a168r234 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a169r235 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a170r232 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a47(r189,l0)(cost 0)
      Pushing a46(r187,l0)(cost 0)
      Pushing a42(r195,l0)(cost 0)
      Pushing a41(r193,l0)(cost 0)
      Pushing a37(r201,l0)(cost 0)
      Pushing a36(r199,l0)(cost 0)
      Pushing a32(r207,l0)(cost 0)
        Making a27(r184,l0) colorable
      Pushing a31(r205,l0)(cost 0)
        Making a24(r190,l0) colorable
      Pushing a25(r213,l0)(cost 0)
      Pushing a23(r211,l0)(cost 0)
      Pushing a62(r156,l0)(cost 0)
      Pushing a60(r160,l0)(cost 0)
      Pushing a59(r161,l0)(cost 0)
      Pushing a55(r168,l0)(cost 0)
      Pushing a51(r173,l0)(cost 0)
      Pushing a50(r174,l0)(cost 0)
      Pushing a20(r217,l0)(cost 0)
      Pushing a17(r221,l0)(cost 0)
      Pushing a14(r225,l0)(cost 0)
      Pushing a3(r228,l0)(cost 0)
      Pushing a58(r159,l0)(cost 0)
      Pushing a49(r256,l0)(cost 0)
      Pushing a48(r185,l0)(cost 0)
      Pushing a43(r191,l0)(cost 0)
      Pushing a38(r197,l0)(cost 0)
      Pushing a33(r203,l0)(cost 0)
      Pushing a26(r209,l0)(cost 0)
      Pushing a19(r215,l0)(cost 0)
      Pushing a18(r78,l0)(cost 0)
      Pushing a16(r219,l0)(cost 0)
      Pushing a15(r80,l0)(cost 0)
      Pushing a13(r223,l0)(cost 0)
      Pushing a11(r65,l0)(cost 0)
      Pushing a45(r188,l0)(cost 0)
      Pushing a44(r186,l0)(cost 0)
      Pushing a40(r194,l0)(cost 0)
      Pushing a39(r192,l0)(cost 0)
      Pushing a35(r200,l0)(cost 0)
      Pushing a34(r198,l0)(cost 0)
      Pushing a30(r206,l0)(cost 0)
      Pushing a29(r204,l0)(cost 0)
      Pushing a22(r212,l0)(cost 0)
      Pushing a21(r210,l0)(cost 0)
      Pushing a61(r153,l0)(cost 0)
      Pushing a24(r190,l0)(cost 43)
      Pushing a28(r79,l0)(cost 0)
      Pushing a12(r113,l0)(cost 0)
      Pushing a27(r184,l0)(cost 52)
      Pushing a141(r110,l0: a78(r110,l2))(cost 0)
      Pushing a140(r253,l0: a77(r253,l2))(cost 0)
      Pushing a139(r105,l0: a76(r105,l2))(cost 0)
      Pushing a157(r170,l0: a134(r170,l1))(cost 0)
      Pushing a156(r74,l0: a133(r74,l1))(cost 0)
      Pushing a155(r172,l0: a132(r172,l1))(cost 0)
      Pushing a53(r103,l0)(cost 0)
      Pushing a169(r235,l0: a153(r235,l2: a103(r235,l3)))(cost 0)
        Making a168(r234,l0: a152(r234,l2: a102(r234,l3))) colorable
      Pushing a165(r241,l0: a149(r241,l2: a99(r241,l3)))(cost 0)
        Making a163(r240,l0: a147(r240,l2: a97(r240,l3))) colorable
      Pushing a162(r247,l0: a146(r247,l2: a96(r247,l3)))(cost 0)
      Pushing a167(r237,l0: a151(r237,l2: a101(r237,l3)))(cost 0)
      Pushing a168(r234,l0: a152(r234,l2: a102(r234,l3)))(cost 1162)
      Pushing a163(r240,l0: a147(r240,l2: a97(r240,l3)))(cost 1328)
      Pushing a170(r232,l0: a154(r232,l2: a104(r232,l3)))(cost 0)
      Pushing a166(r238,l0: a150(r238,l2: a100(r238,l3)))(cost 0)
      Pushing a161(r250,l0: a145(r250,l2: a95(r250,l3)))(cost 0)
      Pushing a160(r127,l0: a144(r127,l2: a94(r127,l3)))(cost 0)
        Making a158(r92,l0: a142(r92,l2: a92(r92,l3))) colorable
      Pushing a158(r92,l0: a142(r92,l2: a92(r92,l3)))(cost 11934)
      Pushing a7(r70,l0)(potential spill: pri=2, cost=52)
      Pushing a9(r148,l0)(potential spill: pri=2, cost=52)
        Making a135(r256,l0: a72(r256,l2)) colorable
        Making a136(r257,l0: a73(r257,l2)) colorable
        Making a137(r71,l0: a74(r71,l2)) colorable
        Making a138(r62,l0: a75(r62,l2)) colorable
        Making a159(r83,l0: a143(r83,l2: a93(r83,l3))) colorable
        Making a164(r82,l0: a148(r82,l2: a98(r82,l3))) colorable
      Pushing a136(r257,l0: a73(r257,l2))(cost 1392)
      Pushing a135(r256,l0: a72(r256,l2))(cost 2724)
        Making a0(r255,l0) colorable
        Making a1(r106,l0) colorable
        Making a2(r143,l0) colorable
        Making a5(r93,l0) colorable
      Pushing a5(r93,l0)(cost 164)
      Pushing a1(r106,l0)(cost 212)
      Pushing a2(r143,l0)(cost 1003)
      Pushing a0(r255,l0)(cost 2372)
        Making a10(r151,l0) colorable
      Pushing a10(r151,l0)(cost 1368)
        Making a6(r146,l0) colorable
        Making a52(r257,l0) colorable
        Making a54(r145,l0) colorable
        Making a57(r149,l0) colorable
      Pushing a6(r146,l0)(cost 7)
      Pushing a57(r149,l0)(cost 136)
        Making a8(r147,l0) colorable
      Pushing a54(r145,l0)(cost 103)
      Pushing a52(r257,l0)(cost 136)
        Making a4(r150,l0) colorable
      Pushing a4(r150,l0)(cost 150)
      Pushing a8(r147,l0)(cost 1561)
      Pushing a138(r62,l0: a75(r62,l2))(cost 3057)
      Pushing a164(r82,l0: a148(r82,l2: a98(r82,l3)))(cost 4489)
      Pushing a159(r83,l0: a143(r83,l2: a93(r83,l3)))(cost 4326)
      Pushing a137(r71,l0: a74(r71,l2))(cost 11693)
      Popping a137(r71,l0: a74(r71,l2))  -- assign reg 2
      Popping a159(r83,l0: a143(r83,l2: a93(r83,l3)))  -- assign reg 39
      Popping a164(r82,l0: a148(r82,l2: a98(r82,l3)))  -- assign reg 40
      Popping a138(r62,l0: a75(r62,l2))  -- assign reg 37
      Popping a8(r147,l0)  -- assign reg 3
      Popping a4(r150,l0)  -- assign reg 6
      Popping a52(r257,l0)  -- assign reg 41
      Popping a54(r145,l0)  -- assign reg 42
      Popping a57(r149,l0)  -- assign reg 43
      Popping a6(r146,l0)  -- assign reg 44
      Popping a10(r151,l0)  -- assign reg 38
      Popping a0(r255,l0)  -- assign reg 41
      Popping a2(r143,l0)  -- assign reg 42
      Popping a1(r106,l0)  -- assign reg 43
      Popping a5(r93,l0)  -- assign reg 44
      Popping a135(r256,l0: a72(r256,l2))  -- assign reg 4
      Popping a136(r257,l0: a73(r257,l2))  -- assign reg 5
      Popping a9(r148,l0)  -- spill
      Popping a7(r70,l0)  -- spill
      Popping a158(r92,l0: a142(r92,l2: a92(r92,l3)))  -- assign reg 40
      Popping a160(r127,l0: a144(r127,l2: a94(r127,l3)))  -- assign reg 0
      Popping a161(r250,l0: a145(r250,l2: a95(r250,l3)))  -- assign reg 39
      Popping a166(r238,l0: a150(r238,l2: a100(r238,l3)))  -- assign reg 0
      Popping a170(r232,l0: a154(r232,l2: a104(r232,l3)))  -- assign reg 0
      Popping a163(r240,l0: a147(r240,l2: a97(r240,l3)))  -- assign reg 1
      Popping a168(r234,l0: a152(r234,l2: a102(r234,l3)))  -- assign reg 1
      Popping a167(r237,l0: a151(r237,l2: a101(r237,l3)))  -- assign reg 0
      Popping a162(r247,l0: a146(r247,l2: a96(r247,l3)))  -- assign reg 0
      Popping a165(r241,l0: a149(r241,l2: a99(r241,l3)))  -- assign reg 0
      Popping a169(r235,l0: a153(r235,l2: a103(r235,l3)))  -- assign reg 0
      Popping a53(r103,l0)  -- assign reg 0
      Popping a155(r172,l0: a132(r172,l1))  -- assign reg 1
      Popping a156(r74,l0: a133(r74,l1))  -- assign reg 21
      Popping a157(r170,l0: a134(r170,l1))  -- assign reg 21
      Popping a139(r105,l0: a76(r105,l2))  -- assign reg 0
      Popping a140(r253,l0: a77(r253,l2))  -- assign reg 0
      Popping a141(r110,l0: a78(r110,l2))  -- assign reg 0
      Popping a27(r184,l0)  -- assign reg 21
      Popping a12(r113,l0)  -- assign reg 0
      Popping a28(r79,l0)  -- assign reg 1
      Popping a24(r190,l0)  -- assign reg 22
      Popping a61(r153,l0)  -- assign reg 0
      Popping a21(r210,l0)  -- assign reg 21
      Popping a22(r212,l0)  -- assign reg 22
      Popping a29(r204,l0)  -- assign reg 23
      Popping a30(r206,l0)  -- assign reg 24
      Popping a34(r198,l0)  -- assign reg 23
      Popping a35(r200,l0)  -- assign reg 24
      Popping a39(r192,l0)  -- assign reg 23
      Popping a40(r194,l0)  -- assign reg 24
      Popping a44(r186,l0)  -- assign reg 23
      Popping a45(r188,l0)  -- assign reg 24
      Popping a11(r65,l0)  -- assign reg 0
      Popping a13(r223,l0)  -- assign reg 1
      Popping a15(r80,l0)  -- assign reg 1
      Popping a16(r219,l0)  -- assign reg 1
      Popping a18(r78,l0)  -- assign reg 0
      Popping a19(r215,l0)  -- assign reg 0
      Popping a26(r209,l0)  -- assign reg 23
      Popping a33(r203,l0)  -- assign reg 24
      Popping a38(r197,l0)  -- assign reg 24
      Popping a43(r191,l0)  -- assign reg 24
      Popping a48(r185,l0)  -- assign reg 22
      Popping a49(r256,l0)  -- assign reg 5
      Popping a58(r159,l0)  -- assign reg 5
      Popping a3(r228,l0)  -- assign reg 0
      Popping a14(r225,l0)  -- assign reg 2
      Popping a17(r221,l0)  -- assign reg 2
      Popping a20(r217,l0)  -- assign reg 1
      Popping a50(r174,l0)  -- assign reg 1
      Popping a51(r173,l0)  -- assign reg 1
      Popping a55(r168,l0)  -- assign reg 0
      Popping a59(r161,l0)  -- assign reg 1
      Popping a60(r160,l0)  -- assign reg 0
      Popping a62(r156,l0)  -- assign reg 1
      Popping a23(r211,l0)  -- assign reg 21
      Popping a25(r213,l0)  -- assign reg 23
      Popping a31(r205,l0)  -- assign reg 23
      Popping a32(r207,l0)  -- assign reg 24
      Popping a36(r199,l0)  -- assign reg 23
      Popping a37(r201,l0)  -- assign reg 24
      Popping a41(r193,l0)  -- assign reg 23
      Popping a42(r195,l0)  -- assign reg 24
      Popping a46(r187,l0)  -- assign reg 23
      Popping a47(r189,l0)  -- assign reg 24
Spilling a4r150 for a10r151
Assigning 6 to a10r151
Spilling a6r146 for a53r103
Assigning 44 to a53r103
       a6(r146,l0)  -- assign memory
       a4(r150,l0)  -- assign memory

  Loop 2 (parent 0, header bb38, depth 1)
    bbs: 39(->25:l3) 38 37(->40:l0) 36 32
    all: 63r70 64r93 65r106 66r143 67r147 68r148 69r150 70r151 71r255 72r256 73r257 74r71 75r62 76r105 77r253 78r110 142r92 143r83 144r127 145r250 146r247 147r240 148r82 149r241 150r238 151r237 152r234 153r235 154r232
    modified regnos: 62 71 82 83 92 93 105 106 110 127 232 234 235 237 238 240 241 247 250 253 256 257
    border: 63r70 64r93 65r106 66r143 67r147 68r148 69r150 70r151 71r255
    Pressure: GENERAL_REGS=17
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@18242
          2:( 1-6 37-44)@28848
            3:( 2-6 37-44)@57354
              4:( 2 3 6 37-44)@13218
                5:( 3 6 41-44)@410
      Allocno a63r70 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a64r93 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a65r106 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a66r143 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a67r147 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a68r148 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a69r150 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a70r151 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a71r255 of GENERAL_REGS(15) has 11 avail. regs  2 3 6 37-44, node:  2 3 6 37-44 (confl regs =  0 1 4 5 7-36 45-51)
      Allocno a72r256 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a73r257 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a74r71 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a75r62 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a76r105 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a77r253 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a78r110 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a142r92 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a143r83 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a144r127 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a145r250 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a146r247 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a147r240 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a148r82 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a149r241 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a150r238 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a151r237 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a152r234 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a153r235 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a154r232 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a78(r110,l2)(cost 0)
      Pushing a77(r253,l2)(cost 0)
      Pushing a76(r105,l2)(cost 0)
      Pushing a153(r235,l2: a103(r235,l3))(cost 0)
        Making a152(r234,l2: a102(r234,l3)) colorable
      Pushing a149(r241,l2: a99(r241,l3))(cost 0)
        Making a147(r240,l2: a97(r240,l3)) colorable
      Pushing a146(r247,l2: a96(r247,l3))(cost 0)
      Pushing a151(r237,l2: a101(r237,l3))(cost 0)
      Pushing a152(r234,l2: a102(r234,l3))(cost 1162)
      Pushing a147(r240,l2: a97(r240,l3))(cost 1328)
      Pushing a154(r232,l2: a104(r232,l3))(cost 0)
      Pushing a150(r238,l2: a100(r238,l3))(cost 0)
      Pushing a145(r250,l2: a95(r250,l3))(cost 0)
      Pushing a144(r127,l2: a94(r127,l3))(cost 0)
        Making a142(r92,l2: a92(r92,l3)) colorable
      Pushing a142(r92,l2: a92(r92,l3))(cost 11934)
      Pushing a63(r70,l2)(potential spill: pri=1, cost=32)
      Pushing a68(r148,l2)(potential spill: pri=1, cost=32)
        Making a72(r256,l2) colorable
        Making a73(r257,l2) colorable
        Making a74(r71,l2) colorable
        Making a75(r62,l2) colorable
        Making a143(r83,l2: a93(r83,l3)) colorable
        Making a148(r82,l2: a98(r82,l3)) colorable
      Pushing a73(r257,l2)(cost 1392)
      Pushing a72(r256,l2)(cost 2724)
        Making a64(r93,l2) colorable
        Making a65(r106,l2) colorable
        Making a66(r143,l2) colorable
        Making a67(r147,l2) colorable
        Making a70(r151,l2) colorable
        Making a71(r255,l2) colorable
      Pushing a64(r93,l2)(cost 176)
      Pushing a65(r106,l2)(cost 224)
      Pushing a70(r151,l2)(cost 1348)
      Pushing a66(r143,l2)(cost 1015)
      Pushing a71(r255,l2)(cost 2384)
        Making a69(r150,l2) colorable
      Pushing a69(r150,l2)(cost 93)
      Pushing a67(r147,l2)(cost 1558)
      Pushing a75(r62,l2)(cost 3057)
      Pushing a148(r82,l2: a98(r82,l3))(cost 4489)
      Pushing a143(r83,l2: a93(r83,l3))(cost 4326)
      Pushing a74(r71,l2)(cost 11693)
      Popping a74(r71,l2)  -- assign reg 2
      Popping a143(r83,l2: a93(r83,l3))  -- assign reg 4
      Popping a148(r82,l2: a98(r82,l3))  -- assign reg 37
      Popping a75(r62,l2)  -- assign reg 38
      Popping a67(r147,l2)  -- assign reg 3
      Popping a69(r150,l2)  -- assign reg 6
      Popping a71(r255,l2)  -- assign reg 41
      Popping a66(r143,l2)  -- assign reg 42
      Popping a70(r151,l2)  -- assign reg 43
      Popping a65(r106,l2)  -- assign reg 44
      Popping a64(r93,l2)  -- assign reg 39
      Popping a72(r256,l2)  -- assign reg 5
      Popping a73(r257,l2)  -- assign reg 40
      Popping a68(r148,l2)  -- spill
      Popping a63(r70,l2)  -- spill
      Popping a142(r92,l2: a92(r92,l3))  -- assign reg 37
      Popping a144(r127,l2: a94(r127,l3))  -- assign reg 0
      Popping a145(r250,l2: a95(r250,l3))  -- assign reg 4
      Popping a150(r238,l2: a100(r238,l3))  -- assign reg 0
      Popping a154(r232,l2: a104(r232,l3))  -- assign reg 0
      Popping a147(r240,l2: a97(r240,l3))  -- assign reg 1
      Popping a152(r234,l2: a102(r234,l3))  -- assign reg 1
      Popping a151(r237,l2: a101(r237,l3))  -- assign reg 0
      Popping a146(r247,l2: a96(r247,l3))  -- assign reg 0
      Popping a149(r241,l2: a99(r241,l3))  -- assign reg 0
      Popping a153(r235,l2: a103(r235,l3))  -- assign reg 0
      Popping a76(r105,l2)  -- assign reg 0
      Popping a77(r253,l2)  -- assign reg 0
      Popping a78(r110,l2)  -- assign reg 0
Spilling a69r150 for a64r93
Assigning 6 to a64r93
       a69(r150,l2)  -- assign memory

  Loop 3 (parent 2, header bb25, depth 2)
    bbs: 35 33(->34:l4) 31(->32:l2) 30 29 28 27 26 25
    all: 79r62 80r70 81r71 82r93 83r106 84r143 85r147 86r148 87r150 88r151 89r255 90r256 91r257 92r92 93r83 94r127 95r250 96r247 97r240 98r82 99r241 100r238 101r237 102r234 103r235 104r232
    modified regnos: 62 71 82 83 92 127 232 234 235 237 238 240 241 247 250
    border: 79r62 80r70 81r71 82r93 83r106 84r143 85r147 86r148 87r150 88r151 89r255 90r256 91r257
    Pressure: GENERAL_REGS=17
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@17410
          2:( 1-6 37-44)@28848
            3:( 2-6 37-44)@69164
      Spill a80(r70,l3)
      Spill a86(r148,l3)
      Spill a87(r150,l3)
      Allocno a79r62 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a81r71 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a82r93 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a83r106 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a84r143 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a85r147 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a88r151 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a89r255 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a90r256 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a91r257 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a92r92 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a93r83 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a94r127 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a95r250 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a96r247 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a97r240 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a98r82 of GENERAL_REGS(15) has 13 avail. regs  2-6 37-44, node:  2-6 37-44 (confl regs =  0 1 7-36 45-51)
      Allocno a99r241 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a100r238 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a101r237 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a102r234 of GENERAL_REGS(15) has 14 avail. regs  1-6 37-44, node:  1-6 37-44 (confl regs =  0 7-36 45-51)
      Allocno a103r235 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, ^node:  0-6 37-44 (confl regs =  1 7-36 45-51)
      Allocno a104r232 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a103(r235,l3)(cost 0)
      Pushing a99(r241,l3)(cost 0)
      Pushing a96(r247,l3)(cost 0)
      Pushing a101(r237,l3)(cost 0)
      Pushing a102(r234,l3)(cost 0)
      Pushing a97(r240,l3)(cost 0)
      Pushing a104(r232,l3)(cost 0)
        Making a98(r82,l3) colorable
      Pushing a100(r238,l3)(cost 0)
      Pushing a95(r250,l3)(cost 0)
      Pushing a98(r82,l3)(cost 4489)
        Making a79(r62,l3) colorable
        Making a81(r71,l3) colorable
        Making a82(r93,l3) colorable
        Making a83(r106,l3) colorable
        Making a84(r143,l3) colorable
        Making a85(r147,l3) colorable
        Making a88(r151,l3) colorable
        Making a89(r255,l3) colorable
        Making a90(r256,l3) colorable
        Making a91(r257,l3) colorable
        Making a93(r83,l3) colorable
      Pushing a83(r106,l3)(cost 240)
      Pushing a82(r93,l3)(cost 240)
      Pushing a91(r257,l3)(cost 1460)
      Pushing a88(r151,l3)(cost 1572)
      Pushing a84(r143,l3)(cost 1239)
      Pushing a89(r255,l3)(cost 2560)
      Pushing a90(r256,l3)(cost 2792)
      Pushing a85(r147,l3)(cost 1734)
      Pushing a79(r62,l3)(cost 3125)
      Pushing a93(r83,l3)(cost 4326)
      Pushing a94(r127,l3)(cost 0)
      Pushing a81(r71,l3)(cost 11761)
      Pushing a92(r92,l3)(cost 0)
      Popping a92(r92,l3)  -- assign reg 1
      Popping a81(r71,l3)  -- assign reg 2
      Popping a94(r127,l3)  -- assign reg 0
      Popping a93(r83,l3)  -- assign reg 4
      Popping a79(r62,l3)  -- assign reg 38
      Popping a85(r147,l3)  -- assign reg 3
      Popping a90(r256,l3)  -- assign reg 5
      Popping a89(r255,l3)  -- assign reg 41
      Popping a84(r143,l3)  -- assign reg 42
      Popping a88(r151,l3)  -- assign reg 43
      Popping a91(r257,l3)  -- assign reg 40
      Popping a82(r93,l3)  -- assign reg 6
      Popping a83(r106,l3)  -- assign reg 44
      Popping a98(r82,l3)  -- assign reg 37
      Popping a95(r250,l3)  -- assign reg 4
      Popping a100(r238,l3)  -- assign reg 0
      Popping a104(r232,l3)  -- assign reg 0
      Popping a97(r240,l3)  -- assign reg 1
      Popping a102(r234,l3)  -- assign reg 1
      Popping a101(r237,l3)  -- assign reg 0
      Popping a96(r247,l3)  -- assign reg 0
      Popping a99(r241,l3)  -- assign reg 0
      Popping a103(r235,l3)  -- assign reg 0

  Loop 4 (parent 3, header bb34, depth 3)
    bbs: 34(->35:l3)
    all: 105r62 106r70 107r71 108r83 109r92 110r93 111r106 112r127 113r143 114r147 115r148 116r150 117r151 118r255 119r256 120r257
    modified regnos: 92
    border: 105r62 106r70 107r71 108r83 109r92 110r93 111r106 112r127 113r143 114r147 115r148 116r150 117r151 118r255 119r256 120r257
    Pressure: GENERAL_REGS=16
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@16380
      Spill a106(r70,l4)
      Spill a115(r148,l4)
      Spill a116(r150,l4)
      Allocno a105r62 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a107r71 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a108r83 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a109r92 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a110r93 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a111r106 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a112r127 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a113r143 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a114r147 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a117r151 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a118r255 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a119r256 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a120r257 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a120(r257,l4)(cost 0)
      Pushing a119(r256,l4)(cost 0)
      Pushing a118(r255,l4)(cost 0)
      Pushing a117(r151,l4)(cost 0)
      Pushing a114(r147,l4)(cost 0)
      Pushing a113(r143,l4)(cost 0)
      Pushing a111(r106,l4)(cost 0)
      Pushing a110(r93,l4)(cost 0)
      Pushing a108(r83,l4)(cost 0)
      Pushing a107(r71,l4)(cost 0)
      Pushing a105(r62,l4)(cost 0)
      Pushing a112(r127,l4)(cost 0)
      Pushing a109(r92,l4)(cost 0)
      Popping a109(r92,l4)  -- assign reg 1
      Popping a112(r127,l4)  -- assign reg 0
      Popping a105(r62,l4)  -- assign reg 38
      Popping a107(r71,l4)  -- assign reg 2
      Popping a108(r83,l4)  -- assign reg 4
      Popping a110(r93,l4)  -- assign reg 6
      Popping a111(r106,l4)  -- assign reg 44
      Popping a113(r143,l4)  -- assign reg 42
      Popping a114(r147,l4)  -- assign reg 3
      Popping a117(r151,l4)  -- assign reg 43
      Popping a118(r255,l4)  -- assign reg 41
      Popping a119(r256,l4)  -- assign reg 5
      Popping a120(r257,l4)  -- assign reg 40

  Loop 1 (parent 0, header bb9, depth 1)
    bbs: 9(->10:l0)
    all: 121r70 122r103 123r129 124r145 125r146 126r147 127r148 128r149 129r150 130r151 131r257 132r172 133r74 134r170
    modified regnos: 74 103 170 172
    border: 121r70 122r103 123r129 124r145 125r146 126r147 127r148 128r149 129r150 130r151 131r257
    Pressure: GENERAL_REGS=11 SSE_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@1650
          2:( 3 6 41-44)@726
      Spill a121(r70,l1)
      Spill a125(r146,l1)
      Spill a127(r148,l1)
      Spill a129(r150,l1)
      Allocno a122r103 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a124r145 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a126r147 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a128r149 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a130r151 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a131r257 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  7-36 45-51)
      Allocno a132r172 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a132(r172,l1)(cost 0)
        Making a124(r145,l1) colorable
        Making a126(r147,l1) colorable
        Making a128(r149,l1) colorable
        Making a130(r151,l1) colorable
        Making a131(r257,l1) colorable
      Pushing a130(r151,l1)(cost 16)
      Pushing a126(r147,l1)(cost 16)
      Pushing a131(r257,l1)(cost 148)
      Pushing a128(r149,l1)(cost 148)
      Pushing a124(r145,l1)(cost 115)
      Pushing a122(r103,l1)(cost 0)
      Popping a122(r103,l1)  -- assign reg 44
      Popping a124(r145,l1)  -- assign reg 42
      Popping a128(r149,l1)  -- assign reg 43
      Popping a131(r257,l1)  -- assign reg 41
      Popping a126(r147,l1)  -- assign reg 3
      Popping a130(r151,l1)  -- assign reg 6
      Popping a132(r172,l1)  -- assign reg 0
Disposition:
  105:r62  l4    38   79:r62  l3    38   75:r62  l2    38   11:r65  l0     0
  121:r70  l1   mem  106:r70  l4   mem   80:r70  l3   mem   63:r70  l2   mem
    7:r70  l0   mem  107:r71  l4     2   81:r71  l3     2   74:r71  l2     2
  133:r74  l1    21   18:r78  l0     0   28:r79  l0     1   15:r80  l0     1
   98:r82  l3    37  108:r83  l4     4   93:r83  l3     4  109:r92  l4     1
   92:r92  l3     1  110:r93  l4     6   82:r93  l3     6   64:r93  l2     6
    5:r93  l0    44  122:r103 l1    44   53:r103 l0    44   76:r105 l2     0
  111:r106 l4    44   83:r106 l3    44   65:r106 l2    44    1:r106 l0    43
   78:r110 l2     0   12:r113 l0     0  112:r127 l4     0   94:r127 l3     0
  123:r129 l1   mem   56:r129 l0   mem  113:r143 l4    42   84:r143 l3    42
   66:r143 l2    42    2:r143 l0    42  124:r145 l1    42   54:r145 l0    42
  125:r146 l1   mem    6:r146 l0   mem  126:r147 l1     3  114:r147 l4     3
   85:r147 l3     3   67:r147 l2     3    8:r147 l0     3  127:r148 l1   mem
  115:r148 l4   mem   86:r148 l3   mem   68:r148 l2   mem    9:r148 l0   mem
  128:r149 l1    43   57:r149 l0    43  129:r150 l1   mem  116:r150 l4   mem
   87:r150 l3   mem   69:r150 l2   mem    4:r150 l0   mem  130:r151 l1     6
  117:r151 l4    43   88:r151 l3    43   70:r151 l2    43   10:r151 l0     6
   61:r153 l0     0   62:r156 l0     1   58:r159 l0     5   60:r160 l0     0
   59:r161 l0     1   55:r168 l0     0  134:r170 l1    21  132:r172 l1     0
   51:r173 l0     1   50:r174 l0     1   27:r184 l0    21   48:r185 l0    22
   44:r186 l0    23   46:r187 l0    23   45:r188 l0    24   47:r189 l0    24
   24:r190 l0    22   43:r191 l0    24   39:r192 l0    23   41:r193 l0    23
   40:r194 l0    24   42:r195 l0    24   38:r197 l0    24   34:r198 l0    23
   36:r199 l0    23   35:r200 l0    24   37:r201 l0    24   33:r203 l0    24
   29:r204 l0    23   31:r205 l0    23   30:r206 l0    24   32:r207 l0    24
   26:r209 l0    23   21:r210 l0    21   23:r211 l0    21   22:r212 l0    22
   25:r213 l0    23   19:r215 l0     0   20:r217 l0     1   16:r219 l0     1
   17:r221 l0     2   13:r223 l0     1   14:r225 l0     2    3:r228 l0     0
  104:r232 l3     0  102:r234 l3     1  103:r235 l3     0  101:r237 l3     0
  100:r238 l3     0   97:r240 l3     1   99:r241 l3     0   96:r247 l3     0
   95:r250 l3     4   77:r253 l2     0  118:r255 l4    41   89:r255 l3    41
   71:r255 l2    41    0:r255 l0    41  119:r256 l4     5   90:r256 l3     5
   72:r256 l2     5   49:r256 l0     5  131:r257 l1    41  120:r257 l4    40
   91:r257 l3    40   73:r257 l2    40   52:r257 l0    41
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb38)
  6 vs parent 44:      Creating newreg=258 from oldreg=93
  44 vs parent 43:      Creating newreg=259 from oldreg=106
  42 vs parent 42:      Creating newreg=260 from oldreg=143
  3 vs parent 3:      Creating newreg=261 from oldreg=147
  43 vs parent 6:      Creating newreg=262 from oldreg=151
  41 vs parent 41:      Creating newreg=263 from oldreg=255
      Creating newreg=264 from oldreg=256
      Creating newreg=265 from oldreg=257
rescanning insn with uid = 371.
deleting insn with uid = 371.
rescanning insn with uid = 372.
deleting insn with uid = 372.
rescanning insn with uid = 341.
deleting insn with uid = 341.
rescanning insn with uid = 324.
deleting insn with uid = 324.
rescanning insn with uid = 328.
deleting insn with uid = 328.
rescanning insn with uid = 330.
deleting insn with uid = 330.
rescanning insn with uid = 331.
deleting insn with uid = 331.
rescanning insn with uid = 332.
deleting insn with uid = 332.
rescanning insn with uid = 334.
deleting insn with uid = 334.
rescanning insn with uid = 335.
deleting insn with uid = 335.
rescanning insn with uid = 336.
deleting insn with uid = 336.
      Changing RTL for loop 3 (header bb25)
  38 vs parent 38:      Creating newreg=266 from oldreg=62
  2 vs parent 2:      Creating newreg=267 from oldreg=71
  6 vs parent 6:      Creating newreg=268 from oldreg=258
  44 vs parent 44:      Creating newreg=269 from oldreg=259
  42 vs parent 42:      Creating newreg=270 from oldreg=260
  3 vs parent 3:      Creating newreg=271 from oldreg=261
  43 vs parent 43:      Creating newreg=272 from oldreg=262
  41 vs parent 41:      Creating newreg=273 from oldreg=263
  5 vs parent 5:      Creating newreg=274 from oldreg=264
  40 vs parent 40:      Creating newreg=275 from oldreg=265
rescanning insn with uid = 312.
deleting insn with uid = 312.
rescanning insn with uid = 305.
deleting insn with uid = 305.
rescanning insn with uid = 290.
deleting insn with uid = 290.
rescanning insn with uid = 291.
deleting insn with uid = 291.
rescanning insn with uid = 294.
deleting insn with uid = 294.
rescanning insn with uid = 295.
deleting insn with uid = 295.
rescanning insn with uid = 297.
deleting insn with uid = 297.
rescanning insn with uid = 281.
deleting insn with uid = 281.
rescanning insn with uid = 283.
deleting insn with uid = 283.
rescanning insn with uid = 275.
deleting insn with uid = 275.
rescanning insn with uid = 276.
deleting insn with uid = 276.
rescanning insn with uid = 269.
deleting insn with uid = 269.
rescanning insn with uid = 271.
deleting insn with uid = 271.
rescanning insn with uid = 260.
deleting insn with uid = 260.
rescanning insn with uid = 253.
deleting insn with uid = 253.
rescanning insn with uid = 255.
deleting insn with uid = 255.
      Changing RTL for loop 4 (header bb34)
  38 vs parent 38:      Creating newreg=276 from oldreg=266
  2 vs parent 2:      Creating newreg=277 from oldreg=267
  4 vs parent 4:      Creating newreg=278 from oldreg=83
  1 vs parent 1:      Creating newreg=279 from oldreg=92
  6 vs parent 6:      Creating newreg=280 from oldreg=268
  44 vs parent 44:      Creating newreg=281 from oldreg=269
  0 vs parent 0:      Creating newreg=282 from oldreg=127
  42 vs parent 42:      Creating newreg=283 from oldreg=270
  3 vs parent 3:      Creating newreg=284 from oldreg=271
  43 vs parent 43:      Creating newreg=285 from oldreg=272
  41 vs parent 41:      Creating newreg=286 from oldreg=273
  5 vs parent 5:      Creating newreg=287 from oldreg=274
  40 vs parent 40:      Creating newreg=288 from oldreg=275
rescanning insn with uid = 308.
deleting insn with uid = 308.
      Changing RTL for loop 1 (header bb9)
  44 vs parent 44:      Creating newreg=289 from oldreg=103
  42 vs parent 42:      Creating newreg=290 from oldreg=145
  3 vs parent 3:      Creating newreg=291 from oldreg=147
  43 vs parent 43:      Creating newreg=292 from oldreg=149
  6 vs parent 6:      Creating newreg=293 from oldreg=151
  41 vs parent 41:      Creating newreg=294 from oldreg=257
rescanning insn with uid = 77.
deleting insn with uid = 77.
rescanning insn with uid = 82.
deleting insn with uid = 82.
rescanning insn with uid = 83.
deleting insn with uid = 83.
rescanning insn with uid = 86.
deleting insn with uid = 86.
rescanning insn with uid = 87.
deleting insn with uid = 87.
scanning new insn with uid = 403.
scanning new insn with uid = 404.
scanning new insn with uid = 405.
scanning new insn with uid = 406.
scanning new insn with uid = 407.
scanning new insn with uid = 408.
scanning new insn with uid = 409.
scanning new insn with uid = 410.
      Creating newreg=295 from oldreg=262
    Creating temporary allocno a171r295
scanning new insn with uid = 418.
scanning new insn with uid = 419.
scanning new insn with uid = 420.
scanning new insn with uid = 421.
scanning new insn with uid = 422.
scanning new insn with uid = 423.
scanning new insn with uid = 424.
scanning new insn with uid = 425.
scanning new insn with uid = 426.
scanning new insn with uid = 427.
scanning new insn with uid = 428.
scanning new insn with uid = 429.
scanning new insn with uid = 430.
scanning new insn with uid = 431.
scanning new insn with uid = 432.
scanning new insn with uid = 433.
scanning new insn with uid = 434.
scanning new insn with uid = 435.
scanning new insn with uid = 436.
scanning new insn with uid = 437.
scanning new insn with uid = 438.
scanning new insn with uid = 439.
scanning new insn with uid = 440.
scanning new insn with uid = 441.
scanning new insn with uid = 442.
scanning new insn with uid = 443.
scanning new insn with uid = 444.
scanning new insn with uid = 445.
scanning new insn with uid = 446.
scanning new insn with uid = 447.
scanning new insn with uid = 448.
    Adding cp50:a53r103-a122r289
    Adding range [124..124] to allocno a53r103
    Adding cp51:a54r145-a124r290
    Adding range [124..126] to allocno a54r145
    Adding cp52:a8r147-a126r291
    Adding range [124..128] to allocno a8r147
    Adding cp53:a57r149-a128r292
    Adding range [124..130] to allocno a57r149
    Adding cp54:a10r151-a130r293
    Adding range [124..132] to allocno a10r151
    Adding cp55:a52r257-a131r294
    Adding range [124..134] to allocno a52r257
    Adding range [125..135] to allocno a122r289
    Adding range [127..135] to allocno a124r290
    Adding range [129..135] to allocno a126r291
    Adding range [131..135] to allocno a128r292
    Adding range [133..135] to allocno a130r293
    Adding range [135..135] to allocno a131r294
    Adding range [124..135] to live through  allocno a7r70
    Adding range [124..135] to live through  allocno a56r129
    Adding range [124..135] to live through  allocno a6r146
    Adding range [124..135] to live through  allocno a9r148
    Adding range [124..135] to live through  allocno a4r150
    Adding cp56:a8r147-a126r291
    Adding range [137..137] to allocno a126r291
    Adding cp57:a10r151-a130r293
    Adding range [137..139] to allocno a130r293
    Adding range [138..140] to allocno a8r147
    Adding range [140..140] to allocno a10r151
    Adding range [137..140] to live through  allocno a7r70
    Adding range [137..140] to live through  allocno a6r146
    Adding range [137..140] to live through  allocno a9r148
    Adding range [137..140] to live through  allocno a4r150
    Adding cp58:a2r143-a66r260
    Adding range [142..142] to allocno a2r143
    Adding cp59:a8r147-a67r261
    Adding range [142..144] to allocno a8r147
    Allocate conflicts for a171r295
    Adding cp60:a10r151-a171r295
    Adding range [142..146] to allocno a10r151
    Adding cp61:a5r93-a64r258
    Adding range [142..148] to allocno a5r93
    Adding cp62:a1r106-a65r259
    Adding range [142..150] to allocno a1r106
    Adding cp63:a0r255-a71r263
    Adding range [142..152] to allocno a0r255
    Adding cp64:a70r262-a171r295
    Adding range [147..154] to allocno a171r295
    Adding range [143..155] to allocno a66r260
    Adding range [145..155] to allocno a67r261
    Adding range [149..155] to allocno a64r258
    Adding range [151..155] to allocno a65r259
    Adding range [153..155] to allocno a71r263
    Adding range [155..155] to allocno a70r262
    Adding range [142..155] to live through  allocno a7r70
    Adding range [142..155] to live through  allocno a9r148
    Adding range [142..155] to live through  allocno a4r150
    Adding cp65:a64r258-a82r268
    Adding range [157..157] to allocno a82r268
    Adding cp66:a65r259-a83r269
    Adding range [157..159] to allocno a83r269
    Adding cp67:a66r260-a84r270
    Adding range [157..161] to allocno a84r270
    Adding cp68:a67r261-a85r271
    Adding range [157..163] to allocno a85r271
    Adding cp69:a70r262-a88r272
    Adding range [157..165] to allocno a88r272
    Adding cp70:a71r263-a89r273
    Adding range [157..167] to allocno a89r273
    Adding range [158..168] to allocno a64r258
    Adding range [160..168] to allocno a65r259
    Adding range [162..168] to allocno a66r260
    Adding range [164..168] to allocno a67r261
    Adding range [166..168] to allocno a70r262
    Adding range [168..168] to allocno a71r263
    Adding range [157..168] to live through  allocno a63r70
    Adding range [157..168] to live through  allocno a68r148
    Adding range [157..168] to live through  allocno a69r150
    Adding cp71:a79r266-a105r276
    Adding range [170..170] to allocno a79r266
    Adding cp72:a81r267-a107r277
    Adding range [170..172] to allocno a81r267
    Adding cp73:a93r83-a108r278
    Adding range [170..174] to allocno a93r83
    Adding cp74:a92r92-a109r279
    Adding range [170..176] to allocno a92r92
    Adding cp75:a82r268-a110r280
    Adding range [170..178] to allocno a82r268
    Adding cp76:a83r269-a111r281
    Adding range [170..180] to allocno a83r269
    Adding cp77:a94r127-a112r282
    Adding range [170..182] to allocno a94r127
    Adding cp78:a84r270-a113r283
    Adding range [170..184] to allocno a84r270
    Adding cp79:a85r271-a114r284
    Adding range [170..186] to allocno a85r271
    Adding cp80:a88r272-a117r285
    Adding range [170..188] to allocno a88r272
    Adding cp81:a89r273-a118r286
    Adding range [170..190] to allocno a89r273
    Adding cp82:a90r274-a119r287
    Adding range [170..192] to allocno a90r274
    Adding cp83:a91r275-a120r288
    Adding range [170..194] to allocno a91r275
    Adding range [171..195] to allocno a105r276
    Adding range [173..195] to allocno a107r277
    Adding range [175..195] to allocno a108r278
    Adding range [177..195] to allocno a109r279
    Adding range [179..195] to allocno a110r280
    Adding range [181..195] to allocno a111r281
    Adding range [183..195] to allocno a112r282
    Adding range [185..195] to allocno a113r283
    Adding range [187..195] to allocno a114r284
    Adding range [189..195] to allocno a117r285
    Adding range [191..195] to allocno a118r286
    Adding range [193..195] to allocno a119r287
    Adding range [195..195] to allocno a120r288
    Adding range [170..195] to live through  allocno a80r70
    Adding range [170..195] to live through  allocno a86r148
    Adding range [170..195] to live through  allocno a87r150
    Adding cp84:a79r266-a105r276
    Adding range [197..197] to allocno a105r276
    Adding cp85:a81r267-a107r277
    Adding range [197..199] to allocno a107r277
    Adding cp86:a93r83-a108r278
    Adding range [197..201] to allocno a108r278
    Adding cp87:a92r92-a109r279
    Adding range [197..203] to allocno a109r279
    Adding cp88:a82r268-a110r280
    Adding range [197..205] to allocno a110r280
    Adding cp89:a83r269-a111r281
    Adding range [197..207] to allocno a111r281
    Adding cp90:a84r270-a113r283
    Adding range [197..209] to allocno a113r283
    Adding cp91:a85r271-a114r284
    Adding range [197..211] to allocno a114r284
    Adding cp92:a88r272-a117r285
    Adding range [197..213] to allocno a117r285
    Adding cp93:a89r273-a118r286
    Adding range [197..215] to allocno a118r286
    Adding cp94:a90r274-a119r287
    Adding range [197..217] to allocno a119r287
    Adding cp95:a91r275-a120r288
    Adding range [197..219] to allocno a120r288
    Adding range [198..220] to allocno a79r266
    Adding range [200..220] to allocno a81r267
    Adding range [202..220] to allocno a93r83
    Adding range [204..220] to allocno a92r92
    Adding range [206..220] to allocno a82r268
    Adding range [208..220] to allocno a83r269
    Adding range [210..220] to allocno a84r270
    Adding range [212..220] to allocno a85r271
    Adding range [214..220] to allocno a88r272
    Adding range [216..220] to allocno a89r273
    Adding range [218..220] to allocno a90r274
    Adding range [220..220] to allocno a91r275
    Adding range [197..220] to live through  allocno a80r70
    Adding range [197..220] to live through  allocno a86r148
    Adding range [197..220] to live through  allocno a87r150
    Adding cp96:a75r62-a79r266
    Adding range [222..222] to allocno a75r62
    Adding cp97:a74r71-a81r267
    Adding range [222..224] to allocno a74r71
    Adding cp98:a64r258-a82r268
    Adding range [222..226] to allocno a64r258
    Adding cp99:a65r259-a83r269
    Adding range [222..228] to allocno a65r259
    Adding cp100:a66r260-a84r270
    Adding range [222..230] to allocno a66r260
    Adding cp101:a67r261-a85r271
    Adding range [222..232] to allocno a67r261
    Adding cp102:a70r262-a88r272
    Adding range [222..234] to allocno a70r262
    Adding cp103:a71r263-a89r273
    Adding range [222..236] to allocno a71r263
    Adding cp104:a72r264-a90r274
    Adding range [222..238] to allocno a72r264
    Adding cp105:a73r265-a91r275
    Adding range [222..240] to allocno a73r265
    Adding range [223..241] to allocno a79r266
    Adding range [225..241] to allocno a81r267
    Adding range [227..241] to allocno a82r268
    Adding range [229..241] to allocno a83r269
    Adding range [231..241] to allocno a84r270
    Adding range [233..241] to allocno a85r271
    Adding range [235..241] to allocno a88r272
    Adding range [237..241] to allocno a89r273
    Adding range [239..241] to allocno a90r274
    Adding range [241..241] to allocno a91r275
    Adding range [222..241] to live through  allocno a63r70
    Adding range [222..241] to live through  allocno a68r148
    Adding range [222..241] to live through  allocno a69r150
scanning new insn with uid = 411.
scanning new insn with uid = 412.
scanning new insn with uid = 413.
scanning new insn with uid = 414.
scanning new insn with uid = 415.
scanning new insn with uid = 416.
scanning new insn with uid = 417.
scanning new insn with uid = 449.
scanning new insn with uid = 450.
scanning new insn with uid = 451.
scanning new insn with uid = 452.
scanning new insn with uid = 453.
scanning new insn with uid = 454.
scanning new insn with uid = 455.
scanning new insn with uid = 456.
scanning new insn with uid = 457.
scanning new insn with uid = 458.
    New r258: setting preferred GENERAL_REGS, alternative NO_REGS
    New r259: setting preferred GENERAL_REGS, alternative NO_REGS
    New r260: setting preferred GENERAL_REGS, alternative NO_REGS
    New r261: setting preferred SIREG, alternative GENERAL_REGS
    New r262: setting preferred GENERAL_REGS, alternative NO_REGS
    New r263: setting preferred GENERAL_REGS, alternative NO_REGS
    New r264: setting preferred DIREG, alternative GENERAL_REGS
    New r265: setting preferred GENERAL_REGS, alternative NO_REGS
    New r266: setting preferred GENERAL_REGS, alternative NO_REGS
    New r267: setting preferred GENERAL_REGS, alternative NO_REGS
    New r268: setting preferred GENERAL_REGS, alternative NO_REGS
    New r269: setting preferred GENERAL_REGS, alternative NO_REGS
    New r270: setting preferred GENERAL_REGS, alternative NO_REGS
    New r271: setting preferred SIREG, alternative GENERAL_REGS
    New r272: setting preferred GENERAL_REGS, alternative NO_REGS
    New r273: setting preferred GENERAL_REGS, alternative NO_REGS
    New r274: setting preferred DIREG, alternative GENERAL_REGS
    New r275: setting preferred GENERAL_REGS, alternative NO_REGS
    New r276: setting preferred GENERAL_REGS, alternative NO_REGS
    New r277: setting preferred GENERAL_REGS, alternative NO_REGS
    New r278: setting preferred GENERAL_REGS, alternative NO_REGS
    New r279: setting preferred GENERAL_REGS, alternative NO_REGS
    New r280: setting preferred GENERAL_REGS, alternative NO_REGS
    New r281: setting preferred GENERAL_REGS, alternative NO_REGS
    New r282: setting preferred GENERAL_REGS, alternative NO_REGS
    New r283: setting preferred GENERAL_REGS, alternative NO_REGS
    New r284: setting preferred SIREG, alternative GENERAL_REGS
    New r285: setting preferred GENERAL_REGS, alternative NO_REGS
    New r286: setting preferred GENERAL_REGS, alternative NO_REGS
    New r287: setting preferred DIREG, alternative GENERAL_REGS
    New r288: setting preferred GENERAL_REGS, alternative NO_REGS
    New r289: setting preferred GENERAL_REGS, alternative NO_REGS
    New r290: setting preferred GENERAL_REGS, alternative NO_REGS
    New r291: setting preferred SIREG, alternative GENERAL_REGS
    New r292: setting preferred CREG, alternative GENERAL_REGS
    New r293: setting preferred GENERAL_REGS, alternative NO_REGS
    New r294: setting preferred GENERAL_REGS, alternative NO_REGS
    New r295: setting preferred GENERAL_REGS, alternative NO_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 41 n_edges 60 count 48 (  1.2)
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
;;
;; Loop 2
;;  header 38, latch 37
;;  depth 1, outer 0
;;  nodes: 38 37 36 32 31 30 35 34 33 28 29 27 26 25 39
;;
;; Loop 3
;;  header 25, latch 31
;;  depth 2, outer 2
;;  nodes: 25 31 30 35 34 33 28 29 27 26
;;
;; Loop 4
;;  header 34, latch 34
;;  depth 3, outer 3
;;  nodes: 34
;;
;; Loop 1
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;; 2 succs { 5 3 }
;; 3 succs { 8 4 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 24 7 }
;; 7 succs { 40 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 20 11 }
;; 11 succs { 12 20 }
;; 12 succs { 13 18 }
;; 13 succs { 14 18 }
;; 14 succs { 15 18 }
;; 15 succs { 16 18 }
;; 16 succs { 18 }
;; 17 succs { 6 }
;; 18 succs { 21 19 }
;; 19 succs { 6 }
;; 20 succs { 21 }
;; 21 succs { 22 6 }
;; 22 succs { 17 23 }
;; 23 succs { 6 }
;; 24 succs { 38 }
;; 25 succs { 26 27 }
;; 26 succs { 28 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 33 31 }
;; 31 succs { 25 32 }
;; 32 succs { 37 }
;; 33 succs { 34 }
;; 34 succs { 34 35 }
;; 35 succs { 31 }
;; 36 succs { 37 }
;; 37 succs { 38 40 }
;; 38 succs { 39 36 }
;; 39 succs { 25 }
;; 40 succs { 1 }
+++Costs: overall 11809, reg 10665, mem 1144, ld 4, st 4, move 4556
+++       move loops 1, new jumps 2


void tileswrap(int*, int, collision_table*, float*, int, int*, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={5d,1u} r1={8d,4u} r2={5d,1u} r4={8d,4u} r5={8d,4u} r6={1d,40u} r7={1d,44u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,41u,1e} r17={48d,20u} r18={4d} r19={4d} r20={1d,58u,10e} r21={6d,2u} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,1u} r38={5d,1u} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r62={1d,1u} r65={1d,2u} r70={1d,2u} r71={1d,1u} r74={1d,1u} r78={1d,2u} r79={1d,5u} r80={1d,4u} r82={1d,5u} r83={2d,5u} r92={5d,8u} r93={1d,1u} r103={1d,1u} r105={1d,1u} r106={1d,1u} r110={2d,1u} r113={2d,6u} r127={1d,1u} r129={1d,1u} r143={1d,1u} r145={1d,1u} r146={1d,1u} r147={2d,8u} r148={1d,1u} r149={1d,1u} r150={1d,13u} r151={2d,10u} r153={1d,3u} r156={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r168={1d,1u} r170={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r184={1d,6u} r185={1d,2u} r186={2d,2u} r187={1d,1u} r188={2d,2u} r189={1d,1u} r190={1d,5u} r191={1d,2u} r192={2d,2u} r193={1d,1u} r194={2d,2u} r195={1d,1u} r197={1d,2u} r198={2d,2u} r199={1d,1u} r200={2d,2u} r201={1d,1u} r203={1d,2u} r204={2d,2u} r205={1d,1u} r206={2d,2u} r207={1d,1u} r209={1d,2u} r210={2d,2u} r211={1d,1u} r212={2d,2u} r213={1d,1u} r215={1d,2u,1e} r217={1d,1u} r219={1d,2u,1e} r221={1d,1u} r223={1d,2u,1e} r225={1d,1u} r228={1d,1u} r232={1d,2u} r234={1d,1u} r235={1d} r237={1d,1u} r238={1d,2u} r240={1d,1u} r241={1d} r247={1d} r250={1d,1u} r253={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={3d,3u,1e} r259={3d,6u} r260={2d,1u} r261={2d,2u} r262={2d,1u} r263={2d,2u} r264={1d,1u} r265={1d,1u} r266={3d,3u} r267={3d,13u,1e} r268={2d,2u} r269={2d,2u} r270={2d,3u} r271={2d,7u} r272={2d,3u} r273={2d,5u} r274={2d,3u,1e} r275={2d,2u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={2d,3u} r280={1d,1u} r281={1d,1u} r282={1d,2u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={2d,4u,1e} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u,1e} r295={1d,1u} 
;;    total ref usage 908{412d,477u,19e} in 269{265 regular + 4 call} insns.
(note 3 0 21 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 70 146 147 148 149 150 151 153
(note 21 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 4 21 5 2 (set (reg/v/f:DI 146 [ the_tiles ])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn 5 4 6 2 (set (reg/v:SI 147 [ num_tilings ])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:492 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn 6 5 7 2 (set (reg/v/f:DI 148 [ ctable ])
        (reg:DI 1 dx [ ctable ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ctable ])
        (nil)))
(insn 7 6 8 2 (set (reg/v/f:DI 149 [ floats ])
        (reg:DI 2 cx [ floats ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn 8 7 9 2 (set (reg/v:SI 150 [ num_floats ])
        (reg:SI 37 r8 [ num_floats ])) tiles.cpp:492 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ num_floats ])
        (nil)))
(insn 9 8 11 2 (set (reg/v/f:DI 151 [ wrap_widths ])
        (reg:DI 38 r9 [ wrap_widths ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ wrap_widths ])
        (nil)))
(insn 11 9 12 2 (set (reg/v:SI 153 [ num_ints ])
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 num_ints+0 S4 A64])) tiles.cpp:492 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 num_ints+0 S4 A64])
        (nil)))
(note 12 11 23 2 NOTE_INSN_FUNCTION_BEG)
(note 23 12 24 2 NOTE_INSN_DELETED)
(insn 24 23 25 2 (set (reg/v:SI 70 [ num_coordinates ])
        (plus:SI (plus:SI (reg/v:SI 150 [ num_floats ])
                (reg/v:SI 153 [ num_ints ]))
            (const_int 1 [0x1]))) tiles.cpp:498 266 {*leasi}
     (nil))
(debug_insn 25 24 27 2 (var_location:SI num_coordinates (reg/v:SI 70 [ num_coordinates ])) tiles.cpp:498 -1
     (nil))
(debug_insn 27 25 28 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 28 27 29 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 153 [ num_ints ])
            (const_int 0 [0]))) tiles.cpp:500 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 29 28 55 2 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) tiles.cpp:500 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9762 [0x2622])
            (nil)))
 -> 37)
;;  succ:       5 [97.6%] 
;;              3 [2.4%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 149 150 151 153

;; basic block 3, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [2.4%]  (FALLTHRU)
;;              5 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(6){ }u21(7){ }u22(16){ }u23(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 149 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150
;; lr  def 	 17 [flags]
(code_label 55 29 30 3 172 "" [1 uses])
(note 30 55 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 32 3 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 32 31 33 3 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 150 [ num_floats ])
            (const_int 0 [0]))) tiles.cpp:503 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 33 32 375 3 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 67)
;;  succ:       8 [95.2%] 
;;              4 [4.8%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 149 150 151

;; basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       3 [4.8%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 375 33 376 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 376 375 377 4 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151

(barrier 377 376 37)
;; basic block 5, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2 [97.6%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u26(6){ }u27(7){ }u28(16){ }u29(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 149 150 151 153
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150 153
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 156 159 160 161
(code_label 37 377 38 5 169 "" [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 39 38 40 5 NOTE_INSN_DELETED)
(insn 40 39 41 5 (set (reg:DI 156 [ D.26282 ])
        (sign_extend:DI (reg/v:SI 150 [ num_floats ]))) tiles.cpp:500 149 {*extendsidi2_rex64}
     (nil))
(note 41 40 42 5 NOTE_INSN_DELETED)
(note 42 41 43 5 NOTE_INSN_DELETED)
(insn 43 42 44 5 (set (reg:DI 159 [ D.26289 ])
        (plus:DI (plus:DI (mult:DI (reg:DI 156 [ D.26282 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 20 frame))
            (const_int -172 [0xffffffffffffff54]))) tiles.cpp:500 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 156 [ D.26282 ])
        (nil)))
(insn 44 43 45 5 (set (reg:DI 160 [ D.26282 ])
        (sign_extend:DI (reg/v:SI 153 [ num_ints ]))) tiles.cpp:500 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 153 [ num_ints ])
        (nil)))
(insn 45 44 49 5 (parallel [
            (set (reg:DI 161 [ D.26282 ])
                (ashift:DI (reg:DI 160 [ D.26282 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:500 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 160 [ D.26282 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 49 45 50 5 (set (reg:DI 1 dx)
        (reg:DI 161 [ D.26282 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 161 [ D.26282 ])
        (nil)))
(insn 50 49 51 5 (set (reg:DI 4 si)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 ints+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 5 (set (reg:DI 5 di)
        (reg:DI 159 [ D.26289 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 159 [ D.26289 ])
        (nil)))
(call_insn 52 51 378 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 378 52 379 5 (set (pc)
        (label_ref 55)) 650 {jump}
     (nil)
 -> 55)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 149 150 151

(barrier 379 378 59)
;; basic block 6, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       19 [100.0%] 
;;              21 [25.0%] 
;;              4 [100.0%] 
;;              17 [100.0%] 
;;              23 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u45(6){ }u46(7){ }u47(16){ }u48(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 147
;; lr  def 	 17 [flags]
(code_label 59 379 60 6 171 "" [5 uses])
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 61 60 62 6 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn 62 61 63 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 147 [ num_tilings ])
            (const_int 0 [0]))) tiles.cpp:510 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 63 62 380 6 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) tiles.cpp:510 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 240)
;;  succ:       24 [91.0%] 
;;              7 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151

;; basic block 7, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 6, next block 8, flags: (NEW, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 380 63 381 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 381 380 382 7 (set (pc)
        (label_ref 351)) 650 {jump}
     (nil)
 -> 351)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 382 381 67)
;; basic block 8, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 [95.2%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u51(6){ }u52(7){ }u53(16){ }u54(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 149 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 147 149 150 151
;; lr  def 	 103 129 145 168 257 289 290 291 292 293 294
(code_label 67 382 68 8 170 "" [1 uses])
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 71 8 (set (reg:SF 129 [ D.26283 ])
        (float:SF (reg/v:SI 147 [ num_tilings ]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(note 71 69 72 8 NOTE_INSN_DELETED)
(insn 72 71 73 8 (set (reg:DI 168 [ D.26282 ])
        (zero_extend:DI (plus:SI (reg/v:SI 150 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 73 72 74 8 NOTE_INSN_DELETED)
(insn 74 73 13 8 (set (reg:DI 145 [ D.26282 ])
        (plus:DI (mult:DI (reg:DI 168 [ D.26282 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 168 [ D.26282 ])
        (nil)))
(insn 13 74 369 8 (set (reg:DI 103 [ ivtmp.311 ])
        (const_int 0 [0])) tiles.cpp:503 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 369 13 403 8 (set (reg/f:DI 257)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn 403 369 404 8 (set (reg:DI 289 [orig:103 ivtmp.311 ] [103])
        (reg:DI 103 [ ivtmp.311 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 103 [ ivtmp.311 ])
        (nil)))
(insn 404 403 405 8 (set (reg:DI 290 [orig:145 D.26282 ] [145])
        (reg:DI 145 [ D.26282 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 145 [ D.26282 ])
        (nil)))
(insn 405 404 406 8 (set (reg/v:SI 291 [orig:147 num_tilings ] [147])
        (reg/v:SI 147 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 147 [ num_tilings ])
        (nil)))
(insn 406 405 407 8 (set (reg/v/f:DI 292 [orig:149 floats ] [149])
        (reg/v/f:DI 149 [ floats ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 149 [ floats ])
        (nil)))
(insn 407 406 408 8 (set (reg/v/f:DI 293 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 151 [ wrap_widths ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 151 [ wrap_widths ])
        (nil)))
(insn 408 407 90 8 (set (reg/f:DI 294 [257])
        (reg/f:DI 257)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 257)
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 129 146 148 150 289 290 291 292 293 294

;; basic block 9, loop depth 1, count 0, freq 330, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       9 [95.2%]  (DFS_BACK)
;;              8 [100.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(6){ }u62(7){ }u63(16){ }u64(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 129 146 148 150 289 290 291 292 293 294
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129 289 290 292 294
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 170 172 289
(code_label 90 408 75 9 176 "" [1 uses])
(note 75 90 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 76 75 77 9 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 77 76 78 9 (set (reg:SF 170 [ D.26283 ])
        (mult:SF (reg:SF 129 [ D.26283 ])
            (mem:SF (plus:DI (reg/v/f:DI 292 [orig:149 floats ] [149])
                    (reg:DI 289 [orig:103 ivtmp.311 ] [103])) [0 MEM[base: floats_29(D), index: ivtmp.311_79, offset: 0B]+0 S4 A32]))) tiles.cpp:504 777 {*fop_sf_comm_sse}
     (nil))
(insn 78 77 79 9 (set (reg:SF 21 xmm0)
        (reg:SF 170 [ D.26283 ])) tiles.cpp:504 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 170 [ D.26283 ])
        (nil)))
(call_insn/u 79 78 80 9 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:504 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 80 79 82 9 (set (reg:SF 74 [ D.26283 ])
        (reg:SF 21 xmm0)) tiles.cpp:504 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0)
        (nil)))
(insn 82 80 83 9 (set (reg:SI 172)
        (fix:SI (reg:SF 74 [ D.26283 ]))) tiles.cpp:504 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 74 [ D.26283 ])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 294 [257])
                    (reg:DI 289 [orig:103 ivtmp.311 ] [103])) [0 MEM[symbol: qstate, index: ivtmp.311_79, offset: 0B]+0 S4 A32])
            (nil))))
(insn 83 82 85 9 (set (mem:SI (plus:DI (reg/f:DI 294 [257])
                (reg:DI 289 [orig:103 ivtmp.311 ] [103])) [0 MEM[symbol: qstate, index: ivtmp.311_79, offset: 0B]+0 S4 A32])
        (reg:SI 172)) tiles.cpp:504 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(debug_insn 85 83 86 9 (var_location:SI i (debug_expr:SI D#19)) -1
     (nil))
(insn 86 85 87 9 (parallel [
            (set (reg:DI 289 [orig:103 ivtmp.311 ] [103])
                (plus:DI (reg:DI 289 [orig:103 ivtmp.311 ] [103])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 87 86 88 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 289 [orig:103 ivtmp.311 ] [103])
            (reg:DI 290 [orig:145 D.26282 ] [145]))) tiles.cpp:503 8 {*cmpdi_1}
     (nil))
(jump_insn 88 87 94 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 90)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 90)
;;  succ:       9 [95.2%]  (DFS_BACK)
;;              10 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 129 146 148 150 289 290 291 292 293 294

;; basic block 10, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u80(6){ }u81(7){ }u82(16){ }u83(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 148 150 291 293
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150 291 293
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78 79 147 151 173 174 256
(note 94 88 409 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 409 94 410 10 (set (reg/v:SI 147 [ num_tilings ])
        (reg/v:SI 291 [orig:147 num_tilings ] [147])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 291 [orig:147 num_tilings ] [147])
        (nil)))
(insn 410 409 95 10 (set (reg/v/f:DI 151 [ wrap_widths ])
        (reg/v/f:DI 293 [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 293 [orig:151 wrap_widths ] [151])
        (nil)))
(insn 95 410 96 10 (set (reg:DI 173 [ D.26282 ])
        (sign_extend:DI (reg/v:SI 150 [ num_floats ]))) tiles.cpp:505 149 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 10 (parallel [
            (set (reg:DI 174 [ D.26282 ])
                (ashift:DI (reg:DI 173 [ D.26282 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:505 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 173 [ D.26282 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 97 96 100 10 (parallel [
            (set (reg/f:DI 256)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -336 [0xfffffffffffffeb0]))
            (nil))))
(insn 100 97 101 10 (set (reg:DI 1 dx)
        (reg:DI 174 [ D.26282 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 174 [ D.26282 ])
        (nil)))
(insn 101 100 102 10 (set (reg:SI 4 si)
        (const_int 0 [0])) 89 {*movsi_internal}
     (nil))
(insn 102 101 103 10 (set (reg:DI 5 di)
        (reg/f:DI 256)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 256)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -336 [0xfffffffffffffeb0]))
            (nil))))
(call_insn 103 102 106 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 106 103 107 10 (parallel [
            (set (reg:SI 79 [ bnd.268 ])
                (lshiftrt:SI (reg/v:SI 150 [ num_floats ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 545 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 107 106 108 10 (parallel [
            (set (reg:SI 78 [ ratio_mult_vf.269 ])
                (ashift:SI (reg:SI 79 [ bnd.268 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 108 107 109 10 NOTE_INSN_DELETED)
(note 109 108 110 10 NOTE_INSN_DELETED)
(insn 110 109 111 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 78 [ ratio_mult_vf.269 ])
            (const_int 0 [0]))) 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 111 110 360 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 357)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 357)
;;  succ:       20 [33.3%] 
;;              11 [66.7%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151

;; basic block 11, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [66.7%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u100(6){ }u101(7){ }u102(16){ }u103(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150
;; lr  def 	 17 [flags]
(note 360 111 112 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 112 360 113 11 NOTE_INSN_DELETED)
(note 113 112 114 11 NOTE_INSN_DELETED)
(insn 114 113 115 11 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 150 [ num_floats ])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 115 114 116 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 357)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 357)
;;  succ:       12 [66.7%]  (FALLTHRU)
;;              20 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151

;; basic block 12, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [66.7%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u108(6){ }u109(7){ }u110(16){ }u111(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79 147 151
;; lr  def 	 17 [flags] 184 185 186 187 188 189 190
(note 116 115 117 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 119 12 (set (reg:V4SI 184)
        (vec_duplicate:V4SI (reg/v:SI 147 [ num_tilings ]))) 1643 {*vec_dupv4si}
     (nil))
(debug_insn 119 117 120 12 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 120 119 121 12 (set (subreg:V16QI (reg:V4SI 185 [ vect_var_.275 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (reg/v/f:DI 151 [ wrap_widths ]) [0 MEM[(int *)wrap_widths_39(D)]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn 121 120 122 12 (set (subreg:V2DI (reg:V4SI 187) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 185 [ vect_var_.275 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 184)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 122 121 123 12 (set (reg:V2DI 189)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 185 [ vect_var_.275 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 185 [ vect_var_.275 ])
        (nil)))
(insn 123 122 124 12 (set (reg:V2DI 190)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 184) 0)
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (nil))
(insn 124 123 125 12 (set (subreg:V2DI (reg:V4SI 188) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 189) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 190) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 189)
        (nil)))
(insn 125 124 126 12 (set (reg:V4SI 186 [ vect_var_.276 ])
        (vec_select:V4SI (reg:V4SI 187)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 187)
        (nil)))
(insn 126 125 127 12 (set (reg:V4SI 188)
        (vec_select:V4SI (reg:V4SI 188)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn 127 126 128 12 (set (reg:V4SI 186 [ vect_var_.276 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 186 [ vect_var_.276 ])
                (reg:V4SI 188))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 188)
        (nil)))
(insn 128 127 130 12 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -256 [0xffffffffffffff00])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings]+0 S16 A128])
        (reg:V4SI 186 [ vect_var_.276 ])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 186 [ vect_var_.276 ])
        (nil)))
(debug_insn 130 128 131 12 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(insn 131 130 132 12 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 79 [ bnd.268 ])
            (const_int 1 [0x1]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 132 131 133 12 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       13 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151 184 190

;; basic block 13, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [66.7%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u128(6){ }u129(7){ }u130(16){ }u131(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151 184 190
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79 151 184 190
;; lr  def 	 17 [flags] 191 192 193 194 195
(note 133 132 134 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 134 133 135 13 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 135 134 136 13 (set (subreg:V16QI (reg:V4SI 191 [ vect_var_.275 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 151 [ wrap_widths ])
                        (const_int 16 [0x10])) [0 MEM[(int *)wrap_widths_39(D) + 16B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn 136 135 137 13 (set (subreg:V2DI (reg:V4SI 193) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 191 [ vect_var_.275 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 184)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 137 136 139 13 (set (reg:V2DI 195)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 191 [ vect_var_.275 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 191 [ vect_var_.275 ])
        (nil)))
(insn 139 137 140 13 (set (subreg:V2DI (reg:V4SI 194) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 195) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 190) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 195)
        (nil)))
(insn 140 139 141 13 (set (reg:V4SI 192 [ vect_var_.276 ])
        (vec_select:V4SI (reg:V4SI 193)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 193)
        (nil)))
(insn 141 140 142 13 (set (reg:V4SI 194)
        (vec_select:V4SI (reg:V4SI 194)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn 142 141 143 13 (set (reg:V4SI 192 [ vect_var_.276 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 192 [ vect_var_.276 ])
                (reg:V4SI 194))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 194)
        (nil)))
(insn 143 142 145 13 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 16B]+0 S16 A128])
        (reg:V4SI 192 [ vect_var_.276 ])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 192 [ vect_var_.276 ])
        (nil)))
(debug_insn 145 143 146 13 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(insn 146 145 147 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 79 [ bnd.268 ])
            (const_int 2 [0x2]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 147 146 148 13 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       14 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151 184 190

;; basic block 14, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [66.7%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u146(6){ }u147(7){ }u148(16){ }u149(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151 184 190
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79 151 184 190
;; lr  def 	 17 [flags] 197 198 199 200 201
(note 148 147 149 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 149 148 150 14 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 150 149 151 14 (set (subreg:V16QI (reg:V4SI 197 [ vect_var_.275 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 151 [ wrap_widths ])
                        (const_int 32 [0x20])) [0 MEM[(int *)wrap_widths_39(D) + 32B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn 151 150 152 14 (set (subreg:V2DI (reg:V4SI 199) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 197 [ vect_var_.275 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 184)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 152 151 154 14 (set (reg:V2DI 201)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 197 [ vect_var_.275 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 197 [ vect_var_.275 ])
        (nil)))
(insn 154 152 155 14 (set (subreg:V2DI (reg:V4SI 200) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 201) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 190) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 201)
        (nil)))
(insn 155 154 156 14 (set (reg:V4SI 198 [ vect_var_.276 ])
        (vec_select:V4SI (reg:V4SI 199)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 199)
        (nil)))
(insn 156 155 157 14 (set (reg:V4SI 200)
        (vec_select:V4SI (reg:V4SI 200)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn 157 156 158 14 (set (reg:V4SI 198 [ vect_var_.276 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 198 [ vect_var_.276 ])
                (reg:V4SI 200))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 200)
        (nil)))
(insn 158 157 160 14 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 32B]+0 S16 A128])
        (reg:V4SI 198 [ vect_var_.276 ])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 198 [ vect_var_.276 ])
        (nil)))
(debug_insn 160 158 161 14 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(insn 161 160 162 14 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 79 [ bnd.268 ])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 162 161 163 14 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       15 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151 184 190

;; basic block 15, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [66.7%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u164(6){ }u165(7){ }u166(16){ }u167(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 79 146 147 148 150 151 184 190
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79 151 184 190
;; lr  def 	 17 [flags] 203 204 205 206 207
(note 163 162 164 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(debug_insn 164 163 165 15 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 165 164 166 15 (set (subreg:V16QI (reg:V4SI 203 [ vect_var_.275 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 151 [ wrap_widths ])
                        (const_int 48 [0x30])) [0 MEM[(int *)wrap_widths_39(D) + 48B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn 166 165 167 15 (set (subreg:V2DI (reg:V4SI 205) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 203 [ vect_var_.275 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 184)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 167 166 169 15 (set (reg:V2DI 207)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 203 [ vect_var_.275 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 203 [ vect_var_.275 ])
        (nil)))
(insn 169 167 170 15 (set (subreg:V2DI (reg:V4SI 206) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 207) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 190) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 207)
        (nil)))
(insn 170 169 171 15 (set (reg:V4SI 204 [ vect_var_.276 ])
        (vec_select:V4SI (reg:V4SI 205)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 205)
        (nil)))
(insn 171 170 172 15 (set (reg:V4SI 206)
        (vec_select:V4SI (reg:V4SI 206)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn 172 171 173 15 (set (reg:V4SI 204 [ vect_var_.276 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 204 [ vect_var_.276 ])
                (reg:V4SI 206))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 206)
        (nil)))
(insn 173 172 175 15 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 48B]+0 S16 A128])
        (reg:V4SI 204 [ vect_var_.276 ])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 204 [ vect_var_.276 ])
        (nil)))
(debug_insn 175 173 176 15 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(insn 176 175 177 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 79 [ bnd.268 ])
            (const_int 4 [0x4]))) 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 79 [ bnd.268 ])
        (nil)))
(jump_insn 177 176 178 15 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       16 [66.7%]  (FALLTHRU)
;;              18 [33.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 146 147 148 150 151 184 190

;; basic block 16, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [66.7%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u182(6){ }u183(7){ }u184(16){ }u185(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 146 147 148 150 151 184 190
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151 184 190
;; lr  def 	 209 210 211 212 213
(note 178 177 179 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(debug_insn 179 178 180 16 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 180 179 181 16 (set (subreg:V16QI (reg:V4SI 209 [ vect_var_.275 ]) 0)
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 151 [ wrap_widths ])
                        (const_int 64 [0x40])) [0 MEM[(int *)wrap_widths_39(D) + 64B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn 181 180 182 16 (set (subreg:V2DI (reg:V4SI 211) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 209 [ vect_var_.275 ])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 184)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V4SI 184)
        (nil)))
(insn 182 181 184 16 (set (reg:V2DI 213)
        (lshiftrt:V2DI (subreg:V2DI (reg:V4SI 209 [ vect_var_.275 ]) 0)
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (expr_list:REG_DEAD (reg:V4SI 209 [ vect_var_.275 ])
        (nil)))
(insn 184 182 185 16 (set (subreg:V2DI (reg:V4SI 212) 0)
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 213) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (subreg:V4SI (reg:V2DI 190) 0)
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V2DI 213)
        (expr_list:REG_DEAD (reg:V2DI 190)
            (nil))))
(insn 185 184 186 16 (set (reg:V4SI 210 [ vect_var_.276 ])
        (vec_select:V4SI (reg:V4SI 211)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 211)
        (nil)))
(insn 186 185 187 16 (set (reg:V4SI 212)
        (vec_select:V4SI (reg:V4SI 212)
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn 187 186 188 16 (set (reg:V4SI 210 [ vect_var_.276 ])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 210 [ vect_var_.276 ])
                (reg:V4SI 212))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 212)
        (nil)))
(insn 188 187 190 16 (set (mem/c:V4SI (plus:DI (reg/f:DI 20 frame)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 64B]+0 S16 A128])
        (reg:V4SI 210 [ vect_var_.276 ])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 210 [ vect_var_.276 ])
        (nil)))
(debug_insn 190 188 383 16 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(jump_insn 383 190 384 16 (set (pc)
        (label_ref 206)) 650 {jump}
     (nil)
 -> 206)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 146 147 148 150 151

(barrier 384 383 234)
;; basic block 17, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       22 [75.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u198(6){ }u199(7){ }u200(16){ }u201(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65 70 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65 147 151
;; lr  def 	 17 [flags] 215 217
(code_label 234 384 193 17 180 "" [1 uses])
(note 193 234 194 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 194 193 195 17 (var_location:SI i (debug_expr:SI D#21)) -1
     (nil))
(insn 195 194 197 17 (set (reg:DI 215 [ i ])
        (sign_extend:DI (reg/v:SI 65 [ i ]))) tiles.cpp:506 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 65 [ i ])
        (nil)))
(note 197 195 198 17 NOTE_INSN_DELETED)
(insn 198 197 199 17 (parallel [
            (set (reg:SI 217 [ D.26281 ])
                (mult:SI (mem:SI (plus:DI (mult:DI (reg:DI 215 [ i ])
                                (const_int 4 [0x4]))
                            (reg/v/f:DI 151 [ wrap_widths ])) [0 *_149+0 S4 A32])
                    (reg/v:SI 147 [ num_tilings ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:506 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 215 [ i ])
                            (const_int 4 [0x4]))
                        (reg/f:DI 20 frame))
                    (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
            (nil))))
(insn 199 198 200 17 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 215 [ i ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 217 [ D.26281 ])) tiles.cpp:506 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 217 [ D.26281 ])
        (expr_list:REG_DEAD (reg:DI 215 [ i ])
            (nil))))
(debug_insn 200 199 202 17 (var_location:SI D#20 (plus:SI (debug_expr:SI D#21)
        (const_int 1 [0x1]))) tiles.cpp:503 -1
     (nil))
(debug_insn 202 200 385 17 (var_location:SI i (debug_expr:SI D#20)) -1
     (nil))
(jump_insn 385 202 386 17 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151

(barrier 386 385 206)
;; basic block 18, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       15 [33.3%] 
;;              12 [33.3%] 
;;              13 [33.3%] 
;;              14 [33.3%] 
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u210(6){ }u211(7){ }u212(16){ }u213(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 78 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78 150
;; lr  def 	 17 [flags] 113
(code_label 206 386 207 18 178 "" [5 uses])
(note 207 206 208 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 18 (set (reg/v:SI 113 [ i ])
        (reg:SI 78 [ ratio_mult_vf.269 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 78 [ ratio_mult_vf.269 ])
        (nil)))
(insn 209 208 210 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 113 [ i ])
            (reg/v:SI 150 [ num_floats ]))) 7 {*cmpsi_1}
     (nil))
(jump_insn 210 209 387 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 211)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 6666 [0x1a0a])
            (nil)))
 -> 211)
;;  succ:       21 [66.7%] 
;;              19 [33.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 113 146 147 148 150 151

;; basic block 19, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 18, next block 20, flags: (NEW, RTL, MODIFIED)
;;  pred:       18 [33.3%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 387 210 388 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(jump_insn 388 387 389 19 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151

(barrier 389 388 357)
;; basic block 20, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       11 [33.3%] 
;;              10 [33.3%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u218(6){ }u219(7){ }u220(16){ }u221(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 113
(code_label 357 389 356 20 192 "" [2 uses])
(note 356 357 14 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 14 356 211 20 (set (reg/v:SI 113 [ i ])
        (const_int 0 [0])) tiles.cpp:505 89 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 113 146 147 148 150 151

;; basic block 21, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              18 [66.7%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u222(6){ }u223(7){ }u224(16){ }u225(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 113 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 147 150 151
;; lr  def 	 17 [flags] 80 219 221
(code_label 211 14 212 21 177 "" [1 uses])
(note 212 211 213 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(debug_insn 213 212 214 21 (var_location:SI i (reg/v:SI 113 [ i ])) -1
     (nil))
(insn 214 213 216 21 (set (reg:DI 219 [ i ])
        (sign_extend:DI (reg/v:SI 113 [ i ]))) tiles.cpp:506 149 {*extendsidi2_rex64}
     (nil))
(note 216 214 217 21 NOTE_INSN_DELETED)
(insn 217 216 218 21 (parallel [
            (set (reg:SI 221 [ D.26281 ])
                (mult:SI (mem:SI (plus:DI (mult:DI (reg:DI 219 [ i ])
                                (const_int 4 [0x4]))
                            (reg/v/f:DI 151 [ wrap_widths ])) [0 *_107+0 S4 A32])
                    (reg/v:SI 147 [ num_tilings ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:506 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 219 [ i ])
                            (const_int 4 [0x4]))
                        (reg/f:DI 20 frame))
                    (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
            (nil))))
(insn 218 217 219 21 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 219 [ i ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 221 [ D.26281 ])) tiles.cpp:506 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 221 [ D.26281 ])
        (expr_list:REG_DEAD (reg:DI 219 [ i ])
            (nil))))
(insn 219 218 221 21 (parallel [
            (set (reg/v:SI 80 [ i ])
                (plus:SI (reg/v:SI 113 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:503 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 221 219 222 21 (var_location:SI i (reg/v:SI 80 [ i ])) -1
     (nil))
(insn 222 221 223 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 150 [ num_floats ])
            (reg/v:SI 80 [ i ]))) tiles.cpp:503 7 {*cmpsi_1}
     (nil))
(jump_insn 223 222 224 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 2500 [0x9c4])
            (nil)))
 -> 59)
;;  succ:       22 [75.0%]  (FALLTHRU)
;;              6 [25.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 80 113 146 147 148 150 151

;; basic block 22, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 [75.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u240(6){ }u241(7){ }u242(16){ }u243(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 80 113 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 80 113 147 150 151
;; lr  def 	 17 [flags] 65 223 225
(note 224 223 225 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(debug_insn 225 224 226 22 (var_location:SI i (reg/v:SI 80 [ i ])) -1
     (nil))
(insn 226 225 228 22 (set (reg:DI 223 [ i ])
        (sign_extend:DI (reg/v:SI 80 [ i ]))) tiles.cpp:506 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 80 [ i ])
        (nil)))
(note 228 226 229 22 NOTE_INSN_DELETED)
(insn 229 228 230 22 (parallel [
            (set (reg:SI 225 [ D.26281 ])
                (mult:SI (mem:SI (plus:DI (mult:DI (reg:DI 223 [ i ])
                                (const_int 4 [0x4]))
                            (reg/v/f:DI 151 [ wrap_widths ])) [0 *_33+0 S4 A32])
                    (reg/v:SI 147 [ num_tilings ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:506 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 223 [ i ])
                            (const_int 4 [0x4]))
                        (reg/f:DI 20 frame))
                    (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
            (nil))))
(insn 230 229 361 22 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 223 [ i ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -256 [0xffffffffffffff00])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 225 [ D.26281 ])) tiles.cpp:506 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 225 [ D.26281 ])
        (expr_list:REG_DEAD (reg:DI 223 [ i ])
            (nil))))
(debug_insn 361 230 231 22 (var_location:SI D#21 (plus:SI (reg/v:SI 113 [ i ])
        (const_int 2 [0x2]))) -1
     (nil))
(insn 231 361 233 22 (parallel [
            (set (reg/v:SI 65 [ i ])
                (plus:SI (reg/v:SI 113 [ i ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:503 273 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 113 [ i ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(debug_insn 233 231 235 22 (var_location:SI i (debug_expr:SI D#21)) -1
     (nil))
(insn 235 233 236 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 65 [ i ])
            (reg/v:SI 150 [ num_floats ]))) tiles.cpp:503 7 {*cmpsi_1}
     (nil))
(jump_insn 236 235 390 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 234)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 7500 [0x1d4c])
            (nil)))
 -> 234)
;;  succ:       17 [75.0%] 
;;              23 [25.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65 70 146 147 148 150 151

;; basic block 23, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 22, next block 24, flags: (NEW, RTL, MODIFIED)
;;  pred:       22 [25.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 390 236 391 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(jump_insn 391 390 392 23 (set (pc)
        (label_ref 59)) 650 {jump}
     (nil)
 -> 59)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151

(barrier 392 391 240)
;; basic block 24, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       6 [91.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u258(6){ }u259(7){ }u260(16){ }u261(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 146 147 148 150 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 146 147 150 151
;; lr  def 	 93 106 143 228 255 258 259 260 261 262 263 295
(code_label 240 392 241 24 173 "" [1 uses])
(note 241 240 242 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 24 (set (reg:DI 93 [ ivtmp.305 ])
        (reg/v/f:DI 146 [ the_tiles ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 146 [ the_tiles ])
        (nil)))
(note 243 242 244 24 NOTE_INSN_DELETED)
(insn 244 243 245 24 (set (reg:DI 228 [ D.26282 ])
        (zero_extend:DI (plus:SI (reg/v:SI 150 [ num_floats ])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(note 245 244 246 24 NOTE_INSN_DELETED)
(insn 246 245 20 24 (set (reg:DI 143 [ D.26282 ])
        (plus:DI (mult:DI (reg:DI 228 [ D.26282 ])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 228 [ D.26282 ])
        (nil)))
(insn 20 246 370 24 (set (reg/v:SI 106 [ j ])
        (const_int 0 [0])) tiles.cpp:510 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 370 20 411 24 (set (reg/f:DI 255)
        (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 411 370 412 24 (set (reg:DI 260 [orig:143 D.26282 ] [143])
        (reg:DI 143 [ D.26282 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 143 [ D.26282 ])
        (nil)))
(insn 412 411 413 24 (set (reg/v:SI 261 [orig:147 num_tilings ] [147])
        (reg/v:SI 147 [ num_tilings ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 147 [ num_tilings ])
        (nil)))
(insn 413 412 414 24 (set (reg/v/f:DI 295 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 151 [ wrap_widths ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 151 [ wrap_widths ])
        (nil)))
(insn 414 413 415 24 (set (reg:DI 258 [orig:93 ivtmp.305 ] [93])
        (reg:DI 93 [ ivtmp.305 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 93 [ ivtmp.305 ])
        (nil)))
(insn 415 414 416 24 (set (reg/v:SI 259 [orig:106 j ] [106])
        (reg/v:SI 106 [ j ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 106 [ j ])
        (nil)))
(insn 416 415 417 24 (set (reg/f:DI 263 [255])
        (reg/f:DI 255)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 255)
        (nil)))
(insn 417 416 393 24 (set (reg/v/f:DI 262 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 295 [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 295 [orig:151 wrap_widths ] [151])
        (nil)))
(jump_insn 393 417 394 24 (set (pc)
        (label_ref 339)) 650 {jump}
     (nil)
 -> 339)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 258 259 260 261 262 263

(barrier 394 393 346)
;; basic block 25, loop depth 2, count 0, freq 3333, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       31 [95.2%]  (DFS_BACK)
;;              39 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u268(6){ }u269(7){ }u270(16){ }u271(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 267 274 275
;; lr  def 	 17 [flags] 82 83
(code_label 346 394 250 25 191 "" [2 uses])
(note 250 346 251 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(debug_insn 251 250 253 25 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn 253 251 255 25 (set (reg:SI 82 [ D.26281 ])
        (mem:SI (plus:DI (reg/f:DI 275 [257])
                (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: qstate, index: ivtmp.291_105, offset: 0B]+0 S4 A32])) tiles.cpp:516 89 {*movsi_internal}
     (nil))
(insn 255 253 256 25 (set (reg:SI 83 [ D.26281 ])
        (mem:SI (plus:DI (reg/f:DI 274 [256])
                (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: base, index: ivtmp.291_105, offset: 0B]+0 S4 A32])) tiles.cpp:516 89 {*movsi_internal}
     (nil))
(insn 256 255 257 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 82 [ D.26281 ])
            (reg:SI 83 [ D.26281 ]))) tiles.cpp:516 7 {*cmpsi_1}
     (nil))
(jump_insn 257 256 258 25 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 264)
            (pc))) tiles.cpp:516 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 264)
;;  succ:       26 [50.0%]  (FALLTHRU)
;;              27 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 82 83 148 150 266 267 268 269 270 271 272 273 274 275

;; basic block 26, loop depth 2, count 0, freq 1667, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 [50.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u279(6){ }u280(7){ }u281(16){ }u282(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 82 83 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 83 271
;; lr  def 	 17 [flags] 92 232 234 235
(note 258 257 259 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 26 (parallel [
            (set (reg:SI 232 [ D.26281 ])
                (minus:SI (reg:SI 82 [ D.26281 ])
                    (reg:SI 83 [ D.26281 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:517 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 260 259 261 26 (parallel [
            (set (reg:SI 235)
                (div:SI (reg:SI 232 [ D.26281 ])
                    (reg/v:SI 271 [orig:147 num_tilings ] [147])))
            (set (reg:SI 234 [ D.26281 ])
                (mod:SI (reg:SI 232 [ D.26281 ])
                    (reg/v:SI 271 [orig:147 num_tilings ] [147])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:517 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 232 [ D.26281 ])
        (expr_list:REG_UNUSED (reg:SI 235)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 261 260 395 26 (parallel [
            (set (reg:SI 92 [ D.26281 ])
                (minus:SI (reg:SI 82 [ D.26281 ])
                    (reg:SI 234 [ D.26281 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:517 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 234 [ D.26281 ])
        (expr_list:REG_DEAD (reg:SI 82 [ D.26281 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(jump_insn 395 261 396 26 (set (pc)
        (label_ref 272)) 650 {jump}
     (nil)
 -> 272)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275

(barrier 396 395 264)
;; basic block 27, loop depth 2, count 0, freq 1667, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       25 [50.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u291(6){ }u292(7){ }u293(16){ }u294(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 82 83 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 83 271
;; lr  def 	 17 [flags] 92 237 238 240 241
(code_label 264 396 265 27 182 "" [1 uses])
(note 265 264 266 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(note 266 265 267 27 NOTE_INSN_DELETED)
(insn 267 266 268 27 (parallel [
            (set (reg:SI 237 [ D.26281 ])
                (minus:SI (reg:SI 83 [ D.26281 ])
                    (reg:SI 82 [ D.26281 ])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 268 267 269 27 (parallel [
            (set (reg:SI 238 [ D.26281 ])
                (plus:SI (reg:SI 237 [ D.26281 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 237 [ D.26281 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 269 268 270 27 (parallel [
            (set (reg:SI 241)
                (div:SI (reg:SI 238 [ D.26281 ])
                    (reg/v:SI 271 [orig:147 num_tilings ] [147])))
            (set (reg:SI 240 [ D.26281 ])
                (mod:SI (reg:SI 238 [ D.26281 ])
                    (reg/v:SI 271 [orig:147 num_tilings ] [147])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 366 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 238 [ D.26281 ])
        (expr_list:REG_UNUSED (reg:SI 241)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 270 269 271 27 (set (reg:SI 92 [ D.26281 ])
        (plus:SI (plus:SI (reg:SI 82 [ D.26281 ])
                (reg:SI 240 [ D.26281 ]))
            (const_int 1 [0x1]))) tiles.cpp:519 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 240 [ D.26281 ])
        (expr_list:REG_DEAD (reg:SI 82 [ D.26281 ])
            (nil))))
(insn 271 270 272 27 (parallel [
            (set (reg:SI 92 [ D.26281 ])
                (minus:SI (reg:SI 92 [ D.26281 ])
                    (reg/v:SI 271 [orig:147 num_tilings ] [147])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       28 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275

;; basic block 28, loop depth 2, count 0, freq 3333, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 [100.0%]  (FALLTHRU)
;;              26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u307(6){ }u308(7){ }u309(16){ }u310(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 267 272 273
;; lr  def 	 17 [flags]
(code_label 272 271 273 28 183 "" [1 uses])
(note 273 272 275 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 275 273 276 28 (set (mem:SI (plus:DI (reg/f:DI 273 [255])
                (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: coordinates, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 92 [ D.26281 ])) 89 {*movsi_internal}
     (nil))
(insn 276 275 277 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 272 [orig:151 wrap_widths ] [151])
                    (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[base: wrap_widths_39(D), index: ivtmp.291_105, offset: 0B]+0 S4 A32])
            (const_int 0 [0]))) tiles.cpp:521 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 277 276 278 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 284)
            (pc))) tiles.cpp:521 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 284)
;;  succ:       29 [50.0%]  (FALLTHRU)
;;              30 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275

;; basic block 29, loop depth 2, count 0, freq 1667, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 [50.0%]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u317(6){ }u318(7){ }u319(16){ }u320(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 267 273
;; lr  def 	 17 [flags] 92 247
(note 278 277 279 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(note 279 278 280 29 NOTE_INSN_DELETED)
(note 280 279 281 29 NOTE_INSN_DELETED)
(insn 281 280 283 29 (parallel [
            (set (reg:SI 247)
                (div:SI (reg:SI 92 [ D.26281 ])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 20 frame)
                                (reg:DI 267 [orig:71 ivtmp.291 ] [71]))
                            (const_int -256 [0xffffffffffffff00])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.291_105, offset: 0B]+0 S4 A32])))
            (set (reg:SI 92 [ D.26281 ])
                (mod:SI (reg:SI 92 [ D.26281 ])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 20 frame)
                                (reg:DI 267 [orig:71 ivtmp.291 ] [71]))
                            (const_int -256 [0xffffffffffffff00])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.291_105, offset: 0B]+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:521 366 {*divmodsi4}
     (expr_list:REG_UNUSED (reg:SI 247)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 283 281 284 29 (set (mem:SI (plus:DI (reg/f:DI 273 [255])
                (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: coordinates, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 92 [ D.26281 ])) tiles.cpp:521 89 {*movsi_internal}
     (nil))
;;  succ:       30 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275

;; basic block 30, loop depth 2, count 0, freq 3333, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       28 [50.0%] 
;;              29 [100.0%]  (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u332(6){ }u333(7){ }u334(16){ }u335(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 17 [flags]
(code_label 284 283 285 30 184 "" [1 uses])
(note 285 284 286 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 286 285 287 30 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 92 [ D.26281 ])
            (const_int 0 [0]))) tiles.cpp:523 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 287 286 313 30 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) tiles.cpp:523 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 302)
;;  succ:       33 [91.0%] 
;;              31 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275

;; basic block 31, loop depth 2, count 0, freq 3333, maybe hot
;; Invalid sum of incoming frequencies 1119, should be 3333
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 [9.0%]  (FALLTHRU)
;;              35 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u338(6){ }u339(7){ }u340(16){ }u341(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 266 267 270 274
;; lr  def 	 17 [flags] 250 266 267
(code_label 313 287 288 31 189 "" [1 uses])
(note 288 313 290 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 290 288 291 31 (parallel [
            (set (reg:SI 250)
                (plus:SI (reg:SI 83 [ D.26281 ])
                    (reg:SI 266 [orig:62 ivtmp.295 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:527 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 83 [ D.26281 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 274 [256])
                        (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: base, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
                (nil)))))
(insn 291 290 293 31 (set (mem:SI (plus:DI (reg/f:DI 274 [256])
                (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: base, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 250)) tiles.cpp:527 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 250)
        (nil)))
(debug_insn 293 291 294 31 (var_location:SI i (debug_expr:SI D#18)) -1
     (nil))
(insn 294 293 295 31 (parallel [
            (set (reg:DI 267 [orig:71 ivtmp.291 ] [71])
                (plus:DI (reg:DI 267 [orig:71 ivtmp.291 ] [71])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 295 294 297 31 (parallel [
            (set (reg:SI 266 [orig:62 ivtmp.295 ] [62])
                (plus:SI (reg:SI 266 [orig:62 ivtmp.295 ] [62])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 297 295 298 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 267 [orig:71 ivtmp.291 ] [71])
            (reg:DI 270 [orig:143 D.26282 ] [143]))) tiles.cpp:513 8 {*cmpdi_1}
     (nil))
(jump_insn 298 297 301 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 346)
            (pc))) tiles.cpp:513 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 346)
;;  succ:       25 [95.2%]  (DFS_BACK)
;;              32 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 266 267 268 269 270 271 272 273 274 275

;; basic block 32, loop depth 1, count 0, freq 159, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 [4.8%]  (FALLTHRU,LOOP_EXIT)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u352(6){ }u353(7){ }u354(16){ }u355(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 268 269 270 271 272 273
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150 268 269 270 271 272 273
;; lr  def 	 110 258 259 260 261 262 263
(note 301 298 418 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 418 301 419 32 (set (reg:DI 258 [orig:93 ivtmp.305 ] [93])
        (reg:DI 268 [orig:93 ivtmp.305 ] [93])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 268 [orig:93 ivtmp.305 ] [93])
        (nil)))
(insn 419 418 420 32 (set (reg/v:SI 259 [orig:106 j ] [106])
        (reg/v:SI 269 [orig:106 j ] [106])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 269 [orig:106 j ] [106])
        (nil)))
(insn 420 419 421 32 (set (reg:DI 260 [orig:143 D.26282 ] [143])
        (reg:DI 270 [orig:143 D.26282 ] [143])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 270 [orig:143 D.26282 ] [143])
        (nil)))
(insn 421 420 422 32 (set (reg/v:SI 261 [orig:147 num_tilings ] [147])
        (reg/v:SI 271 [orig:147 num_tilings ] [147])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 271 [orig:147 num_tilings ] [147])
        (nil)))
(insn 422 421 423 32 (set (reg/v/f:DI 262 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 272 [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 272 [orig:151 wrap_widths ] [151])
        (nil)))
(insn 423 422 18 32 (set (reg/f:DI 263 [255])
        (reg/f:DI 273 [255])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 273 [255])
        (nil)))
(insn 18 423 397 32 (set (reg/v:SI 110 [ num_floats ])
        (reg/v:SI 150 [ num_floats ])) 89 {*movsi_internal}
     (nil))
(jump_insn 397 18 398 32 (set (pc)
        (label_ref 321)) 650 {jump}
     (nil)
 -> 321)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 110 148 150 258 259 260 261 262 263

(barrier 398 397 302)
;; basic block 33, loop depth 2, count 0, freq 819, maybe hot
;; Invalid sum of incoming frequencies 3033, should be 819
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       30 [91.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u357(6){ }u358(7){ }u359(16){ }u360(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 92 148 150 266 267 268 269 270 271 272 273 274 275
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 92 266 267 268 269 270 271 272 273 274 275
;; lr  def 	 127 276 277 278 279 280 281 282 283 284 285 286 287 288
(code_label 302 398 303 33 185 "" [1 uses])
(note 303 302 305 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 305 303 424 33 (set (reg:SI 127 [ D.26281 ])
        (mem:SI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 267 [orig:71 ivtmp.291 ] [71]))
                (const_int -256 [0xffffffffffffff00])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.291_105, offset: 0B]+0 S4 A32])) 89 {*movsi_internal}
     (nil))
(insn 424 305 425 33 (set (reg:SI 276 [orig:62 ivtmp.295 ] [62])
        (reg:SI 266 [orig:62 ivtmp.295 ] [62])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 266 [orig:62 ivtmp.295 ] [62])
        (nil)))
(insn 425 424 426 33 (set (reg:DI 277 [orig:71 ivtmp.291 ] [71])
        (reg:DI 267 [orig:71 ivtmp.291 ] [71])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 267 [orig:71 ivtmp.291 ] [71])
        (nil)))
(insn 426 425 427 33 (set (reg:SI 278 [orig:83 D.26281 ] [83])
        (reg:SI 83 [ D.26281 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ D.26281 ])
        (nil)))
(insn 427 426 428 33 (set (reg:SI 279 [orig:92 D.26281 ] [92])
        (reg:SI 92 [ D.26281 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.26281 ])
        (nil)))
(insn 428 427 429 33 (set (reg:DI 280 [orig:93 ivtmp.305 ] [93])
        (reg:DI 268 [orig:93 ivtmp.305 ] [93])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 268 [orig:93 ivtmp.305 ] [93])
        (nil)))
(insn 429 428 430 33 (set (reg/v:SI 281 [orig:106 j ] [106])
        (reg/v:SI 269 [orig:106 j ] [106])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 269 [orig:106 j ] [106])
        (nil)))
(insn 430 429 431 33 (set (reg:SI 282 [orig:127 D.26281 ] [127])
        (reg:SI 127 [ D.26281 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 127 [ D.26281 ])
        (nil)))
(insn 431 430 432 33 (set (reg:DI 283 [orig:143 D.26282 ] [143])
        (reg:DI 270 [orig:143 D.26282 ] [143])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 270 [orig:143 D.26282 ] [143])
        (nil)))
(insn 432 431 433 33 (set (reg/v:SI 284 [orig:147 num_tilings ] [147])
        (reg/v:SI 271 [orig:147 num_tilings ] [147])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 271 [orig:147 num_tilings ] [147])
        (nil)))
(insn 433 432 434 33 (set (reg/v/f:DI 285 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 272 [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 272 [orig:151 wrap_widths ] [151])
        (nil)))
(insn 434 433 435 33 (set (reg/f:DI 286 [255])
        (reg/f:DI 273 [255])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 273 [255])
        (nil)))
(insn 435 434 436 33 (set (reg/f:DI 287 [256])
        (reg/f:DI 274 [256])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 274 [256])
        (nil)))
(insn 436 435 318 33 (set (reg/f:DI 288 [257])
        (reg/f:DI 275 [257])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 275 [257])
        (nil)))
;;  succ:       34 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 276 277 278 279 280 281 282 283 284 285 286 287 288

;; basic block 34, loop depth 3, count 0, freq 9100, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       34 [91.0%]  (DFS_BACK)
;;              33 [100.0%]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u364(6){ }u365(7){ }u366(16){ }u367(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 276 277 278 279 280 281 282 283 284 285 286 287 288
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 279 282
;; lr  def 	 17 [flags] 279
(code_label 318 436 306 34 190 "" [1 uses])
(note 306 318 307 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(note 307 306 308 34 NOTE_INSN_DELETED)
(insn 308 307 309 34 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:SI (reg:SI 279 [orig:92 D.26281 ] [92])
                        (reg:SI 282 [orig:127 D.26281 ] [127]))
                    (const_int 0 [0])))
            (set (reg:SI 279 [orig:92 D.26281 ] [92])
                (plus:SI (reg:SI 279 [orig:92 D.26281 ] [92])
                    (reg:SI 282 [orig:127 D.26281 ] [127])))
        ]) tiles.cpp:523 281 {*addsi_2}
     (nil))
(jump_insn 309 308 310 34 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 318)
            (pc))) tiles.cpp:523 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 318)
;;  succ:       34 [91.0%]  (DFS_BACK)
;;              35 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 276 277 278 279 280 281 282 283 284 285 286 287 288

;; basic block 35, loop depth 2, count 0, freq 819, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u372(6){ }u373(7){ }u374(16){ }u375(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 276 277 278 279 280 281 283 284 285 286 287 288
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 276 277 278 279 280 281 283 284 285 286 287 288
;; lr  def 	 83 92 266 267 268 269 270 271 272 273 274 275
(note 310 309 437 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 437 310 438 35 (set (reg:SI 266 [orig:62 ivtmp.295 ] [62])
        (reg:SI 276 [orig:62 ivtmp.295 ] [62])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 276 [orig:62 ivtmp.295 ] [62])
        (nil)))
(insn 438 437 439 35 (set (reg:DI 267 [orig:71 ivtmp.291 ] [71])
        (reg:DI 277 [orig:71 ivtmp.291 ] [71])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 277 [orig:71 ivtmp.291 ] [71])
        (nil)))
(insn 439 438 440 35 (set (reg:SI 83 [ D.26281 ])
        (reg:SI 278 [orig:83 D.26281 ] [83])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 278 [orig:83 D.26281 ] [83])
        (nil)))
(insn 440 439 441 35 (set (reg:SI 92 [ D.26281 ])
        (reg:SI 279 [orig:92 D.26281 ] [92])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 279 [orig:92 D.26281 ] [92])
        (nil)))
(insn 441 440 442 35 (set (reg:DI 268 [orig:93 ivtmp.305 ] [93])
        (reg:DI 280 [orig:93 ivtmp.305 ] [93])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 280 [orig:93 ivtmp.305 ] [93])
        (nil)))
(insn 442 441 443 35 (set (reg/v:SI 269 [orig:106 j ] [106])
        (reg/v:SI 281 [orig:106 j ] [106])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 281 [orig:106 j ] [106])
        (nil)))
(insn 443 442 444 35 (set (reg:DI 270 [orig:143 D.26282 ] [143])
        (reg:DI 283 [orig:143 D.26282 ] [143])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 283 [orig:143 D.26282 ] [143])
        (nil)))
(insn 444 443 445 35 (set (reg/v:SI 271 [orig:147 num_tilings ] [147])
        (reg/v:SI 284 [orig:147 num_tilings ] [147])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 284 [orig:147 num_tilings ] [147])
        (nil)))
(insn 445 444 446 35 (set (reg/v/f:DI 272 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 285 [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 285 [orig:151 wrap_widths ] [151])
        (nil)))
(insn 446 445 447 35 (set (reg/f:DI 273 [255])
        (reg/f:DI 286 [255])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 286 [255])
        (nil)))
(insn 447 446 448 35 (set (reg/f:DI 274 [256])
        (reg/f:DI 287 [256])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 287 [256])
        (nil)))
(insn 448 447 312 35 (set (reg/f:DI 275 [257])
        (reg/f:DI 288 [257])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 288 [257])
        (nil)))
(insn 312 448 399 35 (set (mem:SI (plus:DI (reg/f:DI 273 [255])
                (reg:DI 267 [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: coordinates, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 92 [ D.26281 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.26281 ])
        (nil)))
(jump_insn 399 312 400 35 (set (pc)
        (label_ref 313)) 650 {jump}
     (nil)
 -> 313)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 83 148 150 266 267 268 269 270 271 272 273 274 275

(barrier 400 399 359)
;; basic block 36, loop depth 1, count 0, freq 8, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       38 [4.8%] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u379(6){ }u380(7){ }u381(16){ }u382(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 258 259 260 261 262 263
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110
(code_label 359 400 358 36 193 "" [1 uses])
(note 358 359 19 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 19 358 321 36 (set (reg/v:SI 110 [ num_floats ])
        (const_int 0 [0])) tiles.cpp:513 89 {*movsi_internal}
     (nil))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 110 148 150 258 259 260 261 262 263

;; basic block 37, loop depth 1, count 0, freq 167, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 [100.0%]  (FALLTHRU)
;;              32 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u383(6){ }u384(7){ }u385(16){ }u386(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 110 148 150 258 259 260 261 262 263
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 110 148 258 259 261 263
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 105 253 258 259
(code_label 321 19 322 37 187 "" [1 uses])
(note 322 321 323 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 323 322 324 37 (set (reg:DI 253 [ num_floats ])
        (sign_extend:DI (reg/v:SI 110 [ num_floats ]))) tiles.cpp:530 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 110 [ num_floats ])
        (nil)))
(insn 324 323 326 37 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 253 [ num_floats ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -176 [0xffffffffffffff50])) [0 coordinates S4 A32])
        (reg/v:SI 259 [orig:106 j ] [106])) tiles.cpp:530 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 253 [ num_floats ])
        (nil)))
(insn 326 324 327 37 (set (reg:DI 1 dx)
        (reg/v/f:DI 148 [ ctable ])) tiles.cpp:532 87 {*movdi_internal_rex64}
     (nil))
(insn 327 326 328 37 (set (reg:SI 4 si)
        (reg/v:SI 70 [ num_coordinates ])) tiles.cpp:532 89 {*movsi_internal}
     (nil))
(insn 328 327 329 37 (set (reg:DI 5 di)
        (reg/f:DI 263 [255])) tiles.cpp:532 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(call_insn 329 328 330 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z4hashPiiP15collision_table") [flags 0x1]  <function_decl 0x2b82f1f16800 hash>) [0 hash S1 A8])
            (const_int 0 [0]))) tiles.cpp:532 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 330 329 331 37 (set (reg:SI 105 [ D.26281 ])
        (reg:SI 0 ax)) tiles.cpp:532 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (expr_list:REG_EQUIV (mem:SI (reg:DI 258 [orig:93 ivtmp.305 ] [93]) [0 MEM[base: _77, offset: 0B]+0 S4 A32])
            (nil))))
(insn 331 330 332 37 (set (mem:SI (reg:DI 258 [orig:93 ivtmp.305 ] [93]) [0 MEM[base: _77, offset: 0B]+0 S4 A32])
        (reg:SI 105 [ D.26281 ])) tiles.cpp:532 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105 [ D.26281 ])
        (nil)))
(insn 332 331 334 37 (parallel [
            (set (reg/v:SI 259 [orig:106 j ] [106])
                (plus:SI (reg/v:SI 259 [orig:106 j ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:510 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 334 332 335 37 (var_location:SI j (reg/v:SI 259 [orig:106 j ] [106])) -1
     (nil))
(insn 335 334 336 37 (parallel [
            (set (reg:DI 258 [orig:93 ivtmp.305 ] [93])
                (plus:DI (reg:DI 258 [orig:93 ivtmp.305 ] [93])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 336 335 337 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 259 [orig:106 j ] [106])
            (reg/v:SI 261 [orig:147 num_tilings ] [147]))) tiles.cpp:510 7 {*cmpsi_1}
     (nil))
(jump_insn 337 336 339 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 351)
            (pc))) tiles.cpp:510 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 351)
;;  succ:       38 [91.0%]  (FALLTHRU,DFS_BACK)
;;              40 [9.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 258 259 260 261 262 263

;; basic block 38, loop depth 1, count 0, freq 167, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       37 [91.0%]  (FALLTHRU,DFS_BACK)
;;              24 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u408(6){ }u409(7){ }u410(16){ }u411(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 258 259 260 261 262 263
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150
;; lr  def 	 17 [flags]
(code_label 339 337 340 38 181 "" [1 uses])
(note 340 339 341 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(debug_insn 341 340 342 38 (var_location:SI j (reg/v:SI 259 [orig:106 j ] [106])) -1
     (nil))
(debug_insn 342 341 343 38 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 343 342 344 38 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 150 [ num_floats ])
            (const_int 0 [0]))) tiles.cpp:513 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 344 343 345 38 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 359)
            (pc))) tiles.cpp:513 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 359)
;;  succ:       39 [95.2%]  (FALLTHRU)
;;              36 [4.8%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 258 259 260 261 262 263

;; basic block 39, loop depth 1, count 0, freq 159, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 [95.2%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u415(6){ }u416(7){ }u417(16){ }u418(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 258 259 260 261 262 263
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 258 259 260 261 262 263
;; lr  def 	 62 71 264 265 266 267 268 269 270 271 272 273 274 275
(note 345 344 15 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 15 345 16 39 (set (reg:SI 62 [ ivtmp.295 ])
        (const_int 1 [0x1])) tiles.cpp:513 89 {*movsi_internal}
     (nil))
(insn 16 15 371 39 (set (reg:DI 71 [ ivtmp.291 ])
        (const_int 0 [0])) tiles.cpp:513 87 {*movdi_internal_rex64}
     (nil))
(insn 371 16 372 39 (set (reg/f:DI 265 [257])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn 372 371 449 39 (set (reg/f:DI 264 [256])
        (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 449 372 450 39 (set (reg:SI 266 [orig:62 ivtmp.295 ] [62])
        (reg:SI 62 [ ivtmp.295 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 62 [ ivtmp.295 ])
        (nil)))
(insn 450 449 451 39 (set (reg:DI 267 [orig:71 ivtmp.291 ] [71])
        (reg:DI 71 [ ivtmp.291 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 71 [ ivtmp.291 ])
        (nil)))
(insn 451 450 452 39 (set (reg:DI 268 [orig:93 ivtmp.305 ] [93])
        (reg:DI 258 [orig:93 ivtmp.305 ] [93])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 258 [orig:93 ivtmp.305 ] [93])
        (nil)))
(insn 452 451 453 39 (set (reg/v:SI 269 [orig:106 j ] [106])
        (reg/v:SI 259 [orig:106 j ] [106])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 259 [orig:106 j ] [106])
        (nil)))
(insn 453 452 454 39 (set (reg:DI 270 [orig:143 D.26282 ] [143])
        (reg:DI 260 [orig:143 D.26282 ] [143])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 260 [orig:143 D.26282 ] [143])
        (nil)))
(insn 454 453 455 39 (set (reg/v:SI 271 [orig:147 num_tilings ] [147])
        (reg/v:SI 261 [orig:147 num_tilings ] [147])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 261 [orig:147 num_tilings ] [147])
        (nil)))
(insn 455 454 456 39 (set (reg/v/f:DI 272 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 262 [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 262 [orig:151 wrap_widths ] [151])
        (nil)))
(insn 456 455 457 39 (set (reg/f:DI 273 [255])
        (reg/f:DI 263 [255])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 263 [255])
        (nil)))
(insn 457 456 458 39 (set (reg/f:DI 274 [256])
        (reg/f:DI 264 [256])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 264 [256])
        (nil)))
(insn 458 457 401 39 (set (reg/f:DI 275 [257])
        (reg/f:DI 265 [257])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 265 [257])
        (nil)))
(jump_insn 401 458 402 39 (set (pc)
        (label_ref 346)) 650 {jump}
     (nil)
 -> 346)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70 148 150 266 267 268 269 270 271 272 273 274 275

(barrier 402 401 351)
;; basic block 40, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 39, next block 1, flags: (RTL)
;;  pred:       37 [9.0%]  (LOOP_EXIT)
;;              7 [100.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u421(6){ }u422(7){ }u423(16){ }u424(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 351 402 352 40 168 "" [2 uses])
(note 352 351 0 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function (static initializers for tiles.cpp) (_GLOBAL__sub_I_tiles.cpp, funcdef_no=1103, decl_uid=25455, cgraph_uid=347) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
rescanning insn with uid = 12.
deleting insn with uid = 12.
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs




Pass 1 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
   Insn 10(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
Compressing live ranges: from 13 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=3
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


(static initializers for tiles.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,1u} r5={5d,2u} r6={1d,2u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,1u} r17={2d} r18={2d} r19={2d} r20={1d,2u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 124{111d,13u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 5 2 6 2 (var_location:SI __priority (const_int 65535 [0xffff])) -1
     (nil))
(debug_insn 6 5 7 2 (var_location:SI __initialize_p (const_int 1 [0x1])) -1
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b82f1da6390 __ioinit>)) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x2b82f1903200 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/4.8/iostream:74 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x2b82f1f9dab0 __dso_handle>)) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 12 2 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b82f1da6390 __ioinit>)) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (nil))
(insn 12 10 13 2 (set (reg:DI 5 di)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x2b82f1903400 __comp_dtor >)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x2b82f1903400 __comp_dtor >)
        (nil)))
(call_insn/j 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x2b82f1f74f00 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/4.8/iostream:74 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 14 13 0)
