
;; Function int hash_UNH(int*, int, long int, int) (_Z8hash_UNHPiili, funcdef_no=1063, decl_uid=23699, cgraph_uid=307)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 18 (  1.1)


int hash_UNH(int*, int, long int, int)

Dataflow summary:
def_info->table_size = 107, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={10d,13u} r1={9d,17u} r2={8d,8u,1e} r3={5d,4u} r4={3d,4u} r5={3d,2u} r6={5d,6u,1e} r7={22d,49u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={25d,7u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={4d,3u} r42={6d,5u} r43={4d,3u} r44={4d,3u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 282{156d,124u,2e} in 94{93 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 3 8 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 1 [dx] 7 [sp] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 7 [sp] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 7 [sp] 43 [r14] 44 [r15]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 41 [r12]
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 41 [r12]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]

( 6 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags] 42 [r13]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  gen 	 3 [bx] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 5 4 )->[5]->( 5 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 5 )->[6]->( 4 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 7 [sp] 43 [r14] 44 [r15]

( 2 7 )->[8]->( 9 15 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 7 [sp] 43 [r14] 44 [r15]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]

( 10 9 )->[10]->( 10 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]

( 10 )->[11]->( 12 14 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

( 11 12 )->[12]->( 12 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp]
;; live  out 	 1 [dx] 7 [sp]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 13 11 )->[14]->( 1 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 7 [sp]

( 14 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 42 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 185 to worklist
  Adding insn 184 to worklist
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 181 to worklist
  Adding insn 180 to worklist
  Adding insn 50 to worklist
  Adding insn 65 to worklist
  Adding insn 60 to worklist
  Adding insn 55 to worklist
  Adding insn 77 to worklist
  Adding insn 84 to worklist
  Adding insn 91 to worklist
  Adding insn 117 to worklist
  Adding insn 130 to worklist
  Adding insn 142 to worklist
  Adding insn 198 to worklist
  Adding insn 159 to worklist
  Adding insn 221 to worklist
  Adding insn 212 to worklist
Finished finding needed instructions:
processing block 14 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 197 to worklist
  Adding insn 196 to worklist
  Adding insn 195 to worklist
  Adding insn 194 to worklist
  Adding insn 193 to worklist
  Adding insn 192 to worklist
  Adding insn 191 to worklist
processing block 13 lr out =  0 [ax] 7 [sp]
  Adding insn 149 to worklist
processing block 12 lr out =  1 [dx] 7 [sp]
  Adding insn 141 to worklist
processing block 11 lr out =  0 [ax] 1 [dx] 7 [sp]
  Adding insn 129 to worklist
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 179 to worklist
  Adding insn 178 to worklist
processing block 10 lr out =  0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
  Adding insn 116 to worklist
  Adding insn 112 to worklist
  Adding insn 110 to worklist
  Adding insn 109 to worklist
  Adding insn 107 to worklist
  Adding insn 201 to worklist
  Adding insn 100 to worklist
  Adding insn 176 to worklist
  Adding insn 98 to worklist
  Adding insn 96 to worklist
processing block 9 lr out =  0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
  Adding insn 168 to worklist
  Adding insn 203 to worklist
  Adding insn 202 to worklist
processing block 15 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 220 to worklist
  Adding insn 219 to worklist
  Adding insn 218 to worklist
  Adding insn 217 to worklist
  Adding insn 216 to worklist
  Adding insn 215 to worklist
  Adding insn 214 to worklist
  Adding insn 200 to worklist
processing block 8 lr out =  7 [sp] 43 [r14] 44 [r15]
  Adding insn 205 to worklist
  Adding insn 204 to worklist
processing block 7 lr out =  7 [sp] 43 [r14] 44 [r15]
processing block 6 lr out =  6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
  Adding insn 76 to worklist
  Adding insn 75 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 64 to worklist
  Adding insn 59 to worklist
  Adding insn 58 to worklist
  Adding insn 57 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 206 to worklist
  Adding insn 33 to worklist
processing block 3 lr out =  6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
  Adding insn 46 to worklist
  Adding insn 169 to worklist
processing block 2 lr out =  7 [sp] 43 [r14] 44 [r15]
  Adding insn 208 to worklist
  Adding insn 207 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 186 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 20 (  1.2)
deleting insn with uid = 187.
deleting insn with uid = 32.
;;   ======================================================
;;   -- basic block 2 from 180 to 42 -- after reload
;;   ======================================================

;;	  0--> b  0: i  40loc 0                                   :nothing
;;	  0--> b  0: i 180[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  31r15=cx                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 181[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  28r14=di                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 182[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 183[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 184[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 185[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 186{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 13--> b  0: i  30[sp+0x8]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i 207dx=[`_ZZ8hash_UNHPiiliE10first_call']   :athlon-direct,athlon-load
;;	 14--> b  0: i  29[sp+0x4]=si                             :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i 208flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	 17--> b  0: i  42pc={(flags==0)?L85:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 17
;;   new head = 180
;;   new tail = 42

;;   ======================================================
;;   -- basic block 3 from 169 to 46 -- after reload
;;   ======================================================

;;	  0--> b  0: i 169bp=`_ZZ8hash_UNHPiiliE6rndseq'          :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  46r12=const(`_ZZ8hash_UNHPiiliE6rndseq'+0x2000):athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 169
;;   new tail = 46

;;   ======================================================
;;   -- basic block 4 from 48 to 206 -- after reload
;;   ======================================================

;;	  0--> b  0: i  48loc clobber                             :nothing
;;	  0--> b  0: i  50[bp]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  52loc 0                                   :nothing
;;	  0--> b  0: i  33bx=0x4                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 206{r13=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 48
;;   new tail = 206

deleting insn with uid = 63.
;;   ======================================================
;;   -- basic block 5 from 54 to 65 -- after reload
;;   ======================================================

;;	  0--> b  0: i  54loc clobber                             :nothing
;;	  0--> b  0: i  55ax=call [`rand']                        :athlon-vector,athlon-ieu
;;	  1--> b  0: i  58{r13=r13<<0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	  1--> b  0: i  57ax=zxn(ax)                              :athlon-direct,athlon-ieu
;;	  2--> b  0: i  59{r13=r13|ax;clobber flags;}             :athlon-direct,athlon-ieu
;;	  2--> b  0: i  64{flags=cmp(bx-0x1,0);bx=bx-0x1;}        :athlon-direct,athlon-ieu
;;	  3--> b  0: i  60[bp]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  62loc D#1                                 :nothing
;;	  3--> b  0: i  65pc={(flags!=0)?L68:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 54
;;   new tail = 65

;;   ======================================================
;;   -- basic block 6 from 74 to 77 -- after reload
;;   ======================================================

;;	  0--> b  0: i  74loc D#2                                 :nothing
;;	  0--> b  0: i  75{bp=bp+0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  76flags=cmp(bp,r12)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i  77pc={(flags!=0)?L79:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 74
;;   new tail = 77

;;   ======================================================
;;   -- basic block 7 from 84 to 84 -- after reload
;;   ======================================================

;;	  0--> b  0: i  84[`_ZZ8hash_UNHPiiliE10first_call']=0    :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 84
;;   new tail = 84

;;   ======================================================
;;   -- basic block 8 from 88 to 91 -- after reload
;;   ======================================================

;;	  0--> b  0: i  88loc 0                                   :nothing
;;	  0--> b  0: i  89loc 0                                   :nothing
;;	  0--> b  0: i 204ax=[sp+0x4]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 205flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  91pc={(flags<=0)?L164:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 88
;;   new tail = 91

;;   ======================================================
;;   -- basic block 9 from 202 to 168 -- after reload
;;   ======================================================

;;	  0--> b  0: i 168di=`_ZZ8hash_UNHPiiliE6rndseq'          :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 202{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 203{dx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 202
;;   new tail = 168

deleting insn with uid = 97.
deleting insn with uid = 101.
deleting insn with uid = 106.
;;   ======================================================
;;   -- basic block 10 from 94 to 117 -- after reload
;;   ======================================================

;;	  0--> b  0: i  94loc ax                                  :nothing
;;	  0--> b  0: i  95loc dx                                  :nothing
;;	  0--> b  0: i  96cx=sxn(dx)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  98si=sxn([cx*0x4+r14])                    :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 173loc si                                  :nothing
;;	  1--> b  0: i  99loc si                                  :nothing
;;	  1--> b  0: i 176cx=r15                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 100{cx=cx*dx;clobber flags;}               :athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0
;;	  2--> b  0: i 172loc cx                                  :nothing
;;	  2--> b  0: i 112{dx=dx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  5--> b  0: i 201{cx=cx+si;clobber flags;}               :athlon-direct,athlon-ieu
;;	  5--> b  0: i 105loc sxn(D#3)+D#4&0x7ff                  :nothing
;;	  6--> b  0: i 107{cx=cx&0x7ff;clobber flags;}            :athlon-direct,athlon-ieu
;;	  7--> b  0: i 109cx=zxn([cx*0x4+di])                     :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i 110{ax=ax+cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 11--> b  0: i 111loc ax                                  :nothing
;;	 11--> b  0: i 114loc ax                                  :nothing
;;	 11--> b  0: i 115loc dx                                  :nothing
;;	 11--> b  0: i 116flags=cmp([sp+0x4],dx)                  :athlon-direct,athlon-load,athlon-ieu
;;	 15--> b  0: i 117pc={(flags>0)?L119:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 94
;;   new tail = 117

;;   ======================================================
;;   -- basic block 11 from 178 to 130 -- after reload
;;   ======================================================

;;	  0--> b  0: i 178{dx=ax>>0x3f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i 179{ax=ax/[sp+0x8];dx=ax%[sp+0x8];use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  7--> b  0: i 125ax=dx                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i 126dx=sxn(dx)                              :athlon-direct,athlon-ieu
;;	  7--> b  0: i 128loc dx                                  :nothing
;;	  8--> b  0: i 129flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  9--> b  0: i 130pc={(flags>=0)?L150:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 178
;;   new tail = 130

;;   ======================================================
;;   -- basic block 12 from 140 to 142 -- after reload
;;   ======================================================

;;	  0--> b  0: i 140loc dx+[sp+0x8]                         :nothing
;;	  0--> b  0: i 141{flags=cmp(dx+[sp+0x8],0);dx=dx+[sp+0x8];}:athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 142pc={(flags<0)?L171:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 140
;;   new tail = 142

;;   ======================================================
;;   -- basic block 13 from 149 to 149 -- after reload
;;   ======================================================

;;	  0--> b  0: i 149ax=dx                                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 149
;;   new tail = 149

deleting insn with uid = 190.
;;   ======================================================
;;   -- basic block 14 from 159 to 198 -- after reload
;;   ======================================================

;;	  0--> b  0: i 191{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 159use ax                                  :nothing
;;	  1--> b  0: i 192bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 193bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 194r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 195r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 196r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 197r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 198simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 159
;;   new tail = 198

deleting insn with uid = 213.
;;   ======================================================
;;   -- basic block 15 from 200 to 221 -- after reload
;;   ======================================================

;;	  0--> b  0: i 214{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 200{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 212use ax                                  :nothing
;;	  1--> b  0: i 215bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 216bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 217r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 218r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 219r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 220r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 221simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 200
;;   new tail = 221



starting the processing of deferred insns
ending the processing of deferred insns


int hash_UNH(int*, int, long int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={10d,13u} r1={9d,17u} r2={8d,8u,1e} r3={5d,4u} r4={3d,4u} r5={3d,2u} r6={5d,6u,1e} r7={22d,49u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={25d,7u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={4d,3u} r42={6d,5u} r43={4d,3u} r44={4d,3u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 282{156d,124u,2e} in 94{93 regular + 1 call} insns.
(note 27 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 40, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 1 [dx] 7 [sp] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 7 [sp] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 38 27 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 32 38 40 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 40 32 180 2 (var_location:DI sum (const_int 0 [0])) tiles.cpp:134 -1
     (nil))
(insn/f:TI 180 40 31 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tiles.cpp:129 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 31 180 181 2 (set (reg/v:SI 44 r15 [orig:117 increment ] [117])
        (reg:SI 2 cx [ increment ])) tiles.cpp:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ increment ])
        (nil)))
(insn/f:TI 181 31 28 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tiles.cpp:129 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn 28 181 182 2 (set (reg/v/f:DI 43 r14 [orig:114 ints ] [114])
        (reg:DI 5 di [ ints ])) tiles.cpp:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ ints ])
        (nil)))
(insn/f:TI 182 28 183 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tiles.cpp:129 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 183 182 184 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:129 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 184 183 185 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:129 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 185 184 186 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:129 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 186 185 187 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:129 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 187 186 30 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 30 187 207 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-8 S8 A64])
        (reg:DI 1 dx [ m ])) tiles.cpp:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ m ])
        (nil)))
(insn 207 30 29 2 (set (reg:SI 1 dx)
        (mem/c:SI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE10first_call") [flags 0x2]  <var_decl 0x2b82f1f7d688 first_call>) [0 first_call+0 S4 A128])) tiles.cpp:137 89 {*movsi_internal}
     (nil))
(insn:TI 29 207 208 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])
        (reg:SI 4 si [ num_ints ])) tiles.cpp:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_ints ])
        (nil)))
(insn:TI 208 29 42 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx)
            (const_int 0 [0]))) tiles.cpp:137 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx)
        (nil)))
(jump_insn:TI 42 208 43 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) tiles.cpp:137 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 85)
;;  succ:       3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 7 [sp] 43 [r14] 44 [r15]

;; basic block 3, loop depth 0, count 0, freq 20, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 41 [r12]
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 41 [r12]
;; live  kill	
(note 43 42 169 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 169 43 46 3 (set (reg:DI 6 bp [orig:91 ivtmp.78 ] [91])
        (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)) 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
        (nil)))
(insn 46 169 79 3 (set (reg/f:DI 41 r12 [orig:110 D.25971 ] [110])
        (const:DI (plus:DI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
                (const_int 8192 [0x2000])))) 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
                (const_int 8192 [0x2000])))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 2000, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [99.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags] 42 [r13]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  gen 	 3 [bx] 42 [r13]
;; live  kill	 17 [flags]
(code_label 79 46 47 4 6 "" [1 uses])
(note 47 79 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 48 47 50 4 (var_location:SI k (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 50 48 52 4 (set (mem:SI (reg:DI 6 bp [orig:91 ivtmp.78 ] [91]) [0 MEM[base: _115, offset: 0B]+0 S4 A32])
        (const_int 0 [0])) tiles.cpp:139 89 {*movsi_internal}
     (nil))
(debug_insn 52 50 33 4 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 33 52 206 4 (set (reg:SI 3 bx [orig:108 D.25970 ] [108])
        (const_int 4 [0x4])) tiles.cpp:139 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))
(insn 206 33 68 4 (parallel [
            (set (reg:DI 42 r13 [orig:90 D.25965 ] [90])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:139 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 5, loop depth 0, count 0, freq 8000, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [75.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags] 42 [r13]
;; live  kill	 17 [flags]
(code_label 68 206 53 5 4 "" [1 uses])
(note 53 68 63 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 63 53 54 5 NOTE_INSN_DELETED)
(debug_insn 54 63 55 5 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(call_insn:TI 55 54 58 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x2b82f1e2a500 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) tiles.cpp:141 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn:TI 58 55 57 5 (parallel [
            (set (reg:SI 42 r13 [orig:90 D.25965 ] [90])
                (ashift:SI (reg:SI 42 r13 [orig:90 D.25965 ] [90])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:141 512 {*ashlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 57 58 59 5 (set (reg:SI 0 ax [orig:119 D.25965 ] [119])
        (zero_extend:SI (reg:QI 0 ax [orig:87 D.25966 ] [87]))) tiles.cpp:141 145 {*zero_extendqisi2}
     (nil))
(insn:TI 59 57 64 5 (parallel [
            (set (reg:SI 42 r13 [orig:90 D.25965 ] [90])
                (ior:SI (reg:SI 42 r13 [orig:90 D.25965 ] [90])
                    (reg:SI 0 ax [orig:119 D.25965 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:141 412 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:119 D.25965 ] [119])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 64 59 60 5 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (reg:SI 3 bx [orig:108 D.25970 ] [108])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg:SI 3 bx [orig:108 D.25970 ] [108])
                (plus:SI (reg:SI 3 bx [orig:108 D.25970 ] [108])
                    (const_int -1 [0xffffffffffffffff])))
        ]) tiles.cpp:140 281 {*addsi_2}
     (nil))
(insn:TI 60 64 62 5 (set (mem:SI (reg:DI 6 bp [orig:91 ivtmp.78 ] [91]) [0 MEM[base: _115, offset: 0B]+0 S4 A32])
        (reg:SI 42 r13 [orig:90 D.25965 ] [90])) tiles.cpp:141 89 {*movsi_internal}
     (nil))
(debug_insn 62 60 65 5 (var_location:SI i (debug_expr:SI D#1)) -1
     (nil))
(jump_insn 65 62 72 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) tiles.cpp:140 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 7500 [0x1d4c])
            (nil)))
 -> 68)
;;  succ:       5 [75.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              6 [25.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 2000, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [25.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(note 72 65 74 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 74 72 75 6 (var_location:SI k (debug_expr:SI D#2)) -1
     (nil))
(insn:TI 75 74 76 6 (parallel [
            (set (reg:DI 6 bp [orig:91 ivtmp.78 ] [91])
                (plus:DI (reg:DI 6 bp [orig:91 ivtmp.78 ] [91])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 76 75 77 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 6 bp [orig:91 ivtmp.78 ] [91])
            (reg/f:DI 41 r12 [orig:110 D.25971 ] [110]))) tiles.cpp:138 8 {*cmpdi_1}
     (expr_list:REG_EQUAL (compare:CCZ (reg:DI 6 bp [orig:91 ivtmp.78 ] [91])
            (const:DI (plus:DI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
                    (const_int 8192 [0x2000]))))
        (nil)))
(jump_insn:TI 77 76 83 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 79)
            (pc))) tiles.cpp:138 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9899 [0x26ab])
            (nil)))
 -> 79)
;;  succ:       4 [99.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              7 [1.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 43 [r14] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 20, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL)
;;  pred:       6 [1.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 83 77 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 84 83 85 7 (set (mem/c:SI (symbol_ref:DI ("_ZZ8hash_UNHPiiliE10first_call") [flags 0x2]  <var_decl 0x2b82f1f7d688 first_call>) [0 first_call+0 S4 A128])
        (const_int 0 [0])) tiles.cpp:143 89 {*movsi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 7 [sp] 43 [r14] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 40, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;;              7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 85 84 86 8 2 "" [1 uses])
(note 86 85 88 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 88 86 89 8 (var_location:DI sum (const_int 0 [0])) -1
     (nil))
(debug_insn 89 88 204 8 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 204 89 205 8 (set (reg:SI 0 ax)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])) tiles.cpp:146 89 {*movsi_internal}
     (nil))
(insn:TI 205 204 91 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax)
            (const_int 0 [0]))) tiles.cpp:146 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 91 205 92 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 164)
            (pc))) tiles.cpp:146 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 164)
;;  succ:       9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 7 [sp] 43 [r14] 44 [r15]

;; basic block 9, loop depth 0, count 0, freq 36, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  in  	 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	 17 [flags]
(note 92 91 168 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 168 92 202 9 (set (reg/f:DI 5 di [133])
        (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)) 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)
        (nil)))
(insn 202 168 203 9 (parallel [
            (set (reg/v:DI 0 ax [orig:104 sum ] [104])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:134 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 203 202 119 9 (parallel [
            (set (reg:DI 1 dx [orig:105 i ] [105])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:146 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 409, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 119 203 93 10 9 "" [1 uses])
(note 93 119 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 97 93 101 10 NOTE_INSN_DELETED)
(note 101 97 106 10 NOTE_INSN_DELETED)
(note 106 101 94 10 NOTE_INSN_DELETED)
(debug_insn 94 106 95 10 (var_location:DI sum (reg/v:DI 0 ax [orig:104 sum ] [104])) -1
     (nil))
(debug_insn 95 94 96 10 (var_location:SI i (reg/v:SI 1 dx [orig:105 i ] [105])) -1
     (nil))
(insn:TI 96 95 98 10 (set (reg:DI 2 cx [orig:121 D.25967 ] [121])
        (sign_extend:DI (reg/v:SI 1 dx [orig:105 i ] [105]))) tiles.cpp:148 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 98 96 173 10 (set (reg/v:DI 4 si [orig:96 index ] [96])
        (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI 2 cx [orig:121 D.25967 ] [121])
                        (const_int 4 [0x4]))
                    (reg/v/f:DI 43 r14 [orig:114 ints ] [114])) [0 *_29+0 S4 A32]))) tiles.cpp:148 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:121 D.25967 ] [121])
        (nil)))
(debug_insn 173 98 99 10 (var_location:DI D#4 (reg/v:DI 4 si [orig:96 index ] [96])) -1
     (nil))
(debug_insn 99 173 176 10 (var_location:DI index (reg/v:DI 4 si [orig:96 index ] [96])) tiles.cpp:148 -1
     (nil))
(insn 176 99 100 10 (set (reg:SI 2 cx [orig:123 D.25966 ] [123])
        (reg/v:SI 44 r15 [orig:117 increment ] [117])) tiles.cpp:149 89 {*movsi_internal}
     (nil))
(insn:TI 100 176 172 10 (parallel [
            (set (reg:SI 2 cx [orig:123 D.25966 ] [123])
                (mult:SI (reg:SI 2 cx [orig:123 D.25966 ] [123])
                    (reg/v:SI 1 dx [orig:105 i ] [105])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:149 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 172 100 112 10 (var_location:SI D#3 (reg:SI 2 cx [orig:123 D.25966 ] [123])) -1
     (nil))
(insn 112 172 201 10 (parallel [
            (set (reg/v:SI 1 dx [orig:105 i ] [105])
                (plus:SI (reg/v:SI 1 dx [orig:105 i ] [105])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:146 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 201 112 105 10 (parallel [
            (set (reg:DI 2 cx [orig:126 index ] [126])
                (plus:DI (reg:DI 2 cx [orig:126 index ] [126])
                    (reg/v:DI 4 si [orig:96 index ] [96])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:149 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/v:DI 4 si [orig:96 index ] [96])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(debug_insn 105 201 107 10 (var_location:DI index (and:DI (plus:DI (sign_extend:DI (debug_expr:SI D#3))
            (debug_expr:DI D#4))
        (const_int 2047 [0x7ff]))) -1
     (nil))
(insn:TI 107 105 109 10 (parallel [
            (set (reg:DI 2 cx [orig:126 index ] [126])
                (and:DI (reg:DI 2 cx [orig:126 index ] [126])
                    (const_int 2047 [0x7ff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:155 392 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 109 107 110 10 (set (reg:DI 2 cx [orig:128 D.25969 ] [128])
        (zero_extend:DI (mem/j:SI (plus:DI (mult:DI (reg:DI 2 cx [orig:126 index ] [126])
                        (const_int 4 [0x4]))
                    (reg/f:DI 5 di [133])) [0 rndseq S4 A32]))) tiles.cpp:155 139 {*zero_extendsidi2_rex64}
     (expr_list:REG_EQUAL (zero_extend:DI (mem/j:SI (plus:DI (mult:DI (reg:DI 2 cx [orig:126 index ] [126])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("_ZZ8hash_UNHPiiliE6rndseq") [flags 0x2]  <var_decl 0x2b82f1f7d5f0 rndseq>)) [0 rndseq S4 A32]))
        (nil)))
(insn:TI 110 109 111 10 (parallel [
            (set (reg/v:DI 0 ax [orig:104 sum ] [104])
                (plus:DI (reg/v:DI 0 ax [orig:104 sum ] [104])
                    (reg:DI 2 cx [orig:128 D.25969 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:128 D.25969 ] [128])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(debug_insn 111 110 114 10 (var_location:DI sum (reg/v:DI 0 ax [orig:104 sum ] [104])) tiles.cpp:155 -1
     (nil))
(debug_insn 114 111 115 10 (var_location:DI sum (reg/v:DI 0 ax [orig:104 sum ] [104])) -1
     (nil))
(debug_insn 115 114 116 10 (var_location:SI i (reg/v:SI 1 dx [orig:105 i ] [105])) -1
     (nil))
(insn 116 115 117 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])
            (reg/v:SI 1 dx [orig:105 i ] [105]))) tiles.cpp:146 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 117 116 123 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 119)
            (pc))) tiles.cpp:146 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 119)
;;  succ:       10 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              11 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp] 43 [r14] 44 [r15]

;; basic block 11, loop depth 0, count 0, freq 36, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(note 123 117 178 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 178 123 179 11 (parallel [
            (set (reg:DI 1 dx [orig:130 D.25969 ] [130])
                (ashiftrt:DI (reg/v:DI 0 ax [orig:104 sum ] [104])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:157 538 {ashrdi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 179 178 125 11 (parallel [
            (set (reg:DI 0 ax [131])
                (div:DI (reg/v:DI 0 ax [orig:104 sum ] [104])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 8 [0x8])) [0 %sfp+-8 S8 A64])))
            (set (reg:DI 1 dx [orig:130 D.25969 ] [130])
                (mod:DI (reg/v:DI 0 ax [orig:104 sum ] [104])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 8 [0x8])) [0 %sfp+-8 S8 A64])))
            (use (reg:DI 1 dx [orig:130 D.25969 ] [130]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:157 370 {*divmoddi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:DI 0 ax [131])
            (nil))))
(insn:TI 125 179 126 11 (set (reg:SI 0 ax [orig:109 D.25966 ] [109])
        (reg:SI 1 dx [orig:130 D.25969 ] [130])) tiles.cpp:157 89 {*movsi_internal}
     (nil))
(insn 126 125 128 11 (set (reg/v:DI 1 dx [orig:107 index ] [107])
        (sign_extend:DI (reg:SI 1 dx [orig:130 D.25969 ] [130]))) tiles.cpp:157 149 {*extendsidi2_rex64}
     (nil))
(debug_insn 128 126 129 11 (var_location:DI index (reg/v:DI 1 dx [orig:107 index ] [107])) -1
     (nil))
(insn:TI 129 128 130 11 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg/v:DI 1 dx [orig:107 index ] [107])
            (const_int 0 [0]))) tiles.cpp:158 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 130 129 171 11 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 150)
            (pc))) tiles.cpp:158 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 0 [0])
            (nil)))
 -> 150)
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 409, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              12 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 171 130 170 12 14 "" [1 uses])
(note 170 171 138 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 138 170 140 12 NOTE_INSN_DELETED)
(debug_insn 140 138 141 12 (var_location:DI index (plus:DI (reg/v:DI 1 dx [orig:107 index ] [107])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-8 S8 A64]))) -1
     (nil))
(insn:TI 141 140 142 12 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:DI (reg/v:DI 1 dx [orig:107 index ] [107])
                        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 8 [0x8])) [0 %sfp+-8 S8 A64]))
                    (const_int 0 [0])))
            (set (reg/v:DI 1 dx [orig:107 index ] [107])
                (plus:DI (reg/v:DI 1 dx [orig:107 index ] [107])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 8 [0x8])) [0 %sfp+-8 S8 A64])))
        ]) tiles.cpp:158 282 {*adddi_2}
     (nil))
(jump_insn:TI 142 141 148 12 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 171)
            (pc))) tiles.cpp:158 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 171)
;;  succ:       12 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              13 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 1 [dx] 7 [sp]
;; live  out 	 1 [dx] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 148 142 149 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 149 148 150 13 (set (reg:SI 0 ax [orig:109 D.25966 ] [109])
        (reg:SI 1 dx [orig:107 index ] [107])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:107 index ] [107])
        (nil)))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 36, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL)
;;  pred:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 150 149 151 14 7 "" [1 uses])
(note 151 150 225 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 225 151 191 14 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 191 225 159 14 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:163 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(insn 159 191 192 14 (use (reg/i:SI 0 ax)) tiles.cpp:163 -1
     (nil))
(insn/f:TI 192 159 193 14 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 193 192 194 14 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 194 193 195 14 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 195 194 196 14 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 196 195 197 14 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 197 196 198 14 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 198 197 199 14 (simple_return) tiles.cpp:163 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 199 198 164)
;; basic block 15, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 14, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 164 199 163 15 13 "" [1 uses])
(note 163 164 226 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 226 163 214 15 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 214 226 200 15 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:163 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(insn 200 214 212 15 (parallel [
            (set (reg:DI 0 ax [orig:109 D.25966 ] [109])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:146 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 212 200 215 15 (use (reg/i:SI 0 ax)) tiles.cpp:163 -1
     (nil))
(insn/f:TI 215 212 216 15 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 216 215 217 15 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 217 216 218 15 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 218 217 219 15 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 219 218 220 15 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 220 219 221 15 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:163 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 221 220 224 15 (simple_return) tiles.cpp:163 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 224 221 0)

;; Function void tiles(int*, int, int, float*, int, int*, int) (_Z5tilesPiiiPfiS_i, funcdef_no=1061, decl_uid=23639, cgraph_uid=305)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 27 count 27 (  1.4)


void tiles(int*, int, int, float*, int, int*, int)

Dataflow summary:
def_info->table_size = 277, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={19d,18u} r1={15d,11u} r2={8d,8u,1e} r3={3d,10u} r4={10d,9u} r5={10d,6u} r6={3d,8u} r7={15d,58u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={35d,8u} r18={4d} r19={4d} r20={5e} r21={7d,3u} r22={6d,1u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={9d,10u} r38={5d,1u} r39={5d,2u,1e} r40={5d,1u} r41={6d,8u,1e} r42={4d,5u,1e} r43={4d,4u} r44={5d,8u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 496{308d,179u,9e} in 116{112 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

( 2 3 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 22 [xmm1] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 22 [xmm1] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 5 )->[6]->( 6 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags] 21 [xmm0] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 4 7 )->[8]->( 9 18 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 17 9 )->[10]->( 11 19 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 10 )->[11]->( 14 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 14 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 12 15 )->[13]->( 14 16 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 39 [r10] 42 [r13] 43 [r14]
;; lr  def 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 13 11 )->[14]->( 12 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp] 39 [r10] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 14 )->[15]->( 13 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 13 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 16 19 )->[17]->( 10 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 17 8 )->[18]->( 1 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 10 )->[19]->( 17 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 18 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 48 to worklist
  Adding insn 270 to worklist
  Adding insn 28 to worklist
  Adding insn 26 to worklist
  Adding insn 293 to worklist
  Adding insn 292 to worklist
  Adding insn 291 to worklist
  Adding insn 290 to worklist
  Adding insn 289 to worklist
  Adding insn 288 to worklist
  Adding insn 71 to worklist
  Adding insn 52 to worklist
  Adding insn 271 to worklist
  Adding insn 105 to worklist
  Adding insn 100 to worklist
  Adding insn 96 to worklist
  Adding insn 120 to worklist
  Adding insn 81 to worklist
  Adding insn 274 to worklist
  Adding insn 196 to worklist
  Adding insn 313 to worklist
  Adding insn 171 to worklist
  Adding insn 164 to worklist
  Adding insn 161 to worklist
  Adding insn 143 to worklist
  Adding insn 317 to worklist
  Adding insn 188 to worklist
  Adding insn 182 to worklist
  Adding insn 180 to worklist
  Adding insn 174 to worklist
  Adding insn 306 to worklist
  Adding insn 319 to worklist
Finished finding needed instructions:
processing block 18 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 305 to worklist
  Adding insn 304 to worklist
  Adding insn 303 to worklist
  Adding insn 302 to worklist
  Adding insn 301 to worklist
  Adding insn 300 to worklist
  Adding insn 299 to worklist
processing block 17 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 187 to worklist
  Adding insn 186 to worklist
  Adding insn 183 to worklist
  Adding insn 179 to worklist
  Adding insn 178 to worklist
  Adding insn 177 to worklist
  Adding insn 176 to worklist
processing block 16 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 37 to worklist
processing block 13 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 170 to worklist
  Adding insn 168 to worklist
  Adding insn 167 to worklist
  Adding insn 163 to worklist
processing block 12 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 147 to worklist
  Adding insn 285 to worklist
  Adding insn 284 to worklist
  Adding insn 145 to worklist
  Adding insn 275 to worklist
processing block 15 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 283 to worklist
  Adding insn 282 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 277 to worklist
processing block 14 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 142 to worklist
  Adding insn 141 to worklist
  Adding insn 139 to worklist
processing block 11 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 219 to worklist
  Adding insn 218 to worklist
  Adding insn 308 to worklist
  Adding insn 35 to worklist
processing block 19 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 309 to worklist
processing block 10 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 195 to worklist
processing block 9 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 217 to worklist
  Adding insn 310 to worklist
  Adding insn 132 to worklist
  Adding insn 130 to worklist
  Adding insn 128 to worklist
  Adding insn 127 to worklist
processing block 8 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 80 to worklist
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 311 to worklist
  Adding insn 286 to worklist
  Adding insn 113 to worklist
  Adding insn 112 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 99 to worklist
  Adding insn 94 to worklist
  Adding insn 272 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 216 to worklist
  Adding insn 312 to worklist
  Adding insn 91 to worklist
  Adding insn 89 to worklist
  Adding insn 87 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 51 to worklist
processing block 3 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 69 to worklist
  Adding insn 287 to worklist
  Adding insn 62 to worklist
  Adding insn 59 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]
  Adding insn 47 to worklist
  Adding insn 43 to worklist
  Adding insn 32 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 27 to worklist
  Adding insn 294 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 27 count 23 (  1.1)
deleting insn with uid = 295.
deleting insn with uid = 33.
deleting insn with uid = 42.
;;   ======================================================
;;   -- basic block 2 from 288 to 48 -- after reload
;;   ======================================================

;;	  0--> b  0: i 288[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  29r15=cx                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 289[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 290[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 291[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 292[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  30bp=r8                                   :athlon-direct,athlon-ieu
;;	 10--> b  0: i 293[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  27bx=si                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i 294{sp=sp-0x178;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 13--> b  0: i  32ax=sxn([sp+0x1b0])                      :athlon-direct,athlon-load,athlon-ieu
;;	 13--> b  0: i  28[sp+0x1c]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  26[sp+0x10]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  43dx=r8+ax+0x1                            :athlon-direct,athlon-agu,nothing
;;	 17--> b  0: i  47flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 19--> b  0: i 270[sp+0x18]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  44loc [sp+0x18]                           :nothing
;;	 19--> b  0: i  46loc 0                                   :nothing
;;	 19--> b  0: i  48pc={(flags<=0)?L74:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 19
;;   new head = 288
;;   new tail = 48

deleting insn with uid = 60.
deleting insn with uid = 61.
;;   ======================================================
;;   -- basic block 3 from 59 to 71 -- after reload
;;   ======================================================

;;	  0--> b  0: i  59dx=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i  69si=r9                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  62di=dx*0x4+sp+0xc4                       :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 287dx=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i  71ax=call [`memcpy']                      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 59
;;   new tail = 71

;;   ======================================================
;;   -- basic block 4 from 50 to 52 -- after reload
;;   ======================================================

;;	  0--> b  0: i  50loc 0                                   :nothing
;;	  0--> b  0: i  51flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  52pc={(flags<=0)?L77:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 50
;;   new tail = 52

deleting insn with uid = 88.
deleting insn with uid = 90.
;;   ======================================================
;;   -- basic block 5 from 87 to 216 -- after reload
;;   ======================================================

;;	  0--> b  0: i  87xmm1=flt(bx)                            :athlon-double,athlon-fploadk8,athlon-fstore
;;	  0--> b  0: i  89ax=zxn(bp-0x1)                          :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 216r13=sp+0x20                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 312{r12=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i  91r14=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	 11--> b  0: i 271[sp+0x8]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	Ready list (final):  
;;   total time = 11
;;   new head = 87
;;   new tail = 216

;;   ======================================================
;;   -- basic block 6 from 93 to 105 -- after reload
;;   ======================================================

;;	  0--> b  0: i  93loc clobber                             :nothing
;;	  0--> b  0: i 272xmm0=[sp+0x8]                           :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  1--> b  0: i  94xmm0=xmm0*[r15+r12]                     :athlon-direct,athlon-fploadk8,athlon-fmul
;;	  7--> b  0: i  96xmm0=call [`floorf']                    :athlon-vector,athlon-ieu
;;	  8--> b  0: i  99ax=fix(xmm0)                            :athlon-double,athlon-fploadk8,athlon-fstore
;;	 19--> b  0: i 100[r13+r12]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 102loc D#6                                 :nothing
;;	 19--> b  0: i 103{r12=r12+0x4;clobber flags;}            :athlon-direct,athlon-ieu
;;	 20--> b  0: i 104flags=cmp(r12,r14)                      :athlon-direct,athlon-ieu
;;	 21--> b  0: i 105pc={(flags!=0)?L107:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 21
;;   new head = 93
;;   new tail = 105

;;   ======================================================
;;   -- basic block 7 from 112 to 120 -- after reload
;;   ======================================================

;;	  0--> b  0: i 112dx=sxn(bp)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 286di=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 311{si=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 113{dx=dx<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  2--> b  0: i 120ax=call [`memset']                      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 112
;;   new tail = 120

;;   ======================================================
;;   -- basic block 8 from 79 to 81 -- after reload
;;   ======================================================

;;	  0--> b  0: i  79loc 0                                   :nothing
;;	  0--> b  0: i  80flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  81pc={(flags<=0)?L203:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 79
;;   new tail = 81

deleting insn with uid = 129.
deleting insn with uid = 131.
;;   ======================================================
;;   -- basic block 9 from 127 to 217 -- after reload
;;   ======================================================

;;	  0--> b  0: i 127ax=sxn([sp+0x1c])                       :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 128r12=[sp+0x10]                           :athlon-direct,athlon-load
;;	  0--> b  0: i 217r13=sp+0xc0                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 310{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 274[sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 130ax=zxn(bp-0x1)                          :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i 132r14=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 6
;;   new head = 127
;;   new tail = 217

;;   ======================================================
;;   -- basic block 10 from 192 to 196 -- after reload
;;   ======================================================

;;	  0--> b  0: i 192loc r15                                 :nothing
;;	  0--> b  0: i 193loc 0                                   :nothing
;;	  0--> b  0: i 195flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 196pc={(flags<=0)?L209:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 192
;;   new tail = 196

;;   ======================================================
;;   -- basic block 11 from 35 to 313 -- after reload
;;   ======================================================

;;	  0--> b  0: i  35di=0x1                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 308{cx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 218r11=sp+0x20                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 219r10=sp+0x70                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 313pc=L198                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 35
;;   new tail = 313

;;   ======================================================
;;   -- basic block 12 from 275 to 147 -- after reload
;;   ======================================================

;;	  0--> b  0: i 275ax=r8                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 145{ax=ax-si;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 284{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  3--> b  0: i 285{ax=ax/bx;dx=ax%bx;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  9--> b  0: i 147{r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 275
;;   new tail = 147

;;   ======================================================
;;   -- basic block 13 from 161 to 171 -- after reload
;;   ======================================================

;;	  0--> b  0: i 163{si=si+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  0--> b  0: i 161[r13+cx]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 168{di=di+0x2;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 164[r10+cx]=si                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 166loc D#5                                 :nothing
;;	  1--> b  0: i 167{cx=cx+0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	  2--> b  0: i 170flags=cmp(cx,r14)                       :athlon-direct,athlon-ieu
;;	  3--> b  0: i 171pc={(flags==0)?L315:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 161
;;   new tail = 171

;;   ======================================================
;;   -- basic block 14 from 137 to 143 -- after reload
;;   ======================================================

;;	  0--> b  0: i 137loc clobber                             :nothing
;;	  0--> b  0: i 139r8=[r11+cx]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 141si=[r10+cx]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 142flags=cmp(r8,si)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 143pc={(flags>=0)?L316:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 137
;;   new tail = 143

;;   ======================================================
;;   -- basic block 15 from 277 to 317 -- after reload
;;   ======================================================

;;	  0--> b  0: i 277ax=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 153{ax=ax-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 154{ax=ax-0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 282{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  4--> b  0: i 283{ax=ax/bx;dx=ax%bx;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	 10--> b  0: i 156r8=r8+dx+0x1                            :athlon-direct,athlon-agu,nothing
;;	 12--> b  0: i 157{r8=r8-bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 12--> b  0: i 317pc=L158                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 277
;;   new tail = 317

;;   ======================================================
;;   -- basic block 16 from 37 to 37 -- after reload
;;   ======================================================

;;	  0--> b  0: i  37ax=sxn(bp)                              :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 37
;;   new tail = 37

rescanning insn with uid = 182.
deleting insn with uid = 182.
rescanning insn with uid = 182.
deleting insn with uid = 182.
;;   ======================================================
;;   -- basic block 17 from 174 to 188 -- after reload
;;   ======================================================

;;	  0--> b  0: i 177dx=[sp+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 178si=[sp+0x18]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 176cx=0x1c1                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i 174[ax*0x4+sp+0xc0]=r15                    :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 179di=r13                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 183{r15=r15+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  2--> b  0: i 186{r12=r12+0x4;clobber flags;}            :athlon-direct,athlon-ieu
rescanning insn with uid = 182.
deleting insn with uid = 182.
;;	  3--> b  0: i 180ax=call [`_Z8hash_UNHPiili']            :athlon-vector,athlon-ieu
;;	  3--> b  0: i 185loc r15                                 :nothing
;;	  4--> b  0: i 182[r12-0x4]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 187flags=cmp(r15,bx)                       :athlon-direct,athlon-ieu
;;	  5--> b  0: i 188pc={(flags!=0)?L190:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 174
;;   new tail = 188

;;   ======================================================
;;   -- basic block 18 from 299 to 306 -- after reload
;;   ======================================================

;;	  0--> b  0: i 299{sp=sp+0x178;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i 300bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 301bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 302r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 303r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 304r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 305r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 306simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 299
;;   new tail = 306

;;   ======================================================
;;   -- basic block 19 from 309 to 319 -- after reload
;;   ======================================================

;;	  0--> b  0: i 309{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 319pc=L194                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 309
;;   new tail = 319



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, int, float*, int, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={19d,18u} r1={15d,11u} r2={8d,8u,1e} r3={3d,10u} r4={10d,9u} r5={10d,6u} r6={3d,8u} r7={15d,58u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={35d,8u} r18={4d} r19={4d} r20={5e} r21={7d,3u} r22={6d,1u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={9d,10u} r38={5d,1u} r39={5d,2u,1e} r40={5d,1u} r41={6d,8u,1e} r42={4d,5u,1e} r43={4d,4u} r44={5d,8u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 496{308d,179u,9e} in 116{112 regular + 4 call} insns.
(note 25 0 40 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
(note 40 25 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 33 40 42 2 NOTE_INSN_FUNCTION_BEG)
(note 42 33 288 2 NOTE_INSN_DELETED)
(insn/f:TI 288 42 29 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tiles.cpp:37 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 29 288 289 2 (set (reg/v/f:DI 44 r15 [orig:134 floats ] [134])
        (reg:DI 2 cx [ floats ])) tiles.cpp:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn/f:TI 289 29 290 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tiles.cpp:37 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 290 289 291 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tiles.cpp:37 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 291 290 292 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:37 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 292 291 30 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:37 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 30 292 293 2 (set (reg/v:SI 6 bp [orig:135 num_floats ] [135])
        (reg:SI 37 r8 [ num_floats ])) tiles.cpp:37 89 {*movsi_internal}
     (nil))
(insn/f:TI 293 30 27 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:37 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 27 293 294 2 (set (reg/v:SI 3 bx [orig:132 num_tilings ] [132])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:37 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn/f:TI 294 27 295 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -376 [0xfffffffffffffe88])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:37 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -376 [0xfffffffffffffe88])))
            (nil))))
(note 295 294 32 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 32 295 28 2 (set (reg:DI 0 ax)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 432 [0x1b0])) [0 num_ints+0 S4 A64]))) tiles.cpp:37 149 {*extendsidi2_rex64}
     (nil))
(insn 28 32 26 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [0 %sfp+-4 S4 A32])
        (reg:SI 1 dx [ memory_size ])) tiles.cpp:37 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory_size ])
        (nil)))
(insn:TI 26 28 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn:TI 43 26 47 2 (set (reg/v:SI 1 dx [orig:84 num_coordinates ] [84])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:135 num_floats ] [135])
                (reg/v:SI 0 ax [orig:137 num_ints ] [137]))
            (const_int 1 [0x1]))) tiles.cpp:42 266 {*leasi}
     (nil))
(insn 47 43 270 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 0 ax [orig:137 num_ints ] [137])
            (const_int 0 [0]))) tiles.cpp:44 3 {*cmpsi_ccno_1}
     (nil))
(insn:TI 270 47 44 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S4 A32])
        (reg/v:SI 1 dx [orig:84 num_coordinates ] [84])) tiles.cpp:42 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 1 dx [orig:84 num_coordinates ] [84])
        (nil)))
(debug_insn 44 270 46 2 (var_location:SI num_coordinates (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 24 [0x18])) [0 %sfp+-8 S4 A32])) tiles.cpp:42 -1
     (nil))
(debug_insn 46 44 48 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn 48 46 57 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 74)
            (pc))) tiles.cpp:44 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 238 [0xee])
            (nil)))
 -> 74)
;;  succ:       3 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [2.4%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]

;; basic block 3, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 57 48 58 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 58 57 60 3 NOTE_INSN_DELETED)
(note 60 58 61 3 NOTE_INSN_DELETED)
(note 61 60 59 3 NOTE_INSN_DELETED)
(insn:TI 59 61 69 3 (set (reg:DI 1 dx [orig:140 D.26004 ] [140])
        (sign_extend:DI (reg:SI 37 r8 [orig:135 num_floats ] [135]))) tiles.cpp:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:135 num_floats ] [135])
        (nil)))
(insn 69 59 62 3 (set (reg:DI 4 si)
        (reg/v/f:DI 38 r9 [orig:136 ints ] [136])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 38 r9 [orig:136 ints ] [136])
        (nil)))
(insn:TI 62 69 287 3 (set (reg:DI 5 di [orig:143 D.26007 ] [143])
        (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:140 D.26004 ] [140])
                    (const_int 4 [0x4]))
                (reg/f:DI 7 sp))
            (const_int 196 [0xc4]))) tiles.cpp:44 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:140 D.26004 ] [140])
        (nil)))
(insn 287 62 71 3 (set (reg:DI 1 dx [orig:145 D.26004 ] [145])
        (mult:DI (reg:DI 0 ax [orig:144 D.26004 ] [144])
            (const_int 4 [0x4]))) tiles.cpp:44 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:144 D.26004 ] [144])
        (nil)))
(call_insn:TI 71 287 74 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [2.4%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 74 71 49 4 21 "" [1 uses])
(note 49 74 50 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 50 49 51 4 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 51 50 52 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 6 bp [orig:135 num_floats ] [135])
            (const_int 0 [0]))) tiles.cpp:47 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 52 51 86 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 77)
            (pc))) tiles.cpp:47 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 77)
;;  succ:       5 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

;; basic block 5, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 22 [xmm1] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 22 [xmm1] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 86 52 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 88 86 90 5 NOTE_INSN_DELETED)
(note 90 88 87 5 NOTE_INSN_DELETED)
(insn:TI 87 90 89 5 (set (reg:SF 22 xmm1 [orig:125 D.26002 ] [125])
        (float:SF (reg/v:SI 3 bx [orig:132 num_tilings ] [132]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(insn 89 87 216 5 (set (reg:DI 0 ax [orig:152 D.26004 ] [152])
        (zero_extend:DI (plus:SI (reg/v:SI 6 bp [orig:135 num_floats ] [135])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(insn 216 89 312 5 (set (reg/f:DI 42 r13 [185])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn:TI 312 216 91 5 (parallel [
            (set (reg:DI 41 r12 [orig:115 ivtmp.104 ] [115])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:47 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 91 312 271 5 (set (reg:DI 43 r14 [orig:99 D.26004 ] [99])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:152 D.26004 ] [152])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:152 D.26004 ] [152])
        (nil)))
(insn:TI 271 91 107 5 (set (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A64])
        (reg:SF 22 xmm1 [orig:125 D.26002 ] [125])) 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [orig:125 D.26002 ] [125])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 942, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags] 21 [xmm0] 41 [r12]
;; live  kill	 17 [flags]
(code_label 107 271 92 6 25 "" [1 uses])
(note 92 107 93 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 93 92 272 6 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 272 93 94 6 (set (reg:SF 21 xmm0 [orig:154 D.26002 ] [154])
        (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A64])) tiles.cpp:48 135 {*movsf_internal}
     (nil))
(insn:TI 94 272 96 6 (set (reg:SF 21 xmm0 [orig:154 D.26002 ] [154])
        (mult:SF (reg:SF 21 xmm0 [orig:154 D.26002 ] [154])
            (mem:SF (plus:DI (reg/v/f:DI 44 r15 [orig:134 floats ] [134])
                    (reg:DI 41 r12 [orig:115 ivtmp.104 ] [115])) [0 MEM[base: floats_26(D), index: ivtmp.104_58, offset: 0B]+0 S4 A32]))) tiles.cpp:48 777 {*fop_sf_comm_sse}
     (nil))
(call_insn/u:TI 96 94 99 6 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:48 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn:TI 99 96 100 6 (set (reg:SI 0 ax [156])
        (fix:SI (reg:SF 21 xmm0 [orig:88 D.26002 ] [88]))) tiles.cpp:48 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [orig:88 D.26002 ] [88])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 42 r13 [185])
                    (reg:DI 41 r12 [orig:115 ivtmp.104 ] [115])) [0 MEM[symbol: qstate, index: ivtmp.104_58, offset: 0B]+0 S4 A32])
            (nil))))
(insn:TI 100 99 102 6 (set (mem:SI (plus:DI (reg/f:DI 42 r13 [185])
                (reg:DI 41 r12 [orig:115 ivtmp.104 ] [115])) [0 MEM[symbol: qstate, index: ivtmp.104_58, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [156])) tiles.cpp:48 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [156])
        (nil)))
(debug_insn 102 100 103 6 (var_location:SI i (debug_expr:SI D#6)) -1
     (nil))
(insn 103 102 104 6 (parallel [
            (set (reg:DI 41 r12 [orig:115 ivtmp.104 ] [115])
                (plus:DI (reg:DI 41 r12 [orig:115 ivtmp.104 ] [115])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 104 103 105 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 41 r12 [orig:115 ivtmp.104 ] [115])
            (reg:DI 43 r14 [orig:99 D.26004 ] [99]))) tiles.cpp:47 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 105 104 111 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 107)
            (pc))) tiles.cpp:47 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 107)
;;  succ:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              7 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 111 105 112 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 112 111 286 7 (set (reg:DI 1 dx [orig:157 D.26004 ] [157])
        (sign_extend:DI (reg/v:SI 6 bp [orig:135 num_floats ] [135]))) tiles.cpp:49 149 {*extendsidi2_rex64}
     (nil))
(insn 286 112 311 7 (set (reg/f:DI 5 di [187])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (nil))
(insn 311 286 113 7 (parallel [
            (set (reg:DI 4 si)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 113 311 120 7 (parallel [
            (set (reg:DI 1 dx [orig:158 D.26004 ] [158])
                (ashift:DI (reg:DI 1 dx [orig:157 D.26004 ] [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:49 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 120 113 77 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [4.8%]  (CAN_FALLTHRU)
;;              7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 77 120 78 8 20 "" [1 uses])
(note 78 77 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 79 78 80 8 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn:TI 80 79 81 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 3 bx [orig:132 num_tilings ] [132])
            (const_int 0 [0]))) tiles.cpp:53 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 81 80 126 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 203)
            (pc))) tiles.cpp:53 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 203)
;;  succ:       9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 126 81 129 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(note 129 126 131 9 NOTE_INSN_DELETED)
(note 131 129 127 9 NOTE_INSN_DELETED)
(insn:TI 127 131 128 9 (set (reg:DI 0 ax [orig:121 D.26006 ] [121])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 28 [0x1c])) [0 %sfp+-4 S4 A32]))) 149 {*extendsidi2_rex64}
     (nil))
(insn 128 127 217 9 (set (reg:DI 41 r12 [orig:114 ivtmp.98 ] [114])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 217 128 310 9 (set (reg/f:DI 42 r13 [186])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 192 [0xc0]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn:TI 310 217 274 9 (parallel [
            (set (reg:DI 44 r15 [orig:119 j ] [119])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:53 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 274 310 130 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S8 A64])
        (reg:DI 0 ax [orig:121 D.26006 ] [121])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:121 D.26006 ] [121])
        (nil)))
(insn 130 274 132 9 (set (reg:DI 0 ax [orig:165 D.26004 ] [165])
        (zero_extend:DI (plus:SI (reg/v:SI 6 bp [orig:135 num_floats ] [135])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(insn:TI 132 130 190 9 (set (reg:DI 43 r14 [orig:93 D.26004 ] [93])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:165 D.26004 ] [165])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:165 D.26004 ] [165])
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 476, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       17 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 190 132 191 10 26 "" [1 uses])
(note 191 190 192 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 192 191 193 10 (var_location:SI j (reg/v:SI 44 r15 [orig:119 j ] [119])) -1
     (nil))
(debug_insn 193 192 195 10 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 195 193 196 10 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 6 bp [orig:135 num_floats ] [135])
            (const_int 0 [0]))) tiles.cpp:56 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 196 195 197 10 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 209)
            (pc))) tiles.cpp:56 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 209)
;;  succ:       11 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 11, loop depth 0, count 0, freq 453, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
(note 197 196 35 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 35 197 308 11 (set (reg:SI 5 di [orig:94 ivtmp.93 ] [94])
        (const_int 1 [0x1])) tiles.cpp:56 89 {*movsi_internal}
     (nil))
(insn 308 35 218 11 (parallel [
            (set (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:56 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 218 308 219 11 (set (reg/f:DI 40 r11 [185])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn:TI 219 218 313 11 (set (reg/f:DI 39 r10 [187])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -256 [0xffffffffffffff00]))
        (nil)))
(jump_insn 313 219 314 11 (set (pc)
        (label_ref 198)) 650 {jump}
     (nil)
 -> 198)
;;  succ:       14 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 314 313 316)
;; basic block 12, loop depth 0, count 0, freq 4762, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 316 314 144 12 35 "" [1 uses])
(note 144 316 275 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 275 144 145 12 (set (reg:SI 0 ax [orig:169 D.26001 ] [169])
        (reg:SI 37 r8 [orig:100 D.26001 ] [100])) tiles.cpp:60 89 {*movsi_internal}
     (nil))
(insn:TI 145 275 284 12 (parallel [
            (set (reg:SI 0 ax [orig:169 D.26001 ] [169])
                (minus:SI (reg:SI 0 ax [orig:169 D.26001 ] [169])
                    (reg:SI 4 si [orig:101 D.26001 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:60 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 284 145 285 12 (parallel [
            (set (reg:SI 1 dx [orig:171 D.26001 ] [171])
                (ashiftrt:SI (reg:SI 0 ax [orig:169 D.26001 ] [169])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:60 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 285 284 147 12 (parallel [
            (set (reg:SI 0 ax [172])
                (div:SI (reg:SI 0 ax [orig:169 D.26001 ] [169])
                    (reg/v:SI 3 bx [orig:132 num_tilings ] [132])))
            (set (reg:SI 1 dx [orig:171 D.26001 ] [171])
                (mod:SI (reg:SI 0 ax [orig:169 D.26001 ] [169])
                    (reg/v:SI 3 bx [orig:132 num_tilings ] [132])))
            (use (reg:SI 1 dx [orig:171 D.26001 ] [171]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:60 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [172])
            (nil))))
(insn:TI 147 285 158 12 (parallel [
            (set (reg:SI 37 r8 [orig:104 D.26001 ] [104])
                (minus:SI (reg:SI 37 r8 [orig:100 D.26001 ] [100])
                    (reg:SI 1 dx [orig:171 D.26001 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:60 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:171 D.26001 ] [171])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 13, loop depth 0, count 0, freq 9524, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [100.0%]  (CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 39 [r10] 42 [r13] 43 [r14]
;; lr  def 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 158 147 159 13 28 "" [1 uses])
(note 159 158 163 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 163 159 161 13 (parallel [
            (set (reg:SI 4 si [182])
                (plus:SI (reg:SI 4 si [orig:101 D.26001 ] [101])
                    (reg:SI 5 di [orig:94 ivtmp.93 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:65 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 39 r10 [187])
                    (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: base, index: ivtmp.87_15, offset: 0B]+0 S4 A32])
            (nil))))
(insn 161 163 168 13 (set (mem:SI (plus:DI (reg/f:DI 42 r13 [186])
                (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: coordinates, index: ivtmp.87_15, offset: 0B]+0 S4 A32])
        (reg:SI 37 r8 [orig:104 D.26001 ] [104])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:104 D.26001 ] [104])
        (nil)))
(insn 168 161 164 13 (parallel [
            (set (reg:SI 5 di [orig:94 ivtmp.93 ] [94])
                (plus:SI (reg:SI 5 di [orig:94 ivtmp.93 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 164 168 166 13 (set (mem:SI (plus:DI (reg/f:DI 39 r10 [187])
                (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: base, index: ivtmp.87_15, offset: 0B]+0 S4 A32])
        (reg:SI 4 si [182])) tiles.cpp:65 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [182])
        (nil)))
(debug_insn 166 164 167 13 (var_location:SI i (debug_expr:SI D#5)) -1
     (nil))
(insn 167 166 170 13 (parallel [
            (set (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])
                (plus:DI (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 170 167 171 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])
            (reg:DI 43 r14 [orig:93 D.26004 ] [93]))) tiles.cpp:56 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 171 170 198 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 315)
            (pc))) tiles.cpp:56 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 315)
;;  succ:       14 [95.2%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              16 [4.8%]  (CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 14, loop depth 0, count 0, freq 9524, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [95.2%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              11 [100.0%]  (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp] 39 [r10] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(code_label 198 171 136 14 31 "" [1 uses])
(note 136 198 137 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 137 136 139 14 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 139 137 141 14 (set (reg:SI 37 r8 [orig:100 D.26001 ] [100])
        (mem:SI (plus:DI (reg/f:DI 40 r11 [185])
                (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: qstate, index: ivtmp.87_15, offset: 0B]+0 S4 A32])) tiles.cpp:59 89 {*movsi_internal}
     (nil))
(insn 141 139 142 14 (set (reg:SI 4 si [orig:101 D.26001 ] [101])
        (mem:SI (plus:DI (reg/f:DI 39 r10 [187])
                (reg:DI 2 cx [orig:85 ivtmp.87 ] [85])) [0 MEM[symbol: base, index: ivtmp.87_15, offset: 0B]+0 S4 A32])) tiles.cpp:59 89 {*movsi_internal}
     (nil))
(insn:TI 142 141 143 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 37 r8 [orig:100 D.26001 ] [100])
            (reg:SI 4 si [orig:101 D.26001 ] [101]))) tiles.cpp:59 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 143 142 151 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 316)
            (pc))) tiles.cpp:59 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 316)
;;  succ:       12 [50.0%]  (CAN_FALLTHRU)
;;              15 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 15, loop depth 0, count 0, freq 4762, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
(note 151 143 152 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 152 151 277 15 NOTE_INSN_DELETED)
(insn:TI 277 152 153 15 (set (reg:SI 0 ax [orig:174 D.26001 ] [174])
        (reg:SI 4 si [orig:101 D.26001 ] [101])) tiles.cpp:62 89 {*movsi_internal}
     (nil))
(insn:TI 153 277 154 15 (parallel [
            (set (reg:SI 0 ax [orig:174 D.26001 ] [174])
                (minus:SI (reg:SI 0 ax [orig:174 D.26001 ] [174])
                    (reg:SI 37 r8 [orig:100 D.26001 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 154 153 282 15 (parallel [
            (set (reg:SI 0 ax [orig:175 D.26001 ] [175])
                (plus:SI (reg:SI 0 ax [orig:174 D.26001 ] [174])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 282 154 283 15 (parallel [
            (set (reg:SI 1 dx [orig:177 D.26001 ] [177])
                (ashiftrt:SI (reg:SI 0 ax [orig:175 D.26001 ] [175])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 283 282 156 15 (parallel [
            (set (reg:SI 0 ax [178])
                (div:SI (reg:SI 0 ax [orig:175 D.26001 ] [175])
                    (reg/v:SI 3 bx [orig:132 num_tilings ] [132])))
            (set (reg:SI 1 dx [orig:177 D.26001 ] [177])
                (mod:SI (reg:SI 0 ax [orig:175 D.26001 ] [175])
                    (reg/v:SI 3 bx [orig:132 num_tilings ] [132])))
            (use (reg:SI 1 dx [orig:177 D.26001 ] [177]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [178])
            (nil))))
(insn:TI 156 283 157 15 (set (reg:SI 37 r8 [orig:104 D.26001 ] [104])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:100 D.26001 ] [100])
                (reg:SI 1 dx [orig:177 D.26001 ] [177]))
            (const_int 1 [0x1]))) tiles.cpp:62 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:177 D.26001 ] [177])
        (nil)))
(insn:TI 157 156 317 15 (parallel [
            (set (reg:SI 37 r8 [orig:104 D.26001 ] [104])
                (minus:SI (reg:SI 37 r8 [orig:104 D.26001 ] [104])
                    (reg/v:SI 3 bx [orig:132 num_tilings ] [132])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:62 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 317 157 318 15 (set (pc)
        (label_ref 158)) 650 {jump}
     (nil)
 -> 158)
;;  succ:       13 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 318 317 315)
;; basic block 16, loop depth 0, count 0, freq 453, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [4.8%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 315 318 205 16 34 "" [1 uses])
(note 205 315 37 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 37 205 194 16 (set (reg:DI 0 ax)
        (sign_extend:DI (reg/v:SI 6 bp [orig:135 num_floats ] [135]))) 149 {*extendsidi2_rex64}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 17, loop depth 0, count 0, freq 476, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [100.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
(code_label 194 37 172 17 30 "" [1 uses])
(note 172 194 177 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 177 172 178 17 (set (reg:DI 1 dx)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S8 A64])) tiles.cpp:70 87 {*movdi_internal_rex64}
     (nil))
(insn 178 177 176 17 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S4 A32])) tiles.cpp:70 89 {*movsi_internal}
     (nil))
(insn 176 178 174 17 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:70 89 {*movsi_internal}
     (nil))
(insn:TI 174 176 179 17 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:183 num_floats ] [183])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 coordinates S4 A32])
        (reg/v:SI 44 r15 [orig:119 j ] [119])) tiles.cpp:68 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:183 num_floats ] [183])
        (nil)))
(insn 179 174 183 17 (set (reg:DI 5 di)
        (reg/f:DI 42 r13 [186])) tiles.cpp:70 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 183 179 186 17 (parallel [
            (set (reg/v:SI 44 r15 [orig:119 j ] [119])
                (plus:SI (reg/v:SI 44 r15 [orig:119 j ] [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:53 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 186 183 180 17 (parallel [
            (set (reg:DI 41 r12 [orig:114 ivtmp.98 ] [114])
                (plus:DI (reg:DI 41 r12 [orig:114 ivtmp.98 ] [114])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 180 186 185 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:70 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(debug_insn 185 180 182 17 (var_location:SI j (reg/v:SI 44 r15 [orig:119 j ] [119])) -1
     (nil))
(insn:TI 182 185 187 17 (set (mem:SI (plus:DI (reg:DI 41 r12 [orig:114 ivtmp.98 ] [114])
                (const_int -4 [0xfffffffffffffffc])) [0 MEM[base: _31, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:118 D.26001 ] [118])) tiles.cpp:70 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:118 D.26001 ] [118])
        (nil)))
(insn 187 182 188 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 44 r15 [orig:119 j ] [119])
            (reg/v:SI 3 bx [orig:132 num_tilings ] [132]))) tiles.cpp:53 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 188 187 203 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 190)
            (pc))) tiles.cpp:53 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 190)
;;  succ:       10 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              18 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 18, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL)
;;  pred:       17 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              8 [9.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 203 188 204 18 17 "" [1 uses])
(note 204 203 298 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 298 204 299 18 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 299 298 300 18 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:73 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 376 [0x178])))
            (nil))))
(insn/f:TI 300 299 301 18 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:73 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 301 300 302 18 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:73 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 302 301 303 18 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:73 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 303 302 304 18 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:73 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 304 303 305 18 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:73 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 305 304 306 18 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:73 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 306 305 307 18 (simple_return) tiles.cpp:73 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 307 306 209)
;; basic block 19, loop depth 0, count 0, freq 23, maybe hot
;;  prev block 18, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [4.8%]  (CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 209 307 208 19 32 "" [1 uses])
(note 208 209 309 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn:TI 309 208 319 19 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:56 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 319 309 320 19 (set (pc)
        (label_ref 194)) 650 {jump}
     (nil)
 -> 194)
;;  succ:       17 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 320 319 0)

;; Function int hash(int*, int, collision_table*) (_Z4hashPiiP15collision_table, funcdef_no=1064, decl_uid=23703, cgraph_uid=308)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 18 (  1.1)


int hash(int*, int, collision_table*)

Dataflow summary:
def_info->table_size = 294, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={14d,16u} r1={14d,17u} r2={11d,7u} r3={3d,14u,2e} r4={10d,8u} r5={13d,9u} r6={4d,5u} r7={15d,36u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={23d,6u} r18={5d} r19={5d} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,3u} r38={8d,3u} r39={5d} r40={5d} r41={4d,4u} r42={3d,7u} r43={3d,4u} r44={3d,4u} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 468{323d,143u,2e} in 97{92 regular + 5 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 13 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 2 )->[3]->( 14 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	 17 [flags]
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 5 12 13 10 14 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 4 )->[7]->( 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]

( 11 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  gen 	 41 [r12]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]

( 8 7 )->[9]->( 15 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]

( 9 )->[10]->( 6 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]

( 10 )->[11]->( 12 8 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]

( 11 )->[12]->( 6 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13]
;; lr  def 	
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 2 )->[13]->( 6 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	 17 [flags]
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 3 )->[14]->( 6 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	
;; live  kill	 17 [flags]
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 9 )->[15]->( )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 30 to worklist
  Adding insn 20 to worklist
  Adding insn 13 to worklist
  Adding insn 8 to worklist
  Adding insn 160 to worklist
  Adding insn 159 to worklist
  Adding insn 158 to worklist
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 155 to worklist
  Adding insn 38 to worklist
  Adding insn 47 to worklist
  Adding insn 49 to worklist
  Adding insn 173 to worklist
  Adding insn 127 to worklist
  Adding insn 181 to worklist
  Adding insn 58 to worklist
  Adding insn 112 to worklist
  Adding insn 102 to worklist
  Adding insn 86 to worklist
  Adding insn 90 to worklist
  Adding insn 184 to worklist
  Adding insn 92 to worklist
  Adding insn 186 to worklist
  Adding insn 32 to worklist
  Adding insn 188 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 77 to worklist
  Adding insn 75 to worklist
Finished finding needed instructions:
processing block 6 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 172 to worklist
  Adding insn 171 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
  Adding insn 168 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 124 to worklist
processing block 13 lr out =  6 [bp] 7 [sp]
processing block 14 lr out =  6 [bp] 7 [sp]
processing block 5 lr out =  6 [bp] 7 [sp]
processing block 15 lr out =  7 [sp]
  Adding insn 176 to worklist
  Adding insn 175 to worklist
  Adding insn 73 to worklist
  Adding insn 72 to worklist
processing block 12 lr out =  6 [bp] 7 [sp]
processing block 8 lr out =  2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
  Adding insn 131 to worklist
processing block 11 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
  Adding insn 89 to worklist
  Adding insn 88 to worklist
processing block 10 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
  Adding insn 85 to worklist
  Adding insn 84 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 80 to worklist
processing block 9 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
  Adding insn 111 to worklist
  Adding insn 110 to worklist
  Adding insn 149 to worklist
  Adding insn 107 to worklist
  Adding insn 153 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
processing block 7 lr out =  2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
  Adding insn 154 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
  Adding insn 62 to worklist
  Adding insn 61 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
  Adding insn 54 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 178 to worklist
  Adding insn 177 to worklist
processing block 3 lr out =  1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 37 to worklist
processing block 2 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 14 to worklist
  Adding insn 10 to worklist
  Adding insn 9 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 161 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 18 (  1.1)
deleting insn with uid = 162.
deleting insn with uid = 5.
deleting insn with uid = 25.
;;   ======================================================
;;   -- basic block 2 from 155 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i 155[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   9cx=0x1c1                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i   3r15=si                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 156[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i   2r14=di                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 157[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 158[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 159[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 160[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i   4bx=dx                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i 161{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 12--> b  0: i   8{[dx+0x18]=[dx+0x18]+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	 12--> b  0: i  10dx=[dx]                                 :athlon-direct,athlon-load
;;	 16--> b  0: i  13ax=call [`_Z8hash_UNHPiili']            :athlon-vector,athlon-ieu
;;	 16--> b  0: i 134loc ax                                  :nothing
;;	 17--> b  0: i  17dx=0x7fffffff                           :athlon-direct,athlon-ieu
;;	 17--> b  0: i  16cx=0x1c9                                :athlon-direct,athlon-ieu
;;	 17--> b  0: i  18si=r15                                  :athlon-direct,athlon-ieu
;;	 18--> b  0: i  19di=r14                                  :athlon-direct,athlon-ieu
;;	 18--> b  0: i  14bp=ax                                   :athlon-direct,athlon-ieu
;;	 18--> b  0: i  15loc D#7                                 :nothing
;;	 19--> b  0: i  20ax=call [`_Z8hash_UNHPiili']            :athlon-vector,athlon-ieu
;;	 20--> b  0: i  22r13=sxn(ax)                             :athlon-direct,athlon-ieu
;;	 20--> b  0: i  23loc r13                                 :nothing
;;	 20--> b  0: i  26ax=[bx+0x8]                             :athlon-direct,athlon-load
;;	 20--> b  0: i  24r12=sxn(bp)                             :athlon-direct,athlon-ieu
;;	 23--> b  0: i  27dx=r12*0x8+ax                           :athlon-direct,athlon-agu,nothing
;;	 25--> b  0: i  28ax=[dx]                                 :athlon-direct,athlon-load
;;	 28--> b  0: i  29flags=cmp(ax,r13)                       :athlon-direct,athlon-ieu
;;	 29--> b  0: i  30pc={(flags==0)?L179:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 29
;;   new head = 155
;;   new tail = 30

;;   ======================================================
;;   -- basic block 3 from 37 to 38 -- after reload
;;   ======================================================

;;	  0--> b  0: i  37flags=cmp(ax,0xffffffffffffffff)        :athlon-direct,athlon-ieu
;;	  1--> b  0: i  38pc={(flags==0)?L180:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 37
;;   new tail = 38

;;   ======================================================
;;   -- basic block 4 from 177 to 47 -- after reload
;;   ======================================================

;;	  0--> b  0: i 177ax=[bx+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 178flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  47pc={(flags!=0)?L52:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 177
;;   new tail = 47

;;   ======================================================
;;   -- basic block 5 from 49 to 49 -- after reload
;;   ======================================================

;;	  0--> b  0: i  49{[bx+0x28]=[bx+0x28]+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 49
;;   new tail = 49

deleting insn with uid = 165.
;;   ======================================================
;;   -- basic block 6 from 119 to 173 -- after reload
;;   ======================================================

;;	  0--> b  0: i 119loc D#7                                 :nothing
;;	  0--> b  0: i 166{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 124ax=bp                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 127use ax                                  :nothing
;;	  1--> b  0: i 167bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 168bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 169r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 170r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 171r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 172r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 173simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 119
;;   new tail = 173

deleting insn with uid = 60.
;;   ======================================================
;;   -- basic block 7 from 54 to 181 -- after reload
;;   ======================================================

;;	  0--> b  0: i  54cx=0x1c1                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i  56si=r15                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  55dx=0x1fffffff                           :athlon-direct,athlon-ieu
;;	  1--> b  0: i  57di=r14                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i  58ax=call [`_Z8hash_UNHPiili']            :athlon-vector,athlon-ieu
;;	  3--> b  0: i  65r8=[bx+0x28]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  61r9=ax*0x2+0x1                           :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i  66si=[bx]                                 :athlon-direct,athlon-load
;;	  5--> b  0: i  62r9=sxn(r9)                              :athlon-direct,athlon-ieu
;;	  5--> b  0: i  63loc r9                                  :nothing
;;	  5--> b  0: i  64loc 0                                   :nothing
;;	  6--> b  0: i 154cx=r8+0x1                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i 181pc=L97                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 54
;;   new tail = 181

;;   ======================================================
;;   -- basic block 8 from 131 to 131 -- after reload
;;   ======================================================

;;	  0--> b  0: i 131r12=sxn(bp)                             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 131
;;   new tail = 131

;;   ======================================================
;;   -- basic block 9 from 100 to 112 -- after reload
;;   ======================================================

;;	  0--> b  0: i 100loc D#7                                 :nothing
;;	  0--> b  0: i 101loc cx-r8                               :nothing
;;	  0--> b  0: i 151ax=r12+r9                               :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 149di=cx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 102[bx+0x28]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 110{di=di-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 152{dx=ax>>0x3f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  3--> b  0: i 153{ax=ax/si;dx=ax%si;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  3--> b  0: i 133loc dx                                  :nothing
;;	  4--> b  0: i 111flags=cmp(si,di)                        :athlon-direct,athlon-ieu
;;	  9--> b  0: i 107bp=dx                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i 108loc dx                                  :nothing
;;	  9--> b  0: i 112pc={(flags<0)?L183:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 100
;;   new tail = 112

deleting insn with uid = 81.
;;   ======================================================
;;   -- basic block 10 from 80 to 86 -- after reload
;;   ======================================================

;;	  0--> b  0: i  82di=[bx+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i  80dx=sxn(dx)                              :athlon-direct,athlon-ieu
;;	  3--> b  0: i  83ax=dx*0x8+di                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  84dx=[ax]                                 :athlon-direct,athlon-load
;;	  8--> b  0: i  85flags=cmp(dx,r13)                       :athlon-direct,athlon-ieu
;;	  9--> b  0: i  86pc={(flags==0)?L117:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 80
;;   new tail = 86

;;   ======================================================
;;   -- basic block 11 from 88 to 90 -- after reload
;;   ======================================================

;;	  0--> b  0: i  88{cx=cx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  0--> b  0: i  89flags=cmp(dx,0xffffffffffffffff)        :athlon-direct,athlon-ieu
;;	  1--> b  0: i  90pc={(flags!=0)?L95:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 88
;;   new tail = 90

;;   ======================================================
;;   -- basic block 12 from 92 to 184 -- after reload
;;   ======================================================

;;	  0--> b  0: i  92[ax]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 184pc=L117                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 92
;;   new tail = 184

;;   ======================================================
;;   -- basic block 13 from 32 to 186 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32{[bx+0x20]=[bx+0x20]+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  0--> b  0: i 186pc=L117                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 32
;;   new tail = 186

;;   ======================================================
;;   -- basic block 14 from 40 to 188 -- after reload
;;   ======================================================

;;	  0--> b  0: i  40{[bx+0x20]=[bx+0x20]+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  0--> b  0: i  41[dx]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 188pc=L117                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 40
;;   new tail = 188

;;   ======================================================
;;   -- basic block 15 from 71 to 77 -- after reload
;;   ======================================================

;;	  0--> b  0: i  71loc `*.LC0'                             :nothing
;;	  0--> b  0: i  72si=`*.LC0'                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  73di=0x1                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 175{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  75ax=call [`__printf_chk']                :athlon-vector,athlon-ieu
;;	  3--> b  0: i 176{di=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  77call [`exit']                           :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 71
;;   new tail = 77



starting the processing of deferred insns
ending the processing of deferred insns


int hash(int*, int, collision_table*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={14d,16u} r1={14d,17u} r2={11d,7u} r3={3d,14u,2e} r4={10d,8u} r5={13d,9u} r6={4d,5u} r7={15d,36u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={23d,6u} r18={5d} r19={5d} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,3u} r38={8d,3u} r39={5d} r40={5d} r41={4d,4u} r42={3d,7u} r43={3d,4u} r44={3d,4u} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 468{323d,143u,2e} in 97{92 regular + 5 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 2177, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 25 2 NOTE_INSN_FUNCTION_BEG)
(note 25 5 155 2 NOTE_INSN_DELETED)
(insn/f:TI 155 25 9 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tiles.cpp:172 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 9 155 3 2 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:177 89 {*movsi_internal}
     (nil))
(insn 3 9 156 2 (set (reg/v:SI 44 r15 [orig:99 num_ints ] [99])
        (reg:SI 4 si [ num_ints ])) tiles.cpp:172 89 {*movsi_internal}
     (nil))
(insn/f:TI 156 3 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tiles.cpp:172 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn 2 156 157 2 (set (reg/v/f:DI 43 r14 [orig:98 ints ] [98])
        (reg:DI 5 di [ ints ])) tiles.cpp:172 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 157 2 158 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tiles.cpp:172 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 158 157 159 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:172 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 159 158 160 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:172 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 160 159 4 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:172 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 4 160 161 2 (set (reg/v/f:DI 3 bx [orig:100 ct ] [100])
        (reg:DI 1 dx [ ct ])) tiles.cpp:172 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 161 4 162 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:172 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 162 161 8 2 NOTE_INSN_PROLOGUE_END)
(insn 8 162 10 2 (parallel [
            (set (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:100 ct ] [100])
                        (const_int 24 [0x18])) [0 ct_7(D)->calls+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:100 ct ] [100])
                            (const_int 24 [0x18])) [0 ct_7(D)->calls+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:176 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 10 8 13 2 (set (reg:DI 1 dx)
        (mem/j:DI (reg/f:DI 1 dx [orig:100 ct ] [100]) [0 ct_7(D)->m+0 S8 A64])) tiles.cpp:177 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 13 10 134 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:177 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(debug_insn 134 13 17 2 (var_location:SI D#7 (reg:SI 0 ax)) -1
     (nil))
(insn:TI 17 134 16 2 (set (reg:DI 1 dx)
        (const_int 2147483647 [0x7fffffff])) tiles.cpp:178 87 {*movdi_internal_rex64}
     (nil))
(insn 16 17 18 2 (set (reg:SI 2 cx)
        (const_int 457 [0x1c9])) tiles.cpp:178 89 {*movsi_internal}
     (nil))
(insn 18 16 19 2 (set (reg:SI 4 si)
        (reg/v:SI 44 r15 [orig:99 num_ints ] [99])) tiles.cpp:178 89 {*movsi_internal}
     (nil))
(insn:TI 19 18 14 2 (set (reg:DI 5 di)
        (reg/v/f:DI 43 r14 [orig:98 ints ] [98])) tiles.cpp:178 87 {*movdi_internal_rex64}
     (nil))
(insn 14 19 15 2 (set (reg/v:SI 6 bp [orig:59 j ] [59])
        (reg:SI 0 ax)) tiles.cpp:177 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(debug_insn 15 14 20 2 (var_location:SI j (debug_expr:SI D#7)) tiles.cpp:177 -1
     (nil))
(call_insn:TI 20 15 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:178 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(insn:TI 22 20 23 2 (set (reg/v:DI 42 r13 [orig:64 ccheck ] [64])
        (sign_extend:DI (reg:SI 0 ax [orig:63 D.26025 ] [63]))) tiles.cpp:178 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.26025 ] [63])
        (nil)))
(debug_insn 23 22 26 2 (var_location:DI ccheck (reg/v:DI 42 r13 [orig:64 ccheck ] [64])) tiles.cpp:178 -1
     (nil))
(insn 26 23 24 2 (set (reg/f:DI 0 ax [orig:103 ct_7(D)->data ] [103])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])) tiles.cpp:179 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])
        (nil)))
(insn 24 26 27 2 (set (reg:DI 41 r12 [orig:115 D.26024 ] [115])
        (sign_extend:DI (reg/v:SI 6 bp [orig:59 j ] [59]))) tiles.cpp:179 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 27 24 28 2 (set (reg/f:DI 1 dx [orig:68 D.26026 ] [68])
        (plus:DI (mult:DI (reg:DI 41 r12 [orig:115 D.26024 ] [115])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:103 ct_7(D)->data ] [103]))) tiles.cpp:179 267 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 ct_7(D)->data ] [103])
        (nil)))
(insn:TI 28 27 29 2 (set (reg:DI 0 ax [orig:69 D.26024 ] [69])
        (mem:DI (reg/f:DI 1 dx [orig:68 D.26026 ] [68]) [0 *_22+0 S8 A64])) tiles.cpp:179 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 29 28 30 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:69 D.26024 ] [69])
            (reg/v:DI 42 r13 [orig:64 ccheck ] [64]))) tiles.cpp:179 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 30 29 36 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 179)
            (pc))) tiles.cpp:179 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
            (nil)))
 -> 179)
;;  succ:       13 [19.9%]  (CAN_FALLTHRU)
;;              3 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 3, loop depth 0, count 0, freq 1743, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 36 30 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 37 36 38 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:69 D.26024 ] [69])
            (const_int -1 [0xffffffffffffffff]))) tiles.cpp:181 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:69 D.26024 ] [69])
        (nil)))
(jump_insn:TI 38 37 45 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 180)
            (pc))) tiles.cpp:181 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
            (nil)))
 -> 180)
;;  succ:       14 [19.9%]  (CAN_FALLTHRU)
;;              4 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 1396, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 45 38 177 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 177 45 178 4 (set (reg:SI 0 ax)
        (mem/j:SI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                (const_int 16 [0x10])) [0 ct_7(D)->safe+0 S4 A64])) tiles.cpp:184 89 {*movsi_internal}
     (nil))
(insn:TI 178 177 47 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax)
            (const_int 0 [0]))) tiles.cpp:184 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 47 178 48 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) tiles.cpp:184 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3898 [0xf3a])
            (nil)))
 -> 52)
;;  succ:       5 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              7 [39.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 5, loop depth 0, count 0, freq 852, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	 17 [flags]
(note 48 47 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 49 48 117 5 (parallel [
            (set (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                        (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                            (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:185 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:100 ct ] [100])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 2173, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              12 [100.0%]  (CAN_FALLTHRU)
;;              13 [100.0%]  (CAN_FALLTHRU)
;;              10 [2.2%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              14 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 117 49 118 6 38 "" [4 uses])
(note 118 117 119 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 119 118 190 6 (var_location:SI j (debug_expr:SI D#7)) -1
     (nil))
(note 190 119 166 6 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 166 190 124 6 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:199 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn 124 166 127 6 (set (reg/i:SI 0 ax)
        (reg/v:SI 6 bp [orig:59 j ] [59])) tiles.cpp:199 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:59 j ] [59])
        (nil)))
(insn 127 124 167 6 (use (reg/i:SI 0 ax)) tiles.cpp:199 -1
     (nil))
(insn/f:TI 167 127 168 6 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:199 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 168 167 169 6 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:199 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 169 168 170 6 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:199 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 170 169 171 6 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:199 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 171 170 172 6 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:199 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 172 171 173 6 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:199 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 173 172 174 6 (simple_return) tiles.cpp:199 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 174 173 52)
;; basic block 7, loop depth 0, count 0, freq 544, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [39.0%]  (CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(code_label 52 174 53 7 40 "" [1 uses])
(note 53 52 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 60 53 54 7 NOTE_INSN_DELETED)
(insn:TI 54 60 56 7 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:187 89 {*movsi_internal}
     (nil))
(insn 56 54 55 7 (set (reg:SI 4 si)
        (reg/v:SI 44 r15 [orig:99 num_ints ] [99])) tiles.cpp:187 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 44 r15 [orig:99 num_ints ] [99])
        (nil)))
(insn 55 56 57 7 (set (reg:DI 1 dx)
        (const_int 536870911 [0x1fffffff])) tiles.cpp:187 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 57 55 58 7 (set (reg:DI 5 di)
        (reg/v/f:DI 43 r14 [orig:98 ints ] [98])) tiles.cpp:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 43 r14 [orig:98 ints ] [98])
        (nil)))
(call_insn:TI 58 57 65 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:187 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(insn:TI 65 58 61 7 (set (reg:DI 37 r8 [orig:92 D.26024 ] [92])
        (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 61 65 66 7 (set (reg:SI 38 r9 [orig:105 D.26025 ] [105])
        (plus:SI (mult:SI (reg:SI 0 ax [orig:77 D.26025 ] [77])
                (const_int 2 [0x2]))
            (const_int 1 [0x1]))) tiles.cpp:187 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 D.26025 ] [77])
        (nil)))
(insn 66 61 62 7 (set (reg:DI 4 si [orig:91 D.26024 ] [91])
        (mem/j:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100]) [0 ct_7(D)->m+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 62 66 63 7 (set (reg/v:DI 38 r9 [orig:80 h2 ] [80])
        (sign_extend:DI (reg:SI 38 r9 [orig:105 D.26025 ] [105]))) tiles.cpp:187 149 {*extendsidi2_rex64}
     (nil))
(debug_insn 63 62 64 7 (var_location:DI h2 (reg/v:DI 38 r9 [orig:80 h2 ] [80])) tiles.cpp:187 -1
     (nil))
(debug_insn 64 63 154 7 (var_location:SI i (const_int 0 [0])) tiles.cpp:188 -1
     (nil))
(insn:TI 154 64 181 7 (set (reg:DI 2 cx [orig:81 ivtmp.112 ] [81])
        (plus:DI (reg:DI 37 r8 [orig:92 D.26024 ] [92])
            (const_int 1 [0x1]))) 267 {*leadi}
     (nil))
(jump_insn 181 154 182 7 (set (pc)
        (label_ref 97)) tiles.cpp:189 650 {jump}
     (nil)
 -> 97)
;;  succ:       9 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]

(barrier 182 181 95)
;; basic block 8, loop depth 0, count 0, freq 9455, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL)
;;  pred:       11 [97.8%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  gen 	 41 [r12]
;; live  kill	
(code_label 95 182 96 8 42 "" [1 uses])
(note 96 95 131 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 131 96 97 8 (set (reg:DI 41 r12 [orig:115 D.26024 ] [115])
        (sign_extend:DI (reg/v:SI 6 bp [orig:59 j ] [59]))) 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:59 j ] [59])
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]

;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              7 [100.0%]  (CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 97 131 98 9 41 "" [1 uses])
(note 98 97 100 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 100 98 101 9 (var_location:SI j (debug_expr:SI D#7)) -1
     (nil))
(debug_insn 101 100 151 9 (var_location:SI i (minus:SI (reg:SI 2 cx [orig:81 ivtmp.112 ] [81])
        (reg:SI 37 r8 [orig:92 D.26024 ] [92]))) tiles.cpp:189 -1
     (nil))
(insn:TI 151 101 149 9 (set (reg:DI 0 ax [orig:110 D.26024 ] [110])
        (plus:DI (reg:DI 41 r12 [orig:115 D.26024 ] [115])
            (reg/v:DI 38 r9 [orig:80 h2 ] [80]))) tiles.cpp:191 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:115 D.26024 ] [115])
        (nil)))
(insn 149 151 102 9 (set (reg:DI 5 di [orig:113 D.26028 ] [113])
        (reg:DI 2 cx [orig:81 ivtmp.112 ] [81])) 87 {*movdi_internal_rex64}
     (nil))
(insn 102 149 110 9 (set (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                (const_int 40 [0x28])) [0 ct_7(D)->collisions+0 S8 A64])
        (reg:DI 2 cx [orig:81 ivtmp.112 ] [81])) tiles.cpp:190 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 110 102 152 9 (parallel [
            (set (reg:DI 5 di [orig:113 D.26028 ] [113])
                (minus:DI (reg:DI 5 di [orig:113 D.26028 ] [113])
                    (reg:DI 37 r8 [orig:92 D.26024 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) 310 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 152 110 153 9 (parallel [
            (set (reg:DI 1 dx [111])
                (ashiftrt:DI (reg:DI 0 ax [orig:110 D.26024 ] [110])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:191 538 {ashrdi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 153 152 133 9 (parallel [
            (set (reg:DI 0 ax [112])
                (div:DI (reg:DI 0 ax [orig:110 D.26024 ] [110])
                    (reg:DI 4 si [orig:91 D.26024 ] [91])))
            (set (reg:DI 1 dx [111])
                (mod:DI (reg:DI 0 ax [orig:110 D.26024 ] [110])
                    (reg:DI 4 si [orig:91 D.26024 ] [91])))
            (use (reg:DI 1 dx [111]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:191 370 {*divmoddi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:DI 0 ax [112])
            (nil))))
(debug_insn 133 153 111 9 (var_location:SI D#7 (reg:SI 1 dx [111])) -1
     (nil))
(insn:TI 111 133 107 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 4 si [orig:91 D.26024 ] [91])
            (reg:DI 5 di [orig:113 D.26028 ] [113]))) tiles.cpp:193 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:113 D.26028 ] [113])
        (nil)))
(insn:TI 107 111 108 9 (set (reg/v:SI 6 bp [orig:59 j ] [59])
        (reg:SI 1 dx [111])) tiles.cpp:191 89 {*movsi_internal}
     (nil))
(debug_insn 108 107 112 9 (var_location:SI j (reg:SI 1 dx [111])) tiles.cpp:191 -1
     (nil))
(jump_insn 112 108 79 9 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 183)
            (pc))) tiles.cpp:193 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil)))
 -> 183)
;;  succ:       15 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]

;; basic block 10, loop depth 0, count 0, freq 9896, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  kill	
(note 79 112 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 81 79 82 10 NOTE_INSN_DELETED)
(insn:TI 82 81 80 10 (set (reg/f:DI 5 di [orig:108 ct_7(D)->data ] [108])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])) tiles.cpp:194 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                (const_int 8 [0x8])) [0 ct_7(D)->data+0 S8 A64])
        (nil)))
(insn 80 82 83 10 (set (reg:DI 1 dx [orig:106 D.26027 ] [106])
        (sign_extend:DI (reg:SI 1 dx [111]))) tiles.cpp:194 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 83 80 84 10 (set (reg/f:DI 0 ax [orig:89 D.26026 ] [89])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:106 D.26027 ] [106])
                (const_int 8 [0x8]))
            (reg/f:DI 5 di [orig:108 ct_7(D)->data ] [108]))) tiles.cpp:194 267 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:108 ct_7(D)->data ] [108])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:106 D.26027 ] [106])
            (nil))))
(insn:TI 84 83 85 10 (set (reg:DI 1 dx [orig:90 D.26024 ] [90])
        (mem:DI (reg/f:DI 0 ax [orig:89 D.26026 ] [89]) [0 *_55+0 S8 A64])) tiles.cpp:194 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 85 84 86 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:90 D.26024 ] [90])
            (reg/v:DI 42 r13 [orig:64 ccheck ] [64]))) tiles.cpp:194 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 86 85 87 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) tiles.cpp:194 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 225 [0xe1])
            (nil)))
 -> 117)
;;  succ:       6 [2.2%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              11 [97.8%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]

;; basic block 11, loop depth 0, count 0, freq 9673, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [97.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 88 87 89 11 (parallel [
            (set (reg:DI 2 cx [orig:81 ivtmp.112 ] [81])
                (plus:DI (reg:DI 2 cx [orig:81 ivtmp.112 ] [81])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 89 88 90 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:90 D.26024 ] [90])
            (const_int -1 [0xffffffffffffffff]))) tiles.cpp:195 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:90 D.26024 ] [90])
        (nil)))
(jump_insn:TI 90 89 91 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) tiles.cpp:195 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil)))
 -> 95)
;;  succ:       12 [2.2%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              8 [97.8%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13]

;; basic block 12, loop depth 0, count 0, freq 218, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [2.2%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13]
;; lr  def 	
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	
;; live  kill	
(note 91 90 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 92 91 184 12 (set (mem:DI (reg/f:DI 0 ax [orig:89 D.26026 ] [89]) [0 *_78+0 S8 A64])
        (reg/v:DI 42 r13 [orig:64 ccheck ] [64])) tiles.cpp:195 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 42 r13 [orig:64 ccheck ] [64])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.26026 ] [89])
            (nil))))
(jump_insn 184 92 185 12 (set (pc)
        (label_ref 117)) tiles.cpp:195 650 {jump}
     (nil)
 -> 117)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 185 184 179)
;; basic block 13, loop depth 0, count 0, freq 433, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [19.9%]  (CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	 17 [flags]
(code_label 179 185 31 13 47 "" [1 uses])
(note 31 179 32 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 32 31 186 13 (parallel [
            (set (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                        (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                            (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:180 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:100 ct ] [100])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 186 32 187 13 (set (pc)
        (label_ref 117)) 650 {jump}
     (nil)
 -> 117)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 187 186 180)
;; basic block 14, loop depth 0, count 0, freq 347, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [19.9%]  (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	
;; live  kill	 17 [flags]
(code_label 180 187 39 14 48 "" [1 uses])
(note 39 180 40 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 40 39 41 14 (parallel [
            (set (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                        (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                (plus:DI (mem/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:100 ct ] [100])
                            (const_int 32 [0x20])) [0 ct_7(D)->clearhits+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:182 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:100 ct ] [100])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 188 14 (set (mem:DI (reg/f:DI 1 dx [orig:68 D.26026 ] [68]) [0 *_22+0 S8 A64])
        (reg/v:DI 42 r13 [orig:64 ccheck ] [64])) tiles.cpp:183 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 42 r13 [orig:64 ccheck ] [64])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:68 D.26026 ] [68])
            (nil))))
(jump_insn 188 41 189 14 (set (pc)
        (label_ref 117)) 650 {jump}
     (nil)
 -> 117)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 189 188 183)
;; basic block 15, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 14, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(code_label 183 189 70 15 49 "" [1 uses])
(note 70 183 71 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(debug_insn 71 70 72 15 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b82f8519da8 *.LC0>)) -1
     (nil))
(insn:TI 72 71 73 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b82f8519da8 *.LC0>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 175 15 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (nil))
(insn 175 73 75 15 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 75 175 176 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x2b82f0908600 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_BR_PRED (use (reg:SI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
(insn:TI 176 75 77 15 (parallel [
            (set (reg:DI 5 di)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:193 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 77 176 78 15 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b82f08ee700 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) tiles.cpp:193 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 78 77 0)

;; Function void tiles(int*, int, collision_table*, float*, int, int*, int) (_Z5tilesPiiP15collision_tablePfiS_i, funcdef_no=1062, decl_uid=23694, cgraph_uid=306)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 27 count 27 (  1.4)


void tiles(int*, int, collision_table*, float*, int, int*, int)

Dataflow summary:
def_info->table_size = 275, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={18d,17u} r1={15d,11u} r2={7d,7u,1e} r3={3d,8u} r4={10d,9u} r5={9d,6u,1e} r6={6d,8u,1e} r7={15d,56u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={35d,8u} r18={4d} r19={4d} r20={5e} r21={7d,3u} r22={6d,1u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={9d,10u} r38={7d,3u} r39={4d} r40={5d,1u} r41={3d,10u} r42={4d,5u,1e} r43={4d,4u} r44={5d,8u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 490{306d,175u,9e} in 113{109 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags] 41 [r12] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]

( 2 3 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 22 [xmm1] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	 0 [ax] 6 [bp] 22 [xmm1] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 5 )->[6]->( 6 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags] 21 [xmm0]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 7 [sp] 41 [r12]

( 4 7 )->[8]->( 9 18 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 7 [sp] 41 [r12]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 6 [bp] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 17 9 )->[10]->( 11 19 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 10 )->[11]->( 14 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 38 [r9] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 14 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 12 15 )->[13]->( 14 16 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 43 [r14]
;; lr  def 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 13 11 )->[14]->( 12 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 5 [di] 7 [sp] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 14 )->[15]->( 13 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 13 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 16 19 )->[17]->( 10 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 17 8 )->[18]->( 1 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 10 )->[19]->( 17 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 18 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 26 to worklist
  Adding insn 246 to worklist
  Adding insn 6 to worklist
  Adding insn 4 to worklist
  Adding insn 268 to worklist
  Adding insn 267 to worklist
  Adding insn 266 to worklist
  Adding insn 265 to worklist
  Adding insn 264 to worklist
  Adding insn 263 to worklist
  Adding insn 49 to worklist
  Adding insn 30 to worklist
  Adding insn 247 to worklist
  Adding insn 83 to worklist
  Adding insn 78 to worklist
  Adding insn 74 to worklist
  Adding insn 98 to worklist
  Adding insn 59 to worklist
  Adding insn 172 to worklist
  Adding insn 288 to worklist
  Adding insn 148 to worklist
  Adding insn 141 to worklist
  Adding insn 138 to worklist
  Adding insn 120 to worklist
  Adding insn 292 to worklist
  Adding insn 164 to worklist
  Adding insn 158 to worklist
  Adding insn 156 to worklist
  Adding insn 151 to worklist
  Adding insn 281 to worklist
  Adding insn 294 to worklist
Finished finding needed instructions:
processing block 18 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 280 to worklist
  Adding insn 279 to worklist
  Adding insn 278 to worklist
  Adding insn 277 to worklist
  Adding insn 276 to worklist
  Adding insn 275 to worklist
  Adding insn 274 to worklist
processing block 17 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 163 to worklist
  Adding insn 162 to worklist
  Adding insn 159 to worklist
  Adding insn 155 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
processing block 16 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 15 to worklist
processing block 13 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 147 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 140 to worklist
processing block 12 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 124 to worklist
  Adding insn 260 to worklist
  Adding insn 259 to worklist
  Adding insn 122 to worklist
  Adding insn 250 to worklist
processing block 15 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 134 to worklist
  Adding insn 133 to worklist
  Adding insn 258 to worklist
  Adding insn 257 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
  Adding insn 252 to worklist
processing block 14 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 119 to worklist
  Adding insn 118 to worklist
  Adding insn 116 to worklist
processing block 11 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 195 to worklist
  Adding insn 194 to worklist
  Adding insn 283 to worklist
  Adding insn 13 to worklist
processing block 19 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 284 to worklist
processing block 10 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 171 to worklist
processing block 9 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 193 to worklist
  Adding insn 285 to worklist
  Adding insn 109 to worklist
  Adding insn 107 to worklist
  Adding insn 105 to worklist
processing block 8 lr out =  3 [bx] 7 [sp] 41 [r12]
  Adding insn 58 to worklist
processing block 7 lr out =  3 [bx] 7 [sp] 41 [r12]
  Adding insn 286 to worklist
  Adding insn 261 to worklist
  Adding insn 91 to worklist
  Adding insn 90 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 82 to worklist
  Adding insn 81 to worklist
  Adding insn 77 to worklist
  Adding insn 72 to worklist
  Adding insn 248 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 192 to worklist
  Adding insn 287 to worklist
  Adding insn 69 to worklist
  Adding insn 67 to worklist
  Adding insn 65 to worklist
processing block 4 lr out =  3 [bx] 7 [sp] 41 [r12] 44 [r15]
  Adding insn 29 to worklist
processing block 3 lr out =  3 [bx] 7 [sp] 41 [r12] 44 [r15]
  Adding insn 47 to worklist
  Adding insn 262 to worklist
  Adding insn 40 to worklist
  Adding insn 37 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]
  Adding insn 25 to worklist
  Adding insn 21 to worklist
  Adding insn 10 to worklist
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 5 to worklist
  Adding insn 269 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 27 count 23 (  1.1)
deleting insn with uid = 270.
deleting insn with uid = 11.
deleting insn with uid = 20.
;;   ======================================================
;;   -- basic block 2 from 263 to 26 -- after reload
;;   ======================================================

;;	  0--> b  0: i 263[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   7r15=cx                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 264[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 265[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 266[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i   5r12=si                                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i 267[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 268[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i   8bx=r8                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i 269{sp=sp-0x178;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 13--> b  0: i  10ax=sxn([sp+0x1b0])                      :athlon-direct,athlon-load,athlon-ieu
;;	 13--> b  0: i   6[sp+0x10]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i   4[sp+0x18]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  21dx=r8+ax+0x1                            :athlon-direct,athlon-agu,nothing
;;	 17--> b  0: i  25flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 19--> b  0: i 246[sp+0xc]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  22loc [sp+0xc]                            :nothing
;;	 19--> b  0: i  24loc 0                                   :nothing
;;	 19--> b  0: i  26pc={(flags<=0)?L52:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 19
;;   new head = 263
;;   new tail = 26

deleting insn with uid = 38.
deleting insn with uid = 39.
;;   ======================================================
;;   -- basic block 3 from 37 to 49 -- after reload
;;   ======================================================

;;	  0--> b  0: i  37dx=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i  47si=r9                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  40di=dx*0x4+sp+0xc4                       :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 262dx=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i  49ax=call [`memcpy']                      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 37
;;   new tail = 49

;;   ======================================================
;;   -- basic block 4 from 28 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i  28loc 0                                   :nothing
;;	  0--> b  0: i  29flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  30pc={(flags<=0)?L55:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 28
;;   new tail = 30

deleting insn with uid = 66.
deleting insn with uid = 68.
;;   ======================================================
;;   -- basic block 5 from 65 to 192 -- after reload
;;   ======================================================

;;	  0--> b  0: i  65xmm1=flt(r12)                           :athlon-double,athlon-fploadk8,athlon-fstore
;;	  0--> b  0: i  67ax=zxn(bx-0x1)                          :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 192r13=sp+0x20                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 287{bp=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  69r14=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	 11--> b  0: i 247[sp+0x8]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	Ready list (final):  
;;   total time = 11
;;   new head = 65
;;   new tail = 192

;;   ======================================================
;;   -- basic block 6 from 71 to 83 -- after reload
;;   ======================================================

;;	  0--> b  0: i  71loc clobber                             :nothing
;;	  0--> b  0: i 248xmm0=[sp+0x8]                           :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  1--> b  0: i  72xmm0=xmm0*[r15+bp]                      :athlon-direct,athlon-fploadk8,athlon-fmul
;;	  7--> b  0: i  74xmm0=call [`floorf']                    :athlon-vector,athlon-ieu
;;	  8--> b  0: i  77ax=fix(xmm0)                            :athlon-double,athlon-fploadk8,athlon-fstore
;;	 19--> b  0: i  78[r13+bp]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  80loc D#9                                 :nothing
;;	 19--> b  0: i  81{bp=bp+0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	 20--> b  0: i  82flags=cmp(bp,r14)                       :athlon-direct,athlon-ieu
;;	 21--> b  0: i  83pc={(flags!=0)?L85:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 21
;;   new head = 71
;;   new tail = 83

;;   ======================================================
;;   -- basic block 7 from 90 to 98 -- after reload
;;   ======================================================

;;	  0--> b  0: i  90dx=sxn(bx)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 261di=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 286{si=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  91{dx=dx<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  2--> b  0: i  98ax=call [`memset']                      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 90
;;   new tail = 98

;;   ======================================================
;;   -- basic block 8 from 57 to 59 -- after reload
;;   ======================================================

;;	  0--> b  0: i  57loc 0                                   :nothing
;;	  0--> b  0: i  58flags=cmp(r12,0)                        :athlon-direct,athlon-ieu
;;	  1--> b  0: i  59pc={(flags<=0)?L179:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 57
;;   new tail = 59

deleting insn with uid = 106.
deleting insn with uid = 108.
;;   ======================================================
;;   -- basic block 9 from 105 to 193 -- after reload
;;   ======================================================

;;	  0--> b  0: i 107ax=zxn(bx-0x1)                          :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 105bp=[sp+0x18]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 193r13=sp+0xc0                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 285{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 109r14=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 2
;;   new head = 105
;;   new tail = 193

;;   ======================================================
;;   -- basic block 10 from 168 to 172 -- after reload
;;   ======================================================

;;	  0--> b  0: i 168loc r15                                 :nothing
;;	  0--> b  0: i 169loc 0                                   :nothing
;;	  0--> b  0: i 171flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 172pc={(flags<=0)?L185:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 168
;;   new tail = 172

;;   ======================================================
;;   -- basic block 11 from 13 to 288 -- after reload
;;   ======================================================

;;	  0--> b  0: i  13r9=0x1                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 283{cx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 194r11=sp+0x20                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 195di=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 288pc=L174                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 13
;;   new tail = 288

;;   ======================================================
;;   -- basic block 12 from 250 to 124 -- after reload
;;   ======================================================

;;	  0--> b  0: i 250ax=r8                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 122{ax=ax-si;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 259{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  3--> b  0: i 260{ax=ax/r12;dx=ax%r12;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  9--> b  0: i 124{r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 250
;;   new tail = 124

;;   ======================================================
;;   -- basic block 13 from 138 to 148 -- after reload
;;   ======================================================

;;	  0--> b  0: i 140{si=si+r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	  0--> b  0: i 138[r13+cx]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 145{r9=r9+0x2;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 141[di+cx]=si                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 143loc D#8                                 :nothing
;;	  1--> b  0: i 144{cx=cx+0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	  2--> b  0: i 147flags=cmp(cx,r14)                       :athlon-direct,athlon-ieu
;;	  3--> b  0: i 148pc={(flags==0)?L290:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 138
;;   new tail = 148

;;   ======================================================
;;   -- basic block 14 from 114 to 120 -- after reload
;;   ======================================================

;;	  0--> b  0: i 114loc clobber                             :nothing
;;	  0--> b  0: i 116r8=[r11+cx]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 118si=[di+cx]                              :athlon-direct,athlon-load
;;	  3--> b  0: i 119flags=cmp(r8,si)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 120pc={(flags>=0)?L291:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 114
;;   new tail = 120

;;   ======================================================
;;   -- basic block 15 from 252 to 292 -- after reload
;;   ======================================================

;;	  0--> b  0: i 252ax=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 130{ax=ax-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 131{ax=ax-0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 257{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  4--> b  0: i 258{ax=ax/r12;dx=ax%r12;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	 10--> b  0: i 133r8=r8+dx+0x1                            :athlon-direct,athlon-agu,nothing
;;	 12--> b  0: i 134{r8=r8-r12;clobber flags;}              :athlon-direct,athlon-ieu
;;	 12--> b  0: i 292pc=L135                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 252
;;   new tail = 292

;;   ======================================================
;;   -- basic block 16 from 15 to 15 -- after reload
;;   ======================================================

;;	  0--> b  0: i  15ax=sxn(bx)                              :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 15
;;   new tail = 15

rescanning insn with uid = 158.
deleting insn with uid = 158.
rescanning insn with uid = 158.
deleting insn with uid = 158.
;;   ======================================================
;;   -- basic block 17 from 151 to 164 -- after reload
;;   ======================================================

;;	  0--> b  0: i 153dx=[sp+0x10]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 154si=[sp+0xc]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 155di=r13                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 151[ax*0x4+sp+0xc0]=r15                    :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 159{r15=r15+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i 162{bp=bp+0x4;clobber flags;}              :athlon-direct,athlon-ieu
rescanning insn with uid = 158.
deleting insn with uid = 158.
;;	  3--> b  0: i 156ax=call [`_Z4hashPiiP15collision_table']:athlon-vector,athlon-ieu
;;	  3--> b  0: i 161loc r15                                 :nothing
;;	  4--> b  0: i 158[bp-0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 163flags=cmp(r15,r12)                      :athlon-direct,athlon-ieu
;;	  5--> b  0: i 164pc={(flags!=0)?L166:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 151
;;   new tail = 164

;;   ======================================================
;;   -- basic block 18 from 274 to 281 -- after reload
;;   ======================================================

;;	  0--> b  0: i 274{sp=sp+0x178;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i 275bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 276bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 277r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 278r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 279r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 280r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 281simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 274
;;   new tail = 281

;;   ======================================================
;;   -- basic block 19 from 284 to 294 -- after reload
;;   ======================================================

;;	  0--> b  0: i 284{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 294pc=L170                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 284
;;   new tail = 294



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, collision_table*, float*, int, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={18d,17u} r1={15d,11u} r2={7d,7u,1e} r3={3d,8u} r4={10d,9u} r5={9d,6u,1e} r6={6d,8u,1e} r7={15d,56u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={35d,8u} r18={4d} r19={4d} r20={5e} r21={7d,3u} r22={6d,1u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={9d,10u} r38={7d,3u} r39={4d} r40={5d,1u} r41={3d,10u} r42={4d,5u,1e} r43={4d,4u} r44={5d,8u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 490{306d,175u,9e} in 113{109 regular + 4 call} insns.
(note 3 0 18 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags] 41 [r12] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
(note 18 3 11 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 11 18 20 2 NOTE_INSN_FUNCTION_BEG)
(note 20 11 263 2 NOTE_INSN_DELETED)
(insn/f:TI 263 20 7 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tiles.cpp:84 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 7 263 264 2 (set (reg/v/f:DI 44 r15 [orig:111 floats ] [111])
        (reg:DI 2 cx [ floats ])) tiles.cpp:84 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn/f:TI 264 7 265 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tiles.cpp:84 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 265 264 266 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tiles.cpp:84 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 266 265 5 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:84 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 5 266 267 2 (set (reg/v:SI 41 r12 [orig:109 num_tilings ] [109])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:84 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn/f:TI 267 5 268 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:84 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 268 267 8 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:84 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 8 268 269 2 (set (reg/v:SI 3 bx [orig:112 num_floats ] [112])
        (reg:SI 37 r8 [ num_floats ])) tiles.cpp:84 89 {*movsi_internal}
     (nil))
(insn/f:TI 269 8 270 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -376 [0xfffffffffffffe88])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:84 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -376 [0xfffffffffffffe88])))
            (nil))))
(note 270 269 10 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 10 270 6 2 (set (reg:DI 0 ax)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 432 [0x1b0])) [0 num_ints+0 S4 A64]))) tiles.cpp:84 149 {*extendsidi2_rex64}
     (nil))
(insn 6 10 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
        (reg:DI 1 dx [ ctable ])) tiles.cpp:84 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ctable ])
        (nil)))
(insn:TI 4 6 21 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S8 A64])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:84 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn:TI 21 4 25 2 (set (reg/v:SI 1 dx [orig:62 num_coordinates ] [62])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:112 num_floats ] [112])
                (reg/v:SI 0 ax [orig:114 num_ints ] [114]))
            (const_int 1 [0x1]))) tiles.cpp:89 266 {*leasi}
     (nil))
(insn 25 21 246 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 0 ax [orig:114 num_ints ] [114])
            (const_int 0 [0]))) tiles.cpp:91 3 {*cmpsi_ccno_1}
     (nil))
(insn:TI 246 25 22 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [0 %sfp+-20 S4 A32])
        (reg/v:SI 1 dx [orig:62 num_coordinates ] [62])) tiles.cpp:89 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 1 dx [orig:62 num_coordinates ] [62])
        (nil)))
(debug_insn 22 246 24 2 (var_location:SI num_coordinates (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 12 [0xc])) [0 %sfp+-20 S4 A32])) tiles.cpp:89 -1
     (nil))
(debug_insn 24 22 26 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn 26 24 35 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 52)
            (pc))) tiles.cpp:91 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 238 [0xee])
            (nil)))
 -> 52)
;;  succ:       3 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [2.4%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]

;; basic block 3, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 35 26 36 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 36 35 38 3 NOTE_INSN_DELETED)
(note 38 36 39 3 NOTE_INSN_DELETED)
(note 39 38 37 3 NOTE_INSN_DELETED)
(insn:TI 37 39 47 3 (set (reg:DI 1 dx [orig:117 D.26059 ] [117])
        (sign_extend:DI (reg:SI 37 r8 [orig:112 num_floats ] [112]))) tiles.cpp:91 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:112 num_floats ] [112])
        (nil)))
(insn 47 37 40 3 (set (reg:DI 4 si)
        (reg/v/f:DI 38 r9 [orig:113 ints ] [113])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 38 r9 [orig:113 ints ] [113])
        (nil)))
(insn:TI 40 47 262 3 (set (reg:DI 5 di [orig:120 D.26061 ] [120])
        (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:117 D.26059 ] [117])
                    (const_int 4 [0x4]))
                (reg/f:DI 7 sp))
            (const_int 196 [0xc4]))) tiles.cpp:91 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:117 D.26059 ] [117])
        (nil)))
(insn 262 40 49 3 (set (reg:DI 1 dx [orig:122 D.26059 ] [122])
        (mult:DI (reg:DI 0 ax [orig:121 D.26059 ] [121])
            (const_int 4 [0x4]))) tiles.cpp:91 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:121 D.26059 ] [121])
        (nil)))
(call_insn:TI 49 262 52 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [2.4%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 52 49 27 4 54 "" [1 uses])
(note 27 52 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 28 27 29 4 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 29 28 30 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 3 bx [orig:112 num_floats ] [112])
            (const_int 0 [0]))) tiles.cpp:94 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 30 29 64 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) tiles.cpp:94 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 55)
;;  succ:       5 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]

;; basic block 5, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 22 [xmm1] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	 0 [ax] 6 [bp] 22 [xmm1] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 64 30 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 66 64 68 5 NOTE_INSN_DELETED)
(note 68 66 65 5 NOTE_INSN_DELETED)
(insn:TI 65 68 67 5 (set (reg:SF 22 xmm1 [orig:102 D.26057 ] [102])
        (float:SF (reg/v:SI 41 r12 [orig:109 num_tilings ] [109]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(insn 67 65 192 5 (set (reg:DI 0 ax [orig:129 D.26059 ] [129])
        (zero_extend:DI (plus:SI (reg/v:SI 3 bx [orig:112 num_floats ] [112])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(insn 192 67 287 5 (set (reg/f:DI 42 r13 [164])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn:TI 287 192 69 5 (parallel [
            (set (reg:DI 6 bp [orig:92 ivtmp.138 ] [92])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:94 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 69 287 247 5 (set (reg:DI 43 r14 [orig:77 D.26059 ] [77])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:129 D.26059 ] [129])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:129 D.26059 ] [129])
        (nil)))
(insn:TI 247 69 85 5 (set (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A32])
        (reg:SF 22 xmm1 [orig:102 D.26057 ] [102])) 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [orig:102 D.26057 ] [102])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 942, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags] 21 [xmm0]
;; live  kill	 17 [flags]
(code_label 85 247 70 6 58 "" [1 uses])
(note 70 85 71 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 71 70 248 6 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 248 71 72 6 (set (reg:SF 21 xmm0 [orig:131 D.26057 ] [131])
        (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A32])) tiles.cpp:95 135 {*movsf_internal}
     (nil))
(insn:TI 72 248 74 6 (set (reg:SF 21 xmm0 [orig:131 D.26057 ] [131])
        (mult:SF (reg:SF 21 xmm0 [orig:131 D.26057 ] [131])
            (mem:SF (plus:DI (reg/v/f:DI 44 r15 [orig:111 floats ] [111])
                    (reg:DI 6 bp [orig:92 ivtmp.138 ] [92])) [0 MEM[base: floats_26(D), index: ivtmp.138_58, offset: 0B]+0 S4 A32]))) tiles.cpp:95 777 {*fop_sf_comm_sse}
     (nil))
(call_insn/u:TI 74 72 77 6 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:95 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn:TI 77 74 78 6 (set (reg:SI 0 ax [133])
        (fix:SI (reg:SF 21 xmm0 [orig:66 D.26057 ] [66]))) tiles.cpp:95 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [orig:66 D.26057 ] [66])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 42 r13 [164])
                    (reg:DI 6 bp [orig:92 ivtmp.138 ] [92])) [0 MEM[symbol: qstate, index: ivtmp.138_58, offset: 0B]+0 S4 A32])
            (nil))))
(insn:TI 78 77 80 6 (set (mem:SI (plus:DI (reg/f:DI 42 r13 [164])
                (reg:DI 6 bp [orig:92 ivtmp.138 ] [92])) [0 MEM[symbol: qstate, index: ivtmp.138_58, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [133])) tiles.cpp:95 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [133])
        (nil)))
(debug_insn 80 78 81 6 (var_location:SI i (debug_expr:SI D#9)) -1
     (nil))
(insn 81 80 82 6 (parallel [
            (set (reg:DI 6 bp [orig:92 ivtmp.138 ] [92])
                (plus:DI (reg:DI 6 bp [orig:92 ivtmp.138 ] [92])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 82 81 83 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 6 bp [orig:92 ivtmp.138 ] [92])
            (reg:DI 43 r14 [orig:77 D.26059 ] [77]))) tiles.cpp:94 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 83 82 89 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 85)
            (pc))) tiles.cpp:94 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 85)
;;  succ:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              7 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 89 83 90 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 90 89 261 7 (set (reg:DI 1 dx [orig:134 D.26059 ] [134])
        (sign_extend:DI (reg/v:SI 3 bx [orig:112 num_floats ] [112]))) tiles.cpp:96 149 {*extendsidi2_rex64}
     (nil))
(insn 261 90 286 7 (set (reg/f:DI 5 di [163])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (nil))
(insn 286 261 91 7 (parallel [
            (set (reg:DI 4 si)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 91 286 98 7 (parallel [
            (set (reg:DI 1 dx [orig:135 D.26059 ] [135])
                (ashift:DI (reg:DI 1 dx [orig:134 D.26059 ] [134])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:96 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 98 91 55 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 7 [sp] 41 [r12]

;; basic block 8, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [4.8%]  (CAN_FALLTHRU)
;;              7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 55 98 56 8 53 "" [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 57 56 58 8 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn:TI 58 57 59 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 41 r12 [orig:109 num_tilings ] [109])
            (const_int 0 [0]))) tiles.cpp:100 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 59 58 104 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 179)
            (pc))) tiles.cpp:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 179)
;;  succ:       9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 7 [sp] 41 [r12]

;; basic block 9, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 6 [bp] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 104 59 106 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(note 106 104 108 9 NOTE_INSN_DELETED)
(note 108 106 107 9 NOTE_INSN_DELETED)
(insn:TI 107 108 105 9 (set (reg:DI 0 ax [orig:142 D.26059 ] [142])
        (zero_extend:DI (plus:SI (reg/v:SI 3 bx [orig:112 num_floats ] [112])
                (const_int -1 [0xffffffffffffffff])))) 267 {*leadi}
     (nil))
(insn 105 107 193 9 (set (reg:DI 6 bp [orig:91 ivtmp.132 ] [91])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 193 105 285 9 (set (reg/f:DI 42 r13 [162])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 192 [0xc0]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn:TI 285 193 109 9 (parallel [
            (set (reg:DI 44 r15 [orig:95 j ] [95])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:100 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 109 285 166 9 (set (reg:DI 43 r14 [orig:71 D.26059 ] [71])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:142 D.26059 ] [142])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:142 D.26059 ] [142])
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 476, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       17 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 166 109 167 10 59 "" [1 uses])
(note 167 166 168 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 168 167 169 10 (var_location:SI j (reg/v:SI 44 r15 [orig:95 j ] [95])) -1
     (nil))
(debug_insn 169 168 171 10 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 171 169 172 10 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 3 bx [orig:112 num_floats ] [112])
            (const_int 0 [0]))) tiles.cpp:103 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 172 171 173 10 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 185)
            (pc))) tiles.cpp:103 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 185)
;;  succ:       11 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 11, loop depth 0, count 0, freq 453, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 38 [r9] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(note 173 172 13 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 13 173 283 11 (set (reg:SI 38 r9 [orig:72 ivtmp.127 ] [72])
        (const_int 1 [0x1])) tiles.cpp:103 89 {*movsi_internal}
     (nil))
(insn 283 13 194 11 (parallel [
            (set (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:103 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 194 283 195 11 (set (reg/f:DI 40 r11 [164])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn:TI 195 194 288 11 (set (reg/f:DI 5 di [163])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -256 [0xffffffffffffff00]))
        (nil)))
(jump_insn 288 195 289 11 (set (pc)
        (label_ref 174)) 650 {jump}
     (nil)
 -> 174)
;;  succ:       14 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 289 288 291)
;; basic block 12, loop depth 0, count 0, freq 4762, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 291 289 121 12 68 "" [1 uses])
(note 121 291 250 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 250 121 122 12 (set (reg:SI 0 ax [orig:146 D.26056 ] [146])
        (reg:SI 37 r8 [orig:78 D.26056 ] [78])) tiles.cpp:107 89 {*movsi_internal}
     (nil))
(insn:TI 122 250 259 12 (parallel [
            (set (reg:SI 0 ax [orig:146 D.26056 ] [146])
                (minus:SI (reg:SI 0 ax [orig:146 D.26056 ] [146])
                    (reg:SI 4 si [orig:79 D.26056 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:107 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 259 122 260 12 (parallel [
            (set (reg:SI 1 dx [orig:148 D.26056 ] [148])
                (ashiftrt:SI (reg:SI 0 ax [orig:146 D.26056 ] [146])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:107 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 260 259 124 12 (parallel [
            (set (reg:SI 0 ax [149])
                (div:SI (reg:SI 0 ax [orig:146 D.26056 ] [146])
                    (reg/v:SI 41 r12 [orig:109 num_tilings ] [109])))
            (set (reg:SI 1 dx [orig:148 D.26056 ] [148])
                (mod:SI (reg:SI 0 ax [orig:146 D.26056 ] [146])
                    (reg/v:SI 41 r12 [orig:109 num_tilings ] [109])))
            (use (reg:SI 1 dx [orig:148 D.26056 ] [148]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:107 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [149])
            (nil))))
(insn:TI 124 260 135 12 (parallel [
            (set (reg:SI 37 r8 [orig:82 D.26056 ] [82])
                (minus:SI (reg:SI 37 r8 [orig:78 D.26056 ] [78])
                    (reg:SI 1 dx [orig:148 D.26056 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:107 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:148 D.26056 ] [148])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 13, loop depth 0, count 0, freq 9524, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [100.0%]  (CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 43 [r14]
;; lr  def 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  kill	 17 [flags]
(code_label 135 124 136 13 61 "" [1 uses])
(note 136 135 140 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 140 136 138 13 (parallel [
            (set (reg:SI 4 si [159])
                (plus:SI (reg:SI 4 si [orig:79 D.26056 ] [79])
                    (reg:SI 38 r9 [orig:72 ivtmp.127 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:112 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 5 di [163])
                    (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: base, index: ivtmp.121_15, offset: 0B]+0 S4 A32])
            (nil))))
(insn 138 140 145 13 (set (mem:SI (plus:DI (reg/f:DI 42 r13 [162])
                (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: coordinates, index: ivtmp.121_15, offset: 0B]+0 S4 A32])
        (reg:SI 37 r8 [orig:82 D.26056 ] [82])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:82 D.26056 ] [82])
        (nil)))
(insn 145 138 141 13 (parallel [
            (set (reg:SI 38 r9 [orig:72 ivtmp.127 ] [72])
                (plus:SI (reg:SI 38 r9 [orig:72 ivtmp.127 ] [72])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 141 145 143 13 (set (mem:SI (plus:DI (reg/f:DI 5 di [163])
                (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: base, index: ivtmp.121_15, offset: 0B]+0 S4 A32])
        (reg:SI 4 si [159])) tiles.cpp:112 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [159])
        (nil)))
(debug_insn 143 141 144 13 (var_location:SI i (debug_expr:SI D#8)) -1
     (nil))
(insn 144 143 147 13 (parallel [
            (set (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])
                (plus:DI (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 147 144 148 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])
            (reg:DI 43 r14 [orig:71 D.26059 ] [71]))) tiles.cpp:103 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 148 147 174 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 290)
            (pc))) tiles.cpp:103 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 290)
;;  succ:       14 [95.2%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              16 [4.8%]  (CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 14, loop depth 0, count 0, freq 9524, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [95.2%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              11 [100.0%]  (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 5 [di] 7 [sp] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(code_label 174 148 113 14 64 "" [1 uses])
(note 113 174 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 114 113 116 14 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 116 114 118 14 (set (reg:SI 37 r8 [orig:78 D.26056 ] [78])
        (mem:SI (plus:DI (reg/f:DI 40 r11 [164])
                (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: qstate, index: ivtmp.121_15, offset: 0B]+0 S4 A32])) tiles.cpp:106 89 {*movsi_internal}
     (nil))
(insn 118 116 119 14 (set (reg:SI 4 si [orig:79 D.26056 ] [79])
        (mem:SI (plus:DI (reg/f:DI 5 di [163])
                (reg:DI 2 cx [orig:63 ivtmp.121 ] [63])) [0 MEM[symbol: base, index: ivtmp.121_15, offset: 0B]+0 S4 A32])) tiles.cpp:106 89 {*movsi_internal}
     (nil))
(insn:TI 119 118 120 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 37 r8 [orig:78 D.26056 ] [78])
            (reg:SI 4 si [orig:79 D.26056 ] [79]))) tiles.cpp:106 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 120 119 128 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 291)
            (pc))) tiles.cpp:106 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 291)
;;  succ:       12 [50.0%]  (CAN_FALLTHRU)
;;              15 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 15, loop depth 0, count 0, freq 4762, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
(note 128 120 129 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 129 128 252 15 NOTE_INSN_DELETED)
(insn:TI 252 129 130 15 (set (reg:SI 0 ax [orig:151 D.26056 ] [151])
        (reg:SI 4 si [orig:79 D.26056 ] [79])) tiles.cpp:109 89 {*movsi_internal}
     (nil))
(insn:TI 130 252 131 15 (parallel [
            (set (reg:SI 0 ax [orig:151 D.26056 ] [151])
                (minus:SI (reg:SI 0 ax [orig:151 D.26056 ] [151])
                    (reg:SI 37 r8 [orig:78 D.26056 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 131 130 257 15 (parallel [
            (set (reg:SI 0 ax [orig:152 D.26056 ] [152])
                (plus:SI (reg:SI 0 ax [orig:151 D.26056 ] [151])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 257 131 258 15 (parallel [
            (set (reg:SI 1 dx [orig:154 D.26056 ] [154])
                (ashiftrt:SI (reg:SI 0 ax [orig:152 D.26056 ] [152])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 258 257 133 15 (parallel [
            (set (reg:SI 0 ax [155])
                (div:SI (reg:SI 0 ax [orig:152 D.26056 ] [152])
                    (reg/v:SI 41 r12 [orig:109 num_tilings ] [109])))
            (set (reg:SI 1 dx [orig:154 D.26056 ] [154])
                (mod:SI (reg:SI 0 ax [orig:152 D.26056 ] [152])
                    (reg/v:SI 41 r12 [orig:109 num_tilings ] [109])))
            (use (reg:SI 1 dx [orig:154 D.26056 ] [154]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [155])
            (nil))))
(insn:TI 133 258 134 15 (set (reg:SI 37 r8 [orig:82 D.26056 ] [82])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:78 D.26056 ] [78])
                (reg:SI 1 dx [orig:154 D.26056 ] [154]))
            (const_int 1 [0x1]))) tiles.cpp:109 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:154 D.26056 ] [154])
        (nil)))
(insn:TI 134 133 292 15 (parallel [
            (set (reg:SI 37 r8 [orig:82 D.26056 ] [82])
                (minus:SI (reg:SI 37 r8 [orig:82 D.26056 ] [82])
                    (reg/v:SI 41 r12 [orig:109 num_tilings ] [109])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:109 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 292 134 293 15 (set (pc)
        (label_ref 135)) 650 {jump}
     (nil)
 -> 135)
;;  succ:       13 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 293 292 290)
;; basic block 16, loop depth 0, count 0, freq 453, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [4.8%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 290 293 181 16 67 "" [1 uses])
(note 181 290 15 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 15 181 170 16 (set (reg:DI 0 ax)
        (sign_extend:DI (reg/v:SI 3 bx [orig:112 num_floats ] [112]))) 149 {*extendsidi2_rex64}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 17, loop depth 0, count 0, freq 476, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [100.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
(code_label 170 15 149 17 63 "" [1 uses])
(note 149 170 153 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 153 149 154 17 (set (reg:DI 1 dx)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) tiles.cpp:117 87 {*movdi_internal_rex64}
     (nil))
(insn 154 153 155 17 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [0 %sfp+-20 S4 A32])) tiles.cpp:117 89 {*movsi_internal}
     (nil))
(insn 155 154 151 17 (set (reg:DI 5 di)
        (reg/f:DI 42 r13 [162])) tiles.cpp:117 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn:TI 151 155 159 17 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:160 num_floats ] [160])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 coordinates S4 A32])
        (reg/v:SI 44 r15 [orig:95 j ] [95])) tiles.cpp:115 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:160 num_floats ] [160])
        (nil)))
(insn 159 151 162 17 (parallel [
            (set (reg/v:SI 44 r15 [orig:95 j ] [95])
                (plus:SI (reg/v:SI 44 r15 [orig:95 j ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:100 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 162 159 156 17 (parallel [
            (set (reg:DI 6 bp [orig:91 ivtmp.132 ] [91])
                (plus:DI (reg:DI 6 bp [orig:91 ivtmp.132 ] [91])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 156 162 161 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z4hashPiiP15collision_table") [flags 0x1]  <function_decl 0x2b82f1f16800 hash>) [0 hash S1 A8])
            (const_int 0 [0]))) tiles.cpp:117 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 161 156 158 17 (var_location:SI j (reg/v:SI 44 r15 [orig:95 j ] [95])) -1
     (nil))
(insn:TI 158 161 163 17 (set (mem:SI (plus:DI (reg:DI 6 bp [orig:91 ivtmp.132 ] [91])
                (const_int -4 [0xfffffffffffffffc])) [0 MEM[base: _31, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:94 D.26056 ] [94])) tiles.cpp:117 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:94 D.26056 ] [94])
        (nil)))
(insn 163 158 164 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 44 r15 [orig:95 j ] [95])
            (reg/v:SI 41 r12 [orig:109 num_tilings ] [109]))) tiles.cpp:100 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 164 163 179 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 166)
            (pc))) tiles.cpp:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 166)
;;  succ:       10 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              18 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 18, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL)
;;  pred:       17 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              8 [9.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 179 164 180 18 50 "" [1 uses])
(note 180 179 273 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 273 180 274 18 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 274 273 275 18 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:120 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 376 [0x178])))
            (nil))))
(insn/f:TI 275 274 276 18 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:120 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 276 275 277 18 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:120 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 277 276 278 18 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:120 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 278 277 279 18 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:120 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 279 278 280 18 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:120 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 280 279 281 18 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:120 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 281 280 282 18 (simple_return) tiles.cpp:120 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 282 281 185)
;; basic block 19, loop depth 0, count 0, freq 23, maybe hot
;;  prev block 18, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [4.8%]  (CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 185 282 184 19 65 "" [1 uses])
(note 184 185 284 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn:TI 284 184 294 19 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:103 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 294 284 295 19 (set (pc)
        (label_ref 170)) 650 {jump}
     (nil)
 -> 170)
;;  succ:       17 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 295 294 0)

;; Function void collision_table::reset() (_ZN15collision_table5resetEv, funcdef_no=1065, decl_uid=23655, cgraph_uid=309)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 6 count 5 (    1)


void collision_table::reset()

Dataflow summary:
def_info->table_size = 26, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 17[flags]
;;  ref usage 	r0={3d,2u} r1={3d,4u} r2={3d,2u} r4={1d} r5={1d,6u,1e} r7={1d,4u} r17={5d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 48{27d,20u,1e} in 19{19 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d2(0){ }d5(1){ }d8(2){ }d9(4){ }d10(5){ }d11(7){ }d16(21){ }d17(22){ }d18(23){ }d19(24){ }d20(25){ }d21(26){ }d22(27){ }d23(28){ }d24(37){ }d25(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

( 2 3 )->[3]->( 3 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

( 2 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 11 to worklist
  Adding insn 33 to worklist
  Adding insn 24 to worklist
  Adding insn 49 to worklist
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 13 to worklist
Finished finding needed instructions:
processing block 4 lr out =  7 [sp]
processing block 3 lr out =  0 [ax] 1 [dx] 5 [di] 7 [sp]
  Adding insn 32 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 22 to worklist
processing block 2 lr out =  0 [ax] 1 [dx] 5 [di] 7 [sp]
  Adding insn 10 to worklist
  Adding insn 53 to worklist
  Adding insn 4 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 6 count 6 (  1.2)
;;   ======================================================
;;   -- basic block 2 from 9 to 11 -- after reload
;;   ======================================================

;;	  0--> b  0: i   9loc 0                                   :nothing
;;	  0--> b  0: i  53{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  10flags=cmp([di],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i   4dx=0x1                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i  11pc={(flags<=0)?L31:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 9
;;   new tail = 11

;;   ======================================================
;;   -- basic block 3 from 21 to 33 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21loc dx-0x1                              :nothing
;;	  0--> b  0: i  22cx=[di+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  24[cx+ax]=0xffffffffffffffff              :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  25loc dx                                  :nothing
;;	  3--> b  0: i  27loc D#10                                :nothing
;;	  3--> b  0: i  28cx=dx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  29{ax=ax+0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i  30{dx=dx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i  32flags=cmp(cx,[di])                      :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i  33pc={(flags<0)?L41:pc}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 21
;;   new tail = 33

;;   ======================================================
;;   -- basic block 4 from 13 to 49 -- after reload
;;   ======================================================

;;	  0--> b  0: i  13[di+0x18]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  14[di+0x20]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  15[di+0x28]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  49simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 13
;;   new tail = 49



starting the processing of deferred insns
ending the processing of deferred insns


void collision_table::reset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 17[flags]
;;  ref usage 	r0={3d,2u} r1={3d,4u} r2={3d,2u} r4={1d} r5={1d,6u,1e} r7={1d,4u} r17={5d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 48{27d,20u,1e} in 19{19 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(note 6 1 48 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 48 6 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 48 9 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 9 3 53 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 53 9 10 2 (parallel [
            (set (reg:DI 0 ax [orig:65 ivtmp.146 ] [65])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:202 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 10 53 4 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/j:DI (reg/f:DI 5 di [orig:66 this ] [66]) [0 this_5(D)->m+0 S8 A64])
            (const_int 0 [0]))) tiles.cpp:202 4 {*cmpdi_ccno_1}
     (nil))
(insn 4 10 11 2 (set (reg:DI 1 dx [orig:63 ivtmp.147 ] [63])
        (const_int 1 [0x1])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn:TI 11 4 41 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 31)
            (pc))) tiles.cpp:202 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 31)
;;  succ:       3 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              3 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 41 11 40 3 73 "" [1 uses])
(note 40 41 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 21 40 22 3 (var_location:SI i (plus:SI (reg:SI 1 dx [orig:63 ivtmp.147 ] [63])
        (const_int -1 [0xffffffffffffffff]))) -1
     (nil))
(insn:TI 22 21 24 3 (set (reg/f:DI 2 cx [orig:67 this_5(D)->data ] [67])
        (mem/f/j:DI (plus:DI (reg/f:DI 5 di [orig:66 this ] [66])
                (const_int 8 [0x8])) [0 this_5(D)->data+0 S8 A64])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 5 di [orig:66 this ] [66])
                (const_int 8 [0x8])) [0 this_5(D)->data+0 S8 A64])
        (nil)))
(insn:TI 24 22 25 3 (set (mem:DI (plus:DI (reg/f:DI 2 cx [orig:67 this_5(D)->data ] [67])
                (reg:DI 0 ax [orig:65 ivtmp.146 ] [65])) [0 *_10+0 S8 A64])
        (const_int -1 [0xffffffffffffffff])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:67 this_5(D)->data ] [67])
        (nil)))
(debug_insn 25 24 27 3 (var_location:SI D#10 (reg:SI 1 dx [orig:63 ivtmp.147 ] [63])) -1
     (nil))
(debug_insn 27 25 28 3 (var_location:SI i (debug_expr:SI D#10)) -1
     (nil))
(insn 28 27 29 3 (set (reg:DI 2 cx [orig:59 D.26075 ] [59])
        (reg:DI 1 dx [orig:63 ivtmp.147 ] [63])) tiles.cpp:202 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 0 ax [orig:65 ivtmp.146 ] [65])
                (plus:DI (reg:DI 0 ax [orig:65 ivtmp.146 ] [65])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 30 29 32 3 (parallel [
            (set (reg:DI 1 dx [orig:63 ivtmp.147 ] [63])
                (plus:DI (reg:DI 1 dx [orig:63 ivtmp.147 ] [63])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 32 30 33 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 2 cx [orig:59 D.26075 ] [59])
            (mem/j:DI (reg/f:DI 5 di [orig:66 this ] [66]) [0 this_5(D)->m+0 S8 A64]))) tiles.cpp:202 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:59 D.26075 ] [59])
        (nil)))
(jump_insn:TI 33 32 31 3 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) tiles.cpp:202 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 41)
;;  succ:       3 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              4 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, RTL)
;;  pred:       2 [9.0%]  (CAN_FALLTHRU)
;;              3 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 31 33 12 4 71 "" [1 uses])
(note 12 31 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 13 12 14 4 (set (mem/j:DI (plus:DI (reg/f:DI 5 di [orig:66 this ] [66])
                (const_int 24 [0x18])) [0 this_5(D)->calls+0 S8 A64])
        (const_int 0 [0])) tiles.cpp:203 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 4 (set (mem/j:DI (plus:DI (reg/f:DI 5 di [orig:66 this ] [66])
                (const_int 32 [0x20])) [0 this_5(D)->clearhits+0 S8 A64])
        (const_int 0 [0])) tiles.cpp:204 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 15 14 49 4 (set (mem/j:DI (plus:DI (reg/f:DI 5 di [orig:66 this ] [66])
                (const_int 40 [0x28])) [0 this_5(D)->collisions+0 S8 A64])
        (const_int 0 [0])) tiles.cpp:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:66 this ] [66])
        (nil)))
(jump_insn:TI 49 15 44 4 (simple_return) 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 44 49 0)

;; Function collision_table::collision_table(int, int) (_ZN15collision_tableC2Eii, funcdef_no=1067, decl_uid=23671, cgraph_uid=311)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 11 (  1.2)


collision_table::collision_table(int, int)

Dataflow summary:
def_info->table_size = 213, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={9d,8u,1e} r1={7d,3u} r2={5d} r3={3d,6u} r4={6d,7u} r5={10d,6u} r6={3d,5u,1e} r7={7d,18u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={12d,5u,1e} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={3d,3u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 291{227d,61u,3e} in 42{38 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 0 )->[2]->( 3 7 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 3 [bx] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]

( 2 )->[3]->( 8 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]

( 3 )->[4]->( 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]

( 6 )->[5]->( 8 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]

( 5 4 )->[6]->( 5 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]

( 6 2 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 5 3 )->[8]->( )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 95 to worklist
  Adding insn 94 to worklist
  Adding insn 93 to worklist
  Adding insn 17 to worklist
  Adding insn 105 to worklist
  Adding insn 24 to worklist
  Adding insn 49 to worklist
  Adding insn 68 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
  Adding insn 63 to worklist
  Adding insn 61 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
Finished finding needed instructions:
processing block 8 lr out =  7 [sp]
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
processing block 5 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
  Adding insn 91 to worklist
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 101 to worklist
  Adding insn 100 to worklist
  Adding insn 99 to worklist
  Adding insn 67 to worklist
  Adding insn 81 to worklist
  Adding insn 79 to worklist
  Adding insn 89 to worklist
  Adding insn 80 to worklist
  Adding insn 90 to worklist
  Adding insn 52 to worklist
processing block 6 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
  Adding insn 48 to worklist
  Adding insn 44 to worklist
processing block 4 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
  Adding insn 6 to worklist
processing block 3 lr out =  3 [bx] 4 [si] 7 [sp] 41 [r12]
  Adding insn 92 to worklist
processing block 2 lr out =  3 [bx] 4 [si] 7 [sp] 41 [r12]
  Adding insn 12 to worklist
  Adding insn 4 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 12 (  1.3)
deleting insn with uid = 96.
deleting insn with uid = 5.
;;   ======================================================
;;   -- basic block 2 from 93 to 13 -- after reload
;;   ======================================================

;;	  0--> b  0: i  11loc si                                  :nothing
;;	  0--> b  0: i  93[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  12flags=cmp(si,0x2)                       :athlon-direct,athlon-ieu
;;	  0--> b  0: i   4r12=dx                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i  94[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  95[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i   2bx=di                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  13pc={(flags<=0)?L50:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 93
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 92 to 17 -- after reload
;;   ======================================================

;;	  0--> b  0: i  92flags=cmp(si&0x1,0)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  17pc={(flags!=0)?L28:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 92
;;   new tail = 17

;;   ======================================================
;;   -- basic block 4 from 6 to 105 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6ax=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 105pc=L41                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 6
;;   new tail = 105

;;   ======================================================
;;   -- basic block 5 from 91 to 24 -- after reload
;;   ======================================================

;;	  0--> b  0: i  91flags=cmp(ax&0x1,0)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  24pc={(flags!=0)?L28:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 91
;;   new tail = 24

;;   ======================================================
;;   -- basic block 6 from 43 to 49 -- after reload
;;   ======================================================

;;	  0--> b  0: i  43loc ax                                  :nothing
;;	  0--> b  0: i  44{ax=ax>>0x1;clobber flags;}             :athlon-direct,athlon-ieu
;;	  0--> b  0: i  46loc ax                                  :nothing
;;	  1--> b  0: i  48flags=cmp(ax,0x2)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i  49pc={(flags>0)?L47:pc}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 43
;;   new tail = 49

deleting insn with uid = 102.
;;   ======================================================
;;   -- basic block 7 from 52 to 68 -- after reload
;;   ======================================================

;;	  0--> b  0: i  52bp=sxn(si)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i  89dx=0xfe0000000000000                    :athlon-direct,athlon-ieu
;;	  0--> b  0: i  80di=0xffffffffffffffff                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  90ax=bp*0x8                               :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  79flags=cmp(bp,dx)                        :athlon-direct,athlon-ieu
;;	  3--> b  0: i  81di={(leu(flags,0))?ax:di}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i  61ax=call [`_Znam']                       :athlon-vector,athlon-ieu
;;	  5--> b  0: i  66[bx+0x10]=r12                           :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  63[bx+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  67di=bx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  65[bx]=bp                                 :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  99bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i 100bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i 101r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 13--> b  0: i  68call [`_ZN15collision_table5resetEv']   :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 52
;;   new tail = 68

;;   ======================================================
;;   -- basic block 8 from 30 to 37 -- after reload
;;   ======================================================

;;	  0--> b  0: i  30loc `*.LC1'                             :nothing
;;	  0--> b  0: i  31dx=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  32si=`*.LC1'                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  33di=0x1                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 103{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  35ax=call [`__printf_chk']                :athlon-vector,athlon-ieu
;;	  3--> b  0: i 104{di=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  37call [`exit']                           :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 30
;;   new tail = 37



starting the processing of deferred insns
ending the processing of deferred insns


collision_table::collision_table(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={9d,8u,1e} r1={7d,3u} r2={5d} r3={3d,6u} r4={6d,7u} r5={10d,6u} r6={3d,5u,1e} r7={7d,18u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={12d,5u,1e} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={3d,3u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 291{227d,61u,3e} in 42{38 regular + 4 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 454, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 3 [bx] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
(note 8 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 8 11 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 11 5 93 2 (var_location:SI tmp (reg/v:SI 4 si [orig:69 size ] [69])) -1
     (nil))
(insn/f:TI 93 11 12 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:208 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 12 93 4 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 si [orig:69 size ] [69])
            (const_int 2 [0x2]))) tiles.cpp:210 7 {*cmpsi_1}
     (nil))
(insn 4 12 94 2 (set (reg/v:SI 41 r12 [orig:70 safety ] [70])
        (reg:SI 1 dx [ safety ])) tiles.cpp:208 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ safety ])
        (nil)))
(insn/f:TI 94 4 95 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:208 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 95 94 96 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:208 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 96 95 2 2 NOTE_INSN_PROLOGUE_END)
(insn 2 96 13 2 (set (reg/f:DI 3 bx [orig:68 this ] [68])
        (reg:DI 5 di [ this ])) tiles.cpp:208 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(jump_insn 13 2 14 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) tiles.cpp:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil)))
 -> 50)
;;  succ:       3 [95.5%]  (FALLTHRU,CAN_FALLTHRU)
;;              7 [4.5%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 430, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [95.5%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 15 14 92 3 NOTE_INSN_DELETED)
(insn:TI 92 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 4 si [orig:69 size ] [69])
                (const_int 1 [0x1]))
            (const_int 0 [0]))) tiles.cpp:211 382 {*testqi_1_maybe_si}
     (nil))
(jump_insn:TI 17 92 40 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 28)
            (pc))) tiles.cpp:211 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil)))
 -> 28)
;;  succ:       8 [0.0%]  (CAN_FALLTHRU)
;;              4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 430, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax]
;; live  kill	
(note 40 17 6 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 6 40 105 4 (set (reg/v:SI 0 ax [orig:62 size ] [62])
        (reg/v:SI 4 si [orig:69 size ] [69])) tiles.cpp:211 89 {*movsi_internal}
     (nil))
(jump_insn 105 6 106 4 (set (pc)
        (label_ref 41)) 650 {jump}
     (nil)
 -> 41)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]

(barrier 106 105 47)
;; basic block 5, loop depth 0, count 0, freq 9120, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [95.5%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 47 106 21 5 80 "" [1 uses])
(note 21 47 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 22 21 91 5 NOTE_INSN_DELETED)
(insn:TI 91 22 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 0 ax [orig:62 size ] [62])
                (const_int 1 [0x1]))
            (const_int 0 [0]))) tiles.cpp:211 382 {*testqi_1_maybe_si}
     (nil))
(jump_insn:TI 24 91 41 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 28)
            (pc))) tiles.cpp:211 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil)))
 -> 28)
;;  succ:       8 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              6 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]

;; basic block 6, loop depth 0, count 0, freq 9546, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              4 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 41 24 42 6 79 "" [1 uses])
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 43 42 44 6 (var_location:SI tmp (reg/v:SI 0 ax [orig:62 size ] [62])) -1
     (nil))
(insn:TI 44 43 46 6 (parallel [
            (set (reg/v:SI 0 ax [orig:62 size ] [62])
                (ashiftrt:SI (reg/v:SI 0 ax [orig:62 size ] [62])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:215 546 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 46 44 48 6 (var_location:SI tmp (reg/v:SI 0 ax [orig:62 size ] [62])) -1
     (nil))
(insn:TI 48 46 49 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 ax [orig:62 size ] [62])
            (const_int 2 [0x2]))) tiles.cpp:210 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 49 48 50 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) tiles.cpp:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil)))
 -> 47)
;;  succ:       5 [95.5%]  (CAN_FALLTHRU)
;;              7 [4.5%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 41 [r12]

;; basic block 7, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL)
;;  pred:       6 [4.5%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              2 [4.5%]  (CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
(code_label 50 49 51 7 76 "" [1 uses])
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 52 51 89 7 (set (reg:DI 6 bp [orig:75 size ] [75])
        (sign_extend:DI (reg/v:SI 4 si [orig:69 size ] [69]))) tiles.cpp:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 4 si [orig:69 size ] [69])
        (nil)))
(insn 89 52 80 7 (set (reg:DI 1 dx [73])
        (const_int 1143914305352105984 [0xfe0000000000000])) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (const_int 1143914305352105984 [0xfe0000000000000])
        (nil)))
(insn 80 89 90 7 (set (reg:DI 5 di [orig:59 iftmp.7 ] [59])
        (const_int -1 [0xffffffffffffffff])) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))
(insn:TI 90 80 79 7 (set (reg:DI 0 ax [76])
        (mult:DI (reg:DI 6 bp [orig:75 size ] [75])
            (const_int 8 [0x8]))) tiles.cpp:217 267 {*leadi}
     (nil))
(insn 79 90 81 7 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 6 bp [orig:75 size ] [75])
            (reg:DI 1 dx [73]))) tiles.cpp:217 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [73])
        (expr_list:REG_EQUAL (compare:CC (reg:DI 6 bp [orig:75 size ] [75])
                (const_int 1143914305352105984 [0xfe0000000000000]))
            (nil))))
(insn:TI 81 79 61 7 (set (reg:DI 5 di [orig:59 iftmp.7 ] [59])
        (if_then_else:DI (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [76])
            (reg:DI 5 di [orig:59 iftmp.7 ] [59]))) tiles.cpp:217 934 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:DI 0 ax [76])
            (expr_list:REG_EQUAL (if_then_else:DI (leu (reg:CC 17 flags)
                        (const_int 0 [0]))
                    (reg:DI 0 ax [76])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(call_insn:TI 61 81 66 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znam") [flags 0x41]  <function_decl 0x2b82f096c800 operator new []>) [0 operator new [] S1 A8])
            (const_int 0 [0]))) tiles.cpp:217 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 66 61 63 7 (set (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
                (const_int 16 [0x10])) [0 this_14(D)->safe+0 S4 A64])
        (reg/v:SI 41 r12 [orig:70 safety ] [70])) tiles.cpp:219 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 41 r12 [orig:70 safety ] [70])
        (nil)))
(insn 63 66 67 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
                (const_int 8 [0x8])) [0 this_14(D)->data+0 S8 A64])
        (reg/f:DI 0 ax [orig:64 D.26081 ] [64])) tiles.cpp:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.26081 ] [64])
        (nil)))
(insn 67 63 65 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:68 this ] [68])) tiles.cpp:220 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:68 this ] [68])
        (nil)))
(insn:TI 65 67 107 7 (set (mem/j:DI (reg/f:DI 3 bx [orig:68 this ] [68]) [0 this_14(D)->m+0 S8 A64])
        (reg:DI 6 bp [orig:75 size ] [75])) tiles.cpp:218 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:75 size ] [75])
        (nil)))
(note 107 65 99 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 99 107 100 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:221 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 100 99 101 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:221 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 101 100 68 7 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:221 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(call_insn/j:TI 68 101 69 7 (call (mem:QI (symbol_ref:DI ("_ZN15collision_table5resetEv") [flags 0x1]  <function_decl 0x2b82f1f05500 reset>) [0 reset S1 A8])
        (const_int 0 [0])) tiles.cpp:220 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 69 68 28)
;; basic block 8, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              3 [0.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(code_label 28 69 29 8 77 "" [2 uses])
(note 29 28 30 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 30 29 31 8 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b82f85a0130 *.LC1>)) -1
     (nil))
(insn:TI 31 30 32 8 (set (reg:SI 1 dx)
        (reg/v:SI 4 si [orig:69 size ] [69])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 4 si [orig:69 size ] [69])
        (nil)))
(insn 32 31 33 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b82f85a0130 *.LC1>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 103 8 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (nil))
(insn:TI 103 33 35 8 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 35 103 104 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x2b82f0908600 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_BR_PRED (use (reg:SI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (nil))))))
(insn:TI 104 35 37 8 (parallel [
            (set (reg:DI 5 di)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:213 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 37 104 38 8 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b82f08ee700 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) tiles.cpp:213 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 38 37 0)

;; Function collision_table::~collision_table() (_ZN15collision_tableD2Ev, funcdef_no=1070, decl_uid=23678, cgraph_uid=314)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


collision_table::~collision_table()

Dataflow summary:
def_info->table_size = 62, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,3u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 71{62d,9u,0e} in 5{4 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d7(4){ }d10(5){ }d11(7){ }d25(21){ }d27(22){ }d29(23){ }d31(24){ }d33(25){ }d35(26){ }d37(27){ }d39(28){ }d49(37){ }d51(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 2 )->[3]->( 1 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 2 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 3 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 11 to worklist
  Adding insn 19 to worklist
Finished finding needed instructions:
processing block 3 lr out =  7 [sp]
processing block 4 lr out =  7 [sp]
processing block 2 lr out =  5 [di] 7 [sp]
  Adding insn 7 to worklist
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
;;   ======================================================
;;   -- basic block 2 from 6 to 8 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6di=[di+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i   7flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i   8pc={(flags==0)?L15:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 6
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 11 to 11 -- after reload
;;   ======================================================

;;	  0--> b  0: i  11call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 11
;;   new tail = 11

;;   ======================================================
;;   -- basic block 4 from 19 to 19 -- after reload
;;   ======================================================

;;	  0--> b  0: i  19simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 19
;;   new tail = 19



starting the processing of deferred insns
ending the processing of deferred insns


collision_table::~collision_table()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,3u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 71{62d,9u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 4 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 17 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 17 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 7 2 (set (reg/f:DI 5 di [orig:59 D.26086 ] [59])
        (mem/f/j:DI (plus:DI (reg/f:DI 5 di [orig:60 this ] [60])
                (const_int 8 [0x8])) [0 this_3(D)->data+0 S8 A64])) tiles.cpp:224 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:59 D.26086 ] [59])
            (const_int 0 [0]))) tiles.cpp:224 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 15)
            (pc))) tiles.cpp:224 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil)))
 -> 15)
;;  succ:       3 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [21.6%]  (CAN_FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL)
;;  pred:       2 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 9 8 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn/j:TI 11 9 12 3 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x2b82f096ca00 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) tiles.cpp:224 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 12 11 15)
;; basic block 4, loop depth 0, count 0, freq 2165, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, RTL)
;;  pred:       2 [21.6%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 15 12 16 4 85 "" [1 uses])
(note 16 15 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 19 16 18 4 (simple_return) 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 18 19 0)

;; Function int collision_table::usage() (_ZN15collision_table5usageEv, funcdef_no=1072, decl_uid=23657, cgraph_uid=316)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)


int collision_table::usage()

Dataflow summary:
def_info->table_size = 28, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 17[flags]
;;  ref usage 	r0={5d,8u} r1={3d,4u} r2={2d,1u} r4={2d,1u} r5={1d,2u} r7={1d,6u} r17={6d,3u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 55{30d,25u,0e} in 24{24 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d4(0){ }d7(1){ }d9(2){ }d11(4){ }d12(5){ }d13(7){ }d18(21){ }d19(22){ }d20(23){ }d21(24){ }d22(25){ }d23(26){ }d24(27){ }d25(28){ }d26(37){ }d27(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 0 )->[2]->( 3 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]

( 4 3 )->[4]->( 4 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]

( 4 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 6 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 36 to worklist
  Adding insn 55 to worklist
  Adding insn 80 to worklist
  Adding insn 79 to worklist
  Adding insn 82 to worklist
  Adding insn 69 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [ax] 7 [sp]
processing block 4 lr out =  0 [ax] 1 [dx] 4 [si] 7 [sp]
  Adding insn 54 to worklist
  Adding insn 53 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 77 to worklist
processing block 3 lr out =  0 [ax] 1 [dx] 4 [si] 7 [sp]
  Adding insn 84 to worklist
  Adding insn 40 to worklist
  Adding insn 38 to worklist
processing block 6 lr out =  0 [ax] 7 [sp]
  Adding insn 83 to worklist
processing block 2 lr out =  0 [ax] 5 [di] 7 [sp]
  Adding insn 35 to worklist
  Adding insn 34 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 8 (  1.1)
;;   ======================================================
;;   -- basic block 2 from 32 to 36 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32loc 0                                   :nothing
;;	  0--> b  0: i  33loc 0                                   :nothing
;;	  0--> b  0: i  34ax=[di]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i  35flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  36pc={(flags<=0)?L72:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 32
;;   new tail = 36

deleting insn with uid = 39.
;;   ======================================================
;;   -- basic block 3 from 38 to 84 -- after reload
;;   ======================================================

;;	  0--> b  0: i  38dx=[di+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  40si=ax*0x8+dx                            :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i  84{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 38
;;   new tail = 84

;;   ======================================================
;;   -- basic block 4 from 42 to 55 -- after reload
;;   ======================================================

;;	  0--> b  0: i  42loc clobber                             :nothing
;;	  0--> b  0: i  43loc clobber                             :nothing
;;	  0--> b  0: i  46flags=cmp([dx],0xffffffffffffffff)      :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  77cx=ax+0x1                               :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  45loc clobber                             :nothing
;;	  4--> b  0: i  47ax={(flags!=0)?cx:ax}                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  51loc D#11                                :nothing
;;	  4--> b  0: i  52loc ax                                  :nothing
;;	  4--> b  0: i  53{dx=dx+0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  5--> b  0: i  54flags=cmp(dx,si)                        :athlon-direct,athlon-ieu
;;	  6--> b  0: i  55pc={(flags!=0)?L57:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 42
;;   new tail = 55

;;   ======================================================
;;   -- basic block 5 from 79 to 80 -- after reload
;;   ======================================================

;;	  0--> b  0: i  79use ax                                  :nothing
;;	  0--> b  0: i  80simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 79
;;   new tail = 80

;;   ======================================================
;;   -- basic block 6 from 83 to 82 -- after reload
;;   ======================================================

;;	  0--> b  0: i  83{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  69use ax                                  :nothing
;;	  1--> b  0: i  82simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 83
;;   new tail = 82



starting the processing of deferred insns
ending the processing of deferred insns


int collision_table::usage()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 17[flags]
;;  ref usage 	r0={5d,8u} r1={3d,4u} r2={2d,1u} r4={2d,1u} r5={1d,2u} r7={1d,6u} r17={6d,3u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 55{30d,25u,0e} in 24{24 regular + 0 call} insns.
(note 23 0 28 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 28 23 78 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 78 28 25 2 NOTE_INSN_PROLOGUE_END)
(note 25 78 32 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 32 25 33 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 33 32 34 2 (var_location:SI count (const_int 0 [0])) -1
     (nil))
(insn:TI 34 33 35 2 (set (reg:DI 0 ax [orig:87 D.26097 ] [87])
        (mem/j:DI (reg/f:DI 5 di [orig:92 this ] [92]) [0 this_6(D)->m+0 S8 A64])) tiles.cpp:229 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 35 34 36 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:DI 0 ax [orig:87 D.26097 ] [87])
            (const_int 0 [0]))) tiles.cpp:229 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 36 35 37 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 72)
            (pc))) tiles.cpp:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 72)
;;  succ:       3 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si]
;; live  kill	 17 [flags]
(note 37 36 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 39 37 38 3 NOTE_INSN_DELETED)
(insn:TI 38 39 40 3 (set (reg:DI 1 dx [orig:84 ivtmp.157 ] [84])
        (mem/f/j:DI (plus:DI (reg/f:DI 5 di [orig:92 this ] [92])
                (const_int 8 [0x8])) [0 this_6(D)->data+0 S8 A64])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:92 this ] [92])
        (nil)))
(insn:TI 40 38 84 3 (set (reg:DI 4 si [orig:88 D.26095 ] [88])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:87 D.26097 ] [87])
                (const_int 8 [0x8]))
            (reg:DI 1 dx [orig:84 ivtmp.157 ] [84]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:87 D.26097 ] [87])
        (nil)))
(insn 84 40 57 3 (parallel [
            (set (reg:DI 0 ax [orig:81 count ] [81])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:228 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 57 84 41 4 89 "" [1 uses])
(note 41 57 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 42 41 43 4 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 43 42 46 4 (var_location:SI count (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 46 43 77 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:DI (reg:DI 1 dx [orig:84 ivtmp.157 ] [84]) [0 MEM[base: _3, offset: 0B]+0 S8 A64])
            (const_int -1 [0xffffffffffffffff]))) 8 {*cmpdi_1}
     (nil))
(insn 77 46 45 4 (set (reg/v:SI 2 cx [orig:86 count ] [86])
        (plus:SI (reg/v:SI 0 ax [orig:81 count ] [81])
            (const_int 1 [0x1]))) tiles.cpp:232 266 {*leasi}
     (nil))
(debug_insn 45 77 47 4 (var_location:SI count (clobber (const_int 0 [0]))) tiles.cpp:232 -1
     (nil))
(insn:TI 47 45 51 4 (set (reg/v:SI 0 ax [orig:81 count ] [81])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/v:SI 2 cx [orig:86 count ] [86])
            (reg/v:SI 0 ax [orig:81 count ] [81]))) 933 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:86 count ] [86])
            (nil))))
(debug_insn 51 47 52 4 (var_location:SI i (debug_expr:SI D#11)) -1
     (nil))
(debug_insn 52 51 53 4 (var_location:SI count (reg/v:SI 0 ax [orig:81 count ] [81])) -1
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg:DI 1 dx [orig:84 ivtmp.157 ] [84])
                (plus:DI (reg:DI 1 dx [orig:84 ivtmp.157 ] [84])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 54 53 55 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:84 ivtmp.157 ] [84])
            (reg:DI 4 si [orig:88 D.26095 ] [88]))) tiles.cpp:229 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 55 54 74 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) tiles.cpp:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 57)
;;  succ:       4 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              5 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL)
;;  pred:       4 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(note 74 55 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 79 74 80 5 (use (reg/i:SI 0 ax)) -1
     (nil))
(jump_insn:TI 80 79 76 5 (simple_return) 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 76 80 72)
;; basic block 6, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [9.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 72 76 71 6 90 "" [1 uses])
(note 71 72 83 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 83 71 69 6 (parallel [
            (set (reg:DI 0 ax [orig:81 count ] [81])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:228 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 69 83 82 6 (use (reg/i:SI 0 ax)) tiles.cpp:236 -1
     (nil))
(jump_insn:TI 82 69 81 6 (simple_return) tiles.cpp:236 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 81 82 0)

;; Function void collision_table::print() (_ZN15collision_table5printEv, funcdef_no=1073, decl_uid=23659, cgraph_uid=317)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void collision_table::print()

Dataflow summary:
def_info->table_size = 116, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13]
;;  ref usage 	r0={4d,2u} r1={4d,1u} r2={4d,1u} r3={3d,3u} r4={4d,1u} r5={4d,6u} r6={3d,3u} r7={11d,18u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={4d,1u} r39={2d} r40={2d} r41={3d,3u} r42={3d,3u} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 179{136d,43u,0e} in 26{24 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 39 to worklist
  Adding insn 22 to worklist
  Adding insn 14 to worklist
  Adding insn 10 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
Finished finding needed instructions:
processing block 2 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
  Adding insn 41 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 13 to worklist
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 2 to worklist
  Adding insn 29 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
deleting insn with uid = 30.
deleting insn with uid = 3.
deleting insn with uid = 33.
;;   ======================================================
;;   -- basic block 2 from 25 to 39 -- after reload
;;   ======================================================

;;	  0--> b  0: i  25[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  26[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  27[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  28[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i   2bx=di                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i  29{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i   6r13=[di+0x28]                           :athlon-direct,athlon-load
;;	  8--> b  0: i   7r12=[di+0x18]                           :athlon-direct,athlon-load
;;	  9--> b  0: i   8bp=[di]                                 :athlon-direct,athlon-load
;;	 10--> b  0: i  10ax=call [`_ZN15collision_table5usageEv']:athlon-vector,athlon-ieu
;;	 10--> b  0: i  12loc `*.LC2'                             :nothing
;;	 11--> b  0: i  13dx=[bx+0x10]                            :athlon-direct,athlon-load
;;	 11--> b  0: i  19si=`*.LC2'                              :athlon-direct,athlon-agu,nothing
;;	 11--> b  0: i  14[sp]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  15r9=r12                                  :athlon-direct,athlon-ieu
;;	 12--> b  0: i  16r8=bp                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i  17cx=ax                                   :athlon-direct,athlon-ieu
;;	 13--> b  0: i  20di=0x1                                  :athlon-direct,athlon-ieu
;;	 13--> b  0: i  41{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 14--> b  0: i  22ax=call [`__printf_chk']                :athlon-vector,athlon-ieu
;;	 15--> b  0: i  34{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 16--> b  0: i  35bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 17--> b  0: i  36bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 18--> b  0: i  37r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 19--> b  0: i  38r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 20--> b  0: i  39simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 20
;;   new head = 25
;;   new tail = 39



starting the processing of deferred insns
ending the processing of deferred insns


void collision_table::print()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13]
;;  ref usage 	r0={4d,2u} r1={4d,1u} r2={4d,1u} r3={3d,3u} r4={4d,1u} r5={4d,6u} r6={3d,3u} r7={11d,18u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={4d,1u} r39={2d} r40={2d} r41={3d,3u} r42={3d,3u} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 179{136d,43u,0e} in 26{24 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 25 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 25 3 26 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tiles.cpp:238 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 26 25 27 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:238 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 27 26 28 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:238 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 28 27 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:238 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 28 29 2 (set (reg/f:DI 3 bx [orig:64 this ] [64])
        (reg:DI 5 di [ this ])) tiles.cpp:238 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 29 2 30 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:238 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 30 29 6 2 NOTE_INSN_PROLOGUE_END)
(insn 6 30 7 2 (set (reg:DI 42 r13 [orig:59 D.26101 ] [59])
        (mem/j:DI (plus:DI (reg/f:DI 5 di [orig:64 this ] [64])
                (const_int 40 [0x28])) [0 this_2(D)->collisions+0 S8 A64])) tiles.cpp:239 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 41 r12 [orig:60 D.26101 ] [60])
        (mem/j:DI (plus:DI (reg/f:DI 5 di [orig:64 this ] [64])
                (const_int 24 [0x18])) [0 this_2(D)->calls+0 S8 A64])) tiles.cpp:239 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 8 7 10 2 (set (reg:DI 6 bp [orig:61 D.26101 ] [61])
        (mem/j:DI (reg/f:DI 5 di [orig:64 this ] [64]) [0 this_2(D)->m+0 S8 A64])) tiles.cpp:239 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 10 8 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN15collision_table5usageEv") [flags 0x1]  <function_decl 0x2b82f1f05900 usage>) [0 usage S1 A8])
            (const_int 0 [0]))) tiles.cpp:239 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(debug_insn 12 10 13 2 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b82f85b8c78 *.LC2>)) tiles.cpp:239 -1
     (nil))
(insn:TI 13 12 19 2 (set (reg:SI 1 dx [orig:65 this_2(D)->safe ] [65])
        (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:64 this ] [64])
                (const_int 16 [0x10])) [0 this_2(D)->safe+0 S4 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:64 this ] [64])
        (nil)))
(insn 19 13 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b82f85b8c78 *.LC2>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (nil))
(insn 14 19 15 2 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 42 r13 [orig:59 D.26101 ] [59])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:59 D.26101 ] [59])
        (nil)))
(insn:TI 15 14 16 2 (set (reg:DI 38 r9)
        (reg:DI 41 r12 [orig:60 D.26101 ] [60])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:60 D.26101 ] [60])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 37 r8)
        (reg:DI 6 bp [orig:61 D.26101 ] [61])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:61 D.26101 ] [61])
        (nil)))
(insn 17 16 20 2 (set (reg:SI 2 cx)
        (reg:SI 0 ax [orig:62 D.26102 ] [62])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.26102 ] [62])
        (nil)))
(insn:TI 20 17 41 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 89 {*movsi_internal}
     (nil))
(insn 41 20 22 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 22 41 42 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x2b82f0908600 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 8 [0x8]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:104 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:SI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_BR_PRED (use (reg:SI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                    (nil))))))))))
(note 42 22 34 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 34 42 35 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:240 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(insn/f:TI 35 34 36 2 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:240 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 36 35 37 2 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:240 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 37 36 38 2 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:240 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 38 37 39 2 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:240 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 39 38 40 2 (simple_return) tiles.cpp:240 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 40 39 0)

;; Function void collision_table::save(int) (_ZN15collision_table4saveEi, funcdef_no=1074, decl_uid=23662, cgraph_uid=318)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 50.
deleting insn with uid = 4.
deleting insn with uid = 31.
deleting insn with uid = 56.
;;   ======================================================
;;   -- basic block 2 from 47 to 37 -- after reload
;;   ======================================================

;;	  0--> b  0: i  47[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   3bp=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i   7dx=0x8                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i   8si=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  48[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i   2bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i   9di=bp                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  49{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  5--> b  0: i  10ax=call [`write']                       :athlon-vector,athlon-ieu
;;	  6--> b  0: i  42si=bx+0x10                              :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i  14di=bp                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  12dx=0x4                                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i  15ax=call [`write']                       :athlon-vector,athlon-ieu
;;	  9--> b  0: i  43si=bx+0x18                              :athlon-direct,athlon-agu,nothing
;;	  9--> b  0: i  19di=bp                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i  17dx=0x8                                  :athlon-direct,athlon-ieu
;;	 11--> b  0: i  20ax=call [`write']                       :athlon-vector,athlon-ieu
;;	 12--> b  0: i  44si=bx+0x20                              :athlon-direct,athlon-agu,nothing
;;	 12--> b  0: i  24di=bp                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i  22dx=0x8                                  :athlon-direct,athlon-ieu
;;	 14--> b  0: i  25ax=call [`write']                       :athlon-vector,athlon-ieu
;;	 15--> b  0: i  45si=bx+0x28                              :athlon-direct,athlon-agu,nothing
;;	 15--> b  0: i  29di=bp                                   :athlon-direct,athlon-ieu
;;	 15--> b  0: i  27dx=0x8                                  :athlon-direct,athlon-ieu
;;	 17--> b  0: i  30ax=call [`write']                       :athlon-vector,athlon-ieu
;;	 18--> b  0: i  41ax=[bx]                                 :athlon-direct,athlon-load
;;	 18--> b  0: i  33si=[bx+0x8]                             :athlon-direct,athlon-load
;;	 18--> b  0: i  53{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 19--> b  0: i  54bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 20--> b  0: i  36di=bp                                   :athlon-direct,athlon-ieu
;;	 21--> b  0: i  55bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 22--> b  0: i  46dx=ax*0x8                               :athlon-direct,athlon-agu,nothing
;;	 25--> b  0: i  37ax=call [`write']                       :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 25
;;   new head = 47
;;   new tail = 37



starting the processing of deferred insns
ending the processing of deferred insns


void collision_table::save(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={8d,1u} r1={13d,6u} r2={7d} r3={3d,8u} r4={13d,7u} r5={13d,8u} r6={3d,8u} r7={7d,16u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={8d} r18={6d} r19={6d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 367{313d,54u,0e} in 33{27 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 31 2 NOTE_INSN_FUNCTION_BEG)
(note 31 4 47 2 NOTE_INSN_DELETED)
(insn/f:TI 47 31 3 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:242 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 3 47 7 2 (set (reg/v:SI 6 bp [orig:69 file ] [69])
        (reg:SI 4 si [ file ])) tiles.cpp:242 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ file ])
        (nil)))
(insn 7 3 8 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:243 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 8 7 48 2 (set (reg:DI 4 si)
        (reg/f:DI 5 di [orig:68 this ] [68])) tiles.cpp:243 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:68 this ] [68])
        (nil)))
(insn/f:TI 48 8 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:242 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 48 9 2 (set (reg/f:DI 3 bx [orig:68 this ] [68])
        (reg:DI 5 di [ this ])) tiles.cpp:242 87 {*movdi_internal_rex64}
     (nil))
(insn 9 2 49 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:243 89 {*movsi_internal}
     (nil))
(insn/f:TI 49 9 50 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:242 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 50 49 10 2 NOTE_INSN_PROLOGUE_END)
(call_insn:TI 10 50 42 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:243 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 42 10 14 2 (set (reg/f:DI 4 si [orig:70 D.26107 ] [70])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 16 [0x10]))) tiles.cpp:244 267 {*leadi}
     (nil))
(insn 14 42 12 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:244 89 {*movsi_internal}
     (nil))
(insn 12 14 15 2 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) tiles.cpp:244 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 15 12 43 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:244 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 43 15 19 2 (set (reg/f:DI 4 si [orig:71 D.26106 ] [71])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 24 [0x18]))) tiles.cpp:245 267 {*leadi}
     (nil))
(insn 19 43 17 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:245 89 {*movsi_internal}
     (nil))
(insn 17 19 20 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:245 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 20 17 44 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:245 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 44 20 24 2 (set (reg/f:DI 4 si [orig:72 D.26106 ] [72])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 32 [0x20]))) tiles.cpp:246 267 {*leadi}
     (nil))
(insn 24 44 22 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:246 89 {*movsi_internal}
     (nil))
(insn 22 24 25 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:246 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 25 22 45 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:246 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 45 25 29 2 (set (reg/f:DI 4 si [orig:73 D.26106 ] [73])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 40 [0x28]))) tiles.cpp:247 267 {*leadi}
     (nil))
(insn 29 45 27 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:247 89 {*movsi_internal}
     (nil))
(insn 27 29 30 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) tiles.cpp:247 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 30 27 41 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:247 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 41 30 33 2 (set (reg:DI 0 ax [77])
        (mem/j:DI (reg/f:DI 3 bx [orig:68 this ] [68]) [0 this_1(D)->m+0 S8 A64])) tiles.cpp:248 87 {*movdi_internal_rex64}
     (nil))
(insn 33 41 57 2 (set (reg/f:DI 4 si [orig:76 this_1(D)->data ] [76])
        (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
                (const_int 8 [0x8])) [0 this_1(D)->data+0 S8 A64])) tiles.cpp:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:68 this ] [68])
        (nil)))
(note 57 33 53 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f 53 57 54 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:249 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 54 53 36 2 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:249 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn:TI 36 54 55 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:69 file ] [69])
        (nil)))
(insn/f:TI 55 36 46 2 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:249 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn:TI 46 55 37 2 (set (reg:DI 1 dx [orig:74 D.26109 ] [74])
        (mult:DI (reg:DI 0 ax [77])
            (const_int 8 [0x8]))) tiles.cpp:248 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(call_insn/j:TI 37 46 38 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("write") [flags 0x41]  <function_decl 0x2b82f1e8d900 write>) [0 write S1 A8])
            (const_int 0 [0]))) tiles.cpp:248 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 38 37 0)

;; Function void collision_table::restore(int) (_ZN15collision_table7restoreEi, funcdef_no=1075, decl_uid=23665, cgraph_uid=319)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 68.
deleting insn with uid = 4.
deleting insn with uid = 49.
deleting insn with uid = 74.
;;   ======================================================
;;   -- basic block 2 from 65 to 55 -- after reload
;;   ======================================================

;;	  0--> b  0: i  65[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   3bp=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i   7loc bp                                  :nothing
;;	  0--> b  0: i   8loc di                                  :nothing
;;	  0--> b  0: i   9loc 0x8                                 :nothing
;;	  0--> b  0: i  10dx=0x8                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i  11si=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  66[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i   2bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  12di=bp                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  67{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  5--> b  0: i  13ax=call [`*read']                       :athlon-vector,athlon-ieu
;;	  5--> b  0: i  14loc bp                                  :nothing
;;	  5--> b  0: i  15loc bx+0x10                             :nothing
;;	  5--> b  0: i  16loc 0x4                                 :nothing
;;	  6--> b  0: i  60si=bx+0x10                              :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i  20di=bp                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  18dx=0x4                                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i  21ax=call [`*read']                       :athlon-vector,athlon-ieu
;;	  8--> b  0: i  22loc bp                                  :nothing
;;	  8--> b  0: i  23loc bx+0x18                             :nothing
;;	  8--> b  0: i  24loc 0x8                                 :nothing
;;	  9--> b  0: i  61si=bx+0x18                              :athlon-direct,athlon-agu,nothing
;;	  9--> b  0: i  28di=bp                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i  26dx=0x8                                  :athlon-direct,athlon-ieu
;;	 11--> b  0: i  29ax=call [`*read']                       :athlon-vector,athlon-ieu
;;	 11--> b  0: i  30loc bp                                  :nothing
;;	 11--> b  0: i  31loc bx+0x20                             :nothing
;;	 11--> b  0: i  32loc 0x8                                 :nothing
;;	 12--> b  0: i  62si=bx+0x20                              :athlon-direct,athlon-agu,nothing
;;	 12--> b  0: i  36di=bp                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i  34dx=0x8                                  :athlon-direct,athlon-ieu
;;	 14--> b  0: i  37ax=call [`*read']                       :athlon-vector,athlon-ieu
;;	 14--> b  0: i  38loc bp                                  :nothing
;;	 14--> b  0: i  39loc bx+0x28                             :nothing
;;	 14--> b  0: i  40loc 0x8                                 :nothing
;;	 15--> b  0: i  63si=bx+0x28                              :athlon-direct,athlon-agu,nothing
;;	 15--> b  0: i  44di=bp                                   :athlon-direct,athlon-ieu
;;	 15--> b  0: i  42dx=0x8                                  :athlon-direct,athlon-ieu
;;	 17--> b  0: i  45ax=call [`*read']                       :athlon-vector,athlon-ieu
;;	 17--> b  0: i  46loc bp                                  :nothing
;;	 17--> b  0: i  47loc [bx+0x8]                            :nothing
;;	 17--> b  0: i  48loc [bx]<<0x3                           :nothing
;;	 18--> b  0: i  59ax=[bx]                                 :athlon-direct,athlon-load
;;	 18--> b  0: i  51si=[bx+0x8]                             :athlon-direct,athlon-load
;;	 18--> b  0: i  71{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 19--> b  0: i  72bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 20--> b  0: i  54di=bp                                   :athlon-direct,athlon-ieu
;;	 21--> b  0: i  73bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 22--> b  0: i  64dx=ax*0x8                               :athlon-direct,athlon-agu,nothing
;;	 25--> b  0: i  55ax=call [`*read']                       :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 25
;;   new head = 65
;;   new tail = 55



starting the processing of deferred insns
ending the processing of deferred insns


void collision_table::restore(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={8d,1u} r1={13d,6u} r2={7d} r3={3d,14u} r4={13d,7u} r5={13d,9u} r6={3d,14u} r7={7d,16u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={8d} r18={6d} r19={6d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 380{313d,67u,0e} in 51{45 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 49 2 NOTE_INSN_FUNCTION_BEG)
(note 49 4 65 2 NOTE_INSN_DELETED)
(insn/f:TI 65 49 3 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:251 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 3 65 7 2 (set (reg/v:SI 6 bp [orig:69 file ] [69])
        (reg:SI 4 si [ file ])) tiles.cpp:251 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ file ])
        (nil)))
(debug_insn 7 3 8 2 (var_location:SI __fd (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:252 -1
     (nil))
(debug_insn 8 7 9 2 (var_location:DI __buf (reg/f:DI 5 di [orig:68 this ] [68])) tiles.cpp:252 -1
     (nil))
(debug_insn 9 8 10 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:252 -1
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 11 10 66 2 (set (reg:DI 4 si)
        (reg/f:DI 5 di [orig:68 this ] [68])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:68 this ] [68])
        (nil)))
(insn/f:TI 66 11 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:251 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 66 12 2 (set (reg/f:DI 3 bx [orig:68 this ] [68])
        (reg:DI 5 di [ this ])) tiles.cpp:251 87 {*movdi_internal_rex64}
     (nil))
(insn 12 2 67 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(insn/f:TI 67 12 68 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:251 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 68 67 13 2 NOTE_INSN_PROLOGUE_END)
(call_insn:TI 13 68 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 14 13 15 2 (var_location:SI __fd (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:253 -1
     (nil))
(debug_insn 15 14 16 2 (var_location:DI __buf (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
        (const_int 16 [0x10]))) tiles.cpp:253 -1
     (nil))
(debug_insn 16 15 60 2 (var_location:DI __nbytes (const_int 4 [0x4])) tiles.cpp:253 -1
     (nil))
(insn:TI 60 16 20 2 (set (reg/f:DI 4 si [orig:70 D.26113 ] [70])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 16 [0x10]))) tiles.cpp:253 267 {*leadi}
     (nil))
(insn 20 60 18 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(insn 18 20 21 2 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 21 18 22 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 22 21 23 2 (var_location:SI __fd (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:254 -1
     (nil))
(debug_insn 23 22 24 2 (var_location:DI __buf (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
        (const_int 24 [0x18]))) tiles.cpp:254 -1
     (nil))
(debug_insn 24 23 61 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:254 -1
     (nil))
(insn:TI 61 24 28 2 (set (reg/f:DI 4 si [orig:71 D.26112 ] [71])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 24 [0x18]))) tiles.cpp:254 267 {*leadi}
     (nil))
(insn 28 61 26 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(insn 26 28 29 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 29 26 30 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 30 29 31 2 (var_location:SI __fd (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:255 -1
     (nil))
(debug_insn 31 30 32 2 (var_location:DI __buf (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
        (const_int 32 [0x20]))) tiles.cpp:255 -1
     (nil))
(debug_insn 32 31 62 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:255 -1
     (nil))
(insn:TI 62 32 36 2 (set (reg/f:DI 4 si [orig:72 D.26112 ] [72])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 32 [0x20]))) tiles.cpp:255 267 {*leadi}
     (nil))
(insn 36 62 34 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(insn 34 36 37 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 37 34 38 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 38 37 39 2 (var_location:SI __fd (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:256 -1
     (nil))
(debug_insn 39 38 40 2 (var_location:DI __buf (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
        (const_int 40 [0x28]))) tiles.cpp:256 -1
     (nil))
(debug_insn 40 39 63 2 (var_location:DI __nbytes (const_int 8 [0x8])) tiles.cpp:256 -1
     (nil))
(insn:TI 63 40 44 2 (set (reg/f:DI 4 si [orig:73 D.26112 ] [73])
        (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 40 [0x28]))) tiles.cpp:256 267 {*leadi}
     (nil))
(insn 44 63 42 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (nil))
(insn 42 44 45 2 (set (reg:DI 1 dx)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 45 42 46 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 46 45 47 2 (var_location:SI __fd (reg/v:SI 6 bp [orig:69 file ] [69])) tiles.cpp:257 -1
     (nil))
(debug_insn 47 46 48 2 (var_location:DI __buf (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
            (const_int 8 [0x8])) [0 this_1(D)->data+0 S8 A64])) tiles.cpp:257 -1
     (nil))
(debug_insn 48 47 59 2 (var_location:DI __nbytes (ashift:DI (mem/j:DI (reg/f:DI 3 bx [orig:68 this ] [68]) [0 this_1(D)->m+0 S8 A64])
        (const_int 3 [0x3]))) tiles.cpp:257 -1
     (nil))
(insn:TI 59 48 51 2 (set (reg:DI 0 ax [77])
        (mem/j:DI (reg/f:DI 3 bx [orig:68 this ] [68]) [0 this_1(D)->m+0 S8 A64])) tiles.cpp:257 87 {*movdi_internal_rex64}
     (nil))
(insn 51 59 75 2 (set (reg/f:DI 4 si [orig:76 this_1(D)->data ] [76])
        (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:68 this ] [68])
                (const_int 8 [0x8])) [0 this_1(D)->data+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:68 this ] [68])
        (nil)))
(note 75 51 71 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f 71 75 72 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:258 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 72 71 54 2 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:258 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn:TI 54 72 73 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:69 file ] [69])) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:69 file ] [69])
        (nil)))
(insn/f:TI 73 54 64 2 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:258 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn:TI 64 73 55 2 (set (reg:DI 1 dx [orig:74 D.26115 ] [74])
        (mult:DI (reg:DI 0 ax [77])
            (const_int 8 [0x8]))) tiles.cpp:257 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(call_insn/j:TI 55 64 56 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x2b82f1ee4500 __read_alias>) [0 __read_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/unistd.h:44 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 56 55 0)

;; Function void tiles(int*, int, int, float*, int) (_Z5tilesPiiiPfi, funcdef_no=1076, decl_uid=23709, cgraph_uid=320)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 22.
deleting insn with uid = 6.
deleting insn with uid = 7.
deleting insn with uid = 11.
deleting insn with uid = 25.
;;   ======================================================
;;   -- basic block 2 from 21 to 27 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  12r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  10[sp]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  18call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  4--> b  0: i  26{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  5--> b  0: i  27simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 21
;;   new tail = 27



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, int, float*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 80{65d,15u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  gen 	 7 [sp] 38 [r9]
;; live  kill	 17 [flags]
(note 8 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 8 7 2 NOTE_INSN_DELETED)
(note 7 6 11 2 NOTE_INSN_FUNCTION_BEG)
(note 11 7 21 2 NOTE_INSN_DELETED)
(insn/f:TI 21 11 22 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:275 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 22 21 12 2 NOTE_INSN_PROLOGUE_END)
(insn 12 22 10 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:276 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn:TI 10 12 18 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:276 89 {*movsi_internal}
     (nil))
(call_insn:TI 18 10 29 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:276 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 29 18 26 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 26 29 27 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:277 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 27 26 28 2 (simple_return) tiles.cpp:277 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 28 27 0)

;; Function void tiles(int*, int, collision_table*, float*, int) (_Z5tilesPiiP15collision_tablePfi, funcdef_no=1077, decl_uid=23715, cgraph_uid=321)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 22.
deleting insn with uid = 6.
deleting insn with uid = 7.
deleting insn with uid = 11.
deleting insn with uid = 25.
;;   ======================================================
;;   -- basic block 2 from 21 to 27 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  12r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  10[sp]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  18call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  4--> b  0: i  26{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  5--> b  0: i  27simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 21
;;   new tail = 27



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, collision_table*, float*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 80{65d,15u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  gen 	 7 [sp] 38 [r9]
;; live  kill	 17 [flags]
(note 8 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 8 7 2 NOTE_INSN_DELETED)
(note 7 6 11 2 NOTE_INSN_FUNCTION_BEG)
(note 11 7 21 2 NOTE_INSN_DELETED)
(insn/f:TI 21 11 22 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:278 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 22 21 12 2 NOTE_INSN_PROLOGUE_END)
(insn 12 22 10 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:279 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn:TI 10 12 18 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:279 89 {*movsi_internal}
     (nil))
(call_insn:TI 18 10 29 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:279 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 29 18 26 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 26 29 27 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:280 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 27 26 28 2 (simple_return) tiles.cpp:280 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 28 27 0)

;; Function void tiles(int*, int, int, float*, int, int) (_Z5tilesPiiiPfii, funcdef_no=1078, decl_uid=23722, cgraph_uid=322)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 25.
deleting insn with uid = 6.
deleting insn with uid = 7.
deleting insn with uid = 8.
deleting insn with uid = 28.
;;   ======================================================
;;   -- basic block 2 from 24 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i  24{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  11ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  12[ax]=r9                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  13[sp]=0x1                                :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  15r9=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  21call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  5--> b  0: i  29{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i  30simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 24
;;   new tail = 30



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, int, float*, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 84{66d,18u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 7 [sp] 38 [r9]
;; live  kill	 17 [flags]
(note 9 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 9 7 2 NOTE_INSN_DELETED)
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 24 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 24 8 25 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:283 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 25 24 11 2 NOTE_INSN_PROLOGUE_END)
(insn 11 25 12 2 (set (reg/f:DI 0 ax [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:284 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 12 11 13 2 (set (mem/j/c:SI (reg/f:DI 0 ax [65]) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:284 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 13 12 15 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:285 89 {*movsi_internal}
     (nil))
(insn 15 13 21 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [65])) tiles.cpp:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [65])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(call_insn:TI 21 15 32 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:285 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 32 21 29 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 29 32 30 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:286 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 30 29 31 2 (simple_return) tiles.cpp:286 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 31 30 0)

;; Function void tiles(int*, int, collision_table*, float*, int, int) (_Z5tilesPiiP15collision_tablePfii, funcdef_no=1079, decl_uid=23729, cgraph_uid=323)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 25.
deleting insn with uid = 6.
deleting insn with uid = 7.
deleting insn with uid = 8.
deleting insn with uid = 28.
;;   ======================================================
;;   -- basic block 2 from 24 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i  24{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  11ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  12[ax]=r9                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  13[sp]=0x1                                :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  15r9=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  21call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  5--> b  0: i  29{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i  30simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 24
;;   new tail = 30



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, collision_table*, float*, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 84{66d,18u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 7 [sp] 38 [r9]
;; live  kill	 17 [flags]
(note 9 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 9 7 2 NOTE_INSN_DELETED)
(note 7 6 8 2 NOTE_INSN_DELETED)
(note 8 7 24 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 24 8 25 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:287 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 25 24 11 2 NOTE_INSN_PROLOGUE_END)
(insn 11 25 12 2 (set (reg/f:DI 0 ax [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:288 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 12 11 13 2 (set (mem/j/c:SI (reg/f:DI 0 ax [65]) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:288 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 13 12 15 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:289 89 {*movsi_internal}
     (nil))
(insn 15 13 21 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [65])) tiles.cpp:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [65])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(call_insn:TI 21 15 32 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:289 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 32 21 29 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 29 32 30 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:290 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 30 29 31 2 (simple_return) tiles.cpp:290 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 31 30 0)

;; Function void tiles(int*, int, int, float*, int, int, int) (_Z5tilesPiiiPfiii, funcdef_no=1080, decl_uid=23737, cgraph_uid=324)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 12 to 24 -- after reload
;;   ======================================================

;;	  0--> b  0: i  12ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  13[ax]=r9                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  28r9=[sp+0x8]                             :athlon-direct,athlon-load
;;	  6--> b  0: i  15[ax+0x4]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  18r9=ax                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  16[sp+0x8]=0x2                            :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  24call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 12
;;   new tail = 24



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, int, float*, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1u,1e} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={4d,3u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 81{63d,17u,1e} in 7{6 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 38 [r9]
;; live  kill	
(note 10 1 29 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 29 10 6 2 NOTE_INSN_PROLOGUE_END)
(note 6 29 7 2 NOTE_INSN_DELETED)
(note 7 6 9 2 NOTE_INSN_DELETED)
(note 9 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 12 9 13 2 (set (reg/f:DI 0 ax [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:294 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 13 12 28 2 (set (mem/j/c:SI (reg/f:DI 0 ax [66]) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:294 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 28 13 15 2 (set (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 h2+0 S4 A64])) tiles.cpp:295 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn:TI 15 28 18 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [66])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 38 r9 [orig:65 h2 ] [65])) tiles.cpp:295 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (nil)))
(insn 18 15 16 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [66])) tiles.cpp:296 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [66])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 16 18 24 2 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:296 89 {*movsi_internal}
     (nil))
(call_insn/j:TI 24 16 25 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:296 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg/f:DI 16 argp)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_DEAD (reg:SI 4 si)
                        (expr_list:REG_DEAD (reg:DI 2 cx)
                            (expr_list:REG_DEAD (reg:SI 1 dx)
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 25 24 0)

;; Function void tiles(int*, int, collision_table*, float*, int, int, int) (_Z5tilesPiiP15collision_tablePfiii, funcdef_no=1081, decl_uid=23745, cgraph_uid=325)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 12 to 24 -- after reload
;;   ======================================================

;;	  0--> b  0: i  12ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  13[ax]=r9                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  28r9=[sp+0x8]                             :athlon-direct,athlon-load
;;	  6--> b  0: i  15[ax+0x4]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  18r9=ax                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  16[sp+0x8]=0x2                            :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  24call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 12
;;   new tail = 24



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, collision_table*, float*, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1u,1e} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={4d,3u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 81{63d,17u,1e} in 7{6 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 38 [r9]
;; live  kill	
(note 10 1 29 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 29 10 6 2 NOTE_INSN_PROLOGUE_END)
(note 6 29 7 2 NOTE_INSN_DELETED)
(note 7 6 9 2 NOTE_INSN_DELETED)
(note 9 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 12 9 13 2 (set (reg/f:DI 0 ax [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:299 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 13 12 28 2 (set (mem/j/c:SI (reg/f:DI 0 ax [66]) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:299 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 28 13 15 2 (set (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 h2+0 S4 A64])) tiles.cpp:300 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn:TI 15 28 18 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [66])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 38 r9 [orig:65 h2 ] [65])) tiles.cpp:300 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (nil)))
(insn 18 15 16 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [66])) tiles.cpp:301 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [66])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 16 18 24 2 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:301 89 {*movsi_internal}
     (nil))
(call_insn/j:TI 24 16 25 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:301 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg/f:DI 16 argp)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_DEAD (reg:SI 4 si)
                        (expr_list:REG_DEAD (reg:DI 2 cx)
                            (expr_list:REG_DEAD (reg:DI 1 dx)
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 25 24 0)

;; Function void tiles(int*, int, int, float*, int, int, int, int) (_Z5tilesPiiiPfiiii, funcdef_no=1082, decl_uid=23754, cgraph_uid=326)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 13 to 27 -- after reload
;;   ======================================================

;;	  0--> b  0: i  13ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  14[ax]=r9                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  32r9=[sp+0x8]                             :athlon-direct,athlon-load
;;	  6--> b  0: i  16[ax+0x4]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  31r9=[sp+0x10]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  18[ax+0x8]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  21r9=ax                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i  19[sp+0x8]=0x3                            :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  27call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 13
;;   new tail = 27



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, int, float*, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={3d,4u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1u,2e} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={5d,4u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 86{64d,20u,2e} in 9{8 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 38 [r9]
;; live  kill	
(note 11 1 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 33 11 6 2 NOTE_INSN_PROLOGUE_END)
(note 6 33 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_DELETED)
(note 10 7 13 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 13 10 14 2 (set (reg/f:DI 0 ax [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:306 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 14 13 32 2 (set (mem/j/c:SI (reg/f:DI 0 ax [67]) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:306 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 32 14 16 2 (set (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 h2+0 S4 A64])) tiles.cpp:307 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn:TI 16 32 31 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 38 r9 [orig:65 h2 ] [65])) tiles.cpp:307 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (nil)))
(insn 31 16 18 2 (set (reg/v:SI 38 r9 [orig:66 h3 ] [66])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 h3+0 S4 A64])) tiles.cpp:308 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 h3+0 S4 A64])
        (nil)))
(insn:TI 18 31 21 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg/v:SI 38 r9 [orig:66 h3 ] [66])) tiles.cpp:308 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 38 r9 [orig:66 h3 ] [66])
        (nil)))
(insn 21 18 19 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [67])) tiles.cpp:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [67])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 19 21 27 2 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:309 89 {*movsi_internal}
     (nil))
(call_insn/j:TI 27 19 28 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:309 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg/f:DI 16 argp)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_DEAD (reg:SI 4 si)
                        (expr_list:REG_DEAD (reg:DI 2 cx)
                            (expr_list:REG_DEAD (reg:SI 1 dx)
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 28 27 0)

;; Function void tiles(int*, int, collision_table*, float*, int, int, int, int) (_Z5tilesPiiP15collision_tablePfiiii, funcdef_no=1083, decl_uid=23763, cgraph_uid=327)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 13 to 27 -- after reload
;;   ======================================================

;;	  0--> b  0: i  13ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  14[ax]=r9                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  32r9=[sp+0x8]                             :athlon-direct,athlon-load
;;	  6--> b  0: i  16[ax+0x4]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  31r9=[sp+0x10]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  18[ax+0x8]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  21r9=ax                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i  19[sp+0x8]=0x3                            :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  27call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 13
;;   new tail = 27



starting the processing of deferred insns
ending the processing of deferred insns


void tiles(int*, int, collision_table*, float*, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={3d,4u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={2d,1u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1u,2e} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={5d,4u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 86{64d,20u,2e} in 9{8 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 38 [r9]
;; live  kill	
(note 11 1 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 33 11 6 2 NOTE_INSN_PROLOGUE_END)
(note 6 33 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_DELETED)
(note 10 7 13 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 13 10 14 2 (set (reg/f:DI 0 ax [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:312 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 14 13 32 2 (set (mem/j/c:SI (reg/f:DI 0 ax [67]) [0 i_tmp_arr+0 S4 A256])
        (reg:SI 38 r9 [ h1 ])) tiles.cpp:312 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h1 ])
        (nil)))
(insn 32 14 16 2 (set (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 h2+0 S4 A64])) tiles.cpp:313 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [0 h2+0 S4 A64])
        (nil)))
(insn:TI 16 32 31 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg/v:SI 38 r9 [orig:65 h2 ] [65])) tiles.cpp:313 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 38 r9 [orig:65 h2 ] [65])
        (nil)))
(insn 31 16 18 2 (set (reg/v:SI 38 r9 [orig:66 h3 ] [66])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 h3+0 S4 A64])) tiles.cpp:314 89 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 h3+0 S4 A64])
        (nil)))
(insn:TI 18 31 21 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg/v:SI 38 r9 [orig:66 h3 ] [66])) tiles.cpp:314 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 38 r9 [orig:66 h3 ] [66])
        (nil)))
(insn 21 18 19 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [67])) tiles.cpp:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [67])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 19 21 27 2 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:315 89 {*movsi_internal}
     (nil))
(call_insn/j:TI 27 19 28 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:315 659 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg/f:DI 16 argp)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_DEAD (reg:SI 4 si)
                        (expr_list:REG_DEAD (reg:DI 2 cx)
                            (expr_list:REG_DEAD (reg:DI 1 dx)
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 16 argp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 28 27 0)

;; Function void tiles1(int*, int, int, float) (_Z6tiles1Piiif, funcdef_no=1084, decl_uid=23768, cgraph_uid=328)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 24.
deleting insn with uid = 6.
deleting insn with uid = 12.
deleting insn with uid = 27.
;;   ======================================================
;;   -- basic block 2 from 23 to 29 -- after reload
;;   ======================================================

;;	  0--> b  0: i  23{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i   9cx=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  13r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  14r8=0x1                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  10[cx]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  11[sp]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  20call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  6--> b  0: i  28{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  7--> b  0: i  29simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 23
;;   new tail = 29



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, int, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 84{67d,17u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; live  gen 	 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 7 12 2 NOTE_INSN_FUNCTION_BEG)
(note 12 6 23 2 NOTE_INSN_DELETED)
(insn/f:TI 23 12 24 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:319 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 24 23 9 2 NOTE_INSN_PROLOGUE_END)
(insn 9 24 13 2 (set (reg/f:DI 2 cx [63])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:320 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 9 14 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:321 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn:TI 14 13 10 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:321 89 {*movsi_internal}
     (nil))
(insn:TI 10 14 11 2 (set (mem/j/c:SF (reg/f:DI 2 cx [63]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:320 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 11 10 20 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:321 89 {*movsi_internal}
     (nil))
(call_insn:TI 20 11 31 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:321 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 31 20 28 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 28 31 29 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:322 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 29 28 30 2 (simple_return) tiles.cpp:322 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 30 29 0)

;; Function void tiles1(int*, int, collision_table*, float) (_Z6tiles1PiiP15collision_tablef, funcdef_no=1085, decl_uid=23773, cgraph_uid=329)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 24.
deleting insn with uid = 6.
deleting insn with uid = 12.
deleting insn with uid = 27.
;;   ======================================================
;;   -- basic block 2 from 23 to 29 -- after reload
;;   ======================================================

;;	  0--> b  0: i  23{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i   9cx=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  13r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  14r8=0x1                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  10[cx]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  11[sp]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  20call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  6--> b  0: i  28{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  7--> b  0: i  29simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 23
;;   new tail = 29



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, collision_table*, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 84{67d,17u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; live  gen 	 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 7 12 2 NOTE_INSN_FUNCTION_BEG)
(note 12 6 23 2 NOTE_INSN_DELETED)
(insn/f:TI 23 12 24 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:323 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 24 23 9 2 NOTE_INSN_PROLOGUE_END)
(insn 9 24 13 2 (set (reg/f:DI 2 cx [63])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:324 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 9 14 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:325 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn:TI 14 13 10 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:325 89 {*movsi_internal}
     (nil))
(insn:TI 10 14 11 2 (set (mem/j/c:SF (reg/f:DI 2 cx [63]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:324 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 11 10 20 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:325 89 {*movsi_internal}
     (nil))
(call_insn:TI 20 11 31 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:325 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 31 20 28 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 28 31 29 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:326 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 29 28 30 2 (simple_return) tiles.cpp:326 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 30 29 0)

;; Function void tiles1(int*, int, int, float, int) (_Z6tiles1Piiifi, funcdef_no=1086, decl_uid=23779, cgraph_uid=330)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 27.
deleting insn with uid = 7.
deleting insn with uid = 30.
;;   ======================================================
;;   -- basic block 2 from 26 to 32 -- after reload
;;   ======================================================

;;	  0--> b  0: i  26{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  10ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  12r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  17r8=0x1                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  11[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  13[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  14[sp]=0x1                                :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  19cx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  23call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  6--> b  0: i  31{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  7--> b  0: i  32simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 26
;;   new tail = 32



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, int, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 88{68d,20u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 7 8 26 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 26 7 27 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:329 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 27 26 10 2 NOTE_INSN_PROLOGUE_END)
(insn 10 27 12 2 (set (reg/f:DI 0 ax [64])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:330 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 10 17 2 (set (reg/f:DI 38 r9 [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:331 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 17 12 11 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:332 89 {*movsi_internal}
     (nil))
(insn:TI 11 17 13 2 (set (mem/j/c:SF (reg/f:DI 0 ax [64]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:330 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 13 11 14 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [65]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:63 h1 ] [63])) tiles.cpp:331 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:63 h1 ] [63])
        (nil)))
(insn 14 13 19 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:332 89 {*movsi_internal}
     (nil))
(insn:TI 19 14 23 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [64])) tiles.cpp:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [64])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 23 19 34 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:332 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 34 23 31 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 31 34 32 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:333 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 32 31 33 2 (simple_return) tiles.cpp:333 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 33 32 0)

;; Function void tiles1(int*, int, collision_table*, float, int) (_Z6tiles1PiiP15collision_tablefi, funcdef_no=1087, decl_uid=23785, cgraph_uid=331)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 27.
deleting insn with uid = 7.
deleting insn with uid = 30.
;;   ======================================================
;;   -- basic block 2 from 26 to 32 -- after reload
;;   ======================================================

;;	  0--> b  0: i  26{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  10ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  12r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  17r8=0x1                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  11[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  13[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  14[sp]=0x1                                :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  19cx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  23call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  6--> b  0: i  31{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  7--> b  0: i  32simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 26
;;   new tail = 32



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, collision_table*, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 88{68d,20u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 7 8 26 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 26 7 27 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:334 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 27 26 10 2 NOTE_INSN_PROLOGUE_END)
(insn 10 27 12 2 (set (reg/f:DI 0 ax [64])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:335 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 12 10 17 2 (set (reg/f:DI 38 r9 [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:336 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 17 12 11 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:337 89 {*movsi_internal}
     (nil))
(insn:TI 11 17 13 2 (set (mem/j/c:SF (reg/f:DI 0 ax [64]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:335 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 13 11 14 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [65]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:63 h1 ] [63])) tiles.cpp:336 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:63 h1 ] [63])
        (nil)))
(insn 14 13 19 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:337 89 {*movsi_internal}
     (nil))
(insn:TI 19 14 23 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [64])) tiles.cpp:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [64])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 23 19 34 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:337 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 34 23 31 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 31 34 32 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:338 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 32 31 33 2 (simple_return) tiles.cpp:338 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 33 32 0)

;; Function void tiles1(int*, int, int, float, int, int) (_Z6tiles1Piiifii, funcdef_no=1088, decl_uid=23792, cgraph_uid=332)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 30.
deleting insn with uid = 7.
deleting insn with uid = 8.
deleting insn with uid = 33.
;;   ======================================================
;;   -- basic block 2 from 29 to 35 -- after reload
;;   ======================================================

;;	  0--> b  0: i  29{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  11ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  13r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  12[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  14[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  16[r9+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  22cx=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  17[sp]=0x2                                :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  20r8=0x1                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  26call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  6--> b  0: i  34{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  7--> b  0: i  35simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 29
;;   new tail = 35



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, int, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,3u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 90{68d,22u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 9 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 7 9 8 2 NOTE_INSN_DELETED)
(note 8 7 29 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 29 8 30 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:341 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 30 29 11 2 NOTE_INSN_PROLOGUE_END)
(insn 11 30 13 2 (set (reg/f:DI 0 ax [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:342 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 11 12 2 (set (reg/f:DI 38 r9 [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:343 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 12 13 14 2 (set (mem/j/c:SF (reg/f:DI 0 ax [65]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:342 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 14 12 16 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [66]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:63 h1 ] [63])) tiles.cpp:343 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:63 h1 ] [63])
        (nil)))
(insn 16 14 22 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 38 r9 [66])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:344 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 22 16 17 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [65])) tiles.cpp:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [65])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 17 22 20 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:345 89 {*movsi_internal}
     (nil))
(insn 20 17 26 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:345 89 {*movsi_internal}
     (nil))
(call_insn:TI 26 20 37 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:345 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 37 26 34 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 34 37 35 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:346 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 35 34 36 2 (simple_return) tiles.cpp:346 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 36 35 0)

;; Function void tiles1(int*, int, collision_table*, float, int, int) (_Z6tiles1PiiP15collision_tablefii, funcdef_no=1089, decl_uid=23799, cgraph_uid=333)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 30.
deleting insn with uid = 7.
deleting insn with uid = 8.
deleting insn with uid = 33.
;;   ======================================================
;;   -- basic block 2 from 29 to 35 -- after reload
;;   ======================================================

;;	  0--> b  0: i  29{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  11ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  13r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  12[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  14[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  16[r9+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  22cx=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  17[sp]=0x2                                :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  20r8=0x1                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  26call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  6--> b  0: i  34{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  7--> b  0: i  35simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 29
;;   new tail = 35



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, collision_table*, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,3u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 90{68d,22u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 9 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 7 9 8 2 NOTE_INSN_DELETED)
(note 8 7 29 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 29 8 30 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:347 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 30 29 11 2 NOTE_INSN_PROLOGUE_END)
(insn 11 30 13 2 (set (reg/f:DI 0 ax [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:348 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 13 11 12 2 (set (reg/f:DI 38 r9 [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:349 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 12 13 14 2 (set (mem/j/c:SF (reg/f:DI 0 ax [65]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:348 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 14 12 16 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [66]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:63 h1 ] [63])) tiles.cpp:349 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:63 h1 ] [63])
        (nil)))
(insn 16 14 22 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 38 r9 [66])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 22 16 17 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [65])) tiles.cpp:351 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [65])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn 17 22 20 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:351 89 {*movsi_internal}
     (nil))
(insn 20 17 26 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:351 89 {*movsi_internal}
     (nil))
(call_insn:TI 26 20 37 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:351 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 37 26 34 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 34 37 35 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:352 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 35 34 36 2 (simple_return) tiles.cpp:352 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 36 35 0)

;; Function void tiles1(int*, int, int, float, int, int, int) (_Z6tiles1Piiifiii, funcdef_no=1090, decl_uid=23807, cgraph_uid=334)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 33.
deleting insn with uid = 7.
deleting insn with uid = 8.
deleting insn with uid = 9.
deleting insn with uid = 36.
;;   ======================================================
;;   -- basic block 2 from 32 to 38 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  12r10=[const(unspec[`f_tmp_arr'] 2)]      :athlon-direct,athlon-load
;;	  0--> b  0: i  14ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  13[r10]=xmm0                              :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  15[ax]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  17[ax+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  19[ax+0x8]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  23r8=0x1                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i  20[sp]=0x3                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  22r9=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  25cx=r10                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i  29call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  7--> b  0: i  37{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  38simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 32
;;   new tail = 38



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, int, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={3d,4u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={2d,2u} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 94{69d,25u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  kill	 17 [flags]
(note 10 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 7 10 8 2 NOTE_INSN_DELETED)
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 32 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 32 9 33 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:355 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 33 32 12 2 NOTE_INSN_PROLOGUE_END)
(insn 12 33 14 2 (set (reg/f:DI 39 r10 [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:356 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 12 13 2 (set (reg/f:DI 0 ax [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:357 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 13 14 15 2 (set (mem/j/c:SF (reg/f:DI 39 r10 [66]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:356 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 15 13 17 2 (set (mem/j/c:SI (reg/f:DI 0 ax [67]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:63 h1 ] [63])) tiles.cpp:357 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:63 h1 ] [63])
        (nil)))
(insn 17 15 19 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:358 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 19 17 23 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:359 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 23 19 20 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:360 89 {*movsi_internal}
     (nil))
(insn 20 23 22 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:360 89 {*movsi_internal}
     (nil))
(insn:TI 22 20 25 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [67])) tiles.cpp:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [67])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 25 22 29 2 (set (reg:DI 2 cx)
        (reg/f:DI 39 r10 [66])) tiles.cpp:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [66])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 29 25 40 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:360 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 40 29 37 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 37 40 38 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:361 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 38 37 39 2 (simple_return) tiles.cpp:361 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 39 38 0)

;; Function void tiles1(int*, int, collision_table*, float, int, int, int) (_Z6tiles1PiiP15collision_tablefiii, funcdef_no=1091, decl_uid=23815, cgraph_uid=335)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 33.
deleting insn with uid = 7.
deleting insn with uid = 8.
deleting insn with uid = 9.
deleting insn with uid = 36.
;;   ======================================================
;;   -- basic block 2 from 32 to 38 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  12r10=[const(unspec[`f_tmp_arr'] 2)]      :athlon-direct,athlon-load
;;	  0--> b  0: i  14ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  13[r10]=xmm0                              :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  15[ax]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  17[ax+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  19[ax+0x8]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  23r8=0x1                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i  20[sp]=0x3                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  22r9=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  25cx=r10                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i  29call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  7--> b  0: i  37{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  38simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 32
;;   new tail = 38



starting the processing of deferred insns
ending the processing of deferred insns


void tiles1(int*, int, collision_table*, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={3d,4u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={2d,2u} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 94{69d,25u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  kill	 17 [flags]
(note 10 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 7 10 8 2 NOTE_INSN_DELETED)
(note 8 7 9 2 NOTE_INSN_DELETED)
(note 9 8 32 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 32 9 33 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:362 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 33 32 12 2 NOTE_INSN_PROLOGUE_END)
(insn 12 33 14 2 (set (reg/f:DI 39 r10 [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:363 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 14 12 13 2 (set (reg/f:DI 0 ax [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:364 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 13 14 15 2 (set (mem/j/c:SF (reg/f:DI 39 r10 [66]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:363 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 15 13 17 2 (set (mem/j/c:SI (reg/f:DI 0 ax [67]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:63 h1 ] [63])) tiles.cpp:364 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:63 h1 ] [63])
        (nil)))
(insn 17 15 19 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:365 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 19 17 23 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [67])
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:366 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 23 19 20 2 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) tiles.cpp:367 89 {*movsi_internal}
     (nil))
(insn 20 23 22 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:367 89 {*movsi_internal}
     (nil))
(insn:TI 22 20 25 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [67])) tiles.cpp:367 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [67])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 25 22 29 2 (set (reg:DI 2 cx)
        (reg/f:DI 39 r10 [66])) tiles.cpp:367 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [66])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 29 25 40 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:367 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 40 29 37 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 37 40 38 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:368 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 38 37 39 2 (simple_return) tiles.cpp:368 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 39 38 0)

;; Function void tiles2(int*, int, int, float, float) (_Z6tiles2Piiiff, funcdef_no=1092, decl_uid=23821, cgraph_uid=336)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 27.
deleting insn with uid = 6.
deleting insn with uid = 7.
deleting insn with uid = 15.
deleting insn with uid = 30.
;;   ======================================================
;;   -- basic block 2 from 26 to 32 -- after reload
;;   ======================================================

;;	  0--> b  0: i  26{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  10cx=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  16r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  17r8=0x2                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  11[cx]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  13[cx+0x4]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  14[sp]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  23call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  7--> b  0: i  31{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  32simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 26
;;   new tail = 32



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, int, float, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={2d,1u} r2={3d,3u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 86{67d,19u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 8 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 8 7 2 NOTE_INSN_DELETED)
(note 7 6 15 2 NOTE_INSN_FUNCTION_BEG)
(note 15 7 26 2 NOTE_INSN_DELETED)
(insn/f:TI 26 15 27 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:371 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 27 26 10 2 NOTE_INSN_PROLOGUE_END)
(insn 10 27 16 2 (set (reg/f:DI 2 cx [64])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:372 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 16 10 17 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:374 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn:TI 17 16 11 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:374 89 {*movsi_internal}
     (nil))
(insn:TI 11 17 13 2 (set (mem/j/c:SF (reg/f:DI 2 cx [64]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:372 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn:TI 13 11 14 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 2 cx [64])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:373 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 14 13 23 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:374 89 {*movsi_internal}
     (nil))
(call_insn:TI 23 14 34 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:374 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 34 23 31 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 31 34 32 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:375 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 32 31 33 2 (simple_return) tiles.cpp:375 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 33 32 0)

;; Function void tiles2(int*, int, collision_table*, float, float) (_Z6tiles2PiiP15collision_tableff, funcdef_no=1093, decl_uid=23827, cgraph_uid=337)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 27.
deleting insn with uid = 6.
deleting insn with uid = 7.
deleting insn with uid = 15.
deleting insn with uid = 30.
;;   ======================================================
;;   -- basic block 2 from 26 to 32 -- after reload
;;   ======================================================

;;	  0--> b  0: i  26{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  10cx=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  16r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  17r8=0x2                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  11[cx]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  13[cx+0x4]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  14[sp]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  23call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  7--> b  0: i  31{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  32simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 26
;;   new tail = 32



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, collision_table*, float, float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={2d} r1={2d,1u} r2={3d,3u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 86{67d,19u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 8 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 8 7 2 NOTE_INSN_DELETED)
(note 7 6 15 2 NOTE_INSN_FUNCTION_BEG)
(note 15 7 26 2 NOTE_INSN_DELETED)
(insn/f:TI 26 15 27 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:376 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 27 26 10 2 NOTE_INSN_PROLOGUE_END)
(insn 10 27 16 2 (set (reg/f:DI 2 cx [64])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:377 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 16 10 17 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:379 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
        (nil)))
(insn:TI 17 16 11 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:379 89 {*movsi_internal}
     (nil))
(insn:TI 11 17 13 2 (set (mem/j/c:SF (reg/f:DI 2 cx [64]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:377 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn:TI 13 11 14 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 2 cx [64])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:378 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 14 13 23 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 0 [0])) tiles.cpp:379 89 {*movsi_internal}
     (nil))
(call_insn:TI 23 14 34 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:379 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 34 23 31 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 31 34 32 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:380 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 32 31 33 2 (simple_return) tiles.cpp:380 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 33 32 0)

;; Function void tiles2(int*, int, int, float, float, int) (_Z6tiles2Piiiffi, funcdef_no=1094, decl_uid=23834, cgraph_uid=338)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 30.
deleting insn with uid = 6.
deleting insn with uid = 8.
deleting insn with uid = 33.
;;   ======================================================
;;   -- basic block 2 from 29 to 35 -- after reload
;;   ======================================================

;;	  0--> b  0: i  29{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  11ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  15r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  20r8=0x2                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  12[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  16[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  22cx=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  14[ax+0x4]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  17[sp]=0x1                                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  26call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  7--> b  0: i  34{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  35simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 29
;;   new tail = 35



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, int, float, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 90{68d,22u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 9 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 9 8 2 NOTE_INSN_DELETED)
(note 8 6 29 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 29 8 30 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:383 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 30 29 11 2 NOTE_INSN_PROLOGUE_END)
(insn 11 30 15 2 (set (reg/f:DI 0 ax [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:384 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 15 11 20 2 (set (reg/f:DI 38 r9 [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:386 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 20 15 12 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:387 89 {*movsi_internal}
     (nil))
(insn:TI 12 20 16 2 (set (mem/j/c:SF (reg/f:DI 0 ax [65]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:384 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 16 12 22 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [67]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:64 h1 ] [64])) tiles.cpp:386 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:64 h1 ] [64])
        (nil)))
(insn 22 16 14 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [65])) tiles.cpp:387 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [65])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn:TI 14 22 17 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 0 ax [65])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:385 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 17 14 26 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:387 89 {*movsi_internal}
     (nil))
(call_insn:TI 26 17 37 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:387 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 37 26 34 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 34 37 35 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:388 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 35 34 36 2 (simple_return) tiles.cpp:388 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 36 35 0)

;; Function void tiles2(int*, int, collision_table*, float, float, int) (_Z6tiles2PiiP15collision_tableffi, funcdef_no=1095, decl_uid=23841, cgraph_uid=339)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 30.
deleting insn with uid = 6.
deleting insn with uid = 8.
deleting insn with uid = 33.
;;   ======================================================
;;   -- basic block 2 from 29 to 35 -- after reload
;;   ======================================================

;;	  0--> b  0: i  29{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  11ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  15r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  1--> b  0: i  20r8=0x2                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  12[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  16[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  22cx=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  14[ax+0x4]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  17[sp]=0x1                                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  26call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  7--> b  0: i  34{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  35simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 29
;;   new tail = 35



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, collision_table*, float, float, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,2u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 90{68d,22u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 9 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 9 8 2 NOTE_INSN_DELETED)
(note 8 6 29 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 29 8 30 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:389 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 30 29 11 2 NOTE_INSN_PROLOGUE_END)
(insn 11 30 15 2 (set (reg/f:DI 0 ax [65])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:390 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 15 11 20 2 (set (reg/f:DI 38 r9 [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:392 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 20 15 12 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:393 89 {*movsi_internal}
     (nil))
(insn:TI 12 20 16 2 (set (mem/j/c:SF (reg/f:DI 0 ax [65]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:390 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 16 12 22 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [67]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:64 h1 ] [64])) tiles.cpp:392 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:64 h1 ] [64])
        (nil)))
(insn 22 16 14 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [65])) tiles.cpp:393 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [65])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(insn:TI 14 22 17 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 0 ax [65])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:391 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 17 14 26 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 1 [0x1])) tiles.cpp:393 89 {*movsi_internal}
     (nil))
(call_insn:TI 26 17 37 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:393 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 37 26 34 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 34 37 35 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:394 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 35 34 36 2 (simple_return) tiles.cpp:394 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 36 35 0)

;; Function void tiles2(int*, int, int, float, float, int, int) (_Z6tiles2Piiiffii, funcdef_no=1096, decl_uid=23849, cgraph_uid=340)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 33.
deleting insn with uid = 6.
deleting insn with uid = 8.
deleting insn with uid = 9.
deleting insn with uid = 36.
;;   ======================================================
;;   -- basic block 2 from 32 to 38 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  12ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  16r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  13[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  17[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  19[r9+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  15[ax+0x4]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  23r8=0x2                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i  20[sp]=0x2                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  25cx=ax                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  29call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  7--> b  0: i  37{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  38simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 32
;;   new tail = 38



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, int, float, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,3u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 92{68d,24u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 10 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 10 8 2 NOTE_INSN_DELETED)
(note 8 6 9 2 NOTE_INSN_DELETED)
(note 9 8 32 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 32 9 33 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:397 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 33 32 12 2 NOTE_INSN_PROLOGUE_END)
(insn 12 33 16 2 (set (reg/f:DI 0 ax [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:398 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 16 12 13 2 (set (reg/f:DI 38 r9 [68])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:400 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 13 16 17 2 (set (mem/j/c:SF (reg/f:DI 0 ax [66]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:398 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 17 13 19 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [68]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:64 h1 ] [64])) tiles.cpp:400 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:64 h1 ] [64])
        (nil)))
(insn 19 17 15 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 38 r9 [68])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:401 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 15 19 23 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 0 ax [66])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:399 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 23 15 20 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:402 89 {*movsi_internal}
     (nil))
(insn 20 23 25 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:402 89 {*movsi_internal}
     (nil))
(insn:TI 25 20 29 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [66])) tiles.cpp:402 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [66])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 29 25 40 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:402 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 40 29 37 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 37 40 38 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:403 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 38 37 39 2 (simple_return) tiles.cpp:403 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 39 38 0)

;; Function void tiles2(int*, int, collision_table*, float, float, int, int) (_Z6tiles2PiiP15collision_tableffii, funcdef_no=1097, decl_uid=23857, cgraph_uid=341)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 33.
deleting insn with uid = 6.
deleting insn with uid = 8.
deleting insn with uid = 9.
deleting insn with uid = 36.
;;   ======================================================
;;   -- basic block 2 from 32 to 38 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  12ax=[const(unspec[`f_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  0--> b  0: i  16r9=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  13[ax]=xmm0                               :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  17[r9]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  19[r9+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  15[ax+0x4]=xmm1                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  23r8=0x2                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i  20[sp]=0x2                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  25cx=ax                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  29call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  7--> b  0: i  37{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  38simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 32
;;   new tail = 38



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, collision_table*, float, float, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,3u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 92{68d,24u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 10 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 10 8 2 NOTE_INSN_DELETED)
(note 8 6 9 2 NOTE_INSN_DELETED)
(note 9 8 32 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 32 9 33 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:404 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 33 32 12 2 NOTE_INSN_PROLOGUE_END)
(insn 12 33 16 2 (set (reg/f:DI 0 ax [66])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:405 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 16 12 13 2 (set (reg/f:DI 38 r9 [68])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:407 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 13 16 17 2 (set (mem/j/c:SF (reg/f:DI 0 ax [66]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:405 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 17 13 19 2 (set (mem/j/c:SI (reg/f:DI 38 r9 [68]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:64 h1 ] [64])) tiles.cpp:407 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:64 h1 ] [64])
        (nil)))
(insn 19 17 15 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 38 r9 [68])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:408 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 15 19 23 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 0 ax [66])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:406 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 23 15 20 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:409 89 {*movsi_internal}
     (nil))
(insn 20 23 25 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 2 [0x2])) tiles.cpp:409 89 {*movsi_internal}
     (nil))
(insn:TI 25 20 29 2 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [66])) tiles.cpp:409 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [66])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 29 25 40 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:409 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 40 29 37 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 37 40 38 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:410 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 38 37 39 2 (simple_return) tiles.cpp:410 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 39 38 0)

;; Function void tiles2(int*, int, int, float, float, int, int, int) (_Z6tiles2Piiiffiii, funcdef_no=1098, decl_uid=23866, cgraph_uid=342)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 36.
deleting insn with uid = 6.
deleting insn with uid = 8.
deleting insn with uid = 9.
deleting insn with uid = 10.
deleting insn with uid = 39.
;;   ======================================================
;;   -- basic block 2 from 35 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  35{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  13r10=[const(unspec[`f_tmp_arr'] 2)]      :athlon-direct,athlon-load
;;	  0--> b  0: i  17ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  14[r10]=xmm0                              :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  18[ax]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  20[ax+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  16[r10+0x4]=xmm1                          :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  22[ax+0x8]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  26r8=0x2                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  23[sp]=0x3                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  25r9=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  28cx=r10                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i  32call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  7--> b  0: i  40{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  41simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 35
;;   new tail = 41



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, int, float, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={3d,4u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={2d,3u} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 96{69d,27u,0e} in 15{14 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  kill	 17 [flags]
(note 11 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 11 8 2 NOTE_INSN_DELETED)
(note 8 6 9 2 NOTE_INSN_DELETED)
(note 9 8 10 2 NOTE_INSN_DELETED)
(note 10 9 35 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 35 10 36 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:413 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 36 35 13 2 NOTE_INSN_PROLOGUE_END)
(insn 13 36 17 2 (set (reg/f:DI 39 r10 [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:414 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 17 13 14 2 (set (reg/f:DI 0 ax [69])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:416 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 14 17 18 2 (set (mem/j/c:SF (reg/f:DI 39 r10 [67]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:414 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 18 14 20 2 (set (mem/j/c:SI (reg/f:DI 0 ax [69]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:64 h1 ] [64])) tiles.cpp:416 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:64 h1 ] [64])
        (nil)))
(insn 20 18 16 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [69])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:417 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 16 20 22 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 39 r10 [67])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:415 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 22 16 26 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [69])
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:418 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 26 22 23 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:419 89 {*movsi_internal}
     (nil))
(insn:TI 23 26 25 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:419 89 {*movsi_internal}
     (nil))
(insn 25 23 28 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [69])) tiles.cpp:419 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [69])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 28 25 32 2 (set (reg:DI 2 cx)
        (reg/f:DI 39 r10 [67])) tiles.cpp:419 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [67])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 32 28 43 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x1]  <function_decl 0x2b82f1f05e00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:419 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 43 32 40 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 40 43 41 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:420 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 41 40 42 2 (simple_return) tiles.cpp:420 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 42 41 0)

;; Function void tiles2(int*, int, collision_table*, float, float, int, int, int) (_Z6tiles2PiiP15collision_tableffiii, funcdef_no=1099, decl_uid=23875, cgraph_uid=343)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 36.
deleting insn with uid = 6.
deleting insn with uid = 8.
deleting insn with uid = 9.
deleting insn with uid = 10.
deleting insn with uid = 39.
;;   ======================================================
;;   -- basic block 2 from 35 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  35{sp=sp-0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  13r10=[const(unspec[`f_tmp_arr'] 2)]      :athlon-direct,athlon-load
;;	  0--> b  0: i  17ax=[const(unspec[`i_tmp_arr'] 2)]       :athlon-direct,athlon-load
;;	  3--> b  0: i  14[r10]=xmm0                              :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  3--> b  0: i  18[ax]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  20[ax+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  16[r10+0x4]=xmm1                          :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	  4--> b  0: i  22[ax+0x8]=r9                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  26r8=0x2                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  23[sp]=0x3                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  25r9=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  28cx=r10                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i  32call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	  7--> b  0: i  40{sp=sp+0x18;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  41simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 35
;;   new tail = 41



starting the processing of deferred insns
ending the processing of deferred insns


void tiles2(int*, int, collision_table*, float, float, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={3d,4u} r1={2d,1u} r2={3d,2u} r4={2d,1u} r5={2d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r21={2d,1u} r22={2d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,2u} r38={3d,2u} r39={2d,3u} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 96{69d,27u,0e} in 15{14 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  kill	 17 [flags]
(note 11 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 11 8 2 NOTE_INSN_DELETED)
(note 8 6 9 2 NOTE_INSN_DELETED)
(note 9 8 10 2 NOTE_INSN_DELETED)
(note 10 9 35 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 35 10 36 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:421 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -24 [0xffffffffffffffe8])))
            (nil))))
(note 36 35 13 2 NOTE_INSN_PROLOGUE_END)
(insn 13 36 17 2 (set (reg/f:DI 39 r10 [67])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:422 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn 17 13 14 2 (set (reg/f:DI 0 ax [69])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tiles.cpp:424 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 14 17 18 2 (set (mem/j/c:SF (reg/f:DI 39 r10 [67]) [0 f_tmp_arr+0 S4 A256])
        (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])) tiles.cpp:422 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/v:SF 21 xmm0 [orig:62 f1 ] [62])
        (nil)))
(insn 18 14 20 2 (set (mem/j/c:SI (reg/f:DI 0 ax [69]) [0 i_tmp_arr+0 S4 A256])
        (reg/v:SI 2 cx [orig:64 h1 ] [64])) tiles.cpp:424 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:64 h1 ] [64])
        (nil)))
(insn 20 18 16 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [69])
                (const_int 4 [0x4])) [0 i_tmp_arr+4 S4 A32])
        (reg:SI 37 r8 [ h2 ])) tiles.cpp:425 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ h2 ])
        (nil)))
(insn:TI 16 20 22 2 (set (mem/j/c:SF (plus:DI (reg/f:DI 39 r10 [67])
                (const_int 4 [0x4])) [0 f_tmp_arr+4 S4 A32])
        (reg:SF 22 xmm1 [ f2 ])) tiles.cpp:423 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [ f2 ])
        (nil)))
(insn 22 16 26 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 0 ax [69])
                (const_int 8 [0x8])) [0 i_tmp_arr+8 S4 A64])
        (reg:SI 38 r9 [ h3 ])) tiles.cpp:426 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ h3 ])
        (nil)))
(insn 26 22 23 2 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) tiles.cpp:427 89 {*movsi_internal}
     (nil))
(insn:TI 23 26 25 2 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (const_int 3 [0x3])) tiles.cpp:427 89 {*movsi_internal}
     (nil))
(insn 25 23 28 2 (set (reg:DI 38 r9)
        (reg/f:DI 0 ax [69])) tiles.cpp:427 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [69])
        (expr_list:REG_EQUAL (symbol_ref:DI ("i_tmp_arr")  <var_decl 0x2b82f1f7ded8 i_tmp_arr>)
            (nil))))
(insn 28 25 32 2 (set (reg:DI 2 cx)
        (reg/f:DI 39 r10 [67])) tiles.cpp:427 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [67])
        (expr_list:REG_EQUAL (symbol_ref:DI ("f_tmp_arr")  <var_decl 0x2b82f1f9d000 f_tmp_arr>)
            (nil))))
(call_insn:TI 32 28 43 2 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x1]  <function_decl 0x2b82f1f16600 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tiles.cpp:427 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(note 43 32 40 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 40 43 41 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:428 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (nil))))
(jump_insn:TI 41 40 42 2 (simple_return) tiles.cpp:428 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 42 41 0)

;; Function void tileswrap(int*, int, int, float*, int, int*, int*, int) (_Z9tileswrapPiiiPfiS_S_i, funcdef_no=1100, decl_uid=23884, cgraph_uid=344)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 37 n_edges 56 count 53 (  1.4)


void tileswrap(int*, int, int, float*, int, int*, int*, int)

Dataflow summary:
def_info->table_size = 372, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={29d,37u} r1={27d,35u} r2={12d,18u,1e} r3={3d,14u} r4={10d,9u} r5={12d,9u} r6={4d,7u,1e} r7={15d,99u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={57d,20u} r18={4d} r19={4d} r20={5e} r21={11d,12u} r22={10d,10u} r23={15d,11u} r24={21d,19u} r25={8d,3u} r26={8d,3u} r27={7d,2u} r28={7d,2u} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={8d,9u} r38={7d,3u} r39={5d,2u,1e} r40={5d,1u} r41={4d,4u} r42={5d,8u} r43={3d,11u} r44={7d,11u,1e} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 772{404d,359u,9e} in 242{238 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]

( 2 3 )->[4]->( 5 18 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 38 [r9]
;; live  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 25 [xmm4] 41 [r12] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 6 [bp] 25 [xmm4] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 5 )->[6]->( 6 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags] 21 [xmm0] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 )->[7]->( 36 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]

( 7 )->[8]->( 9 36 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]

( 8 )->[9]->( 10 14 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

( 9 )->[10]->( 11 14 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

( 10 )->[11]->( 12 14 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

( 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

( 12 9 10 11 13 )->[14]->( 15 18 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

( 14 36 )->[15]->( 16 18 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]

( 15 )->[16]->( 17 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

( 16 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 43 [r14]

( 14 15 4 17 16 )->[18]->( 19 33 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 43 [r14]

( 18 )->[19]->( 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 38 [r9] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 6 [bp] 38 [r9] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 32 19 )->[20]->( 21 35 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 20 )->[21]->( 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 30 21 )->[22]->( 23 34 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp] 39 [r10] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 22 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 23 34 )->[24]->( 25 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 24 )->[25]->( 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 24 25 )->[26]->( 27 30 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 28 27 )->[28]->( 28 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 28 )->[29]->( 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 26 29 )->[30]->( 22 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 39 [r10] 41 [r12]
;; lr  def 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 30 )->[31]->( 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 31 35 )->[32]->( 20 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 32 18 )->[33]->( 1 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 22 )->[34]->( 24 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 20 )->[35]->( 32 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 7 )->[36]->( 15 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

( 33 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 29 to worklist
  Adding insn 461 to worklist
  Adding insn 501 to worklist
  Adding insn 6 to worklist
  Adding insn 4 to worklist
  Adding insn 523 to worklist
  Adding insn 522 to worklist
  Adding insn 521 to worklist
  Adding insn 520 to worklist
  Adding insn 519 to worklist
  Adding insn 518 to worklist
  Adding insn 52 to worklist
  Adding insn 33 to worklist
  Adding insn 462 to worklist
  Adding insn 88 to worklist
  Adding insn 83 to worklist
  Adding insn 79 to worklist
  Adding insn 111 to worklist
  Adding insn 103 to worklist
  Adding insn 115 to worklist
  Adding insn 132 to worklist
  Adding insn 128 to worklist
  Adding insn 468 to worklist
  Adding insn 147 to worklist
  Adding insn 143 to worklist
  Adding insn 162 to worklist
  Adding insn 158 to worklist
  Adding insn 177 to worklist
  Adding insn 173 to worklist
  Adding insn 188 to worklist
  Adding insn 210 to worklist
  Adding insn 223 to worklist
  Adding insn 218 to worklist
  Adding insn 236 to worklist
  Adding insn 230 to worklist
  Adding insn 199 to worklist
  Adding insn 63 to worklist
  Adding insn 492 to worklist
  Adding insn 346 to worklist
  Adding insn 258 to worklist
  Adding insn 278 to worklist
  Adding insn 276 to worklist
  Adding insn 284 to worklist
  Adding insn 288 to worklist
  Adding insn 310 to worklist
  Adding insn 313 to worklist
  Adding insn 299 to worklist
  Adding insn 292 to worklist
  Adding insn 339 to worklist
  Adding insn 333 to worklist
  Adding insn 331 to worklist
  Adding insn 325 to worklist
  Adding insn 536 to worklist
  Adding insn 558 to worklist
  Adding insn 560 to worklist
  Adding insn 562 to worklist
Finished finding needed instructions:
processing block 33 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 535 to worklist
  Adding insn 534 to worklist
  Adding insn 533 to worklist
  Adding insn 532 to worklist
  Adding insn 531 to worklist
  Adding insn 530 to worklist
  Adding insn 529 to worklist
processing block 32 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 338 to worklist
  Adding insn 337 to worklist
  Adding insn 334 to worklist
  Adding insn 330 to worklist
  Adding insn 329 to worklist
  Adding insn 328 to worklist
  Adding insn 327 to worklist
processing block 31 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 18 to worklist
processing block 30 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 298 to worklist
  Adding insn 296 to worklist
  Adding insn 295 to worklist
  Adding insn 291 to worklist
processing block 29 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 28 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 309 to worklist
processing block 27 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 306 to worklist
processing block 26 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 287 to worklist
processing block 25 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 509 to worklist
  Adding insn 508 to worklist
  Adding insn 500 to worklist
processing block 24 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 543 to worklist
  Adding insn 542 to worklist
processing block 23 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 497 to worklist
  Adding insn 262 to worklist
  Adding insn 513 to worklist
  Adding insn 512 to worklist
  Adding insn 260 to worklist
  Adding insn 494 to worklist
processing block 34 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 272 to worklist
  Adding insn 271 to worklist
  Adding insn 511 to worklist
  Adding insn 510 to worklist
  Adding insn 269 to worklist
  Adding insn 268 to worklist
  Adding insn 498 to worklist
processing block 22 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 257 to worklist
  Adding insn 256 to worklist
  Adding insn 254 to worklist
processing block 21 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 374 to worklist
  Adding insn 373 to worklist
  Adding insn 538 to worklist
  Adding insn 15 to worklist
processing block 35 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 541 to worklist
processing block 20 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 540 to worklist
  Adding insn 539 to worklist
processing block 19 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 413 to worklist
  Adding insn 372 to worklist
  Adding insn 545 to worklist
  Adding insn 247 to worklist
  Adding insn 544 to worklist
  Adding insn 493 to worklist
  Adding insn 243 to worklist
  Adding insn 242 to worklist
processing block 18 lr out =  3 [bx] 7 [sp] 43 [r14]
  Adding insn 62 to worklist
processing block 17 lr out =  3 [bx] 7 [sp] 43 [r14]
  Adding insn 552 to worklist
  Adding insn 551 to worklist
  Adding insn 195 to worklist
processing block 16 lr out =  0 [ax] 3 [bx] 7 [sp] 43 [r14]
  Adding insn 235 to worklist
  Adding insn 231 to worklist
  Adding insn 547 to worklist
  Adding insn 546 to worklist
  Adding insn 226 to worklist
processing block 15 lr out =  0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
  Adding insn 222 to worklist
  Adding insn 504 to worklist
  Adding insn 514 to worklist
  Adding insn 549 to worklist
  Adding insn 548 to worklist
  Adding insn 214 to worklist
processing block 36 lr out =  0 [ax] 3 [bx] 7 [sp] 43 [r14]
  Adding insn 550 to worklist
processing block 14 lr out =  0 [ax] 3 [bx] 7 [sp] 43 [r14]
  Adding insn 209 to worklist
processing block 13 lr out =  0 [ax] 3 [bx] 7 [sp] 43 [r14]
  Adding insn 187 to worklist
  Adding insn 186 to worklist
  Adding insn 185 to worklist
  Adding insn 184 to worklist
  Adding insn 182 to worklist
  Adding insn 181 to worklist
  Adding insn 180 to worklist
processing block 12 lr out =  0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
  Adding insn 176 to worklist
  Adding insn 172 to worklist
  Adding insn 171 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 484 to worklist
  Adding insn 165 to worklist
processing block 11 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
  Adding insn 161 to worklist
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 155 to worklist
  Adding insn 154 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
  Adding insn 481 to worklist
  Adding insn 150 to worklist
processing block 10 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
  Adding insn 146 to worklist
  Adding insn 142 to worklist
  Adding insn 141 to worklist
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 478 to worklist
  Adding insn 135 to worklist
processing block 9 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
  Adding insn 131 to worklist
  Adding insn 127 to worklist
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
  Adding insn 123 to worklist
  Adding insn 475 to worklist
  Adding insn 122 to worklist
  Adding insn 473 to worklist
  Adding insn 121 to worklist
  Adding insn 471 to worklist
  Adding insn 120 to worklist
  Adding insn 117 to worklist
  Adding insn 469 to worklist
processing block 8 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]
  Adding insn 114 to worklist
processing block 7 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]
  Adding insn 110 to worklist
  Adding insn 516 to worklist
  Adding insn 106 to worklist
  Adding insn 466 to worklist
  Adding insn 553 to worklist
  Adding insn 515 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
  Adding insn 503 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 87 to worklist
  Adding insn 86 to worklist
  Adding insn 82 to worklist
  Adding insn 77 to worklist
  Adding insn 464 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 371 to worklist
  Adding insn 555 to worklist
  Adding insn 74 to worklist
  Adding insn 554 to worklist
  Adding insn 463 to worklist
  Adding insn 69 to worklist
processing block 4 lr out =  3 [bx] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 557 to worklist
  Adding insn 556 to worklist
processing block 3 lr out =  3 [bx] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 50 to worklist
  Adding insn 517 to worklist
  Adding insn 43 to worklist
  Adding insn 40 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 28 to worklist
  Adding insn 24 to worklist
  Adding insn 11 to worklist
  Adding insn 9 to worklist
  Adding insn 7 to worklist
  Adding insn 5 to worklist
  Adding insn 524 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 37 n_edges 56 count 41 (  1.1)
deleting insn with uid = 525.
deleting insn with uid = 12.
deleting insn with uid = 23.
;;   ======================================================
;;   -- basic block 2 from 518 to 29 -- after reload
;;   ======================================================

;;	  0--> b  0: i 518[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 519[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i   9r14=r9                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 520[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i   7r13=cx                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i 521[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 522[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 523[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i   5bx=si                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i 524{sp=sp-0x1c8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 13--> b  0: i  11ax=sxn([sp+0x208])                      :athlon-direct,athlon-load,athlon-ieu
;;	 13--> b  0: i   4[sp+0x10]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i   6[sp+0x1c]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i 501[sp+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  24di=r8+ax+0x1                            :athlon-direct,athlon-agu,nothing
;;	 17--> b  0: i  28flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 19--> b  0: i 461[sp+0x18]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  25loc [sp+0x18]                           :nothing
;;	 19--> b  0: i  27loc 0                                   :nothing
;;	 19--> b  0: i  29pc={(flags<=0)?L55:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 19
;;   new head = 518
;;   new tail = 29

deleting insn with uid = 41.
deleting insn with uid = 42.
;;   ======================================================
;;   -- basic block 3 from 40 to 52 -- after reload
;;   ======================================================

;;	  0--> b  0: i  40dx=sxn([sp+0x4])                        :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  50si=[sp+0x200]                           :athlon-direct,athlon-load
;;	  4--> b  0: i  43di=dx*0x4+sp+0x114                      :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 517dx=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i  52ax=call [`memcpy']                      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 40
;;   new tail = 52

;;   ======================================================
;;   -- basic block 4 from 31 to 33 -- after reload
;;   ======================================================

;;	  0--> b  0: i  31loc 0                                   :nothing
;;	  0--> b  0: i 556r9=[sp+0x4]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 557flags=cmp(r9,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  33pc={(flags<=0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 31
;;   new tail = 33

deleting insn with uid = 71.
deleting insn with uid = 73.
;;   ======================================================
;;   -- basic block 5 from 69 to 371 -- after reload
;;   ======================================================

;;	  0--> b  0: i  69xmm4=flt(bx)                            :athlon-double,athlon-fploadk8,athlon-fstore
;;	  0--> b  0: i 463ax=[sp+0x4]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 371bp=sp+0x20                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 555{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 554{ax=zxn(ax-0x1);clobber flags;}         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  74r12=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	 11--> b  0: i 462[sp+0x8]=xmm4                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	Ready list (final):  
;;   total time = 11
;;   new head = 69
;;   new tail = 371

;;   ======================================================
;;   -- basic block 6 from 76 to 88 -- after reload
;;   ======================================================

;;	  0--> b  0: i  76loc clobber                             :nothing
;;	  0--> b  0: i 464xmm0=[sp+0x8]                           :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  1--> b  0: i  77xmm0=xmm0*[r13+r15]                     :athlon-direct,athlon-fploadk8,athlon-fmul
;;	  7--> b  0: i  79xmm0=call [`floorf']                    :athlon-vector,athlon-ieu
;;	  8--> b  0: i  82ax=fix(xmm0)                            :athlon-double,athlon-fploadk8,athlon-fstore
;;	 19--> b  0: i  83[bp+r15]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  85loc D#14                                :nothing
;;	 19--> b  0: i  86{r15=r15+0x4;clobber flags;}            :athlon-direct,athlon-ieu
;;	 20--> b  0: i  87flags=cmp(r15,r12)                      :athlon-direct,athlon-ieu
;;	 21--> b  0: i  88pc={(flags!=0)?L90:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 21
;;   new head = 76
;;   new tail = 88

deleting insn with uid = 108.
deleting insn with uid = 109.
;;   ======================================================
;;   -- basic block 7 from 503 to 111 -- after reload
;;   ======================================================

;;	  0--> b  0: i 503r15=[sp+0x4]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 515di=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 553{si=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  95dx=sxn(r15)                             :athlon-direct,athlon-ieu
;;	  4--> b  0: i  96{dx=dx<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  5--> b  0: i 103ax=call [`memset']                      :athlon-vector,athlon-ieu
;;	  6--> b  0: i 466dx=r15                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 106{dx=dx 0>>0x2;clobber flags;}           :athlon-direct,athlon-ieu
;;	  8--> b  0: i 516ax=dx*0x4                               :athlon-direct,athlon-agu,nothing
;;	 10--> b  0: i 110flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 11--> b  0: i 111pc={(flags==0)?L359:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 503
;;   new tail = 111

;;   ======================================================
;;   -- basic block 8 from 114 to 115 -- after reload
;;   ======================================================

;;	  0--> b  0: i 114flags=cmp(r15,0x3)                      :athlon-direct,athlon-ieu
;;	  1--> b  0: i 115pc={(leu(flags,0))?L359:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 114
;;   new tail = 115

;;   ======================================================
;;   -- basic block 9 from 468 to 132 -- after reload
;;   ======================================================

;;	  0--> b  0: i 468[sp+0x8]=bx                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 131flags=cmp(dx,0x1)                       :athlon-direct,athlon-ieu
;;	  1--> b  0: i 469xmm5=[sp+0x8]                           :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  2--> b  0: i 120xmm1=unspec[[r14]] 92                   :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  3--> b  0: i 117xmm0=vec_duplicate(xmm5)                :athlon-double,athlon-fpsched,athlon-fmul
;;	  3--> b  0: i 119loc clobber                             :nothing
;;	  4--> b  0: i 471xmm4=xmm1                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 473xmm3=xmm1                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  6--> b  0: i 475xmm1=xmm0                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  6--> b  0: i 121xmm4=zxn(vec_select(xmm4,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 122xmm3=xmm3 0>>0x20                       :nothing
;;	  7--> b  0: i 125xmm2=vec_select(xmm4,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  8--> b  0: i 123xmm1=xmm1 0>>0x20                       :nothing
;;	  8--> b  0: i 124xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  8--> b  0: i 126xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	 11--> b  0: i 127xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 14--> b  0: i 128[sp+0xc0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 14--> b  0: i 130loc D#12                                :nothing
;;	 15--> b  0: i 132pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 468
;;   new tail = 132

;;   ======================================================
;;   -- basic block 10 from 134 to 147 -- after reload
;;   ======================================================

;;	  0--> b  0: i 134loc clobber                             :nothing
;;	  0--> b  0: i 146flags=cmp(dx,0x2)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i 135xmm3=unspec[[r14+0x10]] 92              :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 478xmm5=xmm3                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 137xmm3=xmm3 0>>0x20                       :nothing
;;	  4--> b  0: i 139xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  5--> b  0: i 141xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 136xmm5=zxn(vec_select(xmm5,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 140xmm2=vec_select(xmm5,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 142xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 12--> b  0: i 143[sp+0xd0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 12--> b  0: i 145loc D#12                                :nothing
;;	 13--> b  0: i 147pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 134
;;   new tail = 147

;;   ======================================================
;;   -- basic block 11 from 149 to 162 -- after reload
;;   ======================================================

;;	  0--> b  0: i 149loc clobber                             :nothing
;;	  0--> b  0: i 161flags=cmp(dx,0x3)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i 150xmm3=unspec[[r14+0x20]] 92              :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 481xmm6=xmm3                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 152xmm3=xmm3 0>>0x20                       :nothing
;;	  4--> b  0: i 154xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  5--> b  0: i 156xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 151xmm6=zxn(vec_select(xmm6,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 155xmm2=vec_select(xmm6,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 157xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 12--> b  0: i 158[sp+0xe0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 12--> b  0: i 160loc D#12                                :nothing
;;	 13--> b  0: i 162pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 149
;;   new tail = 162

;;   ======================================================
;;   -- basic block 12 from 164 to 177 -- after reload
;;   ======================================================

;;	  0--> b  0: i 164loc clobber                             :nothing
;;	  0--> b  0: i 176flags=cmp(dx,0x4)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i 165xmm3=unspec[[r14+0x30]] 92              :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 484xmm7=xmm3                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 167xmm3=xmm3 0>>0x20                       :nothing
;;	  4--> b  0: i 169xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  5--> b  0: i 171xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 166xmm7=zxn(vec_select(xmm7,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 170xmm2=vec_select(xmm7,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 172xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 12--> b  0: i 173[sp+0xf0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 12--> b  0: i 175loc D#12                                :nothing
;;	 13--> b  0: i 177pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 164
;;   new tail = 177

;;   ======================================================
;;   -- basic block 13 from 179 to 190 -- after reload
;;   ======================================================

;;	  0--> b  0: i 179loc clobber                             :nothing
;;	  2--> b  0: i 180xmm2=unspec[[r14+0x40]] 92              :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 181xmm0=zxn(vec_select(xmm0,parallel))*zxn(vec_select(xmm2,parallel)):nothing
;;	  4--> b  0: i 182xmm2=xmm2 0>>0x20                       :nothing
;;	  4--> b  0: i 185xmm0=vec_select(xmm0,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  5--> b  0: i 184xmm1=zxn(vec_select(xmm1,parallel))*zxn(vec_select(xmm2,parallel)):nothing
;;	  5--> b  0: i 186xmm1=vec_select(xmm1,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  8--> b  0: i 187xmm0=vec_select(vec_concat(xmm0,xmm1),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 11--> b  0: i 188[sp+0x100]=xmm0                         :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 11--> b  0: i 190loc D#12                                :nothing
;;	Ready list (final):  
;;   total time = 11
;;   new head = 179
;;   new tail = 190

;;   ======================================================
;;   -- basic block 14 from 209 to 210 -- after reload
;;   ======================================================

;;	  0--> b  0: i 209flags=cmp(ax,[sp+0x4])                  :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 210pc={(flags==0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 209
;;   new tail = 210

deleting insn with uid = 216.
;;   ======================================================
;;   -- basic block 15 from 213 to 223 -- after reload
;;   ======================================================

;;	  0--> b  0: i 213loc ax                                  :nothing
;;	  0--> b  0: i 214dx=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 504di=[sp+0x4]                             :athlon-direct,athlon-load
;;	  1--> b  0: i 548cx=[dx*0x4+r14]                         :athlon-direct,athlon-load
;;	  4--> b  0: i 549{cx=cx*bx;clobber flags;}               :athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0
;;	  7--> b  0: i 218[dx*0x4+sp+0xc0]=cx                     :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 514dx=ax+0x1                               :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i 221loc dx                                  :nothing
;;	  9--> b  0: i 222flags=cmp(di,dx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 223pc={(flags<=0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 213
;;   new tail = 223

deleting insn with uid = 228.
;;   ======================================================
;;   -- basic block 16 from 225 to 236 -- after reload
;;   ======================================================

;;	  0--> b  0: i 225loc dx                                  :nothing
;;	  0--> b  0: i 226dx=sxn(dx)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 231{ax=ax+0x2;clobber flags;}              :athlon-direct,athlon-ieu
rescanning insn with uid = 363.
deleting insn with uid = 363.
;;	  1--> b  0: i 546cx=[dx*0x4+r14]                         :athlon-direct,athlon-load
;;	  4--> b  0: i 547{cx=cx*bx;clobber flags;}               :athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0
;;	  4--> b  0: i 235flags=cmp(ax,di)                        :athlon-direct,athlon-ieu
;;	  7--> b  0: i 230[dx*0x4+sp+0xc0]=cx                     :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 363loc clobber                             :nothing
;;	  7--> b  0: i 233loc D#16                                :nothing
;;	  7--> b  0: i 236pc={(flags>=0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 225
;;   new tail = 236

deleting insn with uid = 197.
;;   ======================================================
;;   -- basic block 17 from 194 to 202 -- after reload
;;   ======================================================

;;	  0--> b  0: i 194loc D#16                                :nothing
;;	  0--> b  0: i 195ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 551dx=[ax*0x4+r14]                         :athlon-direct,athlon-load
;;	  4--> b  0: i 552{dx=dx*bx;clobber flags;}               :athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0
;;	  7--> b  0: i 199[ax*0x4+sp+0xc0]=dx                     :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 200loc D#16+0x1                            :nothing
;;	  7--> b  0: i 202loc D#15                                :nothing
;;	Ready list (final):  
;;   total time = 7
;;   new head = 194
;;   new tail = 202

;;   ======================================================
;;   -- basic block 18 from 61 to 63 -- after reload
;;   ======================================================

;;	  0--> b  0: i  61loc 0                                   :nothing
;;	  0--> b  0: i  62flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  63pc={(flags<=0)?L353:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 61
;;   new tail = 63

deleting insn with uid = 244.
deleting insn with uid = 246.
;;   ======================================================
;;   -- basic block 19 from 242 to 413 -- after reload
;;   ======================================================

;;	  0--> b  0: i 242ax=sxn([sp+0x1c])                       :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 243r9=[sp+0x10]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 372bp=sp+0x110                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 545{r13=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 413r15=r9                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 492[sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 493ax=[sp+0x4]                             :athlon-direct,athlon-load
;;	  7--> b  0: i 544{ax=zxn(ax-0x1);clobber flags;}         :athlon-direct,athlon-ieu
;;	  8--> b  0: i 247r12=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 8
;;   new head = 242
;;   new tail = 413

;;   ======================================================
;;   -- basic block 20 from 343 to 346 -- after reload
;;   ======================================================

;;	  0--> b  0: i 343loc r13                                 :nothing
;;	  0--> b  0: i 344loc 0                                   :nothing
;;	  0--> b  0: i 539ax=[sp+0x4]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 540flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 346pc={(flags<=0)?L361:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 343
;;   new tail = 346

;;   ======================================================
;;   -- basic block 21 from 15 to 374 -- after reload
;;   ======================================================

;;	  0--> b  0: i 373r11=sp+0x20                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 374r10=sp+0x70                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  15di=0x1                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 538{cx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 15
;;   new tail = 374

;;   ======================================================
;;   -- basic block 22 from 252 to 258 -- after reload
;;   ======================================================

;;	  0--> b  0: i 252loc clobber                             :nothing
;;	  0--> b  0: i 254r8=[r11+cx]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 256si=[r10+cx]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 257flags=cmp(r8,si)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 258pc={(flags<0)?L265:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 252
;;   new tail = 258

;;   ======================================================
;;   -- basic block 23 from 494 to 497 -- after reload
;;   ======================================================

;;	  0--> b  0: i 494ax=r8                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 260{ax=ax-si;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 512{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  3--> b  0: i 513{ax=ax/bx;dx=ax%bx;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  9--> b  0: i 262{r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 10--> b  0: i 497dx=r8                                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 494
;;   new tail = 497

;;   ======================================================
;;   -- basic block 24 from 276 to 278 -- after reload
;;   ======================================================

;;	  0--> b  0: i 542r8=[r14+cx]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 276[bp+cx]=dx                              :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 543flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 278pc={(flags==0)?L285:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 276
;;   new tail = 278

;;   ======================================================
;;   -- basic block 25 from 500 to 284 -- after reload
;;   ======================================================

;;	  0--> b  0: i 500ax=dx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 508{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  2--> b  0: i 509{ax=ax/[sp+cx+0xc0];dx=ax%[sp+cx+0xc0];use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  8--> b  0: i 284[bp+cx]=dx                              :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 8
;;   new head = 500
;;   new tail = 284

;;   ======================================================
;;   -- basic block 26 from 287 to 288 -- after reload
;;   ======================================================

;;	  0--> b  0: i 287flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 288pc={(flags>=0)?L314:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 287
;;   new tail = 288

;;   ======================================================
;;   -- basic block 27 from 306 to 306 -- after reload
;;   ======================================================

;;	  0--> b  0: i 306ax=[sp+cx+0xc0]                         :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 306
;;   new tail = 306

;;   ======================================================
;;   -- basic block 28 from 309 to 310 -- after reload
;;   ======================================================

;;	  0--> b  0: i 309{flags=cmp(dx+ax,0);dx=dx+ax;}          :athlon-direct,athlon-ieu
;;	  1--> b  0: i 310pc={(flags<0)?L319:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 309
;;   new tail = 310

;;   ======================================================
;;   -- basic block 29 from 313 to 313 -- after reload
;;   ======================================================

;;	  0--> b  0: i 313[bp+cx]=dx                              :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 313
;;   new tail = 313

;;   ======================================================
;;   -- basic block 30 from 291 to 299 -- after reload
;;   ======================================================

;;	  0--> b  0: i 291{si=si+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  0--> b  0: i 296{di=di+0x2;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 292[r10+cx]=si                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 294loc D#13                                :nothing
;;	  1--> b  0: i 295{cx=cx+0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	  2--> b  0: i 298flags=cmp(cx,r12)                       :athlon-direct,athlon-ieu
;;	  3--> b  0: i 299pc={(flags!=0)?L348:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 291
;;   new tail = 299

;;   ======================================================
;;   -- basic block 31 from 18 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i  18ax=sxn([sp+0x4])                        :athlon-direct,athlon-load,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 18
;;   new tail = 18

rescanning insn with uid = 333.
deleting insn with uid = 333.
rescanning insn with uid = 333.
deleting insn with uid = 333.
;;   ======================================================
;;   -- basic block 32 from 325 to 339 -- after reload
;;   ======================================================

;;	  0--> b  0: i 328dx=[sp+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 329si=[sp+0x18]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 327cx=0x1c1                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i 325[ax*0x4+sp+0x110]=r13                   :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 330di=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 334{r13=r13+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  2--> b  0: i 337{r15=r15+0x4;clobber flags;}            :athlon-direct,athlon-ieu
rescanning insn with uid = 333.
deleting insn with uid = 333.
;;	  3--> b  0: i 331ax=call [`_Z8hash_UNHPiili']            :athlon-vector,athlon-ieu
;;	  3--> b  0: i 336loc r13                                 :nothing
;;	  4--> b  0: i 333[r15-0x4]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 338flags=cmp(r13,bx)                       :athlon-direct,athlon-ieu
;;	  5--> b  0: i 339pc={(flags!=0)?L341:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 325
;;   new tail = 339

;;   ======================================================
;;   -- basic block 33 from 529 to 536 -- after reload
;;   ======================================================

;;	  0--> b  0: i 529{sp=sp+0x1c8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i 530bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 531bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 532r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 533r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 534r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 535r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 536simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 529
;;   new tail = 536

;;   ======================================================
;;   -- basic block 34 from 498 to 558 -- after reload
;;   ======================================================

;;	  0--> b  0: i 498ax=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 268{ax=ax-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 269{ax=ax-0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 510{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  4--> b  0: i 511{ax=ax/bx;dx=ax%bx;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	 10--> b  0: i 271dx=r8+dx+0x1                            :athlon-direct,athlon-agu,nothing
;;	 12--> b  0: i 272{dx=dx-bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 12--> b  0: i 558pc=L273                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 498
;;   new tail = 558

;;   ======================================================
;;   -- basic block 35 from 541 to 560 -- after reload
;;   ======================================================

;;	  0--> b  0: i 541{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 560pc=L322                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 541
;;   new tail = 560

;;   ======================================================
;;   -- basic block 36 from 550 to 562 -- after reload
;;   ======================================================

;;	  0--> b  0: i 550{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 562pc=L211                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 550
;;   new tail = 562



starting the processing of deferred insns
ending the processing of deferred insns


void tileswrap(int*, int, int, float*, int, int*, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={29d,36u} r1={27d,35u} r2={12d,18u,1e} r3={3d,14u} r4={10d,9u} r5={12d,9u} r6={4d,7u,1e} r7={15d,99u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={57d,20u} r18={4d} r19={4d} r20={5e} r21={11d,12u} r22={10d,10u} r23={15d,11u} r24={21d,19u} r25={8d,3u} r26={8d,3u} r27={7d,2u} r28={7d,2u} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={8d,9u} r38={7d,3u} r39={5d,2u,1e} r40={5d,1u} r41={4d,4u} r42={5d,8u} r43={3d,11u} r44={7d,11u,1e} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 771{404d,358u,9e} in 242{238 regular + 4 call} insns.
(note 3 0 21 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 21 3 12 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 12 21 23 2 NOTE_INSN_FUNCTION_BEG)
(note 23 12 518 2 NOTE_INSN_DELETED)
(insn/f:TI 518 23 519 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tiles.cpp:439 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn/f:TI 519 518 9 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tiles.cpp:439 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn 9 519 520 2 (set (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])
        (reg:DI 38 r9 [ wrap_widths ])) tiles.cpp:439 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ wrap_widths ])
        (nil)))
(insn/f:TI 520 9 7 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tiles.cpp:439 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn 7 520 521 2 (set (reg/v/f:DI 42 r13 [orig:150 floats ] [150])
        (reg:DI 2 cx [ floats ])) tiles.cpp:439 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn/f:TI 521 7 522 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:439 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 522 521 523 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:439 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 523 522 5 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:439 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 5 523 524 2 (set (reg/v:SI 3 bx [orig:148 num_tilings ] [148])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:439 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn/f:TI 524 5 525 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -456 [0xfffffffffffffe38])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:439 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -456 [0xfffffffffffffe38])))
            (nil))))
(note 525 524 11 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 11 525 4 2 (set (reg:DI 0 ax)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 520 [0x208])) [0 num_ints+0 S4 A64]))) tiles.cpp:439 149 {*extendsidi2_rex64}
     (nil))
(insn 4 11 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:439 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn:TI 6 4 501 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [0 %sfp+-4 S4 A32])
        (reg:SI 1 dx [ memory_size ])) tiles.cpp:439 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ memory_size ])
        (nil)))
(insn 501 6 24 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])
        (reg:SI 37 r8 [orig:151 num_floats ] [151])) tiles.cpp:439 89 {*movsi_internal}
     (nil))
(insn:TI 24 501 28 2 (set (reg/v:SI 5 di [orig:71 num_coordinates ] [71])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:151 num_floats ] [151])
                (reg/v:SI 0 ax [orig:154 num_ints ] [154]))
            (const_int 1 [0x1]))) tiles.cpp:445 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:151 num_floats ] [151])
        (nil)))
(insn 28 24 461 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 0 ax [orig:154 num_ints ] [154])
            (const_int 0 [0]))) tiles.cpp:447 3 {*cmpsi_ccno_1}
     (nil))
(insn:TI 461 28 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S4 A32])
        (reg/v:SI 5 di [orig:71 num_coordinates ] [71])) tiles.cpp:445 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 5 di [orig:71 num_coordinates ] [71])
        (nil)))
(debug_insn 25 461 27 2 (var_location:SI num_coordinates (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 24 [0x18])) [0 %sfp+-8 S4 A32])) tiles.cpp:445 -1
     (nil))
(debug_insn 27 25 29 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn 29 27 38 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) tiles.cpp:447 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 238 [0xee])
            (nil)))
 -> 55)
;;  succ:       3 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [2.4%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]

;; basic block 3, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 38 29 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 39 38 41 3 NOTE_INSN_DELETED)
(note 41 39 42 3 NOTE_INSN_DELETED)
(note 42 41 40 3 NOTE_INSN_DELETED)
(insn:TI 40 42 50 3 (set (reg:DI 1 dx [orig:157 D.26221 ] [157])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 4 [0x4])) [0 %sfp+-28 S4 A32]))) tiles.cpp:447 149 {*extendsidi2_rex64}
     (nil))
(insn 50 40 43 3 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 512 [0x200])) [0 ints+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 43 50 517 3 (set (reg:DI 5 di [orig:160 D.26220 ] [160])
        (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:157 D.26221 ] [157])
                    (const_int 4 [0x4]))
                (reg/f:DI 7 sp))
            (const_int 276 [0x114]))) tiles.cpp:447 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:157 D.26221 ] [157])
        (nil)))
(insn 517 43 52 3 (set (reg:DI 1 dx [orig:162 D.26221 ] [162])
        (mult:DI (reg:DI 0 ax [orig:161 D.26221 ] [161])
            (const_int 4 [0x4]))) tiles.cpp:447 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:161 D.26221 ] [161])
        (nil)))
(call_insn:TI 52 517 55 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]

;; basic block 4, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [2.4%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 38 [r9]
;; live  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags] 38 [r9]
;; live  kill	
(code_label 55 52 30 4 145 "" [1 uses])
(note 30 55 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 556 4 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 556 31 557 4 (set (reg:SI 38 r9)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:450 89 {*movsi_internal}
     (nil))
(insn:TI 557 556 33 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 38 r9)
            (const_int 0 [0]))) tiles.cpp:450 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (nil)))
(jump_insn:TI 33 557 68 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 59)
;;  succ:       5 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14]

;; basic block 5, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 25 [xmm4] 41 [r12] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 6 [bp] 25 [xmm4] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
(note 68 33 71 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 71 68 73 5 NOTE_INSN_DELETED)
(note 73 71 69 5 NOTE_INSN_DELETED)
(insn:TI 69 73 463 5 (set (reg:SF 25 xmm4 [orig:131 D.26217 ] [131])
        (float:SF (reg/v:SI 3 bx [orig:148 num_tilings ] [148]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(insn 463 69 371 5 (set (reg/v:SI 0 ax [orig:151 num_floats ] [151])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) 89 {*movsi_internal}
     (nil))
(insn 371 463 555 5 (set (reg/f:DI 6 bp [258])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn:TI 555 371 554 5 (parallel [
            (set (reg:DI 44 r15 [orig:104 ivtmp.261 ] [104])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:450 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 554 555 74 5 (parallel [
            (set (reg:DI 0 ax [orig:169 D.26221 ] [169])
                (zero_extend:DI (plus:SI (reg/v:SI 0 ax [orig:151 num_floats ] [151])
                        (const_int -1 [0xffffffffffffffff]))))
            (clobber (reg:CC 17 flags))
        ]) 275 {addsi_1_zext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 74 554 462 5 (set (reg:DI 41 r12 [orig:146 D.26221 ] [146])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:169 D.26221 ] [169])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:169 D.26221 ] [169])
        (nil)))
(insn:TI 462 74 90 5 (set (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A64])
        (reg:SF 25 xmm4 [orig:131 D.26217 ] [131])) 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 25 xmm4 [orig:131 D.26217 ] [131])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 330, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags] 21 [xmm0] 44 [r15]
;; live  kill	 17 [flags]
(code_label 90 462 75 6 149 "" [1 uses])
(note 75 90 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 76 75 464 6 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 464 76 77 6 (set (reg:SF 21 xmm0 [orig:171 D.26217 ] [171])
        (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A64])) tiles.cpp:451 135 {*movsf_internal}
     (nil))
(insn:TI 77 464 79 6 (set (reg:SF 21 xmm0 [orig:171 D.26217 ] [171])
        (mult:SF (reg:SF 21 xmm0 [orig:171 D.26217 ] [171])
            (mem:SF (plus:DI (reg/v/f:DI 42 r13 [orig:150 floats ] [150])
                    (reg:DI 44 r15 [orig:104 ivtmp.261 ] [104])) [0 MEM[base: floats_29(D), index: ivtmp.261_79, offset: 0B]+0 S4 A32]))) tiles.cpp:451 777 {*fop_sf_comm_sse}
     (nil))
(call_insn/u:TI 79 77 82 6 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:451 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn:TI 82 79 83 6 (set (reg:SI 0 ax [173])
        (fix:SI (reg:SF 21 xmm0 [orig:75 D.26217 ] [75]))) tiles.cpp:451 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [orig:75 D.26217 ] [75])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 6 bp [258])
                    (reg:DI 44 r15 [orig:104 ivtmp.261 ] [104])) [0 MEM[symbol: qstate, index: ivtmp.261_79, offset: 0B]+0 S4 A32])
            (nil))))
(insn:TI 83 82 85 6 (set (mem:SI (plus:DI (reg/f:DI 6 bp [258])
                (reg:DI 44 r15 [orig:104 ivtmp.261 ] [104])) [0 MEM[symbol: qstate, index: ivtmp.261_79, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [173])) tiles.cpp:451 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [173])
        (nil)))
(debug_insn 85 83 86 6 (var_location:SI i (debug_expr:SI D#14)) -1
     (nil))
(insn 86 85 87 6 (parallel [
            (set (reg:DI 44 r15 [orig:104 ivtmp.261 ] [104])
                (plus:DI (reg:DI 44 r15 [orig:104 ivtmp.261 ] [104])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 87 86 88 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 44 r15 [orig:104 ivtmp.261 ] [104])
            (reg:DI 41 r12 [orig:146 D.26221 ] [146]))) tiles.cpp:450 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 88 87 94 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 90)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 90)
;;  succ:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              7 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
(note 94 88 108 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 108 94 109 7 NOTE_INSN_DELETED)
(note 109 108 503 7 NOTE_INSN_DELETED)
(insn:TI 503 109 515 7 (set (reg/v:SI 44 r15 [orig:151 num_floats ] [151])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:452 89 {*movsi_internal}
     (nil))
(insn 515 503 553 7 (set (reg/f:DI 5 di [257])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (nil))
(insn 553 515 95 7 (parallel [
            (set (reg:DI 4 si)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 95 553 96 7 (set (reg:DI 1 dx [orig:174 D.26221 ] [174])
        (sign_extend:DI (reg/v:SI 44 r15 [orig:151 num_floats ] [151]))) tiles.cpp:452 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 96 95 103 7 (parallel [
            (set (reg:DI 1 dx [orig:175 D.26221 ] [175])
                (ashift:DI (reg:DI 1 dx [orig:174 D.26221 ] [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:452 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 103 96 466 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 466 103 106 7 (set (reg:SI 1 dx [orig:80 bnd.218 ] [80])
        (reg/v:SI 44 r15 [orig:151 num_floats ] [151])) 89 {*movsi_internal}
     (nil))
(insn:TI 106 466 516 7 (parallel [
            (set (reg:SI 1 dx [orig:80 bnd.218 ] [80])
                (lshiftrt:SI (reg:SI 1 dx [orig:80 bnd.218 ] [80])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 545 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 516 106 110 7 (set (reg:SI 0 ax [orig:79 ratio_mult_vf.219 ] [79])
        (mult:SI (reg:SI 1 dx [orig:80 bnd.218 ] [80])
            (const_int 4 [0x4]))) 266 {*leasi}
     (nil))
(insn:TI 110 516 111 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:79 ratio_mult_vf.219 ] [79])
            (const_int 0 [0]))) 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 111 110 362 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 359)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 359)
;;  succ:       36 [33.3%]  (CAN_FALLTHRU)
;;              8 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 362 111 112 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 112 362 113 8 NOTE_INSN_DELETED)
(note 113 112 114 8 NOTE_INSN_DELETED)
(insn:TI 114 113 115 8 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 44 r15 [orig:151 num_floats ] [151])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 44 r15 [orig:151 num_floats ] [151])
        (nil)))
(jump_insn:TI 115 114 116 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 359)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 359)
;;  succ:       9 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              36 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]

;; basic block 9, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  kill	
(note 116 115 468 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 468 116 131 9 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A64])
        (reg/v:SI 3 bx [orig:148 num_tilings ] [148])) 89 {*movsi_internal}
     (nil))
(insn 131 468 469 9 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:80 bnd.218 ] [80])
            (const_int 1 [0x1]))) 7 {*cmpsi_1}
     (nil))
(insn:TI 469 131 120 9 (set (reg/v:SI 26 xmm5 [orig:148 num_tilings ] [148])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A64])) 89 {*movsi_internal}
     (nil))
(insn:TI 120 469 117 9 (set (reg:V16QI 22 xmm1 [orig:186 vect_var_.225 ] [186])
        (unspec:V16QI [
                (mem:V16QI (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152]) [0 MEM[(int *)wrap_widths_39(D)]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn:TI 117 120 119 9 (set (reg:V4SI 21 xmm0 [185])
        (vec_duplicate:V4SI (reg/v:SI 26 xmm5 [orig:148 num_tilings ] [148]))) 1643 {*vec_dupv4si}
     (expr_list:REG_DEAD (reg/v:SI 26 xmm5 [orig:148 num_tilings ] [148])
        (nil)))
(debug_insn 119 117 471 9 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 471 119 473 9 (set (reg:V4SI 25 xmm4 [304])
        (reg:V4SI 22 xmm1 [orig:186 vect_var_.225 ] [186])) tiles.cpp:453 1142 {*movv4si_internal}
     (nil))
(insn 473 471 475 9 (set (reg:V2DI 24 xmm3 [190])
        (reg:V2DI 22 xmm1 [orig:186 vect_var_.225 ] [186])) tiles.cpp:453 1144 {*movv2di_internal}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:186 vect_var_.225 ] [186])
        (nil)))
(insn:TI 475 473 121 9 (set (reg:V2DI 22 xmm1 [191])
        (reg:V2DI 21 xmm0 [185])) tiles.cpp:453 1144 {*movv2di_internal}
     (nil))
(insn 121 475 122 9 (set (reg:V2DI 25 xmm4 [304])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 25 xmm4 [304])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [185])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 122 121 125 9 (set (reg:V2DI 24 xmm3 [190])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [190])
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (nil))
(insn:TI 125 122 123 9 (set (reg:V4SI 23 xmm2 [orig:187 vect_var_.226 ] [187])
        (vec_select:V4SI (reg:V4SI 25 xmm4 [188])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 25 xmm4 [188])
        (nil)))
(insn:TI 123 125 124 9 (set (reg:V2DI 22 xmm1 [191])
        (lshiftrt:V2DI (reg:V2DI 22 xmm1 [191])
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (nil))
(insn 124 123 126 9 (set (reg:V2DI 24 xmm3 [189])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [190])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [191])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 126 124 127 9 (set (reg:V4SI 24 xmm3 [189])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [189])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 127 126 128 9 (set (reg:V4SI 23 xmm2 [orig:187 vect_var_.226 ] [187])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:187 vect_var_.226 ] [187])
                (reg:V4SI 24 xmm3 [189]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [189])
        (nil)))
(insn:TI 128 127 130 9 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:187 vect_var_.226 ] [187])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:187 vect_var_.226 ] [187])
        (nil)))
(debug_insn 130 128 132 9 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(jump_insn:TI 132 130 133 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       10 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

;; basic block 10, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  kill	
(note 133 132 134 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 134 133 146 10 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 146 134 135 10 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:80 bnd.218 ] [80])
            (const_int 2 [0x2]))) 7 {*cmpsi_1}
     (nil))
(insn:TI 135 146 478 10 (set (reg:V16QI 24 xmm3 [orig:192 vect_var_.225 ] [192])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])
                        (const_int 16 [0x10])) [0 MEM[(int *)wrap_widths_39(D) + 16B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn:TI 478 135 137 10 (set (reg:V4SI 26 xmm5 [307])
        (reg:V4SI 24 xmm3 [orig:192 vect_var_.225 ] [192])) tiles.cpp:453 1142 {*movv4si_internal}
     (nil))
(insn 137 478 139 10 (set (reg:V2DI 24 xmm3 [196])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [orig:192 vect_var_.225 ] [192])
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (nil))
(insn 139 137 141 10 (set (reg:V2DI 24 xmm3 [195])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [196])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [191])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn:TI 141 139 136 10 (set (reg:V4SI 24 xmm3 [195])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [195])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 136 141 140 10 (set (reg:V2DI 26 xmm5 [307])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 26 xmm5 [307])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [185])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 140 136 142 10 (set (reg:V4SI 23 xmm2 [orig:193 vect_var_.226 ] [193])
        (vec_select:V4SI (reg:V4SI 26 xmm5 [194])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 26 xmm5 [194])
        (nil)))
(insn:TI 142 140 143 10 (set (reg:V4SI 23 xmm2 [orig:193 vect_var_.226 ] [193])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:193 vect_var_.226 ] [193])
                (reg:V4SI 24 xmm3 [195]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [195])
        (nil)))
(insn:TI 143 142 145 10 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 16B]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:193 vect_var_.226 ] [193])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:193 vect_var_.226 ] [193])
        (nil)))
(debug_insn 145 143 147 10 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(jump_insn:TI 147 145 148 10 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       11 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  kill	
(note 148 147 149 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 149 148 161 11 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 161 149 150 11 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:80 bnd.218 ] [80])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (nil))
(insn:TI 150 161 481 11 (set (reg:V16QI 24 xmm3 [orig:198 vect_var_.225 ] [198])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])
                        (const_int 32 [0x20])) [0 MEM[(int *)wrap_widths_39(D) + 32B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn:TI 481 150 152 11 (set (reg:V4SI 27 xmm6 [308])
        (reg:V4SI 24 xmm3 [orig:198 vect_var_.225 ] [198])) tiles.cpp:453 1142 {*movv4si_internal}
     (nil))
(insn 152 481 154 11 (set (reg:V2DI 24 xmm3 [202])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [orig:198 vect_var_.225 ] [198])
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (nil))
(insn 154 152 156 11 (set (reg:V2DI 24 xmm3 [201])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [202])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [191])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn:TI 156 154 151 11 (set (reg:V4SI 24 xmm3 [201])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [201])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 151 156 155 11 (set (reg:V2DI 27 xmm6 [308])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 27 xmm6 [308])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [185])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 155 151 157 11 (set (reg:V4SI 23 xmm2 [orig:199 vect_var_.226 ] [199])
        (vec_select:V4SI (reg:V4SI 27 xmm6 [200])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 27 xmm6 [200])
        (nil)))
(insn:TI 157 155 158 11 (set (reg:V4SI 23 xmm2 [orig:199 vect_var_.226 ] [199])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:199 vect_var_.226 ] [199])
                (reg:V4SI 24 xmm3 [201]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [201])
        (nil)))
(insn:TI 158 157 160 11 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 32B]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:199 vect_var_.226 ] [199])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:199 vect_var_.226 ] [199])
        (nil)))
(debug_insn 160 158 162 11 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(jump_insn:TI 162 160 163 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       12 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

;; basic block 12, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  kill	
(note 163 162 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 164 163 176 12 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 176 164 165 12 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:80 bnd.218 ] [80])
            (const_int 4 [0x4]))) 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:80 bnd.218 ] [80])
        (nil)))
(insn:TI 165 176 484 12 (set (reg:V16QI 24 xmm3 [orig:204 vect_var_.225 ] [204])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])
                        (const_int 48 [0x30])) [0 MEM[(int *)wrap_widths_39(D) + 48B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn:TI 484 165 167 12 (set (reg:V4SI 28 xmm7 [309])
        (reg:V4SI 24 xmm3 [orig:204 vect_var_.225 ] [204])) tiles.cpp:453 1142 {*movv4si_internal}
     (nil))
(insn 167 484 169 12 (set (reg:V2DI 24 xmm3 [208])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [orig:204 vect_var_.225 ] [204])
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (nil))
(insn 169 167 171 12 (set (reg:V2DI 24 xmm3 [207])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [208])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [191])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn:TI 171 169 166 12 (set (reg:V4SI 24 xmm3 [207])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [207])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 166 171 170 12 (set (reg:V2DI 28 xmm7 [309])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 28 xmm7 [309])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [185])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 170 166 172 12 (set (reg:V4SI 23 xmm2 [orig:205 vect_var_.226 ] [205])
        (vec_select:V4SI (reg:V4SI 28 xmm7 [206])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 28 xmm7 [206])
        (nil)))
(insn:TI 172 170 173 12 (set (reg:V4SI 23 xmm2 [orig:205 vect_var_.226 ] [205])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:205 vect_var_.226 ] [205])
                (reg:V4SI 24 xmm3 [207]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [207])
        (nil)))
(insn:TI 173 172 175 12 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 48B]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:205 vect_var_.226 ] [205])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:205 vect_var_.226 ] [205])
        (nil)))
(debug_insn 175 173 177 12 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
(jump_insn:TI 177 175 178 12 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       13 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]

;; basic block 13, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  use 	 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; lr  def 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 21 [xmm0] 22 [xmm1] 43 [r14]
;; live  gen 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  kill	
(note 178 177 179 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 179 178 180 13 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 180 179 181 13 (set (reg:V16QI 23 xmm2 [orig:210 vect_var_.225 ] [210])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])
                        (const_int 64 [0x40])) [0 MEM[(int *)wrap_widths_39(D) + 64B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:453 1162 {sse2_loaddqu}
     (nil))
(insn:TI 181 180 182 13 (set (reg:V2DI 21 xmm0 [212])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [185])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 23 xmm2 [orig:210 vect_var_.225 ] [210])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 182 181 185 13 (set (reg:V2DI 23 xmm2 [214])
        (lshiftrt:V2DI (reg:V2DI 23 xmm2 [orig:210 vect_var_.225 ] [210])
            (const_int 32 [0x20]))) tiles.cpp:453 1522 {lshrv2di3}
     (nil))
(insn 185 182 184 13 (set (reg:V4SI 21 xmm0 [orig:211 vect_var_.226 ] [211])
        (vec_select:V4SI (reg:V4SI 21 xmm0 [212])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 184 185 186 13 (set (reg:V2DI 22 xmm1 [213])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [191])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 23 xmm2 [214])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:453 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [214])
        (nil)))
(insn 186 184 187 13 (set (reg:V4SI 22 xmm1 [213])
        (vec_select:V4SI (reg:V4SI 22 xmm1 [213])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:453 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 187 186 188 13 (set (reg:V4SI 21 xmm0 [orig:211 vect_var_.226 ] [211])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 21 xmm0 [orig:211 vect_var_.226 ] [211])
                (reg:V4SI 22 xmm1 [213]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:453 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 22 xmm1 [213])
        (nil)))
(insn:TI 188 187 190 13 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 64B]+0 S16 A128])
        (reg:V4SI 21 xmm0 [orig:211 vect_var_.226 ] [211])) tiles.cpp:453 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 21 xmm0 [orig:211 vect_var_.226 ] [211])
        (nil)))
(debug_insn 190 188 206 13 (var_location:SI i (debug_expr:SI D#12)) -1
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

;; basic block 14, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [33.3%]  (CAN_FALLTHRU)
;;              9 [33.3%]  (CAN_FALLTHRU)
;;              10 [33.3%]  (CAN_FALLTHRU)
;;              11 [33.3%]  (CAN_FALLTHRU)
;;              13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 206 190 207 14 151 "" [4 uses])
(note 207 206 209 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 209 207 210 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:114 i ] [114])
            (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 4 [0x4])) [0 %sfp+-28 S4 A32]))) 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 210 209 211 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 59)
;;  succ:       15 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

;; basic block 15, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              36 [100.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 211 210 212 15 150 "" [1 uses])
(note 212 211 216 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 216 212 213 15 NOTE_INSN_DELETED)
(debug_insn 213 216 214 15 (var_location:SI i (reg/v:SI 0 ax [orig:114 i ] [114])) -1
     (nil))
(insn:TI 214 213 504 15 (set (reg:DI 1 dx [orig:220 i ] [220])
        (sign_extend:DI (reg/v:SI 0 ax [orig:114 i ] [114]))) tiles.cpp:453 149 {*extendsidi2_rex64}
     (nil))
(insn 504 214 548 15 (set (reg/v:SI 5 di [orig:151 num_floats ] [151])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:450 89 {*movsi_internal}
     (nil))
(insn:TI 548 504 549 15 (set (reg:SI 2 cx [orig:222 D.26216 ] [222])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:220 i ] [220])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])) [0 *_109+0 S4 A32])) tiles.cpp:453 89 {*movsi_internal}
     (nil))
(insn:TI 549 548 218 15 (parallel [
            (set (reg:SI 2 cx [orig:222 D.26216 ] [222])
                (mult:SI (reg:SI 2 cx [orig:222 D.26216 ] [222])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:453 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 218 549 514 15 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:220 i ] [220])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 2 cx [orig:222 D.26216 ] [222])) tiles.cpp:453 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:222 D.26216 ] [222])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:220 i ] [220])
            (nil))))
(insn 514 218 221 15 (set (reg/v:SI 1 dx [orig:81 i ] [81])
        (plus:SI (reg/v:SI 0 ax [orig:114 i ] [114])
            (const_int 1 [0x1]))) tiles.cpp:450 266 {*leasi}
     (nil))
(debug_insn 221 514 222 15 (var_location:SI i (reg/v:SI 1 dx [orig:81 i ] [81])) -1
     (nil))
(insn:TI 222 221 223 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 di [orig:151 num_floats ] [151])
            (reg/v:SI 1 dx [orig:81 i ] [81]))) tiles.cpp:450 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 223 222 224 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 2500 [0x9c4])
            (nil)))
 -> 59)
;;  succ:       16 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [25.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]

;; basic block 16, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       15 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(note 224 223 228 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 228 224 225 16 NOTE_INSN_DELETED)
(debug_insn 225 228 226 16 (var_location:SI i (reg/v:SI 1 dx [orig:81 i ] [81])) -1
     (nil))
(insn:TI 226 225 231 16 (set (reg:DI 1 dx [orig:224 i ] [224])
        (sign_extend:DI (reg/v:SI 1 dx [orig:81 i ] [81]))) tiles.cpp:453 149 {*extendsidi2_rex64}
     (nil))
(insn 231 226 546 16 (parallel [
            (set (reg/v:SI 0 ax [orig:66 i ] [66])
                (plus:SI (reg/v:SI 0 ax [orig:114 i ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:450 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 546 231 547 16 (set (reg:SI 2 cx [orig:226 D.26216 ] [226])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:224 i ] [224])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])) [0 *_33+0 S4 A32])) tiles.cpp:453 89 {*movsi_internal}
     (nil))
(insn:TI 547 546 235 16 (parallel [
            (set (reg:SI 2 cx [orig:226 D.26216 ] [226])
                (mult:SI (reg:SI 2 cx [orig:226 D.26216 ] [226])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:453 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 235 547 230 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 ax [orig:66 i ] [66])
            (reg/v:SI 5 di [orig:151 num_floats ] [151]))) tiles.cpp:450 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 5 di [orig:151 num_floats ] [151])
        (nil)))
(insn:TI 230 235 363 16 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:224 i ] [224])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 2 cx [orig:226 D.26216 ] [226])) tiles.cpp:453 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:226 D.26216 ] [226])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:224 i ] [224])
            (nil))))
(debug_insn 363 230 233 16 (var_location:SI D#16 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 233 363 236 16 (var_location:SI i (debug_expr:SI D#16)) -1
     (nil))
(jump_insn 236 233 193 16 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:450 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 2500 [0x9c4])
            (nil)))
 -> 59)
;;  succ:       17 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [25.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

;; basic block 17, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(note 193 236 197 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(note 197 193 194 17 NOTE_INSN_DELETED)
(debug_insn 194 197 195 17 (var_location:SI i (debug_expr:SI D#16)) -1
     (nil))
(insn:TI 195 194 551 17 (set (reg:DI 0 ax [orig:216 i ] [216])
        (sign_extend:DI (reg/v:SI 0 ax [orig:66 i ] [66]))) tiles.cpp:453 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 551 195 552 17 (set (reg:SI 1 dx [orig:218 D.26216 ] [218])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:216 i ] [216])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])) [0 *_152+0 S4 A32])) tiles.cpp:453 89 {*movsi_internal}
     (nil))
(insn:TI 552 551 199 17 (parallel [
            (set (reg:SI 1 dx [orig:218 D.26216 ] [218])
                (mult:SI (reg:SI 1 dx [orig:218 D.26216 ] [218])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:453 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 199 552 200 17 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:216 i ] [216])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 1 dx [orig:218 D.26216 ] [218])) tiles.cpp:453 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:218 D.26216 ] [218])
        (expr_list:REG_DEAD (reg:DI 0 ax [orig:216 i ] [216])
            (nil))))
(debug_insn 200 199 202 17 (var_location:SI D#15 (plus:SI (debug_expr:SI D#16)
        (const_int 1 [0x1]))) tiles.cpp:450 -1
     (nil))
(debug_insn 202 200 59 17 (var_location:SI i (debug_expr:SI D#15)) -1
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 43 [r14]

;; basic block 18, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [33.3%]  (CAN_FALLTHRU)
;;              15 [25.0%]  (CAN_FALLTHRU)
;;              4 [4.8%]  (CAN_FALLTHRU)
;;              17 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [25.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 59 202 60 18 144 "" [4 uses])
(note 60 59 61 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(debug_insn 61 60 62 18 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn:TI 62 61 63 18 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 3 bx [orig:148 num_tilings ] [148])
            (const_int 0 [0]))) tiles.cpp:457 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 63 62 241 18 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 353)
            (pc))) tiles.cpp:457 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 353)
;;  succ:       19 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              33 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 43 [r14]

;; basic block 19, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 38 [r9] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 6 [bp] 38 [r9] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(note 241 63 244 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(note 244 241 246 19 NOTE_INSN_DELETED)
(note 246 244 242 19 NOTE_INSN_DELETED)
(insn:TI 242 246 243 19 (set (reg:DI 0 ax [orig:122 D.26224 ] [122])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 28 [0x1c])) [0 %sfp+-4 S4 A32]))) 149 {*extendsidi2_rex64}
     (nil))
(insn 243 242 372 19 (set (reg:DI 38 r9 [orig:94 ivtmp.255 ] [94])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 372 243 545 19 (set (reg/f:DI 6 bp [256])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 272 [0x110]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn:TI 545 372 413 19 (parallel [
            (set (reg:DI 42 r13 [orig:107 j ] [107])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:457 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 413 545 492 19 (set (reg:DI 44 r15 [orig:94 ivtmp.255 ] [94])
        (reg:DI 38 r9 [orig:94 ivtmp.255 ] [94])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [orig:94 ivtmp.255 ] [94])
        (nil)))
(insn:TI 492 413 493 19 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S8 A64])
        (reg:DI 0 ax [orig:122 D.26224 ] [122])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:122 D.26224 ] [122])
        (nil)))
(insn 493 492 544 19 (set (reg/v:SI 0 ax [orig:151 num_floats ] [151])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) 89 {*movsi_internal}
     (nil))
(insn:TI 544 493 247 19 (parallel [
            (set (reg:DI 0 ax [orig:229 D.26221 ] [229])
                (zero_extend:DI (plus:SI (reg/v:SI 0 ax [orig:151 num_floats ] [151])
                        (const_int -1 [0xffffffffffffffff]))))
            (clobber (reg:CC 17 flags))
        ]) 275 {addsi_1_zext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 247 544 341 19 (set (reg:DI 41 r12 [orig:144 D.26221 ] [144])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:229 D.26221 ] [229])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:229 D.26221 ] [229])
        (nil)))
;;  succ:       20 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 20, loop depth 0, count 0, freq 167, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       32 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              19 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 341 247 342 20 154 "" [1 uses])
(note 342 341 343 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(debug_insn 343 342 344 20 (var_location:SI j (reg/v:SI 42 r13 [orig:107 j ] [107])) -1
     (nil))
(debug_insn 344 343 539 20 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 539 344 540 20 (set (reg:SI 0 ax)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:460 89 {*movsi_internal}
     (nil))
(insn:TI 540 539 346 20 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax)
            (const_int 0 [0]))) tiles.cpp:460 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 346 540 347 20 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 361)
            (pc))) tiles.cpp:460 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 361)
;;  succ:       21 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              35 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 21, loop depth 0, count 0, freq 159, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
(note 347 346 373 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn:TI 373 347 374 21 (set (reg/f:DI 40 r11 [258])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn 374 373 15 21 (set (reg/f:DI 39 r10 [257])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 15 374 538 21 (set (reg:SI 5 di [orig:63 ivtmp.245 ] [63])
        (const_int 1 [0x1])) tiles.cpp:460 89 {*movsi_internal}
     (nil))
(insn:TI 538 15 348 21 (parallel [
            (set (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:460 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       22 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 22, loop depth 0, count 0, freq 3333, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       30 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              21 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp] 39 [r10] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(code_label 348 538 251 22 164 "" [1 uses])
(note 251 348 252 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(debug_insn 252 251 254 22 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 254 252 256 22 (set (reg:SI 37 r8 [orig:83 D.26216 ] [83])
        (mem:SI (plus:DI (reg/f:DI 40 r11 [258])
                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: qstate, index: ivtmp.241_108, offset: 0B]+0 S4 A32])) tiles.cpp:463 89 {*movsi_internal}
     (nil))
(insn 256 254 257 22 (set (reg:SI 4 si [orig:84 D.26216 ] [84])
        (mem:SI (plus:DI (reg/f:DI 39 r10 [257])
                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: base, index: ivtmp.241_108, offset: 0B]+0 S4 A32])) tiles.cpp:463 89 {*movsi_internal}
     (nil))
(insn:TI 257 256 258 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 37 r8 [orig:83 D.26216 ] [83])
            (reg:SI 4 si [orig:84 D.26216 ] [84]))) tiles.cpp:463 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 258 257 259 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) tiles.cpp:463 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 265)
;;  succ:       23 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              34 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 23, loop depth 0, count 0, freq 1667, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
(note 259 258 494 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn:TI 494 259 260 23 (set (reg:SI 0 ax [orig:233 D.26216 ] [233])
        (reg:SI 37 r8 [orig:83 D.26216 ] [83])) tiles.cpp:464 89 {*movsi_internal}
     (nil))
(insn:TI 260 494 512 23 (parallel [
            (set (reg:SI 0 ax [orig:233 D.26216 ] [233])
                (minus:SI (reg:SI 0 ax [orig:233 D.26216 ] [233])
                    (reg:SI 4 si [orig:84 D.26216 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:464 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 512 260 513 23 (parallel [
            (set (reg:SI 1 dx [orig:235 D.26216 ] [235])
                (ashiftrt:SI (reg:SI 0 ax [orig:233 D.26216 ] [233])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:464 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 513 512 262 23 (parallel [
            (set (reg:SI 0 ax [236])
                (div:SI (reg:SI 0 ax [orig:233 D.26216 ] [233])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (set (reg:SI 1 dx [orig:235 D.26216 ] [235])
                (mod:SI (reg:SI 0 ax [orig:233 D.26216 ] [233])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (use (reg:SI 1 dx [orig:235 D.26216 ] [235]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:464 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [236])
            (nil))))
(insn:TI 262 513 497 23 (parallel [
            (set (reg:SI 37 r8 [orig:93 D.26216 ] [93])
                (minus:SI (reg:SI 37 r8 [orig:93 D.26216 ] [93])
                    (reg:SI 1 dx [orig:235 D.26216 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:464 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:235 D.26216 ] [235])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 497 262 273 23 (set (reg:SI 1 dx [orig:93 D.26216 ] [93])
        (reg:SI 37 r8 [orig:93 D.26216 ] [93])) tiles.cpp:464 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:93 D.26216 ] [93])
        (nil)))
;;  succ:       24 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 24, loop depth 0, count 0, freq 3333, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       23 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              34 [100.0%]  (CAN_FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
(code_label 273 497 274 24 156 "" [1 uses])
(note 274 273 542 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn:TI 542 274 276 24 (set (reg:SI 37 r8)
        (mem:SI (plus:DI (reg/v/f:DI 43 r14 [orig:152 wrap_widths ] [152])
                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[base: wrap_widths_39(D), index: ivtmp.241_108, offset: 0B]+0 S4 A32])) tiles.cpp:467 89 {*movsi_internal}
     (nil))
(insn 276 542 543 24 (set (mem:SI (plus:DI (reg/f:DI 6 bp [256])
                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: coordinates, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 1 dx [orig:93 D.26216 ] [93])) 89 {*movsi_internal}
     (nil))
(insn:TI 543 276 278 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 37 r8)
            (const_int 0 [0]))) tiles.cpp:467 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 37 r8)
        (nil)))
(jump_insn:TI 278 543 279 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) tiles.cpp:467 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 285)
;;  succ:       25 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              26 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 25, loop depth 0, count 0, freq 1667, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, RTL)
;;  pred:       24 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(note 279 278 280 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(note 280 279 281 25 NOTE_INSN_DELETED)
(note 281 280 500 25 NOTE_INSN_DELETED)
(insn:TI 500 281 508 25 (set (reg:SI 0 ax [248])
        (reg:SI 1 dx [orig:93 D.26216 ] [93])) tiles.cpp:467 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:93 D.26216 ] [93])
        (nil)))
(insn:TI 508 500 509 25 (parallel [
            (set (reg:SI 1 dx [orig:93 D.26216 ] [93])
                (ashiftrt:SI (reg:SI 0 ax [248])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:467 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 509 508 284 25 (parallel [
            (set (reg:SI 0 ax [248])
                (div:SI (reg:SI 0 ax [248])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 7 sp)
                                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72]))
                            (const_int 192 [0xc0])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.241_108, offset: 0B]+0 S4 A32])))
            (set (reg:SI 1 dx [orig:93 D.26216 ] [93])
                (mod:SI (reg:SI 0 ax [248])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 7 sp)
                                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72]))
                            (const_int 192 [0xc0])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.241_108, offset: 0B]+0 S4 A32])))
            (use (reg:SI 1 dx [orig:93 D.26216 ] [93]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:467 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [248])
            (nil))))
(insn:TI 284 509 285 25 (set (mem:SI (plus:DI (reg/f:DI 6 bp [256])
                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: coordinates, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 1 dx [orig:93 D.26216 ] [93])) tiles.cpp:467 89 {*movsi_internal}
     (nil))
;;  succ:       26 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 26, loop depth 0, count 0, freq 3333, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       24 [50.0%]  (CAN_FALLTHRU)
;;              25 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 285 284 286 26 157 "" [1 uses])
(note 286 285 287 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn:TI 287 286 288 26 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 1 dx [orig:93 D.26216 ] [93])
            (const_int 0 [0]))) tiles.cpp:469 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 288 287 304 26 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 314)
            (pc))) tiles.cpp:469 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 314)
;;  succ:       27 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              30 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 27, loop depth 0, count 0, freq 819, maybe hot
;; Invalid sum of incoming frequencies 3033, should be 819
;;  prev block 26, next block 28, flags: (REACHABLE, RTL)
;;  pred:       26 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 304 288 306 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn:TI 306 304 319 27 (set (reg:SI 0 ax [orig:129 D.26216 ] [129])
        (mem:SI (plus:DI (plus:DI (reg/f:DI 7 sp)
                    (reg:DI 2 cx [orig:72 ivtmp.241 ] [72]))
                (const_int 192 [0xc0])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.241_108, offset: 0B]+0 S4 A32])) 89 {*movsi_internal}
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 28, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       28 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              27 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 319 306 307 28 163 "" [1 uses])
(note 307 319 308 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(note 308 307 309 28 NOTE_INSN_DELETED)
(insn:TI 309 308 310 28 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:SI (reg:SI 1 dx [orig:93 D.26216 ] [93])
                        (reg:SI 0 ax [orig:129 D.26216 ] [129]))
                    (const_int 0 [0])))
            (set (reg:SI 1 dx [orig:93 D.26216 ] [93])
                (plus:SI (reg:SI 1 dx [orig:93 D.26216 ] [93])
                    (reg:SI 0 ax [orig:129 D.26216 ] [129])))
        ]) tiles.cpp:469 281 {*addsi_2}
     (nil))
(jump_insn:TI 310 309 311 28 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 319)
            (pc))) tiles.cpp:469 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 319)
;;  succ:       28 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              29 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 29, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       28 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 311 310 313 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn:TI 313 311 314 29 (set (mem:SI (plus:DI (reg/f:DI 6 bp [256])
                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: coordinates, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 1 dx [orig:93 D.26216 ] [93])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:93 D.26216 ] [93])
        (nil)))
;;  succ:       30 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 30, loop depth 0, count 0, freq 3333, maybe hot
;; Invalid sum of incoming frequencies 1119, should be 3333
;;  prev block 29, next block 31, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       26 [9.0%]  (CAN_FALLTHRU)
;;              29 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 39 [r10] 41 [r12]
;; lr  def 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 314 313 289 30 162 "" [1 uses])
(note 289 314 291 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn:TI 291 289 296 30 (parallel [
            (set (reg:SI 4 si [251])
                (plus:SI (reg:SI 4 si [orig:84 D.26216 ] [84])
                    (reg:SI 5 di [orig:63 ivtmp.245 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:473 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 39 r10 [257])
                    (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: base, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
            (nil))))
(insn 296 291 292 30 (parallel [
            (set (reg:SI 5 di [orig:63 ivtmp.245 ] [63])
                (plus:SI (reg:SI 5 di [orig:63 ivtmp.245 ] [63])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 292 296 294 30 (set (mem:SI (plus:DI (reg/f:DI 39 r10 [257])
                (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])) [0 MEM[symbol: base, index: ivtmp.241_108, offset: 0B]+0 S4 A32])
        (reg:SI 4 si [251])) tiles.cpp:473 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [251])
        (nil)))
(debug_insn 294 292 295 30 (var_location:SI i (debug_expr:SI D#13)) -1
     (nil))
(insn 295 294 298 30 (parallel [
            (set (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])
                (plus:DI (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 298 295 299 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:72 ivtmp.241 ] [72])
            (reg:DI 41 r12 [orig:144 D.26221 ] [144]))) tiles.cpp:460 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 299 298 302 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 348)
            (pc))) tiles.cpp:460 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 348)
;;  succ:       22 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              31 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 31, loop depth 0, count 0, freq 159, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       30 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 302 299 18 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn:TI 18 302 322 31 (set (reg:DI 0 ax)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 4 [0x4])) [0 %sfp+-28 S4 A32]))) 149 {*extendsidi2_rex64}
     (nil))
;;  succ:       32 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 32, loop depth 0, count 0, freq 167, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       31 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              35 [100.0%]  (CAN_FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(code_label 322 18 323 32 160 "" [1 uses])
(note 323 322 328 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn:TI 328 323 329 32 (set (reg:DI 1 dx)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S8 A64])) tiles.cpp:478 87 {*movdi_internal_rex64}
     (nil))
(insn 329 328 327 32 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S4 A32])) tiles.cpp:478 89 {*movsi_internal}
     (nil))
(insn 327 329 325 32 (set (reg:SI 2 cx)
        (const_int 449 [0x1c1])) tiles.cpp:478 89 {*movsi_internal}
     (nil))
(insn:TI 325 327 330 32 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:254 num_floats ] [254])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 272 [0x110])) [0 coordinates S4 A32])
        (reg/v:SI 42 r13 [orig:107 j ] [107])) tiles.cpp:476 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:254 num_floats ] [254])
        (nil)))
(insn 330 325 334 32 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [256])) tiles.cpp:478 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 334 330 337 32 (parallel [
            (set (reg/v:SI 42 r13 [orig:107 j ] [107])
                (plus:SI (reg/v:SI 42 r13 [orig:107 j ] [107])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:457 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 337 334 331 32 (parallel [
            (set (reg:DI 44 r15 [orig:94 ivtmp.255 ] [94])
                (plus:DI (reg:DI 44 r15 [orig:94 ivtmp.255 ] [94])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 331 337 336 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8hash_UNHPiili") [flags 0x1]  <function_decl 0x2b82f1f16700 hash_UNH>) [0 hash_UNH S1 A8])
            (const_int 0 [0]))) tiles.cpp:478 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (nil))))))
(debug_insn 336 331 333 32 (var_location:SI j (reg/v:SI 42 r13 [orig:107 j ] [107])) -1
     (nil))
(insn:TI 333 336 338 32 (set (mem:SI (plus:DI (reg:DI 44 r15 [orig:94 ivtmp.255 ] [94])
                (const_int -4 [0xfffffffffffffffc])) [0 MEM[base: _77, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:106 D.26216 ] [106])) tiles.cpp:478 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:106 D.26216 ] [106])
        (nil)))
(insn 338 333 339 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 42 r13 [orig:107 j ] [107])
            (reg/v:SI 3 bx [orig:148 num_tilings ] [148]))) tiles.cpp:457 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 339 338 353 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 341)
            (pc))) tiles.cpp:457 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 341)
;;  succ:       20 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              33 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 33, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, RTL)
;;  pred:       32 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              18 [9.0%]  (CAN_FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 353 339 354 33 141 "" [1 uses])
(note 354 353 528 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(note 528 354 529 33 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 529 528 530 33 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 456 [0x1c8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:481 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 456 [0x1c8])))
            (nil))))
(insn/f:TI 530 529 531 33 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:481 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 531 530 532 33 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:481 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 532 531 533 33 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:481 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 533 532 534 33 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:481 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 534 533 535 33 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:481 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 535 534 536 33 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:481 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 536 535 537 33 (simple_return) tiles.cpp:481 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 537 536 265)
;; basic block 34, loop depth 0, count 0, freq 1667, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [50.0%]  (CAN_FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(code_label 265 537 266 34 155 "" [1 uses])
(note 266 265 267 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(note 267 266 498 34 NOTE_INSN_DELETED)
(insn:TI 498 267 268 34 (set (reg:SI 0 ax [orig:238 D.26216 ] [238])
        (reg:SI 4 si [orig:84 D.26216 ] [84])) tiles.cpp:466 89 {*movsi_internal}
     (nil))
(insn:TI 268 498 269 34 (parallel [
            (set (reg:SI 0 ax [orig:238 D.26216 ] [238])
                (minus:SI (reg:SI 0 ax [orig:238 D.26216 ] [238])
                    (reg:SI 37 r8 [orig:83 D.26216 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 269 268 510 34 (parallel [
            (set (reg:SI 0 ax [orig:239 D.26216 ] [239])
                (plus:SI (reg:SI 0 ax [orig:238 D.26216 ] [238])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 510 269 511 34 (parallel [
            (set (reg:SI 1 dx [orig:241 D.26216 ] [241])
                (ashiftrt:SI (reg:SI 0 ax [orig:239 D.26216 ] [239])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 511 510 271 34 (parallel [
            (set (reg:SI 0 ax [242])
                (div:SI (reg:SI 0 ax [orig:239 D.26216 ] [239])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (set (reg:SI 1 dx [orig:241 D.26216 ] [241])
                (mod:SI (reg:SI 0 ax [orig:239 D.26216 ] [239])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (use (reg:SI 1 dx [orig:241 D.26216 ] [241]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [242])
            (nil))))
(insn:TI 271 511 272 34 (set (reg:SI 1 dx [orig:93 D.26216 ] [93])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:83 D.26216 ] [83])
                (reg:SI 1 dx [orig:241 D.26216 ] [241]))
            (const_int 1 [0x1]))) tiles.cpp:466 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:83 D.26216 ] [83])
        (nil)))
(insn:TI 272 271 558 34 (parallel [
            (set (reg:SI 1 dx [orig:93 D.26216 ] [93])
                (minus:SI (reg:SI 1 dx [orig:93 D.26216 ] [93])
                    (reg/v:SI 3 bx [orig:148 num_tilings ] [148])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:466 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 558 272 559 34 (set (pc)
        (label_ref 273)) 650 {jump}
     (nil)
 -> 273)
;;  succ:       24 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 559 558 361)
;; basic block 35, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [4.8%]  (CAN_FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 361 559 360 35 166 "" [1 uses])
(note 360 361 541 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn:TI 541 360 560 35 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:460 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 560 541 561 35 (set (pc)
        (label_ref 322)) 650 {jump}
     (nil)
 -> 322)
;;  succ:       32 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 561 560 359)
;; basic block 36, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 35, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [33.3%]  (CAN_FALLTHRU)
;;              7 [33.3%]  (CAN_FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 359 561 358 36 165 "" [2 uses])
(note 358 359 550 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn:TI 550 358 562 36 (parallel [
            (set (reg:DI 0 ax [orig:114 i ] [114])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:452 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 562 550 563 36 (set (pc)
        (label_ref 211)) 650 {jump}
     (nil)
 -> 211)
;;  succ:       15 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r14]

(barrier 563 562 0)

;; Function void tileswrap(int*, int, collision_table*, float*, int, int*, int*, int) (_Z9tileswrapPiiP15collision_tablePfiS_S_i, funcdef_no=1101, decl_uid=23893, cgraph_uid=345)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 37 n_edges 56 count 53 (  1.4)


void tileswrap(int*, int, collision_table*, float*, int, int*, int*, int)

Dataflow summary:
def_info->table_size = 373, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8] 38[r9] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={29d,37u} r1={27d,35u} r2={11d,17u} r3={3d,14u} r4={10d,9u} r5={11d,9u} r6={5d,13u} r7={15d,97u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={57d,20u} r18={4d} r19={4d} r20={5e} r21={11d,12u} r22={10d,10u} r23={15d,11u} r24={21d,19u} r25={8d,3u} r26={8d,3u} r27={7d,2u} r28={7d,2u} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={8d,9u} r38={8d,4u} r39={4d} r40={5d,1u} r41={4d,7u,1e} r42={4d,4u} r43={5d,5u} r44={8d,15u,1e} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 770{405d,358u,7e} in 242{238 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]

( 2 3 )->[4]->( 5 18 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 38 [r9]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 25 [xmm4] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 25 [xmm4] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 5 )->[6]->( 6 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags] 21 [xmm0] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 6 )->[7]->( 36 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]

( 7 )->[8]->( 9 36 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]

( 8 )->[9]->( 10 14 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

( 9 )->[10]->( 11 14 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

( 10 )->[11]->( 12 14 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

( 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

( 12 9 10 11 13 )->[14]->( 15 18 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

( 14 36 )->[15]->( 16 18 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

( 15 )->[16]->( 17 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

( 16 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 14 15 4 17 16 )->[18]->( 19 33 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 18 )->[19]->( 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 6 [bp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 32 19 )->[20]->( 21 35 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 20 )->[21]->( 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 38 [r9] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 30 21 )->[22]->( 23 34 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 5 [di] 7 [sp] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 22 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 23 34 )->[24]->( 25 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 24 )->[25]->( 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 24 25 )->[26]->( 27 30 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 28 27 )->[28]->( 28 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 28 )->[29]->( 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 26 29 )->[30]->( 22 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 38 [r9] 42 [r13]
;; lr  def 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 30 )->[31]->( 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 31 35 )->[32]->( 20 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 32 18 )->[33]->( 1 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 22 )->[34]->( 24 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 20 )->[35]->( 32 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 7 )->[36]->( 15 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

( 33 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 29 to worklist
  Adding insn 460 to worklist
  Adding insn 499 to worklist
  Adding insn 6 to worklist
  Adding insn 4 to worklist
  Adding insn 522 to worklist
  Adding insn 521 to worklist
  Adding insn 520 to worklist
  Adding insn 519 to worklist
  Adding insn 518 to worklist
  Adding insn 517 to worklist
  Adding insn 52 to worklist
  Adding insn 33 to worklist
  Adding insn 461 to worklist
  Adding insn 88 to worklist
  Adding insn 83 to worklist
  Adding insn 79 to worklist
  Adding insn 111 to worklist
  Adding insn 103 to worklist
  Adding insn 115 to worklist
  Adding insn 132 to worklist
  Adding insn 128 to worklist
  Adding insn 467 to worklist
  Adding insn 147 to worklist
  Adding insn 143 to worklist
  Adding insn 162 to worklist
  Adding insn 158 to worklist
  Adding insn 177 to worklist
  Adding insn 173 to worklist
  Adding insn 188 to worklist
  Adding insn 210 to worklist
  Adding insn 223 to worklist
  Adding insn 218 to worklist
  Adding insn 236 to worklist
  Adding insn 230 to worklist
  Adding insn 199 to worklist
  Adding insn 63 to worklist
  Adding insn 344 to worklist
  Adding insn 257 to worklist
  Adding insn 277 to worklist
  Adding insn 275 to worklist
  Adding insn 283 to worklist
  Adding insn 287 to worklist
  Adding insn 309 to worklist
  Adding insn 312 to worklist
  Adding insn 298 to worklist
  Adding insn 291 to worklist
  Adding insn 337 to worklist
  Adding insn 331 to worklist
  Adding insn 329 to worklist
  Adding insn 324 to worklist
  Adding insn 535 to worklist
  Adding insn 557 to worklist
  Adding insn 559 to worklist
  Adding insn 561 to worklist
Finished finding needed instructions:
processing block 33 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 534 to worklist
  Adding insn 533 to worklist
  Adding insn 532 to worklist
  Adding insn 531 to worklist
  Adding insn 530 to worklist
  Adding insn 529 to worklist
  Adding insn 528 to worklist
processing block 32 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 336 to worklist
  Adding insn 335 to worklist
  Adding insn 332 to worklist
  Adding insn 328 to worklist
  Adding insn 327 to worklist
  Adding insn 326 to worklist
processing block 31 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 18 to worklist
processing block 30 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 297 to worklist
  Adding insn 295 to worklist
  Adding insn 294 to worklist
  Adding insn 290 to worklist
processing block 29 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 28 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 308 to worklist
processing block 27 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 305 to worklist
processing block 26 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 286 to worklist
processing block 25 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 508 to worklist
  Adding insn 507 to worklist
  Adding insn 498 to worklist
processing block 24 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 542 to worklist
  Adding insn 541 to worklist
processing block 23 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 495 to worklist
  Adding insn 261 to worklist
  Adding insn 512 to worklist
  Adding insn 511 to worklist
  Adding insn 259 to worklist
  Adding insn 492 to worklist
processing block 34 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 271 to worklist
  Adding insn 270 to worklist
  Adding insn 510 to worklist
  Adding insn 509 to worklist
  Adding insn 268 to worklist
  Adding insn 267 to worklist
  Adding insn 496 to worklist
processing block 22 lr out =  2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 256 to worklist
  Adding insn 255 to worklist
  Adding insn 253 to worklist
processing block 21 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 372 to worklist
  Adding insn 371 to worklist
  Adding insn 537 to worklist
  Adding insn 15 to worklist
processing block 35 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 540 to worklist
processing block 20 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 539 to worklist
  Adding insn 538 to worklist
processing block 19 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 417 to worklist
  Adding insn 415 to worklist
  Adding insn 414 to worklist
  Adding insn 413 to worklist
  Adding insn 370 to worklist
  Adding insn 544 to worklist
  Adding insn 246 to worklist
  Adding insn 543 to worklist
  Adding insn 491 to worklist
  Adding insn 242 to worklist
processing block 18 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 62 to worklist
processing block 17 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 551 to worklist
  Adding insn 550 to worklist
  Adding insn 195 to worklist
processing block 16 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 235 to worklist
  Adding insn 231 to worklist
  Adding insn 546 to worklist
  Adding insn 545 to worklist
  Adding insn 226 to worklist
processing block 15 lr out =  0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
  Adding insn 222 to worklist
  Adding insn 502 to worklist
  Adding insn 513 to worklist
  Adding insn 548 to worklist
  Adding insn 547 to worklist
  Adding insn 214 to worklist
processing block 36 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 549 to worklist
processing block 14 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 209 to worklist
processing block 13 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 187 to worklist
  Adding insn 186 to worklist
  Adding insn 185 to worklist
  Adding insn 184 to worklist
  Adding insn 182 to worklist
  Adding insn 181 to worklist
  Adding insn 180 to worklist
processing block 12 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
  Adding insn 176 to worklist
  Adding insn 172 to worklist
  Adding insn 171 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 483 to worklist
  Adding insn 165 to worklist
processing block 11 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
  Adding insn 161 to worklist
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 155 to worklist
  Adding insn 154 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
  Adding insn 480 to worklist
  Adding insn 150 to worklist
processing block 10 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
  Adding insn 146 to worklist
  Adding insn 142 to worklist
  Adding insn 141 to worklist
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 477 to worklist
  Adding insn 135 to worklist
processing block 9 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
  Adding insn 131 to worklist
  Adding insn 127 to worklist
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
  Adding insn 123 to worklist
  Adding insn 474 to worklist
  Adding insn 122 to worklist
  Adding insn 472 to worklist
  Adding insn 121 to worklist
  Adding insn 470 to worklist
  Adding insn 120 to worklist
  Adding insn 117 to worklist
  Adding insn 468 to worklist
processing block 8 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 114 to worklist
processing block 7 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 110 to worklist
  Adding insn 515 to worklist
  Adding insn 106 to worklist
  Adding insn 465 to worklist
  Adding insn 552 to worklist
  Adding insn 514 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
  Adding insn 501 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 87 to worklist
  Adding insn 86 to worklist
  Adding insn 82 to worklist
  Adding insn 77 to worklist
  Adding insn 463 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 369 to worklist
  Adding insn 554 to worklist
  Adding insn 74 to worklist
  Adding insn 553 to worklist
  Adding insn 462 to worklist
  Adding insn 69 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 43 [r14]
  Adding insn 556 to worklist
  Adding insn 555 to worklist
processing block 3 lr out =  3 [bx] 6 [bp] 7 [sp] 43 [r14]
  Adding insn 50 to worklist
  Adding insn 516 to worklist
  Adding insn 43 to worklist
  Adding insn 40 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]
  Adding insn 28 to worklist
  Adding insn 24 to worklist
  Adding insn 11 to worklist
  Adding insn 9 to worklist
  Adding insn 7 to worklist
  Adding insn 5 to worklist
  Adding insn 523 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 37 n_edges 56 count 41 (  1.1)
deleting insn with uid = 524.
deleting insn with uid = 12.
deleting insn with uid = 23.
;;   ======================================================
;;   -- basic block 2 from 517 to 29 -- after reload
;;   ======================================================

;;	  0--> b  0: i 517[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 518[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i   7r14=cx                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 519[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 520[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 521[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i   9bp=r9                                   :athlon-direct,athlon-ieu
;;	 10--> b  0: i 522[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i   5bx=si                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i 523{sp=sp-0x1c8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 13--> b  0: i  11ax=sxn([sp+0x208])                      :athlon-direct,athlon-load,athlon-ieu
;;	 13--> b  0: i   4[sp+0x18]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i   6[sp+0x10]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i 499[sp+0x4]=r8                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  24di=r8+ax+0x1                            :athlon-direct,athlon-agu,nothing
;;	 17--> b  0: i  28flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 19--> b  0: i 460[sp+0xc]=di                             :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  25loc [sp+0xc]                            :nothing
;;	 19--> b  0: i  27loc 0                                   :nothing
;;	 19--> b  0: i  29pc={(flags<=0)?L55:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 19
;;   new head = 517
;;   new tail = 29

deleting insn with uid = 41.
deleting insn with uid = 42.
;;   ======================================================
;;   -- basic block 3 from 40 to 52 -- after reload
;;   ======================================================

;;	  0--> b  0: i  40dx=sxn([sp+0x4])                        :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  50si=[sp+0x200]                           :athlon-direct,athlon-load
;;	  4--> b  0: i  43di=dx*0x4+sp+0x114                      :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 516dx=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i  52ax=call [`memcpy']                      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 40
;;   new tail = 52

;;   ======================================================
;;   -- basic block 4 from 31 to 33 -- after reload
;;   ======================================================

;;	  0--> b  0: i  31loc 0                                   :nothing
;;	  0--> b  0: i 555r9=[sp+0x4]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 556flags=cmp(r9,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  33pc={(flags<=0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 31
;;   new tail = 33

deleting insn with uid = 71.
deleting insn with uid = 73.
;;   ======================================================
;;   -- basic block 5 from 69 to 369 -- after reload
;;   ======================================================

;;	  0--> b  0: i  69xmm4=flt(bx)                            :athlon-double,athlon-fploadk8,athlon-fstore
;;	  0--> b  0: i 462ax=[sp+0x4]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 369r12=sp+0x20                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 554{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 553{ax=zxn(ax-0x1);clobber flags;}         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  74r13=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	 11--> b  0: i 461[sp+0x8]=xmm4                           :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	Ready list (final):  
;;   total time = 11
;;   new head = 69
;;   new tail = 369

;;   ======================================================
;;   -- basic block 6 from 76 to 88 -- after reload
;;   ======================================================

;;	  0--> b  0: i  76loc clobber                             :nothing
;;	  0--> b  0: i 463xmm0=[sp+0x8]                           :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  1--> b  0: i  77xmm0=xmm0*[r14+r15]                     :athlon-direct,athlon-fploadk8,athlon-fmul
;;	  7--> b  0: i  79xmm0=call [`floorf']                    :athlon-vector,athlon-ieu
;;	  8--> b  0: i  82ax=fix(xmm0)                            :athlon-double,athlon-fploadk8,athlon-fstore
;;	 19--> b  0: i  83[r12+r15]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  85loc D#19                                :nothing
;;	 19--> b  0: i  86{r15=r15+0x4;clobber flags;}            :athlon-direct,athlon-ieu
;;	 20--> b  0: i  87flags=cmp(r15,r13)                      :athlon-direct,athlon-ieu
;;	 21--> b  0: i  88pc={(flags!=0)?L90:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 21
;;   new head = 76
;;   new tail = 88

deleting insn with uid = 108.
deleting insn with uid = 109.
;;   ======================================================
;;   -- basic block 7 from 501 to 111 -- after reload
;;   ======================================================

;;	  0--> b  0: i 501r15=[sp+0x4]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 514di=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 552{si=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  95dx=sxn(r15)                             :athlon-direct,athlon-ieu
;;	  4--> b  0: i  96{dx=dx<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  5--> b  0: i 103ax=call [`memset']                      :athlon-vector,athlon-ieu
;;	  6--> b  0: i 465dx=r15                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 106{dx=dx 0>>0x2;clobber flags;}           :athlon-direct,athlon-ieu
;;	  8--> b  0: i 515ax=dx*0x4                               :athlon-direct,athlon-agu,nothing
;;	 10--> b  0: i 110flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 11--> b  0: i 111pc={(flags==0)?L357:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 501
;;   new tail = 111

;;   ======================================================
;;   -- basic block 8 from 114 to 115 -- after reload
;;   ======================================================

;;	  0--> b  0: i 114flags=cmp(r15,0x3)                      :athlon-direct,athlon-ieu
;;	  1--> b  0: i 115pc={(leu(flags,0))?L357:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 114
;;   new tail = 115

;;   ======================================================
;;   -- basic block 9 from 467 to 132 -- after reload
;;   ======================================================

;;	  0--> b  0: i 467[sp+0x8]=bx                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 131flags=cmp(dx,0x1)                       :athlon-direct,athlon-ieu
;;	  1--> b  0: i 468xmm5=[sp+0x8]                           :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  2--> b  0: i 120xmm1=unspec[[bp]] 92                    :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  3--> b  0: i 117xmm0=vec_duplicate(xmm5)                :athlon-double,athlon-fpsched,athlon-fmul
;;	  3--> b  0: i 119loc clobber                             :nothing
;;	  4--> b  0: i 470xmm4=xmm1                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 472xmm3=xmm1                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  6--> b  0: i 474xmm1=xmm0                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  6--> b  0: i 121xmm4=zxn(vec_select(xmm4,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 122xmm3=xmm3 0>>0x20                       :nothing
;;	  7--> b  0: i 125xmm2=vec_select(xmm4,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  8--> b  0: i 123xmm1=xmm1 0>>0x20                       :nothing
;;	  8--> b  0: i 124xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  8--> b  0: i 126xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	 11--> b  0: i 127xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 14--> b  0: i 128[sp+0xc0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 14--> b  0: i 130loc D#17                                :nothing
;;	 15--> b  0: i 132pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 467
;;   new tail = 132

;;   ======================================================
;;   -- basic block 10 from 134 to 147 -- after reload
;;   ======================================================

;;	  0--> b  0: i 134loc clobber                             :nothing
;;	  0--> b  0: i 146flags=cmp(dx,0x2)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i 135xmm3=unspec[[bp+0x10]] 92               :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 477xmm5=xmm3                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 137xmm3=xmm3 0>>0x20                       :nothing
;;	  4--> b  0: i 139xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  5--> b  0: i 141xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 136xmm5=zxn(vec_select(xmm5,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 140xmm2=vec_select(xmm5,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 142xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 12--> b  0: i 143[sp+0xd0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 12--> b  0: i 145loc D#17                                :nothing
;;	 13--> b  0: i 147pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 134
;;   new tail = 147

;;   ======================================================
;;   -- basic block 11 from 149 to 162 -- after reload
;;   ======================================================

;;	  0--> b  0: i 149loc clobber                             :nothing
;;	  0--> b  0: i 161flags=cmp(dx,0x3)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i 150xmm3=unspec[[bp+0x20]] 92               :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 480xmm6=xmm3                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 152xmm3=xmm3 0>>0x20                       :nothing
;;	  4--> b  0: i 154xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  5--> b  0: i 156xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 151xmm6=zxn(vec_select(xmm6,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 155xmm2=vec_select(xmm6,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 157xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 12--> b  0: i 158[sp+0xe0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 12--> b  0: i 160loc D#17                                :nothing
;;	 13--> b  0: i 162pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 149
;;   new tail = 162

;;   ======================================================
;;   -- basic block 12 from 164 to 177 -- after reload
;;   ======================================================

;;	  0--> b  0: i 164loc clobber                             :nothing
;;	  0--> b  0: i 176flags=cmp(dx,0x4)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i 165xmm3=unspec[[bp+0x30]] 92               :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 483xmm7=xmm3                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  4--> b  0: i 167xmm3=xmm3 0>>0x20                       :nothing
;;	  4--> b  0: i 169xmm3=zxn(vec_select(xmm3,parallel))*zxn(vec_select(xmm1,parallel)):nothing
;;	  5--> b  0: i 171xmm3=vec_select(xmm3,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 166xmm7=zxn(vec_select(xmm7,parallel))*zxn(vec_select(xmm0,parallel)):nothing
;;	  6--> b  0: i 170xmm2=vec_select(xmm7,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 172xmm2=vec_select(vec_concat(xmm2,xmm3),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 12--> b  0: i 173[sp+0xf0]=xmm2                          :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 12--> b  0: i 175loc D#17                                :nothing
;;	 13--> b  0: i 177pc={(leu(flags,0))?L206:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 164
;;   new tail = 177

;;   ======================================================
;;   -- basic block 13 from 179 to 190 -- after reload
;;   ======================================================

;;	  0--> b  0: i 179loc clobber                             :nothing
;;	  2--> b  0: i 180xmm2=unspec[[bp+0x40]] 92               :athlon-double,athlon-fpload2k8,athlon-fstore,athlon-fstore
;;	  4--> b  0: i 181xmm0=zxn(vec_select(xmm0,parallel))*zxn(vec_select(xmm2,parallel)):nothing
;;	  4--> b  0: i 182xmm2=xmm2 0>>0x20                       :nothing
;;	  4--> b  0: i 185xmm0=vec_select(xmm0,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  5--> b  0: i 184xmm1=zxn(vec_select(xmm1,parallel))*zxn(vec_select(xmm2,parallel)):nothing
;;	  5--> b  0: i 186xmm1=vec_select(xmm1,parallel)          :athlon-double,athlon-fpsched,athlon-fmul
;;	  8--> b  0: i 187xmm0=vec_select(vec_concat(xmm0,xmm1),parallel):athlon-double,athlon-fpsched,athlon-fmul
;;	 11--> b  0: i 188[sp+0x100]=xmm0                         :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 11--> b  0: i 190loc D#17                                :nothing
;;	Ready list (final):  
;;   total time = 11
;;   new head = 179
;;   new tail = 190

;;   ======================================================
;;   -- basic block 14 from 209 to 210 -- after reload
;;   ======================================================

;;	  0--> b  0: i 209flags=cmp(ax,[sp+0x4])                  :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 210pc={(flags==0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 209
;;   new tail = 210

deleting insn with uid = 216.
;;   ======================================================
;;   -- basic block 15 from 213 to 223 -- after reload
;;   ======================================================

;;	  0--> b  0: i 213loc ax                                  :nothing
;;	  0--> b  0: i 214dx=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 502di=[sp+0x4]                             :athlon-direct,athlon-load
;;	  1--> b  0: i 547cx=[dx*0x4+bp]                          :athlon-direct,athlon-load
;;	  4--> b  0: i 548{cx=cx*bx;clobber flags;}               :athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0
;;	  7--> b  0: i 218[dx*0x4+sp+0xc0]=cx                     :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 513dx=ax+0x1                               :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i 221loc dx                                  :nothing
;;	  9--> b  0: i 222flags=cmp(di,dx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 223pc={(flags<=0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 213
;;   new tail = 223

deleting insn with uid = 228.
;;   ======================================================
;;   -- basic block 16 from 225 to 236 -- after reload
;;   ======================================================

;;	  0--> b  0: i 225loc dx                                  :nothing
;;	  0--> b  0: i 226dx=sxn(dx)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 231{ax=ax+0x2;clobber flags;}              :athlon-direct,athlon-ieu
rescanning insn with uid = 361.
deleting insn with uid = 361.
;;	  1--> b  0: i 545cx=[dx*0x4+bp]                          :athlon-direct,athlon-load
;;	  4--> b  0: i 546{cx=cx*bx;clobber flags;}               :athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0
;;	  4--> b  0: i 235flags=cmp(ax,di)                        :athlon-direct,athlon-ieu
;;	  7--> b  0: i 230[dx*0x4+sp+0xc0]=cx                     :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 361loc clobber                             :nothing
;;	  7--> b  0: i 233loc D#21                                :nothing
;;	  7--> b  0: i 236pc={(flags>=0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 225
;;   new tail = 236

deleting insn with uid = 197.
;;   ======================================================
;;   -- basic block 17 from 194 to 202 -- after reload
;;   ======================================================

;;	  0--> b  0: i 194loc D#21                                :nothing
;;	  0--> b  0: i 195ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 550dx=[ax*0x4+bp]                          :athlon-direct,athlon-load
;;	  4--> b  0: i 551{dx=dx*bx;clobber flags;}               :athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0
;;	  7--> b  0: i 199[ax*0x4+sp+0xc0]=dx                     :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 200loc D#21+0x1                            :nothing
;;	  7--> b  0: i 202loc D#20                                :nothing
;;	Ready list (final):  
;;   total time = 7
;;   new head = 194
;;   new tail = 202

;;   ======================================================
;;   -- basic block 18 from 61 to 63 -- after reload
;;   ======================================================

;;	  0--> b  0: i  61loc 0                                   :nothing
;;	  0--> b  0: i  62flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  63pc={(flags<=0)?L351:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 61
;;   new tail = 63

deleting insn with uid = 243.
deleting insn with uid = 245.
deleting insn with uid = 503.
;;   ======================================================
;;   -- basic block 19 from 242 to 417 -- after reload
;;   ======================================================

;;	  0--> b  0: i 491ax=[sp+0x4]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 242r15=[sp+0x18]                           :athlon-direct,athlon-load
;;	  0--> b  0: i 544{r14=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 370r12=sp+0x110                            :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 543{ax=zxn(ax-0x1);clobber flags;}         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 246r13=ax*0x4+0x4                          :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 413ax=bp                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 414bp=r15                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 415r15=r14                                 :athlon-direct,athlon-ieu
;;	  5--> b  0: i 417r14=ax                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 242
;;   new tail = 417

;;   ======================================================
;;   -- basic block 20 from 341 to 344 -- after reload
;;   ======================================================

;;	  0--> b  0: i 341loc r15                                 :nothing
;;	  0--> b  0: i 342loc 0                                   :nothing
;;	  0--> b  0: i 538ax=[sp+0x4]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 539flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 344pc={(flags<=0)?L359:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 341
;;   new tail = 344

;;   ======================================================
;;   -- basic block 21 from 15 to 372 -- after reload
;;   ======================================================

;;	  0--> b  0: i 371r11=sp+0x20                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 372di=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  15r9=0x1                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 537{cx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 15
;;   new tail = 372

;;   ======================================================
;;   -- basic block 22 from 251 to 257 -- after reload
;;   ======================================================

;;	  0--> b  0: i 251loc clobber                             :nothing
;;	  0--> b  0: i 253r8=[r11+cx]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 255si=[di+cx]                              :athlon-direct,athlon-load
;;	  3--> b  0: i 256flags=cmp(r8,si)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 257pc={(flags<0)?L264:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 251
;;   new tail = 257

;;   ======================================================
;;   -- basic block 23 from 492 to 495 -- after reload
;;   ======================================================

;;	  0--> b  0: i 492ax=r8                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 259{ax=ax-si;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 511{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  3--> b  0: i 512{ax=ax/bx;dx=ax%bx;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  9--> b  0: i 261{r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 10--> b  0: i 495dx=r8                                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 492
;;   new tail = 495

;;   ======================================================
;;   -- basic block 24 from 275 to 277 -- after reload
;;   ======================================================

;;	  0--> b  0: i 541r8=[r14+cx]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 275[r12+cx]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 542flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 277pc={(flags==0)?L284:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 275
;;   new tail = 277

;;   ======================================================
;;   -- basic block 25 from 498 to 283 -- after reload
;;   ======================================================

;;	  0--> b  0: i 498ax=dx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 507{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  2--> b  0: i 508{ax=ax/[sp+cx+0xc0];dx=ax%[sp+cx+0xc0];use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	  8--> b  0: i 283[r12+cx]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 8
;;   new head = 498
;;   new tail = 283

;;   ======================================================
;;   -- basic block 26 from 286 to 287 -- after reload
;;   ======================================================

;;	  0--> b  0: i 286flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 287pc={(flags>=0)?L313:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 286
;;   new tail = 287

;;   ======================================================
;;   -- basic block 27 from 305 to 305 -- after reload
;;   ======================================================

;;	  0--> b  0: i 305ax=[sp+cx+0xc0]                         :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 305
;;   new tail = 305

;;   ======================================================
;;   -- basic block 28 from 308 to 309 -- after reload
;;   ======================================================

;;	  0--> b  0: i 308{flags=cmp(dx+ax,0);dx=dx+ax;}          :athlon-direct,athlon-ieu
;;	  1--> b  0: i 309pc={(flags<0)?L318:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 308
;;   new tail = 309

;;   ======================================================
;;   -- basic block 29 from 312 to 312 -- after reload
;;   ======================================================

;;	  0--> b  0: i 312[r12+cx]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 312
;;   new tail = 312

;;   ======================================================
;;   -- basic block 30 from 290 to 298 -- after reload
;;   ======================================================

;;	  0--> b  0: i 290{si=si+r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	  0--> b  0: i 295{r9=r9+0x2;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 291[di+cx]=si                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 293loc D#18                                :nothing
;;	  1--> b  0: i 294{cx=cx+0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	  2--> b  0: i 297flags=cmp(cx,r13)                       :athlon-direct,athlon-ieu
;;	  3--> b  0: i 298pc={(flags!=0)?L346:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 290
;;   new tail = 298

;;   ======================================================
;;   -- basic block 31 from 18 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i  18ax=sxn([sp+0x4])                        :athlon-direct,athlon-load,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 18
;;   new tail = 18

rescanning insn with uid = 331.
deleting insn with uid = 331.
rescanning insn with uid = 331.
deleting insn with uid = 331.
;;   ======================================================
;;   -- basic block 32 from 324 to 337 -- after reload
;;   ======================================================

;;	  0--> b  0: i 326dx=[sp+0x10]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 327si=[sp+0xc]                             :athlon-direct,athlon-load
;;	  0--> b  0: i 328di=r12                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 324[ax*0x4+sp+0x110]=r15                   :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 332{r15=r15+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i 335{bp=bp+0x4;clobber flags;}              :athlon-direct,athlon-ieu
rescanning insn with uid = 331.
deleting insn with uid = 331.
;;	  3--> b  0: i 329ax=call [`_Z4hashPiiP15collision_table']:athlon-vector,athlon-ieu
;;	  3--> b  0: i 334loc r15                                 :nothing
;;	  4--> b  0: i 331[bp-0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 336flags=cmp(r15,bx)                       :athlon-direct,athlon-ieu
;;	  5--> b  0: i 337pc={(flags!=0)?L339:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 324
;;   new tail = 337

;;   ======================================================
;;   -- basic block 33 from 528 to 535 -- after reload
;;   ======================================================

;;	  0--> b  0: i 528{sp=sp+0x1c8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i 529bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 530bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 531r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 532r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 533r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 534r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 535simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 528
;;   new tail = 535

;;   ======================================================
;;   -- basic block 34 from 496 to 557 -- after reload
;;   ======================================================

;;	  0--> b  0: i 496ax=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 267{ax=ax-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 268{ax=ax-0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 509{dx=ax>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  4--> b  0: i 510{ax=ax/bx;dx=ax%bx;use dx;clobber flags;}:athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))
;;	 10--> b  0: i 270dx=r8+dx+0x1                            :athlon-direct,athlon-agu,nothing
;;	 12--> b  0: i 271{dx=dx-bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 12--> b  0: i 557pc=L272                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 496
;;   new tail = 557

;;   ======================================================
;;   -- basic block 35 from 540 to 559 -- after reload
;;   ======================================================

;;	  0--> b  0: i 540{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 559pc=L321                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 540
;;   new tail = 559

;;   ======================================================
;;   -- basic block 36 from 549 to 561 -- after reload
;;   ======================================================

;;	  0--> b  0: i 549{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 561pc=L211                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 549
;;   new tail = 561



starting the processing of deferred insns
ending the processing of deferred insns


void tileswrap(int*, int, collision_table*, float*, int, int*, int*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8] 38[r9] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={29d,36u} r1={27d,35u} r2={11d,17u} r3={3d,14u} r4={10d,9u} r5={11d,9u} r6={5d,13u} r7={15d,97u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={57d,20u} r18={4d} r19={4d} r20={5e} r21={11d,12u} r22={10d,10u} r23={15d,11u} r24={21d,19u} r25={8d,3u} r26={8d,3u} r27={7d,2u} r28={7d,2u} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={8d,9u} r38={8d,4u} r39={4d} r40={5d,1u} r41={4d,7u,1e} r42={4d,4u} r43={5d,5u} r44={8d,15u,1e} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 769{405d,357u,7e} in 242{238 regular + 4 call} insns.
(note 3 0 21 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 43 [r14]
;; live  kill	 17 [flags]
(note 21 3 12 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 12 21 23 2 NOTE_INSN_FUNCTION_BEG)
(note 23 12 517 2 NOTE_INSN_DELETED)
(insn/f:TI 517 23 518 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tiles.cpp:492 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn/f:TI 518 517 7 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tiles.cpp:492 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn 7 518 519 2 (set (reg/v/f:DI 43 r14 [orig:149 floats ] [149])
        (reg:DI 2 cx [ floats ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ floats ])
        (nil)))
(insn/f:TI 519 7 520 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tiles.cpp:492 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 520 519 521 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tiles.cpp:492 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 521 520 9 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tiles.cpp:492 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 9 521 522 2 (set (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])
        (reg:DI 38 r9 [ wrap_widths ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ wrap_widths ])
        (nil)))
(insn/f:TI 522 9 5 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tiles.cpp:492 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 5 522 523 2 (set (reg/v:SI 3 bx [orig:147 num_tilings ] [147])
        (reg:SI 4 si [ num_tilings ])) tiles.cpp:492 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ num_tilings ])
        (nil)))
(insn/f:TI 523 5 524 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -456 [0xfffffffffffffe38])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:492 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -456 [0xfffffffffffffe38])))
            (nil))))
(note 524 523 11 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 11 524 4 2 (set (reg:DI 0 ax)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 520 [0x208])) [0 num_ints+0 S4 A64]))) tiles.cpp:492 149 {*extendsidi2_rex64}
     (nil))
(insn 4 11 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S8 A64])
        (reg:DI 5 di [ the_tiles ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ the_tiles ])
        (nil)))
(insn:TI 6 4 499 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
        (reg:DI 1 dx [ ctable ])) tiles.cpp:492 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ ctable ])
        (nil)))
(insn 499 6 24 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])
        (reg:SI 37 r8 [orig:150 num_floats ] [150])) tiles.cpp:492 89 {*movsi_internal}
     (nil))
(insn:TI 24 499 28 2 (set (reg/v:SI 5 di [orig:70 num_coordinates ] [70])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:150 num_floats ] [150])
                (reg/v:SI 0 ax [orig:153 num_ints ] [153]))
            (const_int 1 [0x1]))) tiles.cpp:498 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:150 num_floats ] [150])
        (nil)))
(insn 28 24 460 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 0 ax [orig:153 num_ints ] [153])
            (const_int 0 [0]))) tiles.cpp:500 3 {*cmpsi_ccno_1}
     (nil))
(insn:TI 460 28 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [0 %sfp+-20 S4 A32])
        (reg/v:SI 5 di [orig:70 num_coordinates ] [70])) tiles.cpp:498 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 5 di [orig:70 num_coordinates ] [70])
        (nil)))
(debug_insn 25 460 27 2 (var_location:SI num_coordinates (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 12 [0xc])) [0 %sfp+-20 S4 A32])) tiles.cpp:498 -1
     (nil))
(debug_insn 27 25 29 2 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn 29 27 38 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) tiles.cpp:500 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 238 [0xee])
            (nil)))
 -> 55)
;;  succ:       3 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [2.4%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]

;; basic block 3, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [97.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 38 29 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 39 38 41 3 NOTE_INSN_DELETED)
(note 41 39 42 3 NOTE_INSN_DELETED)
(note 42 41 40 3 NOTE_INSN_DELETED)
(insn:TI 40 42 50 3 (set (reg:DI 1 dx [orig:156 D.26282 ] [156])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 4 [0x4])) [0 %sfp+-28 S4 A32]))) tiles.cpp:500 149 {*extendsidi2_rex64}
     (nil))
(insn 50 40 43 3 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 512 [0x200])) [0 ints+0 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 43 50 516 3 (set (reg:DI 5 di [orig:159 D.26289 ] [159])
        (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:156 D.26282 ] [156])
                    (const_int 4 [0x4]))
                (reg/f:DI 7 sp))
            (const_int 276 [0x114]))) tiles.cpp:500 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:156 D.26282 ] [156])
        (nil)))
(insn 516 43 52 3 (set (reg:DI 1 dx [orig:161 D.26282 ] [161])
        (mult:DI (reg:DI 0 ax [orig:160 D.26282 ] [160])
            (const_int 4 [0x4]))) tiles.cpp:500 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:160 D.26282 ] [160])
        (nil)))
(call_insn:TI 52 516 55 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x2b82f20da500 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]

;; basic block 4, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [2.4%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 38 [r9]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  gen 	 17 [flags] 38 [r9]
;; live  kill	
(code_label 55 52 30 4 172 "" [1 uses])
(note 30 55 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 555 4 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 555 31 556 4 (set (reg:SI 38 r9)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:503 89 {*movsi_internal}
     (nil))
(insn:TI 556 555 33 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 38 r9)
            (const_int 0 [0]))) tiles.cpp:503 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (nil)))
(jump_insn:TI 33 556 68 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 59)
;;  succ:       5 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 43 [r14]

;; basic block 5, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 25 [xmm4] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 25 [xmm4] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(note 68 33 71 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 71 68 73 5 NOTE_INSN_DELETED)
(note 73 71 69 5 NOTE_INSN_DELETED)
(insn:TI 69 73 462 5 (set (reg:SF 25 xmm4 [orig:129 D.26283 ] [129])
        (float:SF (reg/v:SI 3 bx [orig:147 num_tilings ] [147]))) 240 {*floatsisf2_sse_interunit}
     (nil))
(insn 462 69 369 5 (set (reg/v:SI 0 ax [orig:150 num_floats ] [150])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) 89 {*movsi_internal}
     (nil))
(insn 369 462 554 5 (set (reg/f:DI 41 r12 [257])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn:TI 554 369 553 5 (parallel [
            (set (reg:DI 44 r15 [orig:103 ivtmp.311 ] [103])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:503 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 553 554 74 5 (parallel [
            (set (reg:DI 0 ax [orig:168 D.26282 ] [168])
                (zero_extend:DI (plus:SI (reg/v:SI 0 ax [orig:150 num_floats ] [150])
                        (const_int -1 [0xffffffffffffffff]))))
            (clobber (reg:CC 17 flags))
        ]) 275 {addsi_1_zext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 74 553 461 5 (set (reg:DI 42 r13 [orig:145 D.26282 ] [145])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:168 D.26282 ] [168])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:168 D.26282 ] [168])
        (nil)))
(insn:TI 461 74 90 5 (set (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A32])
        (reg:SF 25 xmm4 [orig:129 D.26283 ] [129])) 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 25 xmm4 [orig:129 D.26283 ] [129])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 330, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags] 21 [xmm0] 44 [r15]
;; live  kill	 17 [flags]
(code_label 90 461 75 6 176 "" [1 uses])
(note 75 90 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 76 75 463 6 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 463 76 77 6 (set (reg:SF 21 xmm0 [orig:170 D.26283 ] [170])
        (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A32])) tiles.cpp:504 135 {*movsf_internal}
     (nil))
(insn:TI 77 463 79 6 (set (reg:SF 21 xmm0 [orig:170 D.26283 ] [170])
        (mult:SF (reg:SF 21 xmm0 [orig:170 D.26283 ] [170])
            (mem:SF (plus:DI (reg/v/f:DI 43 r14 [orig:149 floats ] [149])
                    (reg:DI 44 r15 [orig:103 ivtmp.311 ] [103])) [0 MEM[base: floats_29(D), index: ivtmp.311_79, offset: 0B]+0 S4 A32]))) tiles.cpp:504 777 {*fop_sf_comm_sse}
     (nil))
(call_insn/u:TI 79 77 82 6 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("floorf") [flags 0x41]  <function_decl 0x2b82f0867a00 __builtin_floorf>) [0 __builtin_floorf S1 A8])
            (const_int 0 [0]))) tiles.cpp:504 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn:TI 82 79 83 6 (set (reg:SI 0 ax [172])
        (fix:SI (reg:SF 21 xmm0 [orig:74 D.26283 ] [74]))) tiles.cpp:504 177 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 21 xmm0 [orig:74 D.26283 ] [74])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 41 r12 [257])
                    (reg:DI 44 r15 [orig:103 ivtmp.311 ] [103])) [0 MEM[symbol: qstate, index: ivtmp.311_79, offset: 0B]+0 S4 A32])
            (nil))))
(insn:TI 83 82 85 6 (set (mem:SI (plus:DI (reg/f:DI 41 r12 [257])
                (reg:DI 44 r15 [orig:103 ivtmp.311 ] [103])) [0 MEM[symbol: qstate, index: ivtmp.311_79, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [172])) tiles.cpp:504 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [172])
        (nil)))
(debug_insn 85 83 86 6 (var_location:SI i (debug_expr:SI D#19)) -1
     (nil))
(insn 86 85 87 6 (parallel [
            (set (reg:DI 44 r15 [orig:103 ivtmp.311 ] [103])
                (plus:DI (reg:DI 44 r15 [orig:103 ivtmp.311 ] [103])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 87 86 88 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 44 r15 [orig:103 ivtmp.311 ] [103])
            (reg:DI 42 r13 [orig:145 D.26282 ] [145]))) tiles.cpp:503 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 88 87 94 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 90)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 90)
;;  succ:       6 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              7 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
(note 94 88 108 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 108 94 109 7 NOTE_INSN_DELETED)
(note 109 108 501 7 NOTE_INSN_DELETED)
(insn:TI 501 109 514 7 (set (reg/v:SI 44 r15 [orig:150 num_floats ] [150])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:505 89 {*movsi_internal}
     (nil))
(insn 514 501 552 7 (set (reg/f:DI 5 di [256])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (nil))
(insn 552 514 95 7 (parallel [
            (set (reg:DI 4 si)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 95 552 96 7 (set (reg:DI 1 dx [orig:173 D.26282 ] [173])
        (sign_extend:DI (reg/v:SI 44 r15 [orig:150 num_floats ] [150]))) tiles.cpp:505 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 96 95 103 7 (parallel [
            (set (reg:DI 1 dx [orig:174 D.26282 ] [174])
                (ashift:DI (reg:DI 1 dx [orig:173 D.26282 ] [173])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:505 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 103 96 465 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x2b82f20da600 memset>) [0 memset S1 A8])
            (const_int 0 [0]))) 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 465 103 106 7 (set (reg:SI 1 dx [orig:79 bnd.268 ] [79])
        (reg/v:SI 44 r15 [orig:150 num_floats ] [150])) 89 {*movsi_internal}
     (nil))
(insn:TI 106 465 515 7 (parallel [
            (set (reg:SI 1 dx [orig:79 bnd.268 ] [79])
                (lshiftrt:SI (reg:SI 1 dx [orig:79 bnd.268 ] [79])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 545 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 515 106 110 7 (set (reg:SI 0 ax [orig:78 ratio_mult_vf.269 ] [78])
        (mult:SI (reg:SI 1 dx [orig:79 bnd.268 ] [79])
            (const_int 4 [0x4]))) 266 {*leasi}
     (nil))
(insn:TI 110 515 111 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:78 ratio_mult_vf.269 ] [78])
            (const_int 0 [0]))) 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 111 110 360 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 357)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 357)
;;  succ:       36 [33.3%]  (CAN_FALLTHRU)
;;              8 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 360 111 112 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 112 360 113 8 NOTE_INSN_DELETED)
(note 113 112 114 8 NOTE_INSN_DELETED)
(insn:TI 114 113 115 8 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 44 r15 [orig:150 num_floats ] [150])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 44 r15 [orig:150 num_floats ] [150])
        (nil)))
(jump_insn:TI 115 114 116 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 357)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 357)
;;  succ:       9 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              36 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5]
;; live  kill	
(note 116 115 467 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 467 116 131 9 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A32])
        (reg/v:SI 3 bx [orig:147 num_tilings ] [147])) 89 {*movsi_internal}
     (nil))
(insn 131 467 468 9 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:79 bnd.268 ] [79])
            (const_int 1 [0x1]))) 7 {*cmpsi_1}
     (nil))
(insn:TI 468 131 120 9 (set (reg/v:SI 26 xmm5 [orig:147 num_tilings ] [147])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0 %sfp+-24 S4 A32])) 89 {*movsi_internal}
     (nil))
(insn:TI 120 468 117 9 (set (reg:V16QI 22 xmm1 [orig:185 vect_var_.275 ] [185])
        (unspec:V16QI [
                (mem:V16QI (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151]) [0 MEM[(int *)wrap_widths_39(D)]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn:TI 117 120 119 9 (set (reg:V4SI 21 xmm0 [184])
        (vec_duplicate:V4SI (reg/v:SI 26 xmm5 [orig:147 num_tilings ] [147]))) 1643 {*vec_dupv4si}
     (expr_list:REG_DEAD (reg/v:SI 26 xmm5 [orig:147 num_tilings ] [147])
        (nil)))
(debug_insn 119 117 470 9 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 470 119 472 9 (set (reg:V4SI 25 xmm4 [304])
        (reg:V4SI 22 xmm1 [orig:185 vect_var_.275 ] [185])) tiles.cpp:506 1142 {*movv4si_internal}
     (nil))
(insn 472 470 474 9 (set (reg:V2DI 24 xmm3 [189])
        (reg:V2DI 22 xmm1 [orig:185 vect_var_.275 ] [185])) tiles.cpp:506 1144 {*movv2di_internal}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:185 vect_var_.275 ] [185])
        (nil)))
(insn:TI 474 472 121 9 (set (reg:V2DI 22 xmm1 [190])
        (reg:V2DI 21 xmm0 [184])) tiles.cpp:506 1144 {*movv2di_internal}
     (nil))
(insn 121 474 122 9 (set (reg:V2DI 25 xmm4 [304])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 25 xmm4 [304])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [184])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 122 121 125 9 (set (reg:V2DI 24 xmm3 [189])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [189])
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (nil))
(insn:TI 125 122 123 9 (set (reg:V4SI 23 xmm2 [orig:186 vect_var_.276 ] [186])
        (vec_select:V4SI (reg:V4SI 25 xmm4 [187])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 25 xmm4 [187])
        (nil)))
(insn:TI 123 125 124 9 (set (reg:V2DI 22 xmm1 [190])
        (lshiftrt:V2DI (reg:V2DI 22 xmm1 [190])
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (nil))
(insn 124 123 126 9 (set (reg:V2DI 24 xmm3 [188])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [189])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [190])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 126 124 127 9 (set (reg:V4SI 24 xmm3 [188])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [188])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 127 126 128 9 (set (reg:V4SI 23 xmm2 [orig:186 vect_var_.276 ] [186])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:186 vect_var_.276 ] [186])
                (reg:V4SI 24 xmm3 [188]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [188])
        (nil)))
(insn:TI 128 127 130 9 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:186 vect_var_.276 ] [186])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:186 vect_var_.276 ] [186])
        (nil)))
(debug_insn 130 128 132 9 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(jump_insn:TI 132 130 133 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       10 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

;; basic block 10, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 26 [xmm5]
;; live  kill	
(note 133 132 134 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 134 133 146 10 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 146 134 135 10 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:79 bnd.268 ] [79])
            (const_int 2 [0x2]))) 7 {*cmpsi_1}
     (nil))
(insn:TI 135 146 477 10 (set (reg:V16QI 24 xmm3 [orig:191 vect_var_.275 ] [191])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])
                        (const_int 16 [0x10])) [0 MEM[(int *)wrap_widths_39(D) + 16B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn:TI 477 135 137 10 (set (reg:V4SI 26 xmm5 [307])
        (reg:V4SI 24 xmm3 [orig:191 vect_var_.275 ] [191])) tiles.cpp:506 1142 {*movv4si_internal}
     (nil))
(insn 137 477 139 10 (set (reg:V2DI 24 xmm3 [195])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [orig:191 vect_var_.275 ] [191])
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (nil))
(insn 139 137 141 10 (set (reg:V2DI 24 xmm3 [194])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [195])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [190])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn:TI 141 139 136 10 (set (reg:V4SI 24 xmm3 [194])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [194])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 136 141 140 10 (set (reg:V2DI 26 xmm5 [307])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 26 xmm5 [307])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [184])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 140 136 142 10 (set (reg:V4SI 23 xmm2 [orig:192 vect_var_.276 ] [192])
        (vec_select:V4SI (reg:V4SI 26 xmm5 [193])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 26 xmm5 [193])
        (nil)))
(insn:TI 142 140 143 10 (set (reg:V4SI 23 xmm2 [orig:192 vect_var_.276 ] [192])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:192 vect_var_.276 ] [192])
                (reg:V4SI 24 xmm3 [194]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [194])
        (nil)))
(insn:TI 143 142 145 10 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 16B]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:192 vect_var_.276 ] [192])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:192 vect_var_.276 ] [192])
        (nil)))
(debug_insn 145 143 147 10 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(jump_insn:TI 147 145 148 10 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       11 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

;; basic block 11, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 27 [xmm6]
;; live  kill	
(note 148 147 149 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 149 148 161 11 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 161 149 150 11 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:79 bnd.268 ] [79])
            (const_int 3 [0x3]))) 7 {*cmpsi_1}
     (nil))
(insn:TI 150 161 480 11 (set (reg:V16QI 24 xmm3 [orig:197 vect_var_.275 ] [197])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])
                        (const_int 32 [0x20])) [0 MEM[(int *)wrap_widths_39(D) + 32B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn:TI 480 150 152 11 (set (reg:V4SI 27 xmm6 [308])
        (reg:V4SI 24 xmm3 [orig:197 vect_var_.275 ] [197])) tiles.cpp:506 1142 {*movv4si_internal}
     (nil))
(insn 152 480 154 11 (set (reg:V2DI 24 xmm3 [201])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [orig:197 vect_var_.275 ] [197])
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (nil))
(insn 154 152 156 11 (set (reg:V2DI 24 xmm3 [200])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [201])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [190])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn:TI 156 154 151 11 (set (reg:V4SI 24 xmm3 [200])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [200])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 151 156 155 11 (set (reg:V2DI 27 xmm6 [308])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 27 xmm6 [308])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [184])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 155 151 157 11 (set (reg:V4SI 23 xmm2 [orig:198 vect_var_.276 ] [198])
        (vec_select:V4SI (reg:V4SI 27 xmm6 [199])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 27 xmm6 [199])
        (nil)))
(insn:TI 157 155 158 11 (set (reg:V4SI 23 xmm2 [orig:198 vect_var_.276 ] [198])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:198 vect_var_.276 ] [198])
                (reg:V4SI 24 xmm3 [200]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [200])
        (nil)))
(insn:TI 158 157 160 11 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 32B]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:198 vect_var_.276 ] [198])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:198 vect_var_.276 ] [198])
        (nil)))
(debug_insn 160 158 162 11 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(jump_insn:TI 162 160 163 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       12 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

;; basic block 12, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 17 [flags] 23 [xmm2] 24 [xmm3] 28 [xmm7]
;; live  kill	
(note 163 162 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 164 163 176 12 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 176 164 165 12 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:79 bnd.268 ] [79])
            (const_int 4 [0x4]))) 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:79 bnd.268 ] [79])
        (nil)))
(insn:TI 165 176 483 12 (set (reg:V16QI 24 xmm3 [orig:203 vect_var_.275 ] [203])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])
                        (const_int 48 [0x30])) [0 MEM[(int *)wrap_widths_39(D) + 48B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn:TI 483 165 167 12 (set (reg:V4SI 28 xmm7 [309])
        (reg:V4SI 24 xmm3 [orig:203 vect_var_.275 ] [203])) tiles.cpp:506 1142 {*movv4si_internal}
     (nil))
(insn 167 483 169 12 (set (reg:V2DI 24 xmm3 [207])
        (lshiftrt:V2DI (reg:V2DI 24 xmm3 [orig:203 vect_var_.275 ] [203])
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (nil))
(insn 169 167 171 12 (set (reg:V2DI 24 xmm3 [206])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 24 xmm3 [207])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [190])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn:TI 171 169 166 12 (set (reg:V4SI 24 xmm3 [206])
        (vec_select:V4SI (reg:V4SI 24 xmm3 [206])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 166 171 170 12 (set (reg:V2DI 28 xmm7 [309])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 28 xmm7 [309])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [184])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 170 166 172 12 (set (reg:V4SI 23 xmm2 [orig:204 vect_var_.276 ] [204])
        (vec_select:V4SI (reg:V4SI 28 xmm7 [205])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (expr_list:REG_DEAD (reg:V4SI 28 xmm7 [205])
        (nil)))
(insn:TI 172 170 173 12 (set (reg:V4SI 23 xmm2 [orig:204 vect_var_.276 ] [204])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 23 xmm2 [orig:204 vect_var_.276 ] [204])
                (reg:V4SI 24 xmm3 [206]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [206])
        (nil)))
(insn:TI 173 172 175 12 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 48B]+0 S16 A128])
        (reg:V4SI 23 xmm2 [orig:204 vect_var_.276 ] [204])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [orig:204 vect_var_.276 ] [204])
        (nil)))
(debug_insn 175 173 177 12 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
(jump_insn:TI 177 175 178 12 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
            (nil)))
 -> 206)
;;  succ:       13 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]

;; basic block 13, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  use 	 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; lr  def 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1]
;; live  gen 	 21 [xmm0] 22 [xmm1] 23 [xmm2]
;; live  kill	
(note 178 177 179 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 179 178 180 13 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 180 179 181 13 (set (reg:V16QI 23 xmm2 [orig:209 vect_var_.275 ] [209])
        (unspec:V16QI [
                (mem:V16QI (plus:DI (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])
                        (const_int 64 [0x40])) [0 MEM[(int *)wrap_widths_39(D) + 64B]+0 S16 A32])
            ] UNSPEC_LOADU)) tiles.cpp:506 1162 {sse2_loaddqu}
     (nil))
(insn:TI 181 180 182 13 (set (reg:V2DI 21 xmm0 [211])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 21 xmm0 [184])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 23 xmm2 [orig:209 vect_var_.275 ] [209])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (nil))
(insn 182 181 185 13 (set (reg:V2DI 23 xmm2 [213])
        (lshiftrt:V2DI (reg:V2DI 23 xmm2 [orig:209 vect_var_.275 ] [209])
            (const_int 32 [0x20]))) tiles.cpp:506 1522 {lshrv2di3}
     (nil))
(insn 185 182 184 13 (set (reg:V4SI 21 xmm0 [orig:210 vect_var_.276 ] [210])
        (vec_select:V4SI (reg:V4SI 21 xmm0 [211])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 184 185 186 13 (set (reg:V2DI 22 xmm1 [212])
        (mult:V2DI (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 22 xmm1 [190])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ])))
            (zero_extend:V2DI (vec_select:V2SI (reg:V4SI 23 xmm2 [213])
                    (parallel [
                            (const_int 0 [0])
                            (const_int 2 [0x2])
                        ]))))) tiles.cpp:506 1500 {*vec_widen_umult_even_v4si}
     (expr_list:REG_DEAD (reg:V4SI 23 xmm2 [213])
        (nil)))
(insn 186 184 187 13 (set (reg:V4SI 22 xmm1 [212])
        (vec_select:V4SI (reg:V4SI 22 xmm1 [212])
            (parallel [
                    (const_int 0 [0])
                    (const_int 2 [0x2])
                    (const_int 0 [0])
                    (const_int 0 [0])
                ]))) tiles.cpp:506 1631 {sse2_pshufd_1}
     (nil))
(insn:TI 187 186 188 13 (set (reg:V4SI 21 xmm0 [orig:210 vect_var_.276 ] [210])
        (vec_select:V4SI (vec_concat:V8SI (reg:V4SI 21 xmm0 [orig:210 vect_var_.276 ] [210])
                (reg:V4SI 22 xmm1 [212]))
            (parallel [
                    (const_int 0 [0])
                    (const_int 4 [0x4])
                    (const_int 1 [0x1])
                    (const_int 5 [0x5])
                ]))) tiles.cpp:506 1616 {vec_interleave_lowv4si}
     (expr_list:REG_DEAD (reg:V4SI 22 xmm1 [212])
        (nil)))
(insn:TI 188 187 190 13 (set (mem/c:V4SI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [0 MEM[(int[20] *)&wrap_widths_times_num_tilings + 64B]+0 S16 A128])
        (reg:V4SI 21 xmm0 [orig:210 vect_var_.276 ] [210])) tiles.cpp:506 1142 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 21 xmm0 [orig:210 vect_var_.276 ] [210])
        (nil)))
(debug_insn 190 188 206 13 (var_location:SI i (debug_expr:SI D#17)) -1
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [33.3%]  (CAN_FALLTHRU)
;;              9 [33.3%]  (CAN_FALLTHRU)
;;              10 [33.3%]  (CAN_FALLTHRU)
;;              11 [33.3%]  (CAN_FALLTHRU)
;;              13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 206 190 207 14 178 "" [4 uses])
(note 207 206 209 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 209 207 210 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:113 i ] [113])
            (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 4 [0x4])) [0 %sfp+-28 S4 A32]))) 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 210 209 211 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3334 [0xd06])
            (nil)))
 -> 59)
;;  succ:       15 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [33.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

;; basic block 15, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [66.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              36 [100.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 211 210 212 15 177 "" [1 uses])
(note 212 211 216 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 216 212 213 15 NOTE_INSN_DELETED)
(debug_insn 213 216 214 15 (var_location:SI i (reg/v:SI 0 ax [orig:113 i ] [113])) -1
     (nil))
(insn:TI 214 213 502 15 (set (reg:DI 1 dx [orig:219 i ] [219])
        (sign_extend:DI (reg/v:SI 0 ax [orig:113 i ] [113]))) tiles.cpp:506 149 {*extendsidi2_rex64}
     (nil))
(insn 502 214 547 15 (set (reg/v:SI 5 di [orig:150 num_floats ] [150])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:503 89 {*movsi_internal}
     (nil))
(insn:TI 547 502 548 15 (set (reg:SI 2 cx [orig:221 D.26281 ] [221])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:219 i ] [219])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])) [0 *_107+0 S4 A32])) tiles.cpp:506 89 {*movsi_internal}
     (nil))
(insn:TI 548 547 218 15 (parallel [
            (set (reg:SI 2 cx [orig:221 D.26281 ] [221])
                (mult:SI (reg:SI 2 cx [orig:221 D.26281 ] [221])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:506 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 218 548 513 15 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:219 i ] [219])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 2 cx [orig:221 D.26281 ] [221])) tiles.cpp:506 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:221 D.26281 ] [221])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:219 i ] [219])
            (nil))))
(insn 513 218 221 15 (set (reg/v:SI 1 dx [orig:80 i ] [80])
        (plus:SI (reg/v:SI 0 ax [orig:113 i ] [113])
            (const_int 1 [0x1]))) tiles.cpp:503 266 {*leasi}
     (nil))
(debug_insn 221 513 222 15 (var_location:SI i (reg/v:SI 1 dx [orig:80 i ] [80])) -1
     (nil))
(insn:TI 222 221 223 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 di [orig:150 num_floats ] [150])
            (reg/v:SI 1 dx [orig:80 i ] [80]))) tiles.cpp:503 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 223 222 224 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 2500 [0x9c4])
            (nil)))
 -> 59)
;;  succ:       16 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [25.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       15 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(note 224 223 228 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 228 224 225 16 NOTE_INSN_DELETED)
(debug_insn 225 228 226 16 (var_location:SI i (reg/v:SI 1 dx [orig:80 i ] [80])) -1
     (nil))
(insn:TI 226 225 231 16 (set (reg:DI 1 dx [orig:223 i ] [223])
        (sign_extend:DI (reg/v:SI 1 dx [orig:80 i ] [80]))) tiles.cpp:506 149 {*extendsidi2_rex64}
     (nil))
(insn 231 226 545 16 (parallel [
            (set (reg/v:SI 0 ax [orig:65 i ] [65])
                (plus:SI (reg/v:SI 0 ax [orig:113 i ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:503 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 545 231 546 16 (set (reg:SI 2 cx [orig:225 D.26281 ] [225])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:223 i ] [223])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])) [0 *_33+0 S4 A32])) tiles.cpp:506 89 {*movsi_internal}
     (nil))
(insn:TI 546 545 235 16 (parallel [
            (set (reg:SI 2 cx [orig:225 D.26281 ] [225])
                (mult:SI (reg:SI 2 cx [orig:225 D.26281 ] [225])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:506 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 235 546 230 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 ax [orig:65 i ] [65])
            (reg/v:SI 5 di [orig:150 num_floats ] [150]))) tiles.cpp:503 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 5 di [orig:150 num_floats ] [150])
        (nil)))
(insn:TI 230 235 361 16 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:223 i ] [223])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 2 cx [orig:225 D.26281 ] [225])) tiles.cpp:506 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:225 D.26281 ] [225])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:223 i ] [223])
            (nil))))
(debug_insn 361 230 233 16 (var_location:SI D#21 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 233 361 236 16 (var_location:SI i (debug_expr:SI D#21)) -1
     (nil))
(jump_insn 236 233 193 16 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) tiles.cpp:503 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 2500 [0x9c4])
            (nil)))
 -> 59)
;;  succ:       17 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [25.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

;; basic block 17, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [75.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(note 193 236 197 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(note 197 193 194 17 NOTE_INSN_DELETED)
(debug_insn 194 197 195 17 (var_location:SI i (debug_expr:SI D#21)) -1
     (nil))
(insn:TI 195 194 550 17 (set (reg:DI 0 ax [orig:215 i ] [215])
        (sign_extend:DI (reg/v:SI 0 ax [orig:65 i ] [65]))) tiles.cpp:506 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 550 195 551 17 (set (reg:SI 1 dx [orig:217 D.26281 ] [217])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:215 i ] [215])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])) [0 *_149+0 S4 A32])) tiles.cpp:506 89 {*movsi_internal}
     (nil))
(insn:TI 551 550 199 17 (parallel [
            (set (reg:SI 1 dx [orig:217 D.26281 ] [217])
                (mult:SI (reg:SI 1 dx [orig:217 D.26281 ] [217])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:506 344 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 199 551 200 17 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:215 i ] [215])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 192 [0xc0])) [0 wrap_widths_times_num_tilings S4 A32])
        (reg:SI 1 dx [orig:217 D.26281 ] [217])) tiles.cpp:506 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:217 D.26281 ] [217])
        (expr_list:REG_DEAD (reg:DI 0 ax [orig:215 i ] [215])
            (nil))))
(debug_insn 200 199 202 17 (var_location:SI D#20 (plus:SI (debug_expr:SI D#21)
        (const_int 1 [0x1]))) tiles.cpp:503 -1
     (nil))
(debug_insn 202 200 59 17 (var_location:SI i (debug_expr:SI D#20)) -1
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 18, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [33.3%]  (CAN_FALLTHRU)
;;              15 [25.0%]  (CAN_FALLTHRU)
;;              4 [4.8%]  (CAN_FALLTHRU)
;;              17 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [25.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 59 202 60 18 171 "" [4 uses])
(note 60 59 61 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(debug_insn 61 60 62 18 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(insn:TI 62 61 63 18 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 3 bx [orig:147 num_tilings ] [147])
            (const_int 0 [0]))) tiles.cpp:510 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 63 62 241 18 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 351)
            (pc))) tiles.cpp:510 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 351)
;;  succ:       19 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              33 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 6 [bp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 241 63 243 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(note 243 241 245 19 NOTE_INSN_DELETED)
(note 245 243 503 19 NOTE_INSN_DELETED)
(note 503 245 491 19 NOTE_INSN_DELETED)
(insn:TI 491 503 242 19 (set (reg/v:SI 0 ax [orig:150 num_floats ] [150])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) 89 {*movsi_internal}
     (nil))
(insn 242 491 544 19 (set (reg:DI 44 r15 [orig:93 ivtmp.305 ] [93])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+-8 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 544 242 370 19 (parallel [
            (set (reg:DI 43 r14 [orig:106 j ] [106])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:510 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 370 544 543 19 (set (reg/f:DI 41 r12 [255])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 272 [0x110]))) 267 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn:TI 543 370 246 19 (parallel [
            (set (reg:DI 0 ax [orig:228 D.26282 ] [228])
                (zero_extend:DI (plus:SI (reg/v:SI 0 ax [orig:150 num_floats ] [150])
                        (const_int -1 [0xffffffffffffffff]))))
            (clobber (reg:CC 17 flags))
        ]) 275 {addsi_1_zext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 246 543 413 19 (set (reg:DI 42 r13 [orig:143 D.26282 ] [143])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:228 D.26282 ] [228])
                (const_int 4 [0x4]))
            (const_int 4 [0x4]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:228 D.26282 ] [228])
        (nil)))
(insn 413 246 414 19 (set (reg/v/f:DI 0 ax [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 6 bp [orig:151 wrap_widths ] [151])
        (nil)))
(insn 414 413 415 19 (set (reg:DI 6 bp [orig:93 ivtmp.305 ] [93])
        (reg:DI 44 r15 [orig:93 ivtmp.305 ] [93])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:93 ivtmp.305 ] [93])
        (nil)))
(insn:TI 415 414 417 19 (set (reg/v:SI 44 r15 [orig:106 j ] [106])
        (reg/v:SI 43 r14 [orig:106 j ] [106])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:106 j ] [106])
        (nil)))
(insn 417 415 339 19 (set (reg/v/f:DI 43 r14 [orig:151 wrap_widths ] [151])
        (reg/v/f:DI 0 ax [orig:151 wrap_widths ] [151])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 0 ax [orig:151 wrap_widths ] [151])
        (nil)))
;;  succ:       20 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 20, loop depth 0, count 0, freq 167, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       32 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              19 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 339 417 340 20 181 "" [1 uses])
(note 340 339 341 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(debug_insn 341 340 342 20 (var_location:SI j (reg/v:SI 44 r15 [orig:106 j ] [106])) -1
     (nil))
(debug_insn 342 341 538 20 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn:TI 538 342 539 20 (set (reg:SI 0 ax)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [0 %sfp+-28 S4 A32])) tiles.cpp:513 89 {*movsi_internal}
     (nil))
(insn:TI 539 538 344 20 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax)
            (const_int 0 [0]))) tiles.cpp:513 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 344 539 345 20 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 359)
            (pc))) tiles.cpp:513 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 476 [0x1dc])
            (nil)))
 -> 359)
;;  succ:       21 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              35 [4.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 21, loop depth 0, count 0, freq 159, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [95.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags] 38 [r9] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(note 345 344 371 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn:TI 371 345 372 21 (set (reg/f:DI 40 r11 [257])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -416 [0xfffffffffffffe60]))
        (nil)))
(insn 372 371 15 21 (set (reg/f:DI 5 di [256])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) 267 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -336 [0xfffffffffffffeb0]))
        (nil)))
(insn 15 372 537 21 (set (reg:SI 38 r9 [orig:62 ivtmp.295 ] [62])
        (const_int 1 [0x1])) tiles.cpp:513 89 {*movsi_internal}
     (nil))
(insn:TI 537 15 346 21 (parallel [
            (set (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:513 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       22 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 22, loop depth 0, count 0, freq 3333, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       30 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              21 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 5 [di] 7 [sp] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(code_label 346 537 250 22 191 "" [1 uses])
(note 250 346 251 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(debug_insn 251 250 253 22 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 253 251 255 22 (set (reg:SI 37 r8 [orig:82 D.26281 ] [82])
        (mem:SI (plus:DI (reg/f:DI 40 r11 [257])
                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: qstate, index: ivtmp.291_105, offset: 0B]+0 S4 A32])) tiles.cpp:516 89 {*movsi_internal}
     (nil))
(insn 255 253 256 22 (set (reg:SI 4 si [orig:83 D.26281 ] [83])
        (mem:SI (plus:DI (reg/f:DI 5 di [256])
                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: base, index: ivtmp.291_105, offset: 0B]+0 S4 A32])) tiles.cpp:516 89 {*movsi_internal}
     (nil))
(insn:TI 256 255 257 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 37 r8 [orig:82 D.26281 ] [82])
            (reg:SI 4 si [orig:83 D.26281 ] [83]))) tiles.cpp:516 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 257 256 258 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 264)
            (pc))) tiles.cpp:516 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 264)
;;  succ:       23 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              34 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 23, loop depth 0, count 0, freq 1667, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 37 [r8]
;; live  kill	 17 [flags]
(note 258 257 492 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn:TI 492 258 259 23 (set (reg:SI 0 ax [orig:232 D.26281 ] [232])
        (reg:SI 37 r8 [orig:82 D.26281 ] [82])) tiles.cpp:517 89 {*movsi_internal}
     (nil))
(insn:TI 259 492 511 23 (parallel [
            (set (reg:SI 0 ax [orig:232 D.26281 ] [232])
                (minus:SI (reg:SI 0 ax [orig:232 D.26281 ] [232])
                    (reg:SI 4 si [orig:83 D.26281 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:517 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 511 259 512 23 (parallel [
            (set (reg:SI 1 dx [orig:234 D.26281 ] [234])
                (ashiftrt:SI (reg:SI 0 ax [orig:232 D.26281 ] [232])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:517 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 512 511 261 23 (parallel [
            (set (reg:SI 0 ax [235])
                (div:SI (reg:SI 0 ax [orig:232 D.26281 ] [232])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (set (reg:SI 1 dx [orig:234 D.26281 ] [234])
                (mod:SI (reg:SI 0 ax [orig:232 D.26281 ] [232])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (use (reg:SI 1 dx [orig:234 D.26281 ] [234]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:517 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [235])
            (nil))))
(insn:TI 261 512 495 23 (parallel [
            (set (reg:SI 37 r8 [orig:92 D.26281 ] [92])
                (minus:SI (reg:SI 37 r8 [orig:92 D.26281 ] [92])
                    (reg:SI 1 dx [orig:234 D.26281 ] [234])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:517 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:234 D.26281 ] [234])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 495 261 272 23 (set (reg:SI 1 dx [orig:92 D.26281 ] [92])
        (reg:SI 37 r8 [orig:92 D.26281 ] [92])) tiles.cpp:517 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:92 D.26281 ] [92])
        (nil)))
;;  succ:       24 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 24, loop depth 0, count 0, freq 3333, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       23 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              34 [100.0%]  (CAN_FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
(code_label 272 495 273 24 183 "" [1 uses])
(note 273 272 541 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn:TI 541 273 275 24 (set (reg:SI 37 r8)
        (mem:SI (plus:DI (reg/v/f:DI 43 r14 [orig:151 wrap_widths ] [151])
                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])) [0 MEM[base: wrap_widths_39(D), index: ivtmp.291_105, offset: 0B]+0 S4 A32])) tiles.cpp:521 89 {*movsi_internal}
     (nil))
(insn 275 541 542 24 (set (mem:SI (plus:DI (reg/f:DI 41 r12 [255])
                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: coordinates, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 1 dx [orig:92 D.26281 ] [92])) 89 {*movsi_internal}
     (nil))
(insn:TI 542 275 277 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 37 r8)
            (const_int 0 [0]))) tiles.cpp:521 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 37 r8)
        (nil)))
(jump_insn:TI 277 542 278 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 284)
            (pc))) tiles.cpp:521 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 284)
;;  succ:       25 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              26 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 25, loop depth 0, count 0, freq 1667, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, RTL)
;;  pred:       24 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(note 278 277 279 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(note 279 278 280 25 NOTE_INSN_DELETED)
(note 280 279 498 25 NOTE_INSN_DELETED)
(insn:TI 498 280 507 25 (set (reg:SI 0 ax [247])
        (reg:SI 1 dx [orig:92 D.26281 ] [92])) tiles.cpp:521 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:92 D.26281 ] [92])
        (nil)))
(insn:TI 507 498 508 25 (parallel [
            (set (reg:SI 1 dx [orig:92 D.26281 ] [92])
                (ashiftrt:SI (reg:SI 0 ax [247])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:521 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 508 507 283 25 (parallel [
            (set (reg:SI 0 ax [247])
                (div:SI (reg:SI 0 ax [247])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 7 sp)
                                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71]))
                            (const_int 192 [0xc0])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.291_105, offset: 0B]+0 S4 A32])))
            (set (reg:SI 1 dx [orig:92 D.26281 ] [92])
                (mod:SI (reg:SI 0 ax [247])
                    (mem:SI (plus:DI (plus:DI (reg/f:DI 7 sp)
                                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71]))
                            (const_int 192 [0xc0])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.291_105, offset: 0B]+0 S4 A32])))
            (use (reg:SI 1 dx [orig:92 D.26281 ] [92]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:521 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [247])
            (nil))))
(insn:TI 283 508 284 25 (set (mem:SI (plus:DI (reg/f:DI 41 r12 [255])
                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: coordinates, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 1 dx [orig:92 D.26281 ] [92])) tiles.cpp:521 89 {*movsi_internal}
     (nil))
;;  succ:       26 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 26, loop depth 0, count 0, freq 3333, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       24 [50.0%]  (CAN_FALLTHRU)
;;              25 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 284 283 285 26 184 "" [1 uses])
(note 285 284 286 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn:TI 286 285 287 26 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 1 dx [orig:92 D.26281 ] [92])
            (const_int 0 [0]))) tiles.cpp:523 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 287 286 303 26 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 313)
            (pc))) tiles.cpp:523 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 313)
;;  succ:       27 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              30 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 27, loop depth 0, count 0, freq 819, maybe hot
;; Invalid sum of incoming frequencies 3033, should be 819
;;  prev block 26, next block 28, flags: (REACHABLE, RTL)
;;  pred:       26 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 303 287 305 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn:TI 305 303 318 27 (set (reg:SI 0 ax [orig:127 D.26281 ] [127])
        (mem:SI (plus:DI (plus:DI (reg/f:DI 7 sp)
                    (reg:DI 2 cx [orig:71 ivtmp.291 ] [71]))
                (const_int 192 [0xc0])) [0 MEM[symbol: wrap_widths_times_num_tilings, index: ivtmp.291_105, offset: 0B]+0 S4 A32])) 89 {*movsi_internal}
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 28, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       28 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              27 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 318 305 306 28 190 "" [1 uses])
(note 306 318 307 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(note 307 306 308 28 NOTE_INSN_DELETED)
(insn:TI 308 307 309 28 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:SI (reg:SI 1 dx [orig:92 D.26281 ] [92])
                        (reg:SI 0 ax [orig:127 D.26281 ] [127]))
                    (const_int 0 [0])))
            (set (reg:SI 1 dx [orig:92 D.26281 ] [92])
                (plus:SI (reg:SI 1 dx [orig:92 D.26281 ] [92])
                    (reg:SI 0 ax [orig:127 D.26281 ] [127])))
        ]) tiles.cpp:523 281 {*addsi_2}
     (nil))
(jump_insn:TI 309 308 310 28 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 318)
            (pc))) tiles.cpp:523 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 318)
;;  succ:       28 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              29 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 29, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       28 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 310 309 312 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn:TI 312 310 313 29 (set (mem:SI (plus:DI (reg/f:DI 41 r12 [255])
                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: coordinates, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 1 dx [orig:92 D.26281 ] [92])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:92 D.26281 ] [92])
        (nil)))
;;  succ:       30 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 30, loop depth 0, count 0, freq 3333, maybe hot
;; Invalid sum of incoming frequencies 1119, should be 3333
;;  prev block 29, next block 31, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       26 [9.0%]  (CAN_FALLTHRU)
;;              29 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 7 [sp] 38 [r9] 42 [r13]
;; lr  def 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 4 [si] 17 [flags] 38 [r9]
;; live  kill	 17 [flags]
(code_label 313 312 288 30 189 "" [1 uses])
(note 288 313 290 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn:TI 290 288 295 30 (parallel [
            (set (reg:SI 4 si [250])
                (plus:SI (reg:SI 4 si [orig:83 D.26281 ] [83])
                    (reg:SI 38 r9 [orig:62 ivtmp.295 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:527 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 295 290 291 30 (parallel [
            (set (reg:SI 38 r9 [orig:62 ivtmp.295 ] [62])
                (plus:SI (reg:SI 38 r9 [orig:62 ivtmp.295 ] [62])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 291 295 293 30 (set (mem:SI (plus:DI (reg/f:DI 5 di [256])
                (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])) [0 MEM[symbol: base, index: ivtmp.291_105, offset: 0B]+0 S4 A32])
        (reg:SI 4 si [250])) tiles.cpp:527 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [250])
        (nil)))
(debug_insn 293 291 294 30 (var_location:SI i (debug_expr:SI D#18)) -1
     (nil))
(insn 294 293 297 30 (parallel [
            (set (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])
                (plus:DI (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 297 294 298 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:71 ivtmp.291 ] [71])
            (reg:DI 42 r13 [orig:143 D.26282 ] [143]))) tiles.cpp:513 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 298 297 301 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 346)
            (pc))) tiles.cpp:513 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9524 [0x2534])
            (nil)))
 -> 346)
;;  succ:       22 [95.2%]  (DFS_BACK,CAN_FALLTHRU)
;;              31 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 31, loop depth 0, count 0, freq 159, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       30 [4.8%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 301 298 18 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn:TI 18 301 321 31 (set (reg:DI 0 ax)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 4 [0x4])) [0 %sfp+-28 S4 A32]))) 149 {*extendsidi2_rex64}
     (nil))
;;  succ:       32 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 32, loop depth 0, count 0, freq 167, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       31 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              35 [100.0%]  (CAN_FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags] 44 [r15]
;; live  kill	 17 [flags]
(code_label 321 18 322 32 187 "" [1 uses])
(note 322 321 326 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn:TI 326 322 327 32 (set (reg:DI 1 dx)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) tiles.cpp:532 87 {*movdi_internal_rex64}
     (nil))
(insn 327 326 328 32 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [0 %sfp+-20 S4 A32])) tiles.cpp:532 89 {*movsi_internal}
     (nil))
(insn 328 327 324 32 (set (reg:DI 5 di)
        (reg/f:DI 41 r12 [255])) tiles.cpp:532 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn:TI 324 328 332 32 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:253 num_floats ] [253])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 272 [0x110])) [0 coordinates S4 A32])
        (reg/v:SI 44 r15 [orig:106 j ] [106])) tiles.cpp:530 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:253 num_floats ] [253])
        (nil)))
(insn 332 324 335 32 (parallel [
            (set (reg/v:SI 44 r15 [orig:106 j ] [106])
                (plus:SI (reg/v:SI 44 r15 [orig:106 j ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:510 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 335 332 329 32 (parallel [
            (set (reg:DI 6 bp [orig:93 ivtmp.305 ] [93])
                (plus:DI (reg:DI 6 bp [orig:93 ivtmp.305 ] [93])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 329 335 334 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z4hashPiiP15collision_table") [flags 0x1]  <function_decl 0x2b82f1f16800 hash>) [0 hash S1 A8])
            (const_int 0 [0]))) tiles.cpp:532 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 334 329 331 32 (var_location:SI j (reg/v:SI 44 r15 [orig:106 j ] [106])) -1
     (nil))
(insn:TI 331 334 336 32 (set (mem:SI (plus:DI (reg:DI 6 bp [orig:93 ivtmp.305 ] [93])
                (const_int -4 [0xfffffffffffffffc])) [0 MEM[base: _77, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:105 D.26281 ] [105])) tiles.cpp:532 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:105 D.26281 ] [105])
        (nil)))
(insn 336 331 337 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 44 r15 [orig:106 j ] [106])
            (reg/v:SI 3 bx [orig:147 num_tilings ] [147]))) tiles.cpp:510 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 337 336 351 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 339)
            (pc))) tiles.cpp:510 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 339)
;;  succ:       20 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              33 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 33, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, RTL)
;;  pred:       32 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              18 [9.0%]  (CAN_FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 351 337 352 33 168 "" [1 uses])
(note 352 351 527 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(note 527 352 528 33 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 528 527 529 33 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 456 [0x1c8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:535 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 456 [0x1c8])))
            (nil))))
(insn/f:TI 529 528 530 33 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:535 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 530 529 531 33 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:535 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 531 530 532 33 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:535 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 532 531 533 33 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:535 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 533 532 534 33 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:535 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 534 533 535 33 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tiles.cpp:535 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 535 534 536 33 (simple_return) tiles.cpp:535 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 536 535 264)
;; basic block 34, loop depth 0, count 0, freq 1667, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [50.0%]  (CAN_FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(code_label 264 536 265 34 182 "" [1 uses])
(note 265 264 266 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(note 266 265 496 34 NOTE_INSN_DELETED)
(insn:TI 496 266 267 34 (set (reg:SI 0 ax [orig:237 D.26281 ] [237])
        (reg:SI 4 si [orig:83 D.26281 ] [83])) tiles.cpp:519 89 {*movsi_internal}
     (nil))
(insn:TI 267 496 268 34 (parallel [
            (set (reg:SI 0 ax [orig:237 D.26281 ] [237])
                (minus:SI (reg:SI 0 ax [orig:237 D.26281 ] [237])
                    (reg:SI 37 r8 [orig:82 D.26281 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 268 267 509 34 (parallel [
            (set (reg:SI 0 ax [orig:238 D.26281 ] [238])
                (plus:SI (reg:SI 0 ax [orig:237 D.26281 ] [237])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 509 268 510 34 (parallel [
            (set (reg:SI 1 dx [orig:240 D.26281 ] [240])
                (ashiftrt:SI (reg:SI 0 ax [orig:238 D.26281 ] [238])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 539 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 510 509 270 34 (parallel [
            (set (reg:SI 0 ax [241])
                (div:SI (reg:SI 0 ax [orig:238 D.26281 ] [238])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (set (reg:SI 1 dx [orig:240 D.26281 ] [240])
                (mod:SI (reg:SI 0 ax [orig:238 D.26281 ] [238])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (use (reg:SI 1 dx [orig:240 D.26281 ] [240]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 369 {*divmodsi4_noext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 0 ax [241])
            (nil))))
(insn:TI 270 510 271 34 (set (reg:SI 1 dx [orig:92 D.26281 ] [92])
        (plus:SI (plus:SI (reg:SI 37 r8 [orig:82 D.26281 ] [82])
                (reg:SI 1 dx [orig:240 D.26281 ] [240]))
            (const_int 1 [0x1]))) tiles.cpp:519 266 {*leasi}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:82 D.26281 ] [82])
        (nil)))
(insn:TI 271 270 557 34 (parallel [
            (set (reg:SI 1 dx [orig:92 D.26281 ] [92])
                (minus:SI (reg:SI 1 dx [orig:92 D.26281 ] [92])
                    (reg/v:SI 3 bx [orig:147 num_tilings ] [147])))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:519 309 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 557 271 558 34 (set (pc)
        (label_ref 272)) 650 {jump}
     (nil)
 -> 272)
;;  succ:       24 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 558 557 359)
;; basic block 35, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [4.8%]  (CAN_FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 359 558 358 35 193 "" [1 uses])
(note 358 359 540 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn:TI 540 358 559 35 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:513 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 559 540 560 35 (set (pc)
        (label_ref 321)) 650 {jump}
     (nil)
 -> 321)
;;  succ:       32 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 560 559 357)
;; basic block 36, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 35, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [33.3%]  (CAN_FALLTHRU)
;;              7 [33.3%]  (CAN_FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 357 560 356 36 192 "" [2 uses])
(note 356 357 549 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn:TI 549 356 561 36 (parallel [
            (set (reg:DI 0 ax [orig:113 i ] [113])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tiles.cpp:505 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 561 549 562 36 (set (pc)
        (label_ref 211)) 650 {jump}
     (nil)
 -> 211)
;;  succ:       15 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

(barrier 562 561 0)

;; Function (static initializers for tiles.cpp) (_GLOBAL__sub_I_tiles.cpp, funcdef_no=1103, decl_uid=25455, cgraph_uid=347) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 18.
deleting insn with uid = 2.
deleting insn with uid = 22.
;;   ======================================================
;;   -- basic block 2 from 17 to 13 -- after reload
;;   ======================================================

;;	  0--> b  0: i   5loc 0xffff                              :nothing
;;	  0--> b  0: i   6loc 0x1                                 :nothing
;;	  0--> b  0: i   7di=`_ZStL8__ioinit'                     :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  17{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  2--> b  0: i   8call [`_ZNSt8ios_base4InitC1Ev']        :athlon-vector,athlon-ieu
;;	  3--> b  0: i  12di=[const(unspec[`_ZNSt8ios_base4InitD1Ev'] 2)]:athlon-direct,athlon-load
;;	  3--> b  0: i   9dx=`__dso_handle'                       :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i  10si=`_ZStL8__ioinit'                     :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i  21{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i  13ax=call [`__cxa_atexit']                :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 17
;;   new tail = 13



starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for tiles.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,1u} r5={5d,2u} r7={3d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 124{112d,12u,0e} in 10{8 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 5 2 6 2 (var_location:SI __priority (const_int 65535 [0xffff])) -1
     (nil))
(debug_insn 6 5 7 2 (var_location:SI __initialize_p (const_int 1 [0x1])) -1
     (nil))
(insn:TI 7 6 17 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b82f1da6390 __ioinit>)) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (nil))
(insn/f 17 7 18 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:535 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 18 17 8 2 NOTE_INSN_PROLOGUE_END)
(call_insn:TI 8 18 12 2 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x2b82f1903200 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/4.8/iostream:74 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 12 8 9 2 (set (reg:DI 5 di)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x2b82f1903400 __comp_dtor >)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x2b82f1903400 __comp_dtor >)
        (nil)))
(insn 9 12 10 2 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x2b82f1f9dab0 __dso_handle>)) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 23 2 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b82f1da6390 __ioinit>)) /usr/include/c++/4.8/iostream:74 87 {*movdi_internal_rex64}
     (nil))
(note 23 10 21 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 21 23 13 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tiles.cpp:535 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(call_insn/j:TI 13 21 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x2b82f1f74f00 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/4.8/iostream:74 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 14 13 0)
