
;; Function PyObject* CollisionTable_new(PyTypeObject*, PyObject*, PyObject*) (_ZL18CollisionTable_newP11_typeobjectP7_objectS2_, funcdef_no=146, decl_uid=11212, cgraph_uid=146)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


PyObject* CollisionTable_new(PyTypeObject*, PyObject*, PyObject*)

Dataflow summary:
def_info->table_size = 64, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={3d,6u} r1={2d} r2={2d} r4={3d,1u} r5={2d,2u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d,1u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 87{68d,19u,0e} in 11{10 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d2(0){ }d4(1){ }d6(2){ }d9(4){ }d12(5){ }d13(7){ }d27(21){ }d29(22){ }d31(23){ }d33(24){ }d35(25){ }d37(26){ }d39(27){ }d41(28){ }d51(37){ }d53(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 11 to worklist
  Adding insn 17 to worklist
  Adding insn 42 to worklist
  Adding insn 27 to worklist
Finished finding needed instructions:
processing block 4 lr out =  0 [ax] 7 [sp]
  Adding insn 41 to worklist
processing block 3 lr out =  0 [ax] 7 [sp]
processing block 2 lr out =  0 [ax] 7 [sp]
  Adding insn 14 to worklist
  Adding insn 44 to worklist
  Adding insn 2 to worklist
  Adding insn 36 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
deleting insn with uid = 37.
deleting insn with uid = 5.
deleting insn with uid = 8.
;;   ======================================================
;;   -- basic block 2 from 36 to 15 -- after reload
;;   ======================================================

;;	  0--> b  0: i   2ax=di                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  36{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  44{si=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  11ax=call [[ax+0x130]]                    :athlon-vector,athlon-ieu
;;	  1--> b  0: i  13loc ax                                  :nothing
;;	  2--> b  0: i  14flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  3--> b  0: i  15pc={(flags==0)?L18:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 36
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 17 to 17 -- after reload
;;   ======================================================

;;	  0--> b  0: i  17[ax+0x10]=0                             :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 17
;;   new tail = 17

deleting insn with uid = 40.
;;   ======================================================
;;   -- basic block 4 from 27 to 42 -- after reload
;;   ======================================================

;;	  0--> b  0: i  27use ax                                  :nothing
;;	  0--> b  0: i  41{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i  42simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 27
;;   new tail = 42



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* CollisionTable_new(PyTypeObject*, PyObject*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={3d,6u} r1={2d} r2={2d} r4={3d,1u} r5={2d,2u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d,1u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 87{68d,19u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(note 8 5 2 2 NOTE_INSN_DELETED)
(insn:TI 2 8 36 2 (set (reg/v/f:DI 0 ax [orig:62 type ] [62])
        (reg:DI 5 di [ type ])) tilesInt.C:20 87 {*movdi_internal_rex64}
     (nil))
(insn/f 36 2 37 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:20 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 37 36 44 2 NOTE_INSN_PROLOGUE_END)
(insn 44 37 11 2 (parallel [
            (set (reg:DI 4 si)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:22 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 11 44 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (mem/f/j:DI (plus:DI (reg/v/f:DI 0 ax [orig:62 type ] [62])
                        (const_int 304 [0x130])) [0 type_3(D)->tp_alloc+0 S8 A64]) [0 *_4 S1 A8])
            (const_int 0 [0]))) tilesInt.C:22 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(debug_insn 13 11 14 2 (var_location:DI self (reg/v/f:DI 0 ax [orig:60 self ] [60])) tilesInt.C:22 -1
     (nil))
(insn:TI 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 0 ax [orig:60 self ] [60])
            (const_int 0 [0]))) tilesInt.C:23 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 18)
            (pc))) tilesInt.C:23 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil)))
 -> 18)
;;  succ:       3 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [10.1%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL)
;;  pred:       2 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 17 16 18 3 (set (mem/f/j:DI (plus:DI (reg/v/f:DI 0 ax [orig:60 self ] [60])
                (const_int 16 [0x10])) [0 self_6->ct+0 S8 A64])
        (const_int 0 [0])) tilesInt.C:25 87 {*movdi_internal_rex64}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, RTL)
;;  pred:       2 [10.1%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 7 [sp]
;; live  kill	 17 [flags]
(code_label 18 17 19 4 2 "" [1 uses])
(note 19 18 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 19 47 4 (use (reg/i:DI 0 ax)) tilesInt.C:29 -1
     (nil))
(note 47 27 41 4 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 41 47 42 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:29 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(jump_insn:TI 42 41 43 4 (simple_return) tilesInt.C:29 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 43 42 0)

;; Function PyObject* tiles_LoadTilesWrap(PyObject*, PyObject*) (_ZL19tiles_LoadTilesWrapP7_objectS0_, funcdef_no=154, decl_uid=11314, cgraph_uid=154)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 28 count 21 (  1.1)


PyObject* tiles_LoadTilesWrap(PyObject*, PyObject*)

Dataflow summary:
def_info->table_size = 1123, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={35d,39u} r1={29d,8u} r2={28d,4u} r3={5d,9u} r4={32d,9u} r5={49d,26u} r6={6d,9u} r7={15d,118u} r8={23d} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r17={49d,10u} r18={23d} r19={23d} r20={5e} r21={25d,2u} r22={25d,1u} r23={24d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={27d,3u} r38={27d,3u} r39={23d} r40={23d} r41={7d,11u} r42={4d,7u} r43={4d,6u} r44={4d,10u} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} 
;;    total ref usage 1439{1159d,275u,5e} in 187{164 regular + 23 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 16 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 )->[3]->( 4 17 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

( 3 )->[4]->( 5 17 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 7 6 )->[7]->( 7 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 5 7 17 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[9]->( 9 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[10]->( 11 18 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 11 18 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 14 13 )->[14]->( 14 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 12 14 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 15 )->[16]->( 1 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 3 4 )->[17]->( 8 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 10 )->[18]->( 12 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 16 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 101 to worklist
  Adding insn 98 to worklist
  Adding insn 89 to worklist
  Adding insn 87 to worklist
  Adding insn 84 to worklist
  Adding insn 82 to worklist
  Adding insn 79 to worklist
  Adding insn 77 to worklist
  Adding insn 74 to worklist
  Adding insn 67 to worklist
  Adding insn 65 to worklist
  Adding insn 63 to worklist
  Adding insn 61 to worklist
  Adding insn 59 to worklist
  Adding insn 401 to worklist
  Adding insn 400 to worklist
  Adding insn 399 to worklist
  Adding insn 398 to worklist
  Adding insn 397 to worklist
  Adding insn 396 to worklist
  Adding insn 133 to worklist
  Adding insn 127 to worklist
  Adding insn 123 to worklist
  Adding insn 118 to worklist
  Adding insn 117 to worklist
  Adding insn 109 to worklist
  Adding insn 105 to worklist
  Adding insn 139 to worklist
  Adding insn 136 to worklist
  Adding insn 330 to worklist
  Adding insn 322 to worklist
  Adding insn 315 to worklist
  Adding insn 161 to worklist
  Adding insn 154 to worklist
  Adding insn 152 to worklist
  Adding insn 149 to worklist
  Adding insn 174 to worklist
  Adding insn 386 to worklist
  Adding insn 167 to worklist
  Adding insn 215 to worklist
  Adding insn 208 to worklist
  Adding insn 206 to worklist
  Adding insn 203 to worklist
  Adding insn 381 to worklist
  Adding insn 197 to worklist
  Adding insn 194 to worklist
  Adding insn 182 to worklist
  Adding insn 179 to worklist
  Adding insn 234 to worklist
  Adding insn 227 to worklist
  Adding insn 226 to worklist
  Adding insn 261 to worklist
  Adding insn 301 to worklist
  Adding insn 295 to worklist
  Adding insn 287 to worklist
  Adding insn 265 to worklist
  Adding insn 414 to worklist
  Adding insn 343 to worklist
  Adding insn 425 to worklist
  Adding insn 427 to worklist
  Adding insn 253 to worklist
  Adding insn 246 to worklist
  Adding insn 245 to worklist
  Adding insn 241 to worklist
Finished finding needed instructions:
processing block 16 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 413 to worklist
  Adding insn 412 to worklist
  Adding insn 411 to worklist
  Adding insn 410 to worklist
  Adding insn 409 to worklist
  Adding insn 408 to worklist
  Adding insn 407 to worklist
processing block 15 lr out =  0 [ax] 7 [sp]
  Adding insn 420 to worklist
  Adding insn 263 to worklist
processing block 14 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 300 to worklist
  Adding insn 298 to worklist
  Adding insn 294 to worklist
  Adding insn 292 to worklist
  Adding insn 290 to worklist
  Adding insn 285 to worklist
processing block 13 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 419 to worklist
  Adding insn 281 to worklist
  Adding insn 384 to worklist
  Adding insn 279 to worklist
  Adding insn 276 to worklist
  Adding insn 275 to worklist
  Adding insn 272 to worklist
processing block 12 lr out =  0 [ax] 7 [sp]
  Adding insn 260 to worklist
  Adding insn 382 to worklist
processing block 11 lr out =  7 [sp]
  Adding insn 233 to worklist
  Adding insn 232 to worklist
  Adding insn 230 to worklist
  Adding insn 229 to worklist
  Adding insn 228 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
processing block 18 lr out =  7 [sp]
  Adding insn 252 to worklist
  Adding insn 251 to worklist
  Adding insn 250 to worklist
  Adding insn 249 to worklist
  Adding insn 248 to worklist
  Adding insn 247 to worklist
  Adding insn 240 to worklist
processing block 10 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 181 to worklist
  Adding insn 178 to worklist
  Adding insn 177 to worklist
processing block 9 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 214 to worklist
  Adding insn 212 to worklist
  Adding insn 205 to worklist
  Adding insn 202 to worklist
  Adding insn 201 to worklist
  Adding insn 388 to worklist
  Adding insn 387 to worklist
  Adding insn 196 to worklist
  Adding insn 193 to worklist
  Adding insn 192 to worklist
processing block 8 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 173 to worklist
  Adding insn 421 to worklist
  Adding insn 169 to worklist
  Adding insn 166 to worklist
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 160 to worklist
  Adding insn 158 to worklist
  Adding insn 151 to worklist
  Adding insn 148 to worklist
  Adding insn 147 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 418 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 329 to worklist
  Adding insn 323 to worklist
  Adding insn 320 to worklist
  Adding insn 319 to worklist
  Adding insn 317 to worklist
  Adding insn 316 to worklist
  Adding insn 314 to worklist
processing block 17 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 417 to worklist
  Adding insn 416 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 138 to worklist
processing block 3 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp]
  Adding insn 132 to worklist
  Adding insn 131 to worklist
  Adding insn 128 to worklist
  Adding insn 390 to worklist
  Adding insn 122 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 110 to worklist
  Adding insn 389 to worklist
  Adding insn 104 to worklist
processing block 2 lr out =  0 [ax] 7 [sp]
  Adding insn 100 to worklist
  Adding insn 423 to worklist
  Adding insn 99 to worklist
  Adding insn 422 to worklist
  Adding insn 95 to worklist
  Adding insn 91 to worklist
  Adding insn 90 to worklist
  Adding insn 395 to worklist
  Adding insn 394 to worklist
  Adding insn 393 to worklist
  Adding insn 75 to worklist
  Adding insn 392 to worklist
  Adding insn 391 to worklist
  Adding insn 49 to worklist
  Adding insn 402 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 28 count 22 (  1.2)
deleting insn with uid = 403.
deleting insn with uid = 50.
deleting insn with uid = 70.
deleting insn with uid = 71.
;;   ======================================================
;;   -- basic block 2 from 396 to 101 -- after reload
;;   ======================================================

;;	  0--> b  0: i 396[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  49di=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  95si=`*.LC0'                              :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 397[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 398[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 399[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 400[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 401[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 402{sp=sp-0xc8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 12--> b  0: i  75dx=[const(unspec[`PyList_Type'] 2)]     :athlon-direct,athlon-load
;;	 13--> b  0: i 392ax=sp+0xb0                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i 391cx=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i  90r9=sp+0x60                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  91r8=sp+0x50                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  59[sp+0x70]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  60loc 0                                   :nothing
;;	 14--> b  0: i  61[sp+0x80]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  62loc 0                                   :nothing
;;	 15--> b  0: i  74[sp+0x30]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 393ax=sp+0xa0                              :athlon-direct,athlon-agu,nothing
;;	 15--> b  0: i  77[sp+0x28]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  82[sp+0x18]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  87[sp+0x8]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  79[sp+0x20]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i 394ax=sp+0x90                              :athlon-direct,athlon-agu,nothing
;;	 17--> b  0: i  63[sp+0x90]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  64loc 0                                   :nothing
;;	 18--> b  0: i  65[sp+0xa0]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i  66loc 0                                   :nothing
;;	 18--> b  0: i  67[sp+0xb0]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i  68loc 0                                   :nothing
;;	 18--> b  0: i  69loc 0                                   :nothing
;;	 19--> b  0: i  84[sp+0x10]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 395ax=sp+0x80                              :athlon-direct,athlon-agu,nothing
;;	 21--> b  0: i  89[sp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i 422{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 22--> b  0: i  98ax=call [`PyArg_ParseTuple']            :athlon-vector,athlon-ieu
;;	 23--> b  0: i  99dx=ax                                   :athlon-direct,athlon-ieu
;;	 23--> b  0: i 423{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 24--> b  0: i 100flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	 25--> b  0: i 101pc={(flags==0)?L353:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 25
;;   new head = 396
;;   new tail = 101

deleting insn with uid = 113.
;;   ======================================================
;;   -- basic block 3 from 104 to 133 -- after reload
;;   ======================================================

;;	  0--> b  0: i 104di=[sp+0x90]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 105ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 389di=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i 109ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i 114di=sxn([sp+0x60])                       :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i 110bx=ax                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i 112loc bx                                  :nothing
;;	 11--> b  0: i 115{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	 12--> b  0: i 117ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	 13--> b  0: i 122di=[sp+0x90]                            :athlon-direct,athlon-load
;;	 13--> b  0: i 118[sp+0x40]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i 120loc [sp+0x40]                           :nothing
;;	 16--> b  0: i 123ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	 17--> b  0: i 390di=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	 19--> b  0: i 127ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	 20--> b  0: i 131di=[sp+0xb0]                            :athlon-direct,athlon-load
;;	 20--> b  0: i 128bp=ax                                   :athlon-direct,athlon-ieu
;;	 20--> b  0: i 130loc bp                                  :nothing
;;	 23--> b  0: i 132flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	 24--> b  0: i 133pc={(flags==0)?L335:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 24
;;   new head = 104
;;   new tail = 133

;;   ======================================================
;;   -- basic block 4 from 136 to 139 -- after reload
;;   ======================================================

;;	  0--> b  0: i 136ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  1--> b  0: i 138flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  2--> b  0: i 139pc={(flags<=0)?L335:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 136
;;   new tail = 139

;;   ======================================================
;;   -- basic block 5 from 314 to 330 -- after reload
;;   ======================================================

;;	  0--> b  0: i 314di=[sp+0xb0]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 315ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 319di=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 316r12=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 317r14=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 318loc ax                                  :nothing
;;	  5--> b  0: i 320{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  6--> b  0: i 322ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i 329flags=cmp(r12,0)                        :athlon-direct,athlon-ieu
;;	  7--> b  0: i 323r13=ax                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 325loc r13                                 :nothing
;;	  7--> b  0: i 327loc 0                                   :nothing
;;	  8--> b  0: i 330pc={(flags<=0)?L328:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 314
;;   new tail = 330

;;   ======================================================
;;   -- basic block 6 from 418 to 418 -- after reload
;;   ======================================================

;;	  0--> b  0: i 418{r12=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 418
;;   new tail = 418

;;   ======================================================
;;   -- basic block 7 from 145 to 161 -- after reload
;;   ======================================================

;;	  0--> b  0: i 145loc r12                                 :nothing
;;	  0--> b  0: i 148di=[sp+0xb0]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 147si=r12                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 149ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i 151di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 152ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  6--> b  0: i 154[r12*0x4+r13]=ax                        :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 155loc r12+0x1                             :nothing
;;	  6--> b  0: i 157loc D#3                                 :nothing
;;	  6--> b  0: i 158{r12=r12+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  7--> b  0: i 160flags=cmp(r14,r12)                      :athlon-direct,athlon-ieu
;;	  8--> b  0: i 161pc={(flags>0)?L332:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 145
;;   new tail = 161

;;   ======================================================
;;   -- basic block 8 from 163 to 174 -- after reload
;;   ======================================================

;;	  0--> b  0: i 163loc r14                                 :nothing
;;	  0--> b  0: i 164loc r13                                 :nothing
;;	  0--> b  0: i 166di=[sp+0x90]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 421{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 167ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 173flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 386[sp+0x48]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 169r12=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 170loc ax                                  :nothing
;;	  4--> b  0: i 172loc 0                                   :nothing
;;	  5--> b  0: i 174pc={(flags<=0)?L213:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 163
;;   new tail = 174

;;   ======================================================
;;   -- basic block 9 from 189 to 215 -- after reload
;;   ======================================================

;;	  0--> b  0: i 189loc r15                                 :nothing
;;	  0--> b  0: i 193di=[sp+0x90]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 192si=r15                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 194ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i 196di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 197xmm0=call [`PyFloat_AsDouble']          :athlon-vector,athlon-ieu
;;	  6--> b  0: i 387xmm0=vec_duplicate(xmm0)                :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 202di=[sp+0xa0]                            :athlon-direct,athlon-load
;;	  7--> b  0: i 201si=r15                                  :athlon-direct,athlon-ieu
;;	  9--> b  0: i 388xmm1=vec_concat(ftr(xmm0),const_vector) :athlon-vector,athlon-fpsched,athlon-fvector*2
;;	 17--> b  0: i 381[r15*0x4+bx]=xmm1                       :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	 19--> b  0: i 203ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	 20--> b  0: i 205di=ax                                   :athlon-direct,athlon-ieu
;;	 21--> b  0: i 206ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	 22--> b  0: i 208[r15*0x4+bp]=ax                         :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i 209loc r15+0x1                             :nothing
;;	 22--> b  0: i 211loc D#2                                 :nothing
;;	 22--> b  0: i 212{r15=r15+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	 23--> b  0: i 214flags=cmp(r12,r15)                      :athlon-direct,athlon-ieu
;;	 24--> b  0: i 215pc={(flags>0)?L355:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 24
;;   new head = 189
;;   new tail = 215

;;   ======================================================
;;   -- basic block 10 from 177 to 182 -- after reload
;;   ======================================================

;;	  0--> b  0: i 178di=[sp+0x80]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 177si=`_ZL18CollisionTableType'            :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 179ax=call [`PyObject_IsInstance']         :athlon-vector,athlon-ieu
;;	  4--> b  0: i 181flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i 182pc={(flags==0)?L424:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 177
;;   new tail = 182

;;   ======================================================
;;   -- basic block 11 from 222 to 234 -- after reload
;;   ======================================================

;;	  0--> b  0: i 222loc [[sp+0x80]+0x10]                    :nothing
;;	  0--> b  0: i 223ax=[sp+0x80]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 229r8=[sp+0x48]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 228r9=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 232si=[sp+0x60]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 233di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 230cx=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 224dx=[ax+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 226[sp+0x8]=r14                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 227[sp]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 234call [`_Z9tileswrapPiiP15collision_tablePfiS_S_i']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 222
;;   new tail = 234

;;   ======================================================
;;   -- basic block 12 from 259 to 261 -- after reload
;;   ======================================================

;;	  0--> b  0: i 259loc [sp+0x60]-0x1                       :nothing
;;	  0--> b  0: i 382ax=[sp+0x60]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 260{flags=cmp(ax-0x1,0);ax=ax-0x1;}        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 261pc={(flags<0)?L299:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 259
;;   new tail = 261

deleting insn with uid = 273.
deleting insn with uid = 280.
;;   ======================================================
;;   -- basic block 13 from 272 to 419 -- after reload
;;   ======================================================

;;	  0--> b  0: i 384cx=[sp+0x40]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 272bp=zxn(ax)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 279ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 275bp=!bp                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 419{bx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 276{bp=bp<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  3--> b  0: i 281r12=ax*0x4+cx                           :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 3
;;   new head = 272
;;   new tail = 419

deleting insn with uid = 289.
;;   ======================================================
;;   -- basic block 14 from 283 to 301 -- after reload
;;   ======================================================

;;	  0--> b  0: i 283loc clobber                             :nothing
;;	  0--> b  0: i 285di=sxn([r12+bx])                        :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 298{bx=bx-0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 287ax=call [`PyInt_FromLong']              :athlon-vector,athlon-ieu
;;	  5--> b  0: i 290si=sxn([sp+0x50])                       :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 294di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  5--> b  0: i 292dx=ax                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i 295ax=call [`PyList_Insert']               :athlon-vector,athlon-ieu
;;	  9--> b  0: i 297loc D#1                                 :nothing
;;	 10--> b  0: i 300flags=cmp(bx,bp)                        :athlon-direct,athlon-ieu
;;	 11--> b  0: i 301pc={(flags!=0)?L303:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 283
;;   new tail = 301

;;   ======================================================
;;   -- basic block 15 from 263 to 265 -- after reload
;;   ======================================================

;;	  0--> b  0: i 263di=`*.LC1'                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 420{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 265ax=call [`Py_BuildValue']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 263
;;   new tail = 265

deleting insn with uid = 406.
;;   ======================================================
;;   -- basic block 16 from 343 to 414 -- after reload
;;   ======================================================

;;	  0--> b  0: i 407{sp=sp+0xc8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 343use ax                                  :nothing
;;	  1--> b  0: i 408bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 409bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 410r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 411r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 412r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 413r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 414simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 343
;;   new tail = 414

;;   ======================================================
;;   -- basic block 17 from 416 to 425 -- after reload
;;   ======================================================

;;	  0--> b  0: i 416{r14=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 417{r13=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 425pc=L328                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 416
;;   new tail = 425

;;   ======================================================
;;   -- basic block 18 from 240 to 427 -- after reload
;;   ======================================================

;;	  0--> b  0: i 240di=[sp+0x80]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 241ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  3--> b  0: i 243loc ax                                  :nothing
;;	  4--> b  0: i 248r8=[sp+0x48]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 251si=[sp+0x60]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 247r9=bp                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 252di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  5--> b  0: i 245[sp+0x8]=r14                            :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 249cx=bx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 246[sp]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 250dx=ax                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i 253call [`_Z9tileswrapPiiiPfiS_S_i']       :athlon-vector,athlon-ieu
;;	  9--> b  0: i 427pc=L254                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 240
;;   new tail = 427



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* tiles_LoadTilesWrap(PyObject*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={35d,39u} r1={29d,8u} r2={28d,4u} r3={5d,9u} r4={32d,9u} r5={49d,26u} r6={6d,9u} r7={15d,118u} r8={23d} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r17={49d,10u} r18={23d} r19={23d} r20={5e} r21={25d,2u} r22={25d,1u} r23={24d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={27d,3u} r38={27d,3u} r39={23d} r40={23d} r41={7d,11u} r42={4d,7u} r43={4d,6u} r44={4d,10u} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} 
;;    total ref usage 1439{1159d,275u,5e} in 187{164 regular + 23 call} insns.
(note 47 0 57 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 1145, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 57 47 50 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 50 57 70 2 NOTE_INSN_FUNCTION_BEG)
(note 70 50 71 2 NOTE_INSN_DELETED)
(note 71 70 396 2 NOTE_INSN_DELETED)
(insn/f:TI 396 71 49 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tilesInt.C:244 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 49 396 95 2 (set (reg/v/f:DI 5 di [orig:178 args ] [178])
        (reg:DI 4 si [ args ])) tilesInt.C:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ args ])
        (nil)))
(insn 95 49 397 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b9b8a16a720 *.LC0>)) tilesInt.C:267 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 397 95 398 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tilesInt.C:244 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 398 397 399 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tilesInt.C:244 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 399 398 400 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tilesInt.C:244 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 400 399 401 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tilesInt.C:244 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 401 400 402 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tilesInt.C:244 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 402 401 403 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -200 [0xffffffffffffff38])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:244 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -200 [0xffffffffffffff38])))
            (nil))))
(note 403 402 75 2 NOTE_INSN_PROLOGUE_END)
(insn 75 403 392 2 (set (reg:DI 1 dx [184])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 392 75 391 2 (set (reg/f:DI 0 ax [182])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 176 [0xb0]))) tilesInt.C:267 267 {*leadi}
     (nil))
(insn 391 392 90 2 (set (reg/f:DI 2 cx [181])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) tilesInt.C:267 267 {*leadi}
     (nil))
(insn 90 391 91 2 (set (reg:DI 38 r9)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 96 [0x60]))) tilesInt.C:267 267 {*leadi}
     (nil))
(insn:TI 91 90 59 2 (set (reg:DI 37 r8)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 80 [0x50]))) tilesInt.C:267 267 {*leadi}
     (nil))
(insn 59 91 60 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 tiles_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:245 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 60 59 61 2 (var_location:DI the_tiles (const_int 0 [0])) tilesInt.C:246 -1
     (nil))
(insn 61 60 62 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 memorctable+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:249 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 62 61 74 2 (var_location:DI ct (const_int 0 [0])) tilesInt.C:250 -1
     (nil))
(insn:TI 74 62 393 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0  S8 A64])
        (reg/f:DI 0 ax [182])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [182])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 393 74 77 2 (set (reg/f:DI 0 ax [185])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 160 [0xa0]))) tilesInt.C:267 267 {*leadi}
     (nil))
(insn 77 393 82 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0  S8 A64])
        (reg:DI 1 dx [184])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 82 77 87 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg:DI 1 dx [184])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (nil))
(insn 87 82 79 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg:DI 1 dx [184])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 79 87 394 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S8 A64])
        (reg/f:DI 0 ax [185])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [185])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))
(insn 394 79 63 2 (set (reg/f:DI 0 ax [188])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 144 [0x90]))) tilesInt.C:267 267 {*leadi}
     (nil))
(insn 63 394 64 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [0 variables_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:252 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 64 63 65 2 (var_location:DI variables (const_int 0 [0])) tilesInt.C:253 -1
     (nil))
(insn:TI 65 64 66 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [0 wrapwidths_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:255 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 66 65 67 2 (var_location:DI wrapwidths (const_int 0 [0])) tilesInt.C:256 -1
     (nil))
(insn 67 66 68 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [0 ints_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:257 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 68 67 69 2 (var_location:DI ints (const_int 0 [0])) tilesInt.C:258 -1
     (nil))
(debug_insn 69 68 84 2 (var_location:SI num_ints (const_int 0 [0])) tilesInt.C:259 -1
     (nil))
(insn:TI 84 69 395 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg/f:DI 0 ax [188])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [188])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))
(insn 395 84 89 2 (set (reg/f:DI 0 ax [191])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 128 [0x80]))) tilesInt.C:267 267 {*leadi}
     (nil))
(insn:TI 89 395 422 2 (set (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg/f:DI 0 ax [191])) tilesInt.C:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [191])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0]))
            (nil))))
(insn 422 89 98 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:267 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 98 422 99 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyArg_ParseTuple") [flags 0x41]  <function_decl 0x2b9b8a018300 PyArg_ParseTuple>) [0 PyArg_ParseTuple S1 A8])
            (const_int 56 [0x38]))) tilesInt.C:267 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 8 [0x8])) [0  S8 A64]))
                                        (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                        (const_int 16 [0x10])) [0  S8 A64]))
                                            (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                            (const_int 24 [0x18])) [0  S8 A64]))
                                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                                (const_int 32 [0x20])) [0  S8 A64]))
                                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                                    (const_int 40 [0x28])) [0  S8 A64]))
                                                        (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                                        (const_int 48 [0x30])) [0  S8 A64]))
                                                            (nil))))))))))))))))
(insn:TI 99 98 423 2 (set (reg:SI 1 dx [orig:108 D.11814 ] [108])
        (reg:SI 0 ax)) tilesInt.C:267 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 423 99 100 2 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.11813 ] [107])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:268 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 100 423 101 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:108 D.11814 ] [108])
            (const_int 0 [0]))) tilesInt.C:262 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:108 D.11814 ] [108])
        (nil)))
(jump_insn:TI 101 100 102 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 353)
            (pc))) tilesInt.C:262 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2139 [0x85b])
            (nil)))
 -> 353)
;;  succ:       16 [21.4%]  (CAN_FALLTHRU)
;;              3 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(note 102 101 113 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 113 102 104 3 NOTE_INSN_DELETED)
(insn:TI 104 113 105 3 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [0 variables_list+0 S8 A128])) tilesInt.C:270 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 105 104 389 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:270 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 389 105 109 3 (set (reg:DI 5 di [orig:194 D.11816 ] [194])
        (mult:DI (reg:DI 0 ax [orig:110 D.11815 ] [110])
            (const_int 4 [0x4]))) tilesInt.C:270 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:110 D.11815 ] [110])
        (nil)))
(call_insn:TI 109 389 114 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:270 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 114 109 110 3 (set (reg:DI 5 di [orig:196 D.11816 ] [196])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 96 [0x60])) [0 num_tilings+0 S4 A128]))) tilesInt.C:271 149 {*extendsidi2_rex64}
     (nil))
(insn 110 114 112 3 (set (reg/v/f:DI 3 bx [orig:113 variables ] [113])
        (reg:DI 0 ax)) tilesInt.C:270 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 195)
            (nil))))
(debug_insn 112 110 115 3 (var_location:DI variables (reg/v/f:DI 3 bx [orig:113 variables ] [113])) tilesInt.C:270 -1
     (nil))
(insn:TI 115 112 117 3 (parallel [
            (set (reg:DI 5 di [orig:198 D.11816 ] [198])
                (ashift:DI (reg:DI 5 di [orig:196 D.11816 ] [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:271 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 117 115 122 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:271 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 122 117 118 3 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [0 variables_list+0 S8 A128])) tilesInt.C:272 87 {*movdi_internal_rex64}
     (nil))
(insn 118 122 120 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 %sfp+48 S8 A64])
        (reg:DI 0 ax)) tilesInt.C:271 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 199)
            (nil))))
(debug_insn 120 118 123 3 (var_location:DI the_tiles (mem/c:DI (plus:DI (reg/f:DI 7 sp)
            (const_int 64 [0x40])) [0 %sfp+48 S8 A64])) tilesInt.C:271 -1
     (nil))
(call_insn:TI 123 120 390 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:272 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 390 123 127 3 (set (reg:DI 5 di [orig:201 D.11816 ] [201])
        (mult:DI (reg:DI 0 ax [orig:119 D.11815 ] [119])
            (const_int 4 [0x4]))) tilesInt.C:272 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:119 D.11815 ] [119])
        (nil)))
(call_insn:TI 127 390 131 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:272 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 131 127 128 3 (set (reg/f:DI 5 di [orig:123 ints_list.7 ] [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [0 ints_list+0 S8 A128])) tilesInt.C:274 87 {*movdi_internal_rex64}
     (nil))
(insn 128 131 130 3 (set (reg/v/f:DI 6 bp [orig:122 wrapwidths ] [122])
        (reg:DI 0 ax)) tilesInt.C:272 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 202)
            (nil))))
(debug_insn 130 128 132 3 (var_location:DI wrapwidths (reg/v/f:DI 6 bp [orig:122 wrapwidths ] [122])) tilesInt.C:272 -1
     (nil))
(insn:TI 132 130 133 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:123 ints_list.7 ] [123])
            (const_int 0 [0]))) tilesInt.C:274 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 133 132 134 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 335)
            (pc))) tilesInt.C:274 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil)))
 -> 335)
;;  succ:       4 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 628, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 134 133 136 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 136 134 138 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:274 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 138 136 139 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:DI 0 ax [orig:124 D.11815 ] [124])
            (const_int 0 [0]))) tilesInt.C:274 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:124 D.11815 ] [124])
        (nil)))
(jump_insn:TI 139 138 312 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 335)
            (pc))) tilesInt.C:274 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil)))
 -> 335)
;;  succ:       5 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [27.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 458, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 312 139 314 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 314 312 315 5 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [0 ints_list+0 S8 A128])) tilesInt.C:276 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 315 314 319 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:276 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 319 315 316 5 (set (reg:DI 5 di [orig:228 D.11816 ] [228])
        (sign_extend:DI (reg:SI 0 ax [orig:126 D.11815 ] [126]))) tilesInt.C:277 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:126 D.11815 ] [126])
        (nil)))
(insn 316 319 317 5 (set (reg:DI 41 r12 [orig:126 D.11815 ] [126])
        (reg:DI 0 ax)) tilesInt.C:276 87 {*movdi_internal_rex64}
     (nil))
(insn 317 316 318 5 (set (reg/v:SI 43 r14 [orig:106 num_ints ] [106])
        (reg:SI 0 ax [orig:126 D.11815 ] [126])) tilesInt.C:276 89 {*movsi_internal}
     (nil))
(debug_insn 318 317 320 5 (var_location:SI num_ints (reg:SI 0 ax [orig:126 D.11815 ] [126])) tilesInt.C:276 -1
     (nil))
(insn:TI 320 318 322 5 (parallel [
            (set (reg:DI 5 di [orig:229 D.11816 ] [229])
                (ashift:DI (reg:DI 5 di [orig:228 D.11816 ] [228])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:277 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 322 320 329 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:277 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 329 322 323 5 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 41 r12 [orig:126 D.11815 ] [126])
            (const_int 0 [0]))) tilesInt.C:278 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 41 r12 [orig:126 D.11815 ] [126])
        (nil)))
(insn 323 329 325 5 (set (reg/v/f:DI 42 r13 [orig:105 ints ] [105])
        (reg:DI 0 ax)) tilesInt.C:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 230)
            (nil))))
(debug_insn 325 323 327 5 (var_location:DI ints (reg/v/f:DI 42 r13 [orig:105 ints ] [105])) tilesInt.C:277 -1
     (nil))
(debug_insn 327 325 330 5 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 330 327 331 5 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 328)
            (pc))) tilesInt.C:278 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 328)
;;  succ:       6 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 417, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	 17 [flags]
(note 331 330 418 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 418 331 332 6 (parallel [
            (set (reg:DI 41 r12 [orig:137 ivtmp.79 ] [137])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:278 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 7, loop depth 0, count 0, freq 2639, maybe hot
;; Invalid sum of incoming frequencies 2818, should be 2639
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(code_label 332 418 144 7 23 "" [1 uses])
(note 144 332 145 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 145 144 148 7 (var_location:SI i (reg:SI 41 r12 [orig:137 ivtmp.79 ] [137])) -1
     (nil))
(insn:TI 148 145 147 7 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [0 ints_list+0 S8 A128])) tilesInt.C:279 87 {*movdi_internal_rex64}
     (nil))
(insn 147 148 149 7 (set (reg:DI 4 si)
        (reg:DI 41 r12 [orig:137 ivtmp.79 ] [137])) tilesInt.C:279 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 149 147 151 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:279 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 151 149 152 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:131 D.11813 ] [131])) tilesInt.C:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:131 D.11813 ] [131])
        (nil)))
(call_insn:TI 152 151 154 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:279 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 154 152 155 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 41 r12 [orig:137 ivtmp.79 ] [137])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 42 r13 [orig:105 ints ] [105])) [0 MEM[base: ints_53, index: ivtmp.79_132, step: 4, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:132 D.11815 ] [132])) tilesInt.C:279 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:132 D.11815 ] [132])
        (nil)))
(debug_insn 155 154 157 7 (var_location:SI D#3 (plus:SI (reg:SI 41 r12 [orig:137 ivtmp.79 ] [137])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 157 155 158 7 (var_location:SI i (debug_expr:SI D#3)) -1
     (nil))
(insn 158 157 160 7 (parallel [
            (set (reg:DI 41 r12 [orig:137 ivtmp.79 ] [137])
                (plus:DI (reg:DI 41 r12 [orig:137 ivtmp.79 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 160 158 161 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 43 r14 [orig:106 num_ints ] [106])
            (reg:SI 41 r12 [orig:137 ivtmp.79 ] [137]))) tilesInt.C:278 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 161 160 328 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 332)
            (pc))) tilesInt.C:278 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 332)
;;  succ:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              8 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 8, loop depth 0, count 0, freq 900, maybe hot
;; Invalid sum of incoming frequencies 721, should be 900
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [9.0%]  (CAN_FALLTHRU)
;;              7 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              17 [100.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
(code_label 328 161 162 8 22 "" [2 uses])
(note 162 328 163 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 163 162 164 8 (var_location:SI num_ints (reg/v:SI 43 r14 [orig:106 num_ints ] [106])) -1
     (nil))
(debug_insn 164 163 166 8 (var_location:DI ints (reg/v/f:DI 42 r13 [orig:105 ints ] [105])) -1
     (nil))
(insn:TI 166 164 421 8 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [0 variables_list+0 S8 A128])) tilesInt.C:282 87 {*movdi_internal_rex64}
     (nil))
(insn 421 166 167 8 (parallel [
            (set (reg:DI 44 r15 [orig:159 ivtmp.73 ] [159])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:284 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 167 421 173 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:282 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 173 167 386 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:135 D.11815 ] [135])
            (const_int 0 [0]))) tilesInt.C:284 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:135 D.11815 ] [135])
        (nil)))
(insn 386 173 169 8 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [0 %sfp+56 S8 A64])
        (reg:DI 0 ax [orig:135 D.11815 ] [135])) tilesInt.C:282 87 {*movdi_internal_rex64}
     (nil))
(insn 169 386 170 8 (set (reg/v:SI 41 r12 [orig:136 num_variables ] [136])
        (reg:SI 0 ax [orig:135 D.11815 ] [135])) tilesInt.C:282 89 {*movsi_internal}
     (nil))
(debug_insn 170 169 172 8 (var_location:SI num_variables (reg:SI 0 ax [orig:135 D.11815 ] [135])) tilesInt.C:282 -1
     (nil))
(debug_insn 172 170 174 8 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 174 172 355 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 213)
            (pc))) tilesInt.C:284 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 213)
;;  succ:       9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              10 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 9, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
(code_label 355 174 354 9 28 "" [1 uses])
(note 354 355 189 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 189 354 193 9 (var_location:SI i (reg:SI 44 r15 [orig:159 ivtmp.73 ] [159])) -1
     (nil))
(insn:TI 193 189 192 9 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [0 variables_list+0 S8 A128])) tilesInt.C:286 87 {*movdi_internal_rex64}
     (nil))
(insn 192 193 194 9 (set (reg:DI 4 si)
        (reg:DI 44 r15 [orig:159 ivtmp.73 ] [159])) tilesInt.C:286 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 194 192 196 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:286 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 196 194 197 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:141 D.11813 ] [141])) tilesInt.C:286 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:141 D.11813 ] [141])
        (nil)))
(call_insn:TI 197 196 387 9 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("PyFloat_AsDouble") [flags 0x41]  <function_decl 0x2b9b89f5be00 PyFloat_AsDouble>) [0 PyFloat_AsDouble S1 A8])
            (const_int 0 [0]))) tilesInt.C:286 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 387 197 202 9 (set (reg:V2DF 21 xmm0 [orig:142 D.11817 ] [142])
        (vec_duplicate:V2DF (reg:DF 21 xmm0 [orig:142 D.11817 ] [142]))) tilesInt.C:286 1459 {vec_dupv2df}
     (nil))
(insn 202 387 201 9 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [0 wrapwidths_list+0 S8 A128])) tilesInt.C:287 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 201 202 388 9 (set (reg:DI 4 si)
        (reg:DI 44 r15 [orig:159 ivtmp.73 ] [159])) tilesInt.C:287 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 388 201 381 9 (set (reg:V4SF 22 xmm1 [231])
        (vec_concat:V4SF (float_truncate:V2SF (reg:V2DF 21 xmm0 [orig:142 D.11817 ] [142]))
            (const_vector:V2SF [
                    (const_double:SF 0.0 [0x0.0p+0])
                    (const_double:SF 0.0 [0x0.0p+0])
                ]))) tilesInt.C:286 1393 {*sse2_cvtpd2ps}
     (expr_list:REG_DEAD (reg:V2DF 21 xmm0 [orig:142 D.11817 ] [142])
        (nil)))
(insn:TI 381 388 203 9 (set (mem:SF (plus:DI (mult:DI (reg:DI 44 r15 [orig:159 ivtmp.73 ] [159])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 3 bx [orig:113 variables ] [113])) [0 MEM[base: variables_30, index: ivtmp.73_133, step: 4, offset: 0B]+0 S4 A32])
        (reg:SF 22 xmm1 [231])) tilesInt.C:286 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [231])
        (nil)))
(call_insn:TI 203 381 205 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:287 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 205 203 206 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:145 D.11813 ] [145])) tilesInt.C:287 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:145 D.11813 ] [145])
        (nil)))
(call_insn:TI 206 205 208 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:287 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 208 206 209 9 (set (mem:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:159 ivtmp.73 ] [159])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 6 bp [orig:122 wrapwidths ] [122])) [0 MEM[base: wrapwidths_42, index: ivtmp.73_133, step: 4, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:146 D.11815 ] [146])) tilesInt.C:287 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:146 D.11815 ] [146])
        (nil)))
(debug_insn 209 208 211 9 (var_location:SI D#2 (plus:SI (reg:SI 44 r15 [orig:159 ivtmp.73 ] [159])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 211 209 212 9 (var_location:SI i (debug_expr:SI D#2)) -1
     (nil))
(insn 212 211 214 9 (parallel [
            (set (reg:DI 44 r15 [orig:159 ivtmp.73 ] [159])
                (plus:DI (reg:DI 44 r15 [orig:159 ivtmp.73 ] [159])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 214 212 215 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 41 r12 [orig:136 num_variables ] [136])
            (reg:SI 44 r15 [orig:159 ivtmp.73 ] [159]))) tilesInt.C:284 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 215 214 213 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 355)
            (pc))) tilesInt.C:284 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 355)
;;  succ:       9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              10 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (CAN_FALLTHRU)
;;              9 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 213 215 175 10 16 "" [1 uses])
(note 175 213 178 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 178 175 177 10 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 memorctable+0 S8 A128])) tilesInt.C:290 87 {*movdi_internal_rex64}
     (nil))
(insn 177 178 179 10 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>)) tilesInt.C:290 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 179 177 181 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyObject_IsInstance") [flags 0x41]  <function_decl 0x2b9b8a05e600 PyObject_IsInstance>) [0 PyObject_IsInstance S1 A8])
            (const_int 0 [0]))) tilesInt.C:290 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 181 179 182 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:149 D.11814 ] [149])
            (const_int 0 [0]))) tilesInt.C:290 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:149 D.11814 ] [149])
        (nil)))
(jump_insn:TI 182 181 221 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 424)
            (pc))) tilesInt.C:290 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 424)
;;  succ:       11 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(note 221 182 222 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 222 221 223 11 (var_location:DI ct (mem/f/j:DI (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 128 [0x80])) [0 memorctable+0 S8 A128])
            (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.10_93].ct+0 S8 A64])) tilesInt.C:292 -1
     (nil))
(insn:TI 223 222 229 11 (set (reg/f:DI 0 ax [orig:208 memorctable ] [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 memorctable+0 S8 A128])) tilesInt.C:292 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 memorctable+0 S8 A128])
        (nil)))
(insn 229 223 228 11 (set (reg:SI 37 r8)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [0 %sfp+56 S4 A64])) tilesInt.C:293 89 {*movsi_internal}
     (nil))
(insn 228 229 232 11 (set (reg:DI 38 r9)
        (reg/v/f:DI 6 bp [orig:122 wrapwidths ] [122])) tilesInt.C:293 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 6 bp [orig:122 wrapwidths ] [122])
        (nil)))
(insn:TI 232 228 233 11 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 num_tilings+0 S4 A128])) tilesInt.C:293 89 {*movsi_internal}
     (nil))
(insn 233 232 230 11 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 %sfp+48 S8 A64])) tilesInt.C:293 87 {*movdi_internal_rex64}
     (nil))
(insn 230 233 224 11 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:113 variables ] [113])) tilesInt.C:293 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:113 variables ] [113])
        (nil)))
(insn:TI 224 230 226 11 (set (reg/f:DI 1 dx [orig:209 MEM[(struct CollisionTable *)memorctable.10_93].ct ] [209])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:208 memorctable ] [208])
                (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.10_93].ct+0 S8 A64])) tilesInt.C:293 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:208 memorctable ] [208])
        (nil)))
(insn 226 224 227 11 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (reg/v:SI 43 r14 [orig:106 num_ints ] [106])) tilesInt.C:293 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:106 num_ints ] [106])
        (nil)))
(insn:TI 227 226 234 11 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg/v/f:DI 42 r13 [orig:105 ints ] [105])) tilesInt.C:293 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 42 r13 [orig:105 ints ] [105])
        (nil)))
(call_insn:TI 234 227 254 11 (call (mem:QI (symbol_ref:DI ("_Z9tileswrapPiiP15collision_tablePfiS_S_i") [flags 0x41]  <function_decl 0x2b9b8a0a6000 tileswrap>) [0 tileswrap S1 A8])
        (const_int 16 [0x10])) tilesInt.C:293 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                (expr_list:REG_BR_PRED (use (mem:SI (plus:DI (reg/f:DI 7 sp)
                                                (const_int 8 [0x8])) [0  S4 A64]))
                                    (nil))))))))))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [100.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 254 234 255 12 18 "" [1 uses])
(note 255 254 256 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 256 255 257 12 NOTE_INSN_DELETED)
(note 257 256 259 12 NOTE_INSN_DELETED)
(debug_insn 259 257 382 12 (var_location:SI i (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 num_tilings+0 S4 A128])
        (const_int -1 [0xffffffffffffffff]))) -1
     (nil))
(insn:TI 382 259 260 12 (set (reg/v:SI 0 ax [orig:158 i ] [158])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 num_tilings+0 S4 A128])) tilesInt.C:301 89 {*movsi_internal}
     (nil))
(insn:TI 260 382 261 12 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:SI (reg/v:SI 0 ax [orig:158 i ] [158])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg/v:SI 0 ax [orig:158 i ] [158])
                (plus:SI (reg/v:SI 0 ax [orig:158 i ] [158])
                    (const_int -1 [0xffffffffffffffff])))
        ]) tilesInt.C:301 281 {*addsi_2}
     (nil))
(jump_insn:TI 261 260 270 12 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 299)
            (pc))) tilesInt.C:301 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 299)
;;  succ:       13 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
(note 270 261 273 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(note 273 270 280 13 NOTE_INSN_DELETED)
(note 280 273 384 13 NOTE_INSN_DELETED)
(insn:TI 384 280 272 13 (set (reg/v/f:DI 2 cx [orig:117 the_tiles ] [117])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 %sfp+48 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 272 384 279 13 (set (reg:DI 6 bp [217])
        (zero_extend:DI (reg/v:SI 0 ax [orig:158 i ] [158]))) 139 {*zero_extendsidi2_rex64}
     (nil))
(insn 279 272 275 13 (set (reg:DI 0 ax [orig:219 D.11819 ] [219])
        (sign_extend:DI (reg/v:SI 0 ax [orig:158 i ] [158]))) 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 275 279 419 13 (set (reg:DI 6 bp [217])
        (not:DI (reg:DI 6 bp [217]))) 496 {*one_cmpldi2_1}
     (nil))
(insn 419 275 276 13 (parallel [
            (set (reg:DI 3 bx [orig:168 ivtmp.69 ] [168])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:301 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 276 419 281 13 (parallel [
            (set (reg:DI 6 bp [218])
                (ashift:DI (reg:DI 6 bp [217])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 281 276 303 13 (set (reg/f:DI 41 r12 [orig:174 D.11821 ] [174])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:219 D.11819 ] [219])
                (const_int 4 [0x4]))
            (reg/v/f:DI 2 cx [orig:117 the_tiles ] [117]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg/v/f:DI 2 cx [orig:117 the_tiles ] [117])
        (expr_list:REG_DEAD (reg:DI 0 ax [orig:219 D.11819 ] [219])
            (nil))))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 14, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 303 281 282 14 21 "" [1 uses])
(note 282 303 284 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 284 282 289 14 NOTE_INSN_DELETED)
(note 289 284 283 14 NOTE_INSN_DELETED)
(debug_insn 283 289 285 14 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 285 283 298 14 (set (reg:DI 5 di [orig:221 D.11815 ] [221])
        (sign_extend:DI (mem:SI (plus:DI (reg/f:DI 41 r12 [orig:174 D.11821 ] [174])
                    (reg:DI 3 bx [orig:168 ivtmp.69 ] [168])) [0 MEM[base: _147, index: ivtmp.69_138, offset: 0B]+0 S4 A32]))) tilesInt.C:302 149 {*extendsidi2_rex64}
     (nil))
(insn 298 285 287 14 (parallel [
            (set (reg:DI 3 bx [orig:168 ivtmp.69 ] [168])
                (plus:DI (reg:DI 3 bx [orig:168 ivtmp.69 ] [168])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 287 298 290 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_FromLong") [flags 0x41]  <function_decl 0x2b9b89f4cc00 PyInt_FromLong>) [0 PyInt_FromLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:302 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 290 287 294 14 (set (reg:DI 4 si [orig:223 D.11815 ] [223])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 80 [0x50])) [0 start_element+0 S4 A128]))) tilesInt.C:302 149 {*extendsidi2_rex64}
     (nil))
(insn 294 290 292 14 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 tiles_list+0 S8 A128])) tilesInt.C:302 87 {*movdi_internal_rex64}
     (nil))
(insn 292 294 295 14 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:163 D.11813 ] [163])) tilesInt.C:302 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:163 D.11813 ] [163])
        (nil)))
(call_insn:TI 295 292 297 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Insert") [flags 0x41]  <function_decl 0x2b9b89f7bf00 PyList_Insert>) [0 PyList_Insert S1 A8])
            (const_int 0 [0]))) tilesInt.C:302 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 297 295 300 14 (var_location:SI i (debug_expr:SI D#1)) -1
     (nil))
(insn:TI 300 297 301 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 3 bx [orig:168 ivtmp.69 ] [168])
            (reg:DI 6 bp [218]))) tilesInt.C:301 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 301 300 299 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 303)
            (pc))) tilesInt.C:301 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 303)
;;  succ:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              15 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [9.0%]  (CAN_FALLTHRU)
;;              14 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	 17 [flags]
(code_label 299 301 262 15 20 "" [1 uses])
(note 262 299 263 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn:TI 263 262 420 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b9b8a16a7b8 *.LC1>)) tilesInt.C:303 87 {*movdi_internal_rex64}
     (nil))
(insn 420 263 265 15 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:303 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 265 420 353 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_BuildValue") [flags 0x41]  <function_decl 0x2b9b8a018600 Py_BuildValue>) [0 Py_BuildValue S1 A8])
            (const_int 0 [0]))) tilesInt.C:303 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
;;  succ:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 2290, maybe hot
;; Invalid sum of incoming frequencies 1145, should be 2290
;;  prev block 15, next block 17, flags: (REACHABLE, RTL)
;;  pred:       2 [21.4%]  (CAN_FALLTHRU)
;;              15 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 353 265 347 16 27 "" [1 uses])
(note 347 353 429 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 429 347 407 16 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 407 429 343 16 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 200 [0xc8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:304 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 200 [0xc8])))
            (nil))))
(insn 343 407 408 16 (use (reg/i:DI 0 ax)) tilesInt.C:304 -1
     (nil))
(insn/f:TI 408 343 409 16 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:304 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 409 408 410 16 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:304 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 410 409 411 16 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:304 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 411 410 412 16 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:304 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 412 411 413 16 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:304 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 413 412 414 16 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:304 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 414 413 415 16 (simple_return) tilesInt.C:304 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 415 414 335)
;; basic block 17, loop depth 0, count 0, freq 442, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [30.2%]  (CAN_FALLTHRU)
;;              4 [27.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(code_label 335 415 336 17 10 "" [2 uses])
(note 336 335 416 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 416 336 417 17 (parallel [
            (set (reg:DI 43 r14 [orig:106 num_ints ] [106])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:259 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 417 416 425 17 (parallel [
            (set (reg/v/f:DI 42 r13 [orig:105 ints ] [105])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:258 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 425 417 426 17 (set (pc)
        (label_ref 328)) 650 {jump}
     (nil)
 -> 328)
;;  succ:       8 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

(barrier 426 425 424)
;; basic block 18, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 17, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(code_label 424 426 238 18 33 "" [1 uses])
(note 238 424 240 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn:TI 240 238 241 18 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 memorctable+0 S8 A128])) tilesInt.C:297 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 241 240 243 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:297 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(debug_insn 243 241 248 18 (var_location:SI memory_size (reg:SI 0 ax [orig:154 D.11815 ] [154])) tilesInt.C:297 -1
     (nil))
(insn:TI 248 243 251 18 (set (reg:SI 37 r8)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [0 %sfp+56 S4 A64])) tilesInt.C:298 89 {*movsi_internal}
     (nil))
(insn 251 248 247 18 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 num_tilings+0 S4 A128])) tilesInt.C:298 89 {*movsi_internal}
     (nil))
(insn 247 251 252 18 (set (reg:DI 38 r9)
        (reg/v/f:DI 6 bp [orig:122 wrapwidths ] [122])) tilesInt.C:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 6 bp [orig:122 wrapwidths ] [122])
        (nil)))
(insn:TI 252 247 245 18 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 %sfp+48 S8 A64])) tilesInt.C:298 87 {*movdi_internal_rex64}
     (nil))
(insn 245 252 249 18 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (reg/v:SI 43 r14 [orig:106 num_ints ] [106])) tilesInt.C:298 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:106 num_ints ] [106])
        (nil)))
(insn 249 245 246 18 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:113 variables ] [113])) tilesInt.C:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:113 variables ] [113])
        (nil)))
(insn:TI 246 249 250 18 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg/v/f:DI 42 r13 [orig:105 ints ] [105])) tilesInt.C:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 42 r13 [orig:105 ints ] [105])
        (nil)))
(insn 250 246 253 18 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:154 D.11815 ] [154])) tilesInt.C:298 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:154 D.11815 ] [154])
        (nil)))
(call_insn:TI 253 250 427 18 (call (mem:QI (symbol_ref:DI ("_Z9tileswrapPiiiPfiS_S_i") [flags 0x41]  <function_decl 0x2b9b8a09df00 tileswrap>) [0 tileswrap S1 A8])
        (const_int 16 [0x10])) tilesInt.C:298 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                (expr_list:REG_BR_PRED (use (mem:SI (plus:DI (reg/f:DI 7 sp)
                                                (const_int 8 [0x8])) [0  S4 A64]))
                                    (nil))))))))))
(jump_insn:TI 427 253 428 18 (set (pc)
        (label_ref 254)) 650 {jump}
     (nil)
 -> 254)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 428 427 0)

;; Function PyObject* tiles_GetTilesWrap(PyObject*, PyObject*) (_ZL18tiles_GetTilesWrapP7_objectS0_, funcdef_no=155, decl_uid=11346, cgraph_uid=155)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 27 count 20 (  1.1)


PyObject* tiles_GetTilesWrap(PyObject*, PyObject*)

Dataflow summary:
def_info->table_size = 1114, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={31d,34u} r1={29d,6u} r2={28d,4u} r3={5d,11u} r4={32d,9u} r5={49d,26u} r6={3d,6u} r7={15d,108u} r8={23d} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r17={46d,10u} r18={23d} r19={23d} r20={3e} r21={25d,2u} r22={25d,1u} r23={24d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={27d,5u} r38={27d,3u} r39={23d} r40={23d} r41={5d,8u} r42={6d,10u} r43={4d,7u} r44={4d,10u} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} 
;;    total ref usage 1412{1149d,260u,3e} in 179{156 regular + 23 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 15 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp] 41 [r12]
;; live  out 	 7 [sp] 41 [r12]

( 2 )->[3]->( 4 16 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 3 )->[4]->( 5 16 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 42 [r13]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 7 6 )->[7]->( 7 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 5 7 16 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[9]->( 9 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[10]->( 11 17 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 11 17 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 14 13 )->[14]->( 14 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 14 2 12 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 3 4 )->[16]->( 8 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]

( 10 )->[17]->( 12 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 51 to worklist
  Adding insn 48 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 34 to worklist
  Adding insn 31 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 18 to worklist
  Adding insn 339 to worklist
  Adding insn 338 to worklist
  Adding insn 337 to worklist
  Adding insn 336 to worklist
  Adding insn 335 to worklist
  Adding insn 334 to worklist
  Adding insn 83 to worklist
  Adding insn 77 to worklist
  Adding insn 73 to worklist
  Adding insn 67 to worklist
  Adding insn 59 to worklist
  Adding insn 55 to worklist
  Adding insn 89 to worklist
  Adding insn 86 to worklist
  Adding insn 260 to worklist
  Adding insn 252 to worklist
  Adding insn 247 to worklist
  Adding insn 245 to worklist
  Adding insn 111 to worklist
  Adding insn 104 to worklist
  Adding insn 102 to worklist
  Adding insn 99 to worklist
  Adding insn 124 to worklist
  Adding insn 324 to worklist
  Adding insn 117 to worklist
  Adding insn 165 to worklist
  Adding insn 158 to worklist
  Adding insn 156 to worklist
  Adding insn 153 to worklist
  Adding insn 320 to worklist
  Adding insn 147 to worklist
  Adding insn 144 to worklist
  Adding insn 132 to worklist
  Adding insn 129 to worklist
  Adding insn 184 to worklist
  Adding insn 177 to worklist
  Adding insn 176 to worklist
  Adding insn 213 to worklist
  Adding insn 209 to worklist
  Adding insn 231 to worklist
  Adding insn 225 to worklist
  Adding insn 220 to worklist
  Adding insn 352 to worklist
  Adding insn 273 to worklist
  Adding insn 363 to worklist
  Adding insn 7 to worklist
  Adding insn 365 to worklist
  Adding insn 203 to worklist
  Adding insn 196 to worklist
  Adding insn 195 to worklist
  Adding insn 191 to worklist
Finished finding needed instructions:
processing block 15 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 351 to worklist
  Adding insn 350 to worklist
  Adding insn 349 to worklist
  Adding insn 348 to worklist
  Adding insn 347 to worklist
  Adding insn 346 to worklist
  Adding insn 345 to worklist
  Adding insn 270 to worklist
processing block 14 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 230 to worklist
  Adding insn 229 to worklist
  Adding insn 325 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 221 to worklist
  Adding insn 218 to worklist
processing block 13 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 356 to worklist
processing block 12 lr out =  6 [bp] 7 [sp] 41 [r12]
  Adding insn 358 to worklist
  Adding insn 357 to worklist
  Adding insn 210 to worklist
  Adding insn 207 to worklist
processing block 11 lr out =  6 [bp] 7 [sp]
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 180 to worklist
  Adding insn 179 to worklist
  Adding insn 178 to worklist
  Adding insn 321 to worklist
  Adding insn 174 to worklist
  Adding insn 173 to worklist
processing block 17 lr out =  6 [bp] 7 [sp]
  Adding insn 202 to worklist
  Adding insn 201 to worklist
  Adding insn 200 to worklist
  Adding insn 199 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 322 to worklist
  Adding insn 190 to worklist
processing block 10 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
  Adding insn 131 to worklist
  Adding insn 128 to worklist
  Adding insn 127 to worklist
processing block 9 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 164 to worklist
  Adding insn 162 to worklist
  Adding insn 155 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
  Adding insn 327 to worklist
  Adding insn 326 to worklist
  Adding insn 146 to worklist
  Adding insn 143 to worklist
  Adding insn 142 to worklist
processing block 8 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 123 to worklist
  Adding insn 359 to worklist
  Adding insn 119 to worklist
  Adding insn 116 to worklist
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 110 to worklist
  Adding insn 108 to worklist
  Adding insn 101 to worklist
  Adding insn 98 to worklist
  Adding insn 97 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 355 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
  Adding insn 259 to worklist
  Adding insn 253 to worklist
  Adding insn 250 to worklist
  Adding insn 249 to worklist
  Adding insn 246 to worklist
  Adding insn 244 to worklist
processing block 16 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
  Adding insn 354 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 88 to worklist
processing block 3 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 82 to worklist
  Adding insn 81 to worklist
  Adding insn 78 to worklist
  Adding insn 329 to worklist
  Adding insn 72 to worklist
  Adding insn 68 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
  Adding insn 60 to worklist
  Adding insn 328 to worklist
  Adding insn 54 to worklist
processing block 2 lr out =  7 [sp] 41 [r12]
  Adding insn 50 to worklist
  Adding insn 361 to worklist
  Adding insn 360 to worklist
  Adding insn 45 to worklist
  Adding insn 40 to worklist
  Adding insn 333 to worklist
  Adding insn 32 to worklist
  Adding insn 332 to worklist
  Adding insn 331 to worklist
  Adding insn 330 to worklist
  Adding insn 4 to worklist
  Adding insn 340 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 27 count 21 (  1.2)
deleting insn with uid = 341.
deleting insn with uid = 5.
deleting insn with uid = 27.
;;   ======================================================
;;   -- basic block 2 from 334 to 51 -- after reload
;;   ======================================================

;;	  0--> b  0: i  16loc 0                                   :nothing
;;	  0--> b  0: i  17loc 0                                   :nothing
;;	  0--> b  0: i 334[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   4di=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  45si=`*.LC2'                              :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 335[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 336[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 337[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 361{r12=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i 338[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 339[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 340{sp=sp-0x88;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 12--> b  0: i  32r8=[const(unspec[`PyList_Type'] 2)]     :athlon-direct,athlon-load
;;	 13--> b  0: i 332ax=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i 330cx=sp+0x40                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i 331dx=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  40r9=sp+0x50                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  18[sp+0x40]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  19loc 0                                   :nothing
;;	 14--> b  0: i  20[sp+0x50]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  21loc 0                                   :nothing
;;	 15--> b  0: i  31[sp+0x18]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 333ax=sp+0x60                              :athlon-direct,athlon-agu,nothing
;;	 15--> b  0: i  34[sp+0x10]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  39[sp]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  22[sp+0x60]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  23loc 0                                   :nothing
;;	 17--> b  0: i  36[sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i 360{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 17--> b  0: i  24[sp+0x70]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  25loc 0                                   :nothing
;;	 17--> b  0: i  26loc 0                                   :nothing
;;	 18--> b  0: i  48ax=call [`PyArg_ParseTuple']            :athlon-vector,athlon-ieu
;;	 19--> b  0: i  50flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 20--> b  0: i  51pc={(flags==0)?L290:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 20
;;   new head = 334
;;   new tail = 51

deleting insn with uid = 63.
;;   ======================================================
;;   -- basic block 3 from 54 to 83 -- after reload
;;   ======================================================

;;	  0--> b  0: i  54di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  55ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 328di=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i  59ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i  64di=sxn([sp+0x30])                       :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i  60bx=ax                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i  62loc bx                                  :nothing
;;	 11--> b  0: i  65{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	 12--> b  0: i  67ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	 13--> b  0: i  72di=[sp+0x50]                            :athlon-direct,athlon-load
;;	 13--> b  0: i  68bp=ax                                   :athlon-direct,athlon-ieu
;;	 13--> b  0: i  70loc bp                                  :nothing
;;	 16--> b  0: i  73ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	 17--> b  0: i 329di=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	 19--> b  0: i  77ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	 20--> b  0: i  81di=[sp+0x70]                            :athlon-direct,athlon-load
;;	 20--> b  0: i  78r12=ax                                  :athlon-direct,athlon-ieu
;;	 20--> b  0: i  80loc r12                                 :nothing
;;	 23--> b  0: i  82flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	 24--> b  0: i  83pc={(flags==0)?L265:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 24
;;   new head = 54
;;   new tail = 83

;;   ======================================================
;;   -- basic block 4 from 86 to 89 -- after reload
;;   ======================================================

;;	  0--> b  0: i  86ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  1--> b  0: i  88flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  2--> b  0: i  89pc={(flags<=0)?L265:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 86
;;   new tail = 89

;;   ======================================================
;;   -- basic block 5 from 244 to 260 -- after reload
;;   ======================================================

;;	  0--> b  0: i 244di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 245ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 249di=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 246r13=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 247[sp+0x24]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 248loc ax                                  :nothing
;;	  5--> b  0: i 250{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  6--> b  0: i 252ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i 259flags=cmp(r13,0)                        :athlon-direct,athlon-ieu
;;	  7--> b  0: i 253r14=ax                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 255loc r14                                 :nothing
;;	  7--> b  0: i 257loc 0                                   :nothing
;;	  8--> b  0: i 260pc={(flags<=0)?L258:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 244
;;   new tail = 260

;;   ======================================================
;;   -- basic block 6 from 355 to 355 -- after reload
;;   ======================================================

;;	  0--> b  0: i 355{r13=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 355
;;   new tail = 355

;;   ======================================================
;;   -- basic block 7 from 95 to 111 -- after reload
;;   ======================================================

;;	  0--> b  0: i  95loc r13                                 :nothing
;;	  0--> b  0: i  98di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  97si=r13                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  99ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i 101di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 102ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  6--> b  0: i 104[r13*0x4+r14]=ax                        :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 105loc r13+0x1                             :nothing
;;	  6--> b  0: i 107loc D#5                                 :nothing
;;	  6--> b  0: i 108{r13=r13+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  6--> b  0: i 110flags=cmp([sp+0x24],r13)                :athlon-direct,athlon-load,athlon-ieu
;;	 10--> b  0: i 111pc={(flags>0)?L262:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 95
;;   new tail = 111

;;   ======================================================
;;   -- basic block 8 from 113 to 124 -- after reload
;;   ======================================================

;;	  0--> b  0: i 113loc [sp+0x24]                           :nothing
;;	  0--> b  0: i 114loc r14                                 :nothing
;;	  0--> b  0: i 116di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 359{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 117ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 123flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 324[sp+0x28]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 119r13=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 120loc ax                                  :nothing
;;	  4--> b  0: i 122loc 0                                   :nothing
;;	  5--> b  0: i 124pc={(flags<=0)?L163:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 113
;;   new tail = 124

;;   ======================================================
;;   -- basic block 9 from 139 to 165 -- after reload
;;   ======================================================

;;	  0--> b  0: i 139loc r15                                 :nothing
;;	  0--> b  0: i 143di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 142si=r15                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 144ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i 146di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 147xmm0=call [`PyFloat_AsDouble']          :athlon-vector,athlon-ieu
;;	  6--> b  0: i 326xmm0=vec_duplicate(xmm0)                :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 152di=[sp+0x60]                            :athlon-direct,athlon-load
;;	  7--> b  0: i 151si=r15                                  :athlon-direct,athlon-ieu
;;	  9--> b  0: i 327xmm1=vec_concat(ftr(xmm0),const_vector) :athlon-vector,athlon-fpsched,athlon-fvector*2
;;	 17--> b  0: i 320[r15*0x4+bx]=xmm1                       :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	 19--> b  0: i 153ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	 20--> b  0: i 155di=ax                                   :athlon-direct,athlon-ieu
;;	 21--> b  0: i 156ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	 22--> b  0: i 158[r15*0x4+r12]=ax                        :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i 159loc r15+0x1                             :nothing
;;	 22--> b  0: i 161loc D#4                                 :nothing
;;	 22--> b  0: i 162{r15=r15+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	 23--> b  0: i 164flags=cmp(r13,r15)                      :athlon-direct,athlon-ieu
;;	 24--> b  0: i 165pc={(flags>0)?L292:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 24
;;   new head = 139
;;   new tail = 165

;;   ======================================================
;;   -- basic block 10 from 127 to 132 -- after reload
;;   ======================================================

;;	  0--> b  0: i 128di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 127si=`_ZL18CollisionTableType'            :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 129ax=call [`PyObject_IsInstance']         :athlon-vector,athlon-ieu
;;	  4--> b  0: i 131flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i 132pc={(flags==0)?L362:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 127
;;   new tail = 132

;;   ======================================================
;;   -- basic block 11 from 172 to 184 -- after reload
;;   ======================================================

;;	  0--> b  0: i 172loc [[sp+0x40]+0x10]                    :nothing
;;	  0--> b  0: i 173ax=[sp+0x40]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 179r8=[sp+0x28]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 178r9=r12                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 182si=[sp+0x30]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 180cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 183di=bp                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 174dx=[ax+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 321ax=[sp+0x24]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 177[sp]=r14                                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 176[sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 184call [`_Z9tileswrapPiiP15collision_tablePfiS_S_i']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 172
;;   new tail = 184

;;   ======================================================
;;   -- basic block 12 from 207 to 213 -- after reload
;;   ======================================================

;;	  0--> b  0: i 207di=sxn([sp+0x30])                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 209ax=call [`PyList_New']                  :athlon-vector,athlon-ieu
;;	  5--> b  0: i 210r12=ax                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 211loc 0                                   :nothing
;;	  5--> b  0: i 357ax=[sp+0x30]                            :athlon-direct,athlon-load
;;	  8--> b  0: i 358flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  9--> b  0: i 213pc={(flags<=0)?L290:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 207
;;   new tail = 213

;;   ======================================================
;;   -- basic block 13 from 356 to 356 -- after reload
;;   ======================================================

;;	  0--> b  0: i 356{bx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 356
;;   new tail = 356

;;   ======================================================
;;   -- basic block 14 from 216 to 231 -- after reload
;;   ======================================================

;;	  0--> b  0: i 216loc bx                                  :nothing
;;	  0--> b  0: i 218di=sxn([bx*0x4+bp])                     :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 220ax=call [`PyInt_FromLong']              :athlon-vector,athlon-ieu
;;	  5--> b  0: i 223si=bx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 221dx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 224di=r12                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i 225ax=call [`PyList_SetItem']              :athlon-vector,athlon-ieu
;;	  7--> b  0: i 325dx=bx+0x1                               :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i 228loc dx                                  :nothing
;;	  7--> b  0: i 229{bx=bx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  7--> b  0: i 230flags=cmp([sp+0x30],dx)                 :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i 231pc={(flags>0)?L233:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 216
;;   new tail = 231

deleting insn with uid = 344.
;;   ======================================================
;;   -- basic block 15 from 270 to 352 -- after reload
;;   ======================================================

;;	  0--> b  0: i 345{sp=sp+0x88;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 270ax=r12                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 273use ax                                  :nothing
;;	  1--> b  0: i 346bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 347bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 348r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 349r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 350r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 351r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 352simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 270
;;   new tail = 352

;;   ======================================================
;;   -- basic block 16 from 7 to 363 -- after reload
;;   ======================================================

;;	  0--> b  0: i   7[sp+0x24]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 354{r14=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 363pc=L258                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 7
;;   new tail = 363

;;   ======================================================
;;   -- basic block 17 from 190 to 365 -- after reload
;;   ======================================================

;;	  0--> b  0: i 190di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 191ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  3--> b  0: i 193loc ax                                  :nothing
;;	  4--> b  0: i 322cx=[sp+0x24]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 198r8=[sp+0x28]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 197r9=r12                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 201si=[sp+0x30]                            :athlon-direct,athlon-load
;;	  5--> b  0: i 196[sp]=r14                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 200dx=ax                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 202di=bp                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i 195[sp+0x8]=cx                             :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 199cx=bx                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i 203call [`_Z9tileswrapPiiiPfiS_S_i']       :athlon-vector,athlon-ieu
;;	  9--> b  0: i 365pc=L204                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 190
;;   new tail = 365



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* tiles_GetTilesWrap(PyObject*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={31d,34u} r1={29d,6u} r2={28d,4u} r3={5d,11u} r4={32d,9u} r5={49d,26u} r6={3d,6u} r7={15d,108u} r8={23d} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r17={46d,10u} r18={23d} r19={23d} r20={3e} r21={25d,2u} r22={25d,1u} r23={24d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={27d,5u} r38={27d,3u} r39={23d} r40={23d} r41={5d,8u} r42={6d,10u} r43={4d,7u} r44={4d,10u} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} 
;;    total ref usage 1412{1149d,260u,3e} in 179{156 regular + 23 call} insns.
(note 2 0 14 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 1145, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	 17 [flags]
(note 14 2 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 14 27 2 NOTE_INSN_FUNCTION_BEG)
(note 27 5 16 2 NOTE_INSN_DELETED)
(debug_insn 16 27 17 2 (var_location:DI tiles_list (const_int 0 [0])) tilesInt.C:309 -1
     (nil))
(debug_insn 17 16 334 2 (var_location:DI the_tiles (const_int 0 [0])) tilesInt.C:310 -1
     (nil))
(insn/f:TI 334 17 4 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tilesInt.C:308 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 4 334 45 2 (set (reg/v/f:DI 5 di [orig:129 args ] [129])
        (reg:DI 4 si [ args ])) tilesInt.C:308 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ args ])
        (nil)))
(insn 45 4 335 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b9b8a1b77b8 *.LC2>)) tilesInt.C:328 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 335 45 336 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tilesInt.C:308 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 336 335 337 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tilesInt.C:308 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 337 336 361 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tilesInt.C:308 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 361 337 338 2 (parallel [
            (set (reg/f:DI 41 r12 [orig:62 D.11851 ] [62])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:329 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f:TI 338 361 339 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tilesInt.C:308 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 339 338 340 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tilesInt.C:308 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 340 339 341 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -136 [0xffffffffffffff78])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:308 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -136 [0xffffffffffffff78])))
            (nil))))
(note 341 340 32 2 NOTE_INSN_PROLOGUE_END)
(insn 32 341 332 2 (set (reg:DI 37 r8 [135])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tilesInt.C:328 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 332 32 330 2 (set (reg/f:DI 0 ax [133])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) tilesInt.C:328 267 {*leadi}
     (nil))
(insn 330 332 331 2 (set (reg/f:DI 2 cx [131])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 64 [0x40]))) tilesInt.C:328 267 {*leadi}
     (nil))
(insn 331 330 40 2 (set (reg/f:DI 1 dx [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) tilesInt.C:328 267 {*leadi}
     (nil))
(insn:TI 40 331 18 2 (set (reg:DI 38 r9)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 80 [0x50]))) tilesInt.C:328 267 {*leadi}
     (nil))
(insn 18 40 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 memorctable+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:312 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 19 18 20 2 (var_location:DI ct (const_int 0 [0])) tilesInt.C:313 -1
     (nil))
(insn 20 19 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 variables_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:315 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 21 20 31 2 (var_location:DI variables (const_int 0 [0])) tilesInt.C:316 -1
     (nil))
(insn:TI 31 21 333 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg/f:DI 0 ax [133])) tilesInt.C:328 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [133])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 333 31 34 2 (set (reg/f:DI 0 ax [136])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 96 [0x60]))) tilesInt.C:328 267 {*leadi}
     (nil))
(insn 34 333 39 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg:DI 37 r8 [135])) tilesInt.C:328 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 39 34 22 2 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 37 r8 [135])) tilesInt.C:328 87 {*movdi_internal_rex64}
     (nil))
(insn 22 39 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 wrapwidths_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:318 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 23 22 36 2 (var_location:DI wrapwidths (const_int 0 [0])) tilesInt.C:319 -1
     (nil))
(insn:TI 36 23 360 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg/f:DI 0 ax [136])) tilesInt.C:328 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [136])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))
(insn 360 36 24 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:328 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 24 360 25 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 ints_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:320 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 25 24 26 2 (var_location:DI ints (const_int 0 [0])) tilesInt.C:321 -1
     (nil))
(debug_insn 26 25 48 2 (var_location:SI num_ints (const_int 0 [0])) tilesInt.C:322 -1
     (nil))
(call_insn:TI 48 26 50 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyArg_ParseTuple") [flags 0x41]  <function_decl 0x2b9b8a018300 PyArg_ParseTuple>) [0 PyArg_ParseTuple S1 A8])
            (const_int 32 [0x20]))) tilesInt.C:328 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 8 [0x8])) [0  S8 A64]))
                                        (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                        (const_int 16 [0x10])) [0  S8 A64]))
                                            (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                            (const_int 24 [0x18])) [0  S8 A64]))
                                                (nil)))))))))))))
(insn:TI 50 48 51 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:63 D.11852 ] [63])
            (const_int 0 [0]))) tilesInt.C:325 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.11852 ] [63])
        (nil)))
(jump_insn:TI 51 50 52 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 290)
            (pc))) tilesInt.C:325 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2139 [0x85b])
            (nil)))
 -> 290)
;;  succ:       15 [21.4%]  (CAN_FALLTHRU)
;;              3 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp] 41 [r12]
;; live  out 	 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 52 51 63 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 63 52 54 3 NOTE_INSN_DELETED)
(insn:TI 54 63 55 3 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 variables_list+0 S8 A128])) tilesInt.C:331 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 55 54 328 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:331 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 328 55 59 3 (set (reg:DI 5 di [orig:141 D.11854 ] [141])
        (mult:DI (reg:DI 0 ax [orig:65 D.11853 ] [65])
            (const_int 4 [0x4]))) tilesInt.C:331 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.11853 ] [65])
        (nil)))
(call_insn:TI 59 328 64 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:331 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 64 59 60 3 (set (reg:DI 5 di [orig:143 D.11854 ] [143])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])) [0 num_tilings+0 S4 A128]))) tilesInt.C:332 149 {*extendsidi2_rex64}
     (nil))
(insn 60 64 62 3 (set (reg/v/f:DI 3 bx [orig:68 variables ] [68])
        (reg:DI 0 ax)) tilesInt.C:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 142)
            (nil))))
(debug_insn 62 60 65 3 (var_location:DI variables (reg/v/f:DI 3 bx [orig:68 variables ] [68])) tilesInt.C:331 -1
     (nil))
(insn:TI 65 62 67 3 (parallel [
            (set (reg:DI 5 di [orig:145 D.11854 ] [145])
                (ashift:DI (reg:DI 5 di [orig:143 D.11854 ] [143])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:332 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 67 65 72 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:332 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 72 67 68 3 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 variables_list+0 S8 A128])) tilesInt.C:333 87 {*movdi_internal_rex64}
     (nil))
(insn 68 72 70 3 (set (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])
        (reg:DI 0 ax)) tilesInt.C:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 146)
            (nil))))
(debug_insn 70 68 73 3 (var_location:DI the_tiles (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) tilesInt.C:332 -1
     (nil))
(call_insn:TI 73 70 329 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:333 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 329 73 77 3 (set (reg:DI 5 di [orig:148 D.11854 ] [148])
        (mult:DI (reg:DI 0 ax [orig:74 D.11853 ] [74])
            (const_int 4 [0x4]))) tilesInt.C:333 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:74 D.11853 ] [74])
        (nil)))
(call_insn:TI 77 329 81 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:333 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 81 77 78 3 (set (reg/f:DI 5 di [orig:78 ints_list.18 ] [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 ints_list+0 S8 A128])) tilesInt.C:334 87 {*movdi_internal_rex64}
     (nil))
(insn 78 81 80 3 (set (reg/v/f:DI 41 r12 [orig:77 wrapwidths ] [77])
        (reg:DI 0 ax)) tilesInt.C:333 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 149)
            (nil))))
(debug_insn 80 78 82 3 (var_location:DI wrapwidths (reg/v/f:DI 41 r12 [orig:77 wrapwidths ] [77])) tilesInt.C:333 -1
     (nil))
(insn:TI 82 80 83 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:78 ints_list.18 ] [78])
            (const_int 0 [0]))) tilesInt.C:334 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 83 82 84 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 265)
            (pc))) tilesInt.C:334 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil)))
 -> 265)
;;  succ:       4 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 628, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 84 83 86 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 86 84 88 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:334 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 88 86 89 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:DI 0 ax [orig:79 D.11853 ] [79])
            (const_int 0 [0]))) tilesInt.C:334 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.11853 ] [79])
        (nil)))
(jump_insn:TI 89 88 242 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 265)
            (pc))) tilesInt.C:334 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil)))
 -> 265)
;;  succ:       5 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [27.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 5, loop depth 0, count 0, freq 458, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 242 89 244 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 244 242 245 5 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 ints_list+0 S8 A128])) tilesInt.C:336 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 245 244 249 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:336 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 249 245 246 5 (set (reg:DI 5 di [orig:166 D.11854 ] [166])
        (sign_extend:DI (reg:SI 0 ax [orig:81 D.11853 ] [81]))) tilesInt.C:337 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:81 D.11853 ] [81])
        (nil)))
(insn 246 249 247 5 (set (reg:DI 42 r13 [orig:81 D.11853 ] [81])
        (reg:DI 0 ax)) tilesInt.C:336 87 {*movdi_internal_rex64}
     (nil))
(insn 247 246 248 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [0 %sfp+20 S4 A32])
        (reg:SI 0 ax [orig:81 D.11853 ] [81])) tilesInt.C:336 89 {*movsi_internal}
     (nil))
(debug_insn 248 247 250 5 (var_location:SI num_ints (reg:SI 0 ax [orig:81 D.11853 ] [81])) tilesInt.C:336 -1
     (nil))
(insn:TI 250 248 252 5 (parallel [
            (set (reg:DI 5 di [orig:167 D.11854 ] [167])
                (ashift:DI (reg:DI 5 di [orig:166 D.11854 ] [166])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:337 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 252 250 259 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:337 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 259 252 253 5 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 42 r13 [orig:81 D.11853 ] [81])
            (const_int 0 [0]))) tilesInt.C:338 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 42 r13 [orig:81 D.11853 ] [81])
        (nil)))
(insn 253 259 255 5 (set (reg/v/f:DI 43 r14 [orig:60 ints ] [60])
        (reg:DI 0 ax)) tilesInt.C:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 168)
            (nil))))
(debug_insn 255 253 257 5 (var_location:DI ints (reg/v/f:DI 43 r14 [orig:60 ints ] [60])) tilesInt.C:337 -1
     (nil))
(debug_insn 257 255 260 5 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 260 257 261 5 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) tilesInt.C:338 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 258)
;;  succ:       6 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 417, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 42 [r13]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 42 [r13]
;; live  kill	 17 [flags]
(note 261 260 355 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 355 261 262 6 (parallel [
            (set (reg:DI 42 r13 [orig:92 ivtmp.97 ] [92])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:338 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 7, loop depth 0, count 0, freq 2639, maybe hot
;; Invalid sum of incoming frequencies 2818, should be 2639
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 42 [r13]
;; live  kill	 17 [flags]
(code_label 262 355 94 7 47 "" [1 uses])
(note 94 262 95 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 95 94 98 7 (var_location:SI i (reg:SI 42 r13 [orig:92 ivtmp.97 ] [92])) -1
     (nil))
(insn:TI 98 95 97 7 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 ints_list+0 S8 A128])) tilesInt.C:339 87 {*movdi_internal_rex64}
     (nil))
(insn 97 98 99 7 (set (reg:DI 4 si)
        (reg:DI 42 r13 [orig:92 ivtmp.97 ] [92])) tilesInt.C:339 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 99 97 101 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:339 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 101 99 102 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 D.11851 ] [86])) tilesInt.C:339 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.11851 ] [86])
        (nil)))
(call_insn:TI 102 101 104 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:339 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 104 102 105 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:92 ivtmp.97 ] [92])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 43 r14 [orig:60 ints ] [60])) [0 MEM[base: ints_52, index: ivtmp.97_129, step: 4, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:87 D.11853 ] [87])) tilesInt.C:339 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:87 D.11853 ] [87])
        (nil)))
(debug_insn 105 104 107 7 (var_location:SI D#5 (plus:SI (reg:SI 42 r13 [orig:92 ivtmp.97 ] [92])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 107 105 108 7 (var_location:SI i (debug_expr:SI D#5)) -1
     (nil))
(insn 108 107 110 7 (parallel [
            (set (reg:DI 42 r13 [orig:92 ivtmp.97 ] [92])
                (plus:DI (reg:DI 42 r13 [orig:92 ivtmp.97 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 110 108 111 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 36 [0x24])) [0 %sfp+20 S4 A32])
            (reg:SI 42 r13 [orig:92 ivtmp.97 ] [92]))) tilesInt.C:338 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 111 110 258 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 262)
            (pc))) tilesInt.C:338 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 262)
;;  succ:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              8 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 8, loop depth 0, count 0, freq 900, maybe hot
;; Invalid sum of incoming frequencies 721, should be 900
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [9.0%]  (CAN_FALLTHRU)
;;              7 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              16 [100.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(code_label 258 111 112 8 46 "" [2 uses])
(note 112 258 113 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 113 112 114 8 (var_location:SI num_ints (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 36 [0x24])) [0 %sfp+20 S4 A32])) -1
     (nil))
(debug_insn 114 113 116 8 (var_location:DI ints (reg/v/f:DI 43 r14 [orig:60 ints ] [60])) -1
     (nil))
(insn:TI 116 114 359 8 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 variables_list+0 S8 A128])) tilesInt.C:342 87 {*movdi_internal_rex64}
     (nil))
(insn 359 116 117 8 (parallel [
            (set (reg:DI 44 r15 [orig:116 ivtmp.91 ] [116])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:344 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 117 359 123 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:342 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 123 117 324 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:90 D.11853 ] [90])
            (const_int 0 [0]))) tilesInt.C:344 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:90 D.11853 ] [90])
        (nil)))
(insn 324 123 119 8 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0 %sfp+24 S8 A64])
        (reg:DI 0 ax [orig:90 D.11853 ] [90])) tilesInt.C:342 87 {*movdi_internal_rex64}
     (nil))
(insn 119 324 120 8 (set (reg/v:SI 42 r13 [orig:91 num_variables ] [91])
        (reg:SI 0 ax [orig:90 D.11853 ] [90])) tilesInt.C:342 89 {*movsi_internal}
     (nil))
(debug_insn 120 119 122 8 (var_location:SI num_variables (reg:SI 0 ax [orig:90 D.11853 ] [90])) tilesInt.C:342 -1
     (nil))
(debug_insn 122 120 124 8 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 124 122 292 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 163)
            (pc))) tilesInt.C:344 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 163)
;;  succ:       9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              10 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 9, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
(code_label 292 124 291 9 54 "" [1 uses])
(note 291 292 139 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 139 291 143 9 (var_location:SI i (reg:SI 44 r15 [orig:116 ivtmp.91 ] [116])) -1
     (nil))
(insn:TI 143 139 142 9 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 variables_list+0 S8 A128])) tilesInt.C:346 87 {*movdi_internal_rex64}
     (nil))
(insn 142 143 144 9 (set (reg:DI 4 si)
        (reg:DI 44 r15 [orig:116 ivtmp.91 ] [116])) tilesInt.C:346 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 144 142 146 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:346 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 146 144 147 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 D.11851 ] [96])) tilesInt.C:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.11851 ] [96])
        (nil)))
(call_insn:TI 147 146 326 9 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("PyFloat_AsDouble") [flags 0x41]  <function_decl 0x2b9b89f5be00 PyFloat_AsDouble>) [0 PyFloat_AsDouble S1 A8])
            (const_int 0 [0]))) tilesInt.C:346 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 326 147 152 9 (set (reg:V2DF 21 xmm0 [orig:97 D.11855 ] [97])
        (vec_duplicate:V2DF (reg:DF 21 xmm0 [orig:97 D.11855 ] [97]))) tilesInt.C:346 1459 {vec_dupv2df}
     (nil))
(insn 152 326 151 9 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 wrapwidths_list+0 S8 A128])) tilesInt.C:347 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 151 152 327 9 (set (reg:DI 4 si)
        (reg:DI 44 r15 [orig:116 ivtmp.91 ] [116])) tilesInt.C:347 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 327 151 320 9 (set (reg:V4SF 22 xmm1 [169])
        (vec_concat:V4SF (float_truncate:V2SF (reg:V2DF 21 xmm0 [orig:97 D.11855 ] [97]))
            (const_vector:V2SF [
                    (const_double:SF 0.0 [0x0.0p+0])
                    (const_double:SF 0.0 [0x0.0p+0])
                ]))) tilesInt.C:346 1393 {*sse2_cvtpd2ps}
     (expr_list:REG_DEAD (reg:V2DF 21 xmm0 [orig:97 D.11855 ] [97])
        (nil)))
(insn:TI 320 327 153 9 (set (mem:SF (plus:DI (mult:DI (reg:DI 44 r15 [orig:116 ivtmp.91 ] [116])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 3 bx [orig:68 variables ] [68])) [0 MEM[base: variables_29, index: ivtmp.91_130, step: 4, offset: 0B]+0 S4 A32])
        (reg:SF 22 xmm1 [169])) tilesInt.C:346 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [169])
        (nil)))
(call_insn:TI 153 320 155 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:347 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 155 153 156 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:100 D.11851 ] [100])) tilesInt.C:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.11851 ] [100])
        (nil)))
(call_insn:TI 156 155 158 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:347 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 158 156 159 9 (set (mem:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:116 ivtmp.91 ] [116])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 41 r12 [orig:77 wrapwidths ] [77])) [0 MEM[base: wrapwidths_41, index: ivtmp.91_130, step: 4, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:101 D.11853 ] [101])) tilesInt.C:347 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:101 D.11853 ] [101])
        (nil)))
(debug_insn 159 158 161 9 (var_location:SI D#4 (plus:SI (reg:SI 44 r15 [orig:116 ivtmp.91 ] [116])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 161 159 162 9 (var_location:SI i (debug_expr:SI D#4)) -1
     (nil))
(insn 162 161 164 9 (parallel [
            (set (reg:DI 44 r15 [orig:116 ivtmp.91 ] [116])
                (plus:DI (reg:DI 44 r15 [orig:116 ivtmp.91 ] [116])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 164 162 165 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 42 r13 [orig:91 num_variables ] [91])
            (reg:SI 44 r15 [orig:116 ivtmp.91 ] [116]))) tilesInt.C:344 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 165 164 163 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 292)
            (pc))) tilesInt.C:344 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 292)
;;  succ:       9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              10 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (CAN_FALLTHRU)
;;              9 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 163 165 125 10 42 "" [1 uses])
(note 125 163 128 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 128 125 127 10 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 memorctable+0 S8 A128])) tilesInt.C:350 87 {*movdi_internal_rex64}
     (nil))
(insn 127 128 129 10 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>)) tilesInt.C:350 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 129 127 131 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyObject_IsInstance") [flags 0x41]  <function_decl 0x2b9b8a05e600 PyObject_IsInstance>) [0 PyObject_IsInstance S1 A8])
            (const_int 0 [0]))) tilesInt.C:350 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 131 129 132 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:104 D.11852 ] [104])
            (const_int 0 [0]))) tilesInt.C:350 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:104 D.11852 ] [104])
        (nil)))
(jump_insn:TI 132 131 171 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 362)
            (pc))) tilesInt.C:350 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 362)
;;  succ:       11 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(note 171 132 172 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 172 171 173 11 (var_location:DI ct (mem/f/j:DI (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 64 [0x40])) [0 memorctable+0 S8 A128])
            (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.21_92].ct+0 S8 A64])) tilesInt.C:352 -1
     (nil))
(insn:TI 173 172 179 11 (set (reg/f:DI 0 ax [orig:155 memorctable ] [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 memorctable+0 S8 A128])) tilesInt.C:352 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 memorctable+0 S8 A128])
        (nil)))
(insn 179 173 178 11 (set (reg:SI 37 r8)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0 %sfp+24 S4 A64])) tilesInt.C:353 89 {*movsi_internal}
     (nil))
(insn 178 179 182 11 (set (reg:DI 38 r9)
        (reg/v/f:DI 41 r12 [orig:77 wrapwidths ] [77])) tilesInt.C:353 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:77 wrapwidths ] [77])
        (nil)))
(insn:TI 182 178 180 11 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 num_tilings+0 S4 A128])) tilesInt.C:353 89 {*movsi_internal}
     (nil))
(insn 180 182 183 11 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:68 variables ] [68])) tilesInt.C:353 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:68 variables ] [68])
        (nil)))
(insn 183 180 174 11 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) tilesInt.C:353 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 174 183 321 11 (set (reg/f:DI 1 dx [orig:156 MEM[(struct CollisionTable *)memorctable.21_92].ct ] [156])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:155 memorctable ] [155])
                (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.21_92].ct+0 S8 A64])) tilesInt.C:353 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:155 memorctable ] [155])
        (nil)))
(insn 321 174 177 11 (set (reg/v:SI 0 ax [orig:61 num_ints ] [61])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [0 %sfp+20 S4 A32])) tilesInt.C:353 89 {*movsi_internal}
     (nil))
(insn:TI 177 321 176 11 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg/v/f:DI 43 r14 [orig:60 ints ] [60])) tilesInt.C:353 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 43 r14 [orig:60 ints ] [60])
        (nil)))
(insn:TI 176 177 184 11 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (reg/v:SI 0 ax [orig:61 num_ints ] [61])) tilesInt.C:353 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 0 ax [orig:61 num_ints ] [61])
        (nil)))
(call_insn:TI 184 176 204 11 (call (mem:QI (symbol_ref:DI ("_Z9tileswrapPiiP15collision_tablePfiS_S_i") [flags 0x41]  <function_decl 0x2b9b8a0a6000 tileswrap>) [0 tileswrap S1 A8])
        (const_int 16 [0x10])) tilesInt.C:353 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                (expr_list:REG_BR_PRED (use (mem:SI (plus:DI (reg/f:DI 7 sp)
                                                (const_int 8 [0x8])) [0  S4 A64]))
                                    (nil))))))))))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [100.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12]
;; live  kill	
(code_label 204 184 205 12 44 "" [1 uses])
(note 205 204 206 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 206 205 207 12 NOTE_INSN_DELETED)
(insn:TI 207 206 209 12 (set (reg:DI 5 di [orig:160 D.11853 ] [160])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])) [0 num_tilings+0 S4 A128]))) tilesInt.C:361 149 {*extendsidi2_rex64}
     (nil))
(call_insn:TI 209 207 210 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_New") [flags 0x41]  <function_decl 0x2b9b89f7bb00 PyList_New>) [0 PyList_New S1 A8])
            (const_int 0 [0]))) tilesInt.C:361 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 210 209 211 12 (set (reg/v/f:DI 41 r12 [orig:114 tiles_list ] [114])
        (reg:DI 0 ax)) tilesInt.C:361 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(debug_insn 211 210 357 12 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 357 211 358 12 (set (reg:SI 0 ax)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 num_tilings+0 S4 A128])) tilesInt.C:362 89 {*movsi_internal}
     (nil))
(insn:TI 358 357 213 12 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax)
            (const_int 0 [0]))) tilesInt.C:362 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 213 358 214 12 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 290)
            (pc))) tilesInt.C:362 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 290)
;;  succ:       13 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

;; basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
(note 214 213 356 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 356 214 233 13 (parallel [
            (set (reg:DI 3 bx [orig:124 ivtmp.86 ] [124])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:362 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 14, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 233 356 215 14 45 "" [1 uses])
(note 215 233 217 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 217 215 216 14 NOTE_INSN_DELETED)
(debug_insn 216 217 218 14 (var_location:SI i (reg:SI 3 bx [orig:124 ivtmp.86 ] [124])) -1
     (nil))
(insn:TI 218 216 220 14 (set (reg:DI 5 di [orig:162 D.11853 ] [162])
        (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI 3 bx [orig:124 ivtmp.86 ] [124])
                        (const_int 4 [0x4]))
                    (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) [0 MEM[base: the_tiles_34, index: ivtmp.86_139, step: 4, offset: 0B]+0 S4 A32]))) tilesInt.C:363 149 {*extendsidi2_rex64}
     (nil))
(call_insn:TI 220 218 223 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_FromLong") [flags 0x41]  <function_decl 0x2b9b89f4cc00 PyInt_FromLong>) [0 PyInt_FromLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:363 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 223 220 221 14 (set (reg:DI 4 si)
        (reg:DI 3 bx [orig:124 ivtmp.86 ] [124])) tilesInt.C:363 87 {*movdi_internal_rex64}
     (nil))
(insn 221 223 224 14 (set (reg/f:DI 1 dx [orig:120 D.11851 ] [120])
        (reg:DI 0 ax)) tilesInt.C:363 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 224 221 225 14 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:114 tiles_list ] [114])) tilesInt.C:363 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 225 224 325 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_SetItem") [flags 0x41]  <function_decl 0x2b9b89f7be00 PyList_SetItem>) [0 PyList_SetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:363 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 325 225 228 14 (set (reg:SI 1 dx [orig:126 D.11852 ] [126])
        (plus:SI (reg:SI 3 bx [orig:124 ivtmp.86 ] [124])
            (const_int 1 [0x1]))) 266 {*leasi}
     (nil))
(debug_insn 228 325 229 14 (var_location:SI i (reg:SI 1 dx [orig:126 D.11852 ] [126])) -1
     (nil))
(insn 229 228 230 14 (parallel [
            (set (reg:DI 3 bx [orig:124 ivtmp.86 ] [124])
                (plus:DI (reg:DI 3 bx [orig:124 ivtmp.86 ] [124])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 230 229 231 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])) [0 num_tilings+0 S4 A128])
            (reg:SI 1 dx [orig:126 D.11852 ] [126]))) tilesInt.C:362 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:126 D.11852 ] [126])
        (nil)))
(jump_insn:TI 231 230 290 14 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 233)
            (pc))) tilesInt.C:362 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 233)
;;  succ:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              15 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 15, loop depth 0, count 0, freq 2290, maybe hot
;; Invalid sum of incoming frequencies 1145, should be 2290
;;  prev block 14, next block 16, flags: (REACHABLE, RTL)
;;  pred:       14 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              2 [21.4%]  (CAN_FALLTHRU)
;;              12 [9.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 290 231 285 15 53 "" [2 uses])
(note 285 290 367 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 367 285 345 15 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 345 367 270 15 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:365 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 136 [0x88])))
            (nil))))
(insn 270 345 273 15 (set (reg/i:DI 0 ax)
        (reg/f:DI 41 r12 [orig:62 D.11851 ] [62])) tilesInt.C:365 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 41 r12 [orig:62 D.11851 ] [62])
        (nil)))
(insn 273 270 346 15 (use (reg/i:DI 0 ax)) tilesInt.C:365 -1
     (nil))
(insn/f:TI 346 273 347 15 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:365 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 347 346 348 15 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:365 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 348 347 349 15 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:365 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 349 348 350 15 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:365 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 350 349 351 15 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:365 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 351 350 352 15 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:365 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 352 351 353 15 (simple_return) tilesInt.C:365 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 353 352 265)
;; basic block 16, loop depth 0, count 0, freq 442, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [30.2%]  (CAN_FALLTHRU)
;;              4 [27.0%]  (CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 43 [r14]
;; live  kill	 17 [flags]
(code_label 265 353 266 16 36 "" [2 uses])
(note 266 265 7 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 7 266 354 16 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [0 %sfp+20 S4 A32])
        (const_int 0 [0])) tilesInt.C:322 89 {*movsi_internal}
     (nil))
(insn 354 7 363 16 (parallel [
            (set (reg/v/f:DI 43 r14 [orig:60 ints ] [60])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:321 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 363 354 364 16 (set (pc)
        (label_ref 258)) 650 {jump}
     (nil)
 -> 258)
;;  succ:       8 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]

(barrier 364 363 362)
;; basic block 17, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 16, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(code_label 362 364 188 17 59 "" [1 uses])
(note 188 362 190 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 190 188 191 17 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 memorctable+0 S8 A128])) tilesInt.C:357 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 191 190 193 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:357 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(debug_insn 193 191 322 17 (var_location:SI memory_size (reg:SI 0 ax [orig:109 D.11853 ] [109])) tilesInt.C:357 -1
     (nil))
(insn:TI 322 193 198 17 (set (reg/v:SI 2 cx [orig:61 num_ints ] [61])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [0 %sfp+20 S4 A32])) tilesInt.C:358 89 {*movsi_internal}
     (nil))
(insn 198 322 197 17 (set (reg:SI 37 r8)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0 %sfp+24 S4 A64])) tilesInt.C:358 89 {*movsi_internal}
     (nil))
(insn 197 198 201 17 (set (reg:DI 38 r9)
        (reg/v/f:DI 41 r12 [orig:77 wrapwidths ] [77])) tilesInt.C:358 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:77 wrapwidths ] [77])
        (nil)))
(insn:TI 201 197 196 17 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 num_tilings+0 S4 A128])) tilesInt.C:358 89 {*movsi_internal}
     (nil))
(insn 196 201 200 17 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg/v/f:DI 43 r14 [orig:60 ints ] [60])) tilesInt.C:358 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 43 r14 [orig:60 ints ] [60])
        (nil)))
(insn 200 196 202 17 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:109 D.11853 ] [109])) tilesInt.C:358 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:109 D.11853 ] [109])
        (nil)))
(insn:TI 202 200 195 17 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) tilesInt.C:358 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 195 202 199 17 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S4 A64])
        (reg/v:SI 2 cx [orig:61 num_ints ] [61])) tilesInt.C:358 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 2 cx [orig:61 num_ints ] [61])
        (nil)))
(insn 199 195 203 17 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:68 variables ] [68])) tilesInt.C:358 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:68 variables ] [68])
        (nil)))
(call_insn:TI 203 199 365 17 (call (mem:QI (symbol_ref:DI ("_Z9tileswrapPiiiPfiS_S_i") [flags 0x41]  <function_decl 0x2b9b8a09df00 tileswrap>) [0 tileswrap S1 A8])
        (const_int 16 [0x10])) tilesInt.C:358 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                (expr_list:REG_BR_PRED (use (mem:SI (plus:DI (reg/f:DI 7 sp)
                                                (const_int 8 [0x8])) [0  S4 A64]))
                                    (nil))))))))))
(jump_insn:TI 365 203 366 17 (set (pc)
        (label_ref 204)) 650 {jump}
     (nil)
 -> 204)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 366 365 0)

;; Function PyObject* tiles_LoadTiles(PyObject*, PyObject*) (_ZL15tiles_LoadTilesP7_objectS0_, funcdef_no=152, decl_uid=11255, cgraph_uid=152)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 28 count 21 (  1.1)


PyObject* tiles_LoadTiles(PyObject*, PyObject*)

Dataflow summary:
def_info->table_size = 941, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={30d,34u} r1={25d,7u} r2={24d,4u} r3={5d,9u} r4={27d,8u} r5={41d,22u} r6={9d,13u} r7={15d,99u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r17={45d,10u} r18={19d} r19={19d} r20={4e} r21={21d,2u} r22={21d,1u} r23={20d} r24={20d} r25={20d} r26={20d} r27={20d} r28={20d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={23d,3u} r38={23d,3u} r39={19d} r40={19d} r41={5d,8u} r42={4d,6u} r43={3d,4u} r44={4d,8u} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} 
;;    total ref usage 1222{977d,241u,4e} in 168{149 regular + 19 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 16 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 )->[3]->( 4 17 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 3 )->[4]->( 5 17 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 6 [bp] 17 [flags] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 6 [bp]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 7 6 )->[7]->( 7 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 5 7 17 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 5 [di] 6 [bp] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[9]->( 9 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[10]->( 11 18 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 11 18 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 14 13 )->[14]->( 14 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 12 14 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 15 )->[16]->( 1 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 3 4 )->[17]->( 8 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 41 [r12] 42 [r13]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 10 )->[18]->( 12 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 16 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 50 to worklist
  Adding insn 47 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
  Adding insn 33 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 21 to worklist
  Adding insn 19 to worklist
  Adding insn 17 to worklist
  Adding insn 15 to worklist
  Adding insn 323 to worklist
  Adding insn 322 to worklist
  Adding insn 321 to worklist
  Adding insn 320 to worklist
  Adding insn 319 to worklist
  Adding insn 318 to worklist
  Adding insn 72 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 58 to worklist
  Adding insn 54 to worklist
  Adding insn 78 to worklist
  Adding insn 75 to worklist
  Adding insn 257 to worklist
  Adding insn 249 to worklist
  Adding insn 242 to worklist
  Adding insn 100 to worklist
  Adding insn 93 to worklist
  Adding insn 91 to worklist
  Adding insn 88 to worklist
  Adding insn 113 to worklist
  Adding insn 106 to worklist
  Adding insn 144 to worklist
  Adding insn 307 to worklist
  Adding insn 135 to worklist
  Adding insn 132 to worklist
  Adding insn 121 to worklist
  Adding insn 118 to worklist
  Adding insn 162 to worklist
  Adding insn 155 to worklist
  Adding insn 188 to worklist
  Adding insn 228 to worklist
  Adding insn 222 to worklist
  Adding insn 214 to worklist
  Adding insn 192 to worklist
  Adding insn 336 to worklist
  Adding insn 270 to worklist
  Adding insn 347 to worklist
  Adding insn 349 to worklist
  Adding insn 180 to worklist
  Adding insn 173 to worklist
  Adding insn 169 to worklist
Finished finding needed instructions:
processing block 16 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 335 to worklist
  Adding insn 334 to worklist
  Adding insn 333 to worklist
  Adding insn 332 to worklist
  Adding insn 331 to worklist
  Adding insn 330 to worklist
  Adding insn 329 to worklist
processing block 15 lr out =  0 [ax] 7 [sp]
  Adding insn 342 to worklist
  Adding insn 190 to worklist
processing block 14 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 227 to worklist
  Adding insn 225 to worklist
  Adding insn 221 to worklist
  Adding insn 219 to worklist
  Adding insn 217 to worklist
  Adding insn 212 to worklist
processing block 13 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 341 to worklist
  Adding insn 208 to worklist
  Adding insn 310 to worklist
  Adding insn 206 to worklist
  Adding insn 203 to worklist
  Adding insn 202 to worklist
  Adding insn 199 to worklist
processing block 12 lr out =  0 [ax] 7 [sp]
  Adding insn 187 to worklist
  Adding insn 308 to worklist
processing block 11 lr out =  7 [sp]
  Adding insn 161 to worklist
  Adding insn 160 to worklist
  Adding insn 158 to worklist
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 153 to worklist
  Adding insn 152 to worklist
processing block 18 lr out =  7 [sp]
  Adding insn 179 to worklist
  Adding insn 178 to worklist
  Adding insn 177 to worklist
  Adding insn 176 to worklist
  Adding insn 175 to worklist
  Adding insn 174 to worklist
  Adding insn 168 to worklist
processing block 10 lr out =  3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 120 to worklist
  Adding insn 117 to worklist
  Adding insn 116 to worklist
processing block 9 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 143 to worklist
  Adding insn 141 to worklist
  Adding insn 312 to worklist
  Adding insn 311 to worklist
  Adding insn 134 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
processing block 8 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 112 to worklist
  Adding insn 343 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 105 to worklist
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 99 to worklist
  Adding insn 97 to worklist
  Adding insn 90 to worklist
  Adding insn 87 to worklist
  Adding insn 86 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 340 to worklist
processing block 5 lr out =  3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 256 to worklist
  Adding insn 250 to worklist
  Adding insn 247 to worklist
  Adding insn 246 to worklist
  Adding insn 244 to worklist
  Adding insn 243 to worklist
  Adding insn 241 to worklist
processing block 17 lr out =  3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 339 to worklist
  Adding insn 338 to worklist
processing block 4 lr out =  3 [bx] 7 [sp]
  Adding insn 77 to worklist
processing block 3 lr out =  3 [bx] 5 [di] 7 [sp]
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 64 to worklist
  Adding insn 63 to worklist
  Adding insn 59 to worklist
  Adding insn 313 to worklist
  Adding insn 53 to worklist
processing block 2 lr out =  0 [ax] 7 [sp]
  Adding insn 49 to worklist
  Adding insn 345 to worklist
  Adding insn 48 to worklist
  Adding insn 344 to worklist
  Adding insn 44 to worklist
  Adding insn 40 to worklist
  Adding insn 39 to worklist
  Adding insn 317 to worklist
  Adding insn 316 to worklist
  Adding insn 29 to worklist
  Adding insn 315 to worklist
  Adding insn 314 to worklist
  Adding insn 5 to worklist
  Adding insn 324 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 28 count 22 (  1.2)
deleting insn with uid = 325.
deleting insn with uid = 6.
deleting insn with uid = 24.
deleting insn with uid = 25.
;;   ======================================================
;;   -- basic block 2 from 318 to 50 -- after reload
;;   ======================================================

;;	  0--> b  0: i 318[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   5di=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  44si=`*.LC0'                              :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 319[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 320[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 321[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 322[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 323[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 324{sp=sp-0x98;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 12--> b  0: i  29dx=[const(unspec[`PyList_Type'] 2)]     :athlon-direct,athlon-load
;;	 13--> b  0: i 315ax=sp+0x80                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i 314cx=sp+0x50                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i  39r9=sp+0x40                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  40r8=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  15[sp+0x50]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  16loc 0                                   :nothing
;;	 14--> b  0: i  17[sp+0x60]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  18loc 0                                   :nothing
;;	 15--> b  0: i  28[sp+0x20]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 316ax=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	 15--> b  0: i  31[sp+0x18]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  36[sp+0x8]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  19[sp+0x70]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  20loc 0                                   :nothing
;;	 17--> b  0: i  33[sp+0x10]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i 317ax=sp+0x60                              :athlon-direct,athlon-agu,nothing
;;	 17--> b  0: i  21[sp+0x80]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  22loc 0                                   :nothing
;;	 17--> b  0: i  23loc 0                                   :nothing
;;	 19--> b  0: i  38[sp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 344{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 20--> b  0: i  47ax=call [`PyArg_ParseTuple']            :athlon-vector,athlon-ieu
;;	 21--> b  0: i  48dx=ax                                   :athlon-direct,athlon-ieu
;;	 21--> b  0: i 345{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 22--> b  0: i  49flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	 23--> b  0: i  50pc={(flags==0)?L279:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 23
;;   new head = 318
;;   new tail = 50

deleting insn with uid = 62.
;;   ======================================================
;;   -- basic block 3 from 53 to 72 -- after reload
;;   ======================================================

;;	  0--> b  0: i  53di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  54ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 313di=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i  58ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i  63di=sxn([sp+0x40])                       :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i  59bx=ax                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i  61loc bx                                  :nothing
;;	 11--> b  0: i  64{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	 12--> b  0: i  66ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	 13--> b  0: i  70di=[sp+0x80]                            :athlon-direct,athlon-load
;;	 13--> b  0: i  67[sp+0x28]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i  69loc [sp+0x28]                           :nothing
;;	 16--> b  0: i  71flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	 17--> b  0: i  72pc={(flags==0)?L262:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 17
;;   new head = 53
;;   new tail = 72

;;   ======================================================
;;   -- basic block 4 from 75 to 78 -- after reload
;;   ======================================================

;;	  0--> b  0: i  75ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  1--> b  0: i  77flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  2--> b  0: i  78pc={(flags<=0)?L262:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 75
;;   new tail = 78

;;   ======================================================
;;   -- basic block 5 from 241 to 257 -- after reload
;;   ======================================================

;;	  0--> b  0: i 241di=[sp+0x80]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 242ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 246di=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 243bp=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 244r13=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 245loc ax                                  :nothing
;;	  5--> b  0: i 247{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  6--> b  0: i 249ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i 256flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i 250r12=ax                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 252loc r12                                 :nothing
;;	  7--> b  0: i 254loc 0                                   :nothing
;;	  8--> b  0: i 257pc={(flags<=0)?L255:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 241
;;   new tail = 257

;;   ======================================================
;;   -- basic block 6 from 340 to 340 -- after reload
;;   ======================================================

;;	  0--> b  0: i 340{bp=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 340
;;   new tail = 340

;;   ======================================================
;;   -- basic block 7 from 84 to 100 -- after reload
;;   ======================================================

;;	  0--> b  0: i  84loc bp                                  :nothing
;;	  0--> b  0: i  87di=[sp+0x80]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  86si=bp                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  88ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i  90di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  91ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  6--> b  0: i  93[bp*0x4+r12]=ax                         :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  94loc bp+0x1                              :nothing
;;	  6--> b  0: i  96loc D#8                                 :nothing
;;	  6--> b  0: i  97{bp=bp+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  7--> b  0: i  99flags=cmp(r13,bp)                       :athlon-direct,athlon-ieu
;;	  8--> b  0: i 100pc={(flags>0)?L259:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 84
;;   new tail = 100

;;   ======================================================
;;   -- basic block 8 from 102 to 113 -- after reload
;;   ======================================================

;;	  0--> b  0: i 102loc r13                                 :nothing
;;	  0--> b  0: i 103loc r12                                 :nothing
;;	  0--> b  0: i 105di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 343{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 106ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 112flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 107r14=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 108bp=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 109loc ax                                  :nothing
;;	  4--> b  0: i 111loc 0                                   :nothing
;;	  5--> b  0: i 113pc={(flags<=0)?L142:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 102
;;   new tail = 113

;;   ======================================================
;;   -- basic block 9 from 128 to 144 -- after reload
;;   ======================================================

;;	  0--> b  0: i 128loc r15                                 :nothing
;;	  0--> b  0: i 131di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 130si=r15                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 132ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i 134di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 135xmm0=call [`PyFloat_AsDouble']          :athlon-vector,athlon-ieu
;;	  6--> b  0: i 311xmm0=vec_duplicate(xmm0)                :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 312xmm1=vec_concat(ftr(xmm0),const_vector) :athlon-vector,athlon-fpsched,athlon-fvector*2
;;	 17--> b  0: i 307[r15*0x4+bx]=xmm1                       :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	 17--> b  0: i 138loc r15+0x1                             :nothing
;;	 17--> b  0: i 140loc D#7                                 :nothing
;;	 17--> b  0: i 141{r15=r15+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	 18--> b  0: i 143flags=cmp(bp,r15)                       :athlon-direct,athlon-ieu
;;	 19--> b  0: i 144pc={(flags>0)?L281:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 19
;;   new head = 128
;;   new tail = 144

;;   ======================================================
;;   -- basic block 10 from 116 to 121 -- after reload
;;   ======================================================

;;	  0--> b  0: i 117di=[sp+0x60]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 116si=`_ZL18CollisionTableType'            :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 118ax=call [`PyObject_IsInstance']         :athlon-vector,athlon-ieu
;;	  4--> b  0: i 120flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i 121pc={(flags==0)?L346:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 116
;;   new tail = 121

;;   ======================================================
;;   -- basic block 11 from 151 to 162 -- after reload
;;   ======================================================

;;	  0--> b  0: i 151loc [[sp+0x60]+0x10]                    :nothing
;;	  0--> b  0: i 152ax=[sp+0x60]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 160si=[sp+0x40]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 156r9=r12                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 161di=[sp+0x28]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 157r8=r14                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 158cx=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 153dx=[ax+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 155[sp]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 162call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 151
;;   new tail = 162

;;   ======================================================
;;   -- basic block 12 from 186 to 188 -- after reload
;;   ======================================================

;;	  0--> b  0: i 186loc [sp+0x40]-0x1                       :nothing
;;	  0--> b  0: i 308ax=[sp+0x40]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 187{flags=cmp(ax-0x1,0);ax=ax-0x1;}        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 188pc={(flags<0)?L226:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 186
;;   new tail = 188

deleting insn with uid = 200.
deleting insn with uid = 207.
;;   ======================================================
;;   -- basic block 13 from 199 to 341 -- after reload
;;   ======================================================

;;	  0--> b  0: i 310cx=[sp+0x28]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 199bp=zxn(ax)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 206ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 202bp=!bp                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 341{bx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 203{bp=bp<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  3--> b  0: i 208r12=ax*0x4+cx                           :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 3
;;   new head = 199
;;   new tail = 341

deleting insn with uid = 216.
;;   ======================================================
;;   -- basic block 14 from 210 to 228 -- after reload
;;   ======================================================

;;	  0--> b  0: i 210loc clobber                             :nothing
;;	  0--> b  0: i 212di=sxn([r12+bx])                        :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 225{bx=bx-0x4;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 214ax=call [`PyInt_FromLong']              :athlon-vector,athlon-ieu
;;	  5--> b  0: i 217si=sxn([sp+0x30])                       :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 221di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  5--> b  0: i 219dx=ax                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i 222ax=call [`PyList_Insert']               :athlon-vector,athlon-ieu
;;	  9--> b  0: i 224loc D#6                                 :nothing
;;	 10--> b  0: i 227flags=cmp(bx,bp)                        :athlon-direct,athlon-ieu
;;	 11--> b  0: i 228pc={(flags!=0)?L230:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 210
;;   new tail = 228

;;   ======================================================
;;   -- basic block 15 from 190 to 192 -- after reload
;;   ======================================================

;;	  0--> b  0: i 190di=`*.LC1'                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 342{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 192ax=call [`Py_BuildValue']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 190
;;   new tail = 192

deleting insn with uid = 328.
;;   ======================================================
;;   -- basic block 16 from 270 to 336 -- after reload
;;   ======================================================

;;	  0--> b  0: i 329{sp=sp+0x98;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 270use ax                                  :nothing
;;	  1--> b  0: i 330bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 331bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 332r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 333r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 334r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 335r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 336simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 270
;;   new tail = 336

;;   ======================================================
;;   -- basic block 17 from 338 to 347 -- after reload
;;   ======================================================

;;	  0--> b  0: i 338{r13=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 339{r12=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 347pc=L255                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 338
;;   new tail = 347

;;   ======================================================
;;   -- basic block 18 from 168 to 349 -- after reload
;;   ======================================================

;;	  0--> b  0: i 168di=[sp+0x60]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 169ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  3--> b  0: i 171loc ax                                  :nothing
;;	  4--> b  0: i 178si=[sp+0x40]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 179di=[sp+0x28]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 174r9=r12                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 173[sp]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 175r8=r14                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 176cx=bx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 177dx=ax                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i 180call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  8--> b  0: i 349pc=L181                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 168
;;   new tail = 349



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* tiles_LoadTiles(PyObject*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={30d,34u} r1={25d,7u} r2={24d,4u} r3={5d,9u} r4={27d,8u} r5={41d,22u} r6={9d,13u} r7={15d,99u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r17={45d,10u} r18={19d} r19={19d} r20={4e} r21={21d,2u} r22={21d,1u} r23={20d} r24={20d} r25={20d} r26={20d} r27={20d} r28={20d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={23d,3u} r38={23d,3u} r39={19d} r40={19d} r41={5d,8u} r42={4d,6u} r43={3d,4u} r44={4d,8u} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} 
;;    total ref usage 1222{977d,241u,4e} in 168{149 regular + 19 call} insns.
(note 3 0 13 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 1145, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 13 3 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 13 24 2 NOTE_INSN_FUNCTION_BEG)
(note 24 6 25 2 NOTE_INSN_DELETED)
(note 25 24 318 2 NOTE_INSN_DELETED)
(insn/f:TI 318 25 5 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tilesInt.C:135 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 5 318 44 2 (set (reg/v/f:DI 5 di [orig:125 args ] [125])
        (reg:DI 4 si [ args ])) tilesInt.C:135 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ args ])
        (nil)))
(insn 44 5 319 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b9b8a16a720 *.LC0>)) tilesInt.C:155 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 319 44 320 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tilesInt.C:135 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 320 319 321 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tilesInt.C:135 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 321 320 322 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tilesInt.C:135 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 322 321 323 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tilesInt.C:135 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 323 322 324 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tilesInt.C:135 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 324 323 325 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -152 [0xffffffffffffff68])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:135 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -152 [0xffffffffffffff68])))
            (nil))))
(note 325 324 29 2 NOTE_INSN_PROLOGUE_END)
(insn 29 325 315 2 (set (reg:DI 1 dx [131])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tilesInt.C:155 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 315 29 314 2 (set (reg/f:DI 0 ax [129])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 128 [0x80]))) tilesInt.C:155 267 {*leadi}
     (nil))
(insn 314 315 39 2 (set (reg/f:DI 2 cx [128])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 80 [0x50]))) tilesInt.C:155 267 {*leadi}
     (nil))
(insn 39 314 40 2 (set (reg:DI 38 r9)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 64 [0x40]))) tilesInt.C:155 267 {*leadi}
     (nil))
(insn:TI 40 39 15 2 (set (reg:DI 37 r8)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) tilesInt.C:155 267 {*leadi}
     (nil))
(insn 15 40 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 tiles_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:136 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 16 15 17 2 (var_location:DI the_tiles (const_int 0 [0])) tilesInt.C:137 -1
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 memorctable+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:140 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 18 17 28 2 (var_location:DI ct (const_int 0 [0])) tilesInt.C:141 -1
     (nil))
(insn:TI 28 18 316 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S8 A64])
        (reg/f:DI 0 ax [129])) tilesInt.C:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [129])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 316 28 31 2 (set (reg/f:DI 0 ax [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) tilesInt.C:155 267 {*leadi}
     (nil))
(insn 31 316 36 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg:DI 1 dx [131])) tilesInt.C:155 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 36 31 19 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg:DI 1 dx [131])) tilesInt.C:155 87 {*movdi_internal_rex64}
     (nil))
(insn 19 36 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 variables_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:143 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 20 19 33 2 (var_location:DI variables (const_int 0 [0])) tilesInt.C:144 -1
     (nil))
(insn:TI 33 20 317 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg/f:DI 0 ax [132])) tilesInt.C:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [132])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))
(insn 317 33 21 2 (set (reg/f:DI 0 ax [135])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 96 [0x60]))) tilesInt.C:155 267 {*leadi}
     (nil))
(insn 21 317 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 ints_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:146 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 22 21 23 2 (var_location:DI ints (const_int 0 [0])) tilesInt.C:147 -1
     (nil))
(debug_insn 23 22 38 2 (var_location:SI num_ints (const_int 0 [0])) tilesInt.C:148 -1
     (nil))
(insn:TI 38 23 344 2 (set (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg/f:DI 0 ax [135])) tilesInt.C:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [135])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))
(insn 344 38 47 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:155 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 47 344 48 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyArg_ParseTuple") [flags 0x41]  <function_decl 0x2b9b8a018300 PyArg_ParseTuple>) [0 PyArg_ParseTuple S1 A8])
            (const_int 40 [0x28]))) tilesInt.C:155 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 8 [0x8])) [0  S8 A64]))
                                        (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                        (const_int 16 [0x10])) [0  S8 A64]))
                                            (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                            (const_int 24 [0x18])) [0  S8 A64]))
                                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                                (const_int 32 [0x20])) [0  S8 A64]))
                                                    (nil))))))))))))))
(insn:TI 48 47 345 2 (set (reg:SI 1 dx [orig:64 D.11886 ] [64])
        (reg:SI 0 ax)) tilesInt.C:155 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 345 48 49 2 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.11885 ] [63])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:156 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 49 345 50 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:64 D.11886 ] [64])
            (const_int 0 [0]))) tilesInt.C:151 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:64 D.11886 ] [64])
        (nil)))
(jump_insn:TI 50 49 51 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 279)
            (pc))) tilesInt.C:151 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2139 [0x85b])
            (nil)))
 -> 279)
;;  succ:       16 [21.4%]  (CAN_FALLTHRU)
;;              3 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(note 51 50 62 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 62 51 53 3 NOTE_INSN_DELETED)
(insn:TI 53 62 54 3 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 variables_list+0 S8 A128])) tilesInt.C:159 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 54 53 313 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:159 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 313 54 58 3 (set (reg:DI 5 di [orig:138 D.11888 ] [138])
        (mult:DI (reg:DI 0 ax [orig:66 D.11887 ] [66])
            (const_int 4 [0x4]))) tilesInt.C:159 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.11887 ] [66])
        (nil)))
(call_insn:TI 58 313 63 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:159 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 63 58 59 3 (set (reg:DI 5 di [orig:140 D.11888 ] [140])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 64 [0x40])) [0 num_tilings+0 S4 A128]))) tilesInt.C:160 149 {*extendsidi2_rex64}
     (nil))
(insn 59 63 61 3 (set (reg/v/f:DI 3 bx [orig:69 variables ] [69])
        (reg:DI 0 ax)) tilesInt.C:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 139)
            (nil))))
(debug_insn 61 59 64 3 (var_location:DI variables (reg/v/f:DI 3 bx [orig:69 variables ] [69])) tilesInt.C:159 -1
     (nil))
(insn:TI 64 61 66 3 (parallel [
            (set (reg:DI 5 di [orig:142 D.11888 ] [142])
                (ashift:DI (reg:DI 5 di [orig:140 D.11888 ] [140])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:160 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 66 64 70 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:160 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 70 66 67 3 (set (reg/f:DI 5 di [orig:74 ints_list.27 ] [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 ints_list+0 S8 A128])) tilesInt.C:162 87 {*movdi_internal_rex64}
     (nil))
(insn 67 70 69 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0 %sfp+40 S8 A64])
        (reg:DI 0 ax)) tilesInt.C:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 143)
            (nil))))
(debug_insn 69 67 71 3 (var_location:DI the_tiles (mem/c:DI (plus:DI (reg/f:DI 7 sp)
            (const_int 40 [0x28])) [0 %sfp+40 S8 A64])) tilesInt.C:160 -1
     (nil))
(insn:TI 71 69 72 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:74 ints_list.27 ] [74])
            (const_int 0 [0]))) tilesInt.C:162 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 72 71 73 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 262)
            (pc))) tilesInt.C:162 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil)))
 -> 262)
;;  succ:       4 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 628, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 73 72 75 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 75 73 77 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:162 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 77 75 78 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:DI 0 ax [orig:75 D.11887 ] [75])
            (const_int 0 [0]))) tilesInt.C:162 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.11887 ] [75])
        (nil)))
(jump_insn:TI 78 77 239 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 262)
            (pc))) tilesInt.C:162 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil)))
 -> 262)
;;  succ:       5 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [27.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 458, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 6 [bp] 17 [flags] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(note 239 78 241 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 241 239 242 5 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 ints_list+0 S8 A128])) tilesInt.C:164 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 242 241 246 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:164 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 246 242 243 5 (set (reg:DI 5 di [orig:168 D.11888 ] [168])
        (sign_extend:DI (reg:SI 0 ax [orig:77 D.11887 ] [77]))) tilesInt.C:165 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 D.11887 ] [77])
        (nil)))
(insn 243 246 244 5 (set (reg:DI 6 bp [orig:77 D.11887 ] [77])
        (reg:DI 0 ax)) tilesInt.C:164 87 {*movdi_internal_rex64}
     (nil))
(insn 244 243 245 5 (set (reg/v:SI 42 r13 [orig:62 num_ints ] [62])
        (reg:SI 0 ax [orig:77 D.11887 ] [77])) tilesInt.C:164 89 {*movsi_internal}
     (nil))
(debug_insn 245 244 247 5 (var_location:SI num_ints (reg:SI 0 ax [orig:77 D.11887 ] [77])) tilesInt.C:164 -1
     (nil))
(insn:TI 247 245 249 5 (parallel [
            (set (reg:DI 5 di [orig:169 D.11888 ] [169])
                (ashift:DI (reg:DI 5 di [orig:168 D.11888 ] [168])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:165 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 249 247 256 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:165 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 256 249 250 5 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 6 bp [orig:77 D.11887 ] [77])
            (const_int 0 [0]))) tilesInt.C:166 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 6 bp [orig:77 D.11887 ] [77])
        (nil)))
(insn 250 256 252 5 (set (reg/v/f:DI 41 r12 [orig:61 ints ] [61])
        (reg:DI 0 ax)) tilesInt.C:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 170)
            (nil))))
(debug_insn 252 250 254 5 (var_location:DI ints (reg/v/f:DI 41 r12 [orig:61 ints ] [61])) tilesInt.C:165 -1
     (nil))
(debug_insn 254 252 257 5 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 257 254 258 5 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 255)
            (pc))) tilesInt.C:166 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 255)
;;  succ:       6 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 6, loop depth 0, count 0, freq 417, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 6 [bp]
;; live  kill	 17 [flags]
(note 258 257 340 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 340 258 259 6 (parallel [
            (set (reg:DI 6 bp [orig:88 ivtmp.117 ] [88])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:166 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 7, loop depth 0, count 0, freq 2639, maybe hot
;; Invalid sum of incoming frequencies 2818, should be 2639
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 259 340 83 7 75 "" [1 uses])
(note 83 259 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 84 83 87 7 (var_location:SI i (reg:SI 6 bp [orig:88 ivtmp.117 ] [88])) -1
     (nil))
(insn:TI 87 84 86 7 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [0 ints_list+0 S8 A128])) tilesInt.C:167 87 {*movdi_internal_rex64}
     (nil))
(insn 86 87 88 7 (set (reg:DI 4 si)
        (reg:DI 6 bp [orig:88 ivtmp.117 ] [88])) tilesInt.C:167 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 88 86 90 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:167 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 90 88 91 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:82 D.11885 ] [82])) tilesInt.C:167 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.11885 ] [82])
        (nil)))
(call_insn:TI 91 90 93 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:167 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 93 91 94 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 6 bp [orig:88 ivtmp.117 ] [88])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 41 r12 [orig:61 ints ] [61])) [0 MEM[base: ints_45, index: ivtmp.117_115, step: 4, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:83 D.11887 ] [83])) tilesInt.C:167 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:83 D.11887 ] [83])
        (nil)))
(debug_insn 94 93 96 7 (var_location:SI D#8 (plus:SI (reg:SI 6 bp [orig:88 ivtmp.117 ] [88])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 96 94 97 7 (var_location:SI i (debug_expr:SI D#8)) -1
     (nil))
(insn 97 96 99 7 (parallel [
            (set (reg:DI 6 bp [orig:88 ivtmp.117 ] [88])
                (plus:DI (reg:DI 6 bp [orig:88 ivtmp.117 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 99 97 100 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 42 r13 [orig:62 num_ints ] [62])
            (reg:SI 6 bp [orig:88 ivtmp.117 ] [88]))) tilesInt.C:166 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 100 99 255 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 259)
            (pc))) tilesInt.C:166 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 259)
;;  succ:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              8 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 8, loop depth 0, count 0, freq 900, maybe hot
;; Invalid sum of incoming frequencies 721, should be 900
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [9.0%]  (CAN_FALLTHRU)
;;              7 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              17 [100.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 5 [di] 6 [bp] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 255 100 101 8 74 "" [2 uses])
(note 101 255 102 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 102 101 103 8 (var_location:SI num_ints (reg/v:SI 42 r13 [orig:62 num_ints ] [62])) -1
     (nil))
(debug_insn 103 102 105 8 (var_location:DI ints (reg/v/f:DI 41 r12 [orig:61 ints ] [61])) -1
     (nil))
(insn:TI 105 103 343 8 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 variables_list+0 S8 A128])) tilesInt.C:170 87 {*movdi_internal_rex64}
     (nil))
(insn 343 105 106 8 (parallel [
            (set (reg:DI 44 r15 [orig:106 ivtmp.112 ] [106])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:172 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 106 343 112 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:170 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 112 106 107 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:86 D.11887 ] [86])
            (const_int 0 [0]))) tilesInt.C:172 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:86 D.11887 ] [86])
        (nil)))
(insn 107 112 108 8 (set (reg:DI 43 r14 [orig:86 D.11887 ] [86])
        (reg:DI 0 ax)) tilesInt.C:170 87 {*movdi_internal_rex64}
     (nil))
(insn 108 107 109 8 (set (reg/v:SI 6 bp [orig:87 num_variables ] [87])
        (reg:SI 0 ax [orig:86 D.11887 ] [86])) tilesInt.C:170 89 {*movsi_internal}
     (nil))
(debug_insn 109 108 111 8 (var_location:SI num_variables (reg:SI 0 ax [orig:86 D.11887 ] [86])) tilesInt.C:170 -1
     (nil))
(debug_insn 111 109 113 8 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 113 111 281 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 142)
            (pc))) tilesInt.C:172 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 142)
;;  succ:       9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              10 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 9, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
(code_label 281 113 280 9 80 "" [1 uses])
(note 280 281 128 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 128 280 131 9 (var_location:SI i (reg:SI 44 r15 [orig:106 ivtmp.112 ] [106])) -1
     (nil))
(insn:TI 131 128 130 9 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [0 variables_list+0 S8 A128])) tilesInt.C:173 87 {*movdi_internal_rex64}
     (nil))
(insn 130 131 132 9 (set (reg:DI 4 si)
        (reg:DI 44 r15 [orig:106 ivtmp.112 ] [106])) tilesInt.C:173 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 132 130 134 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:173 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 134 132 135 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 D.11885 ] [92])) tilesInt.C:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.11885 ] [92])
        (nil)))
(call_insn:TI 135 134 311 9 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("PyFloat_AsDouble") [flags 0x41]  <function_decl 0x2b9b89f5be00 PyFloat_AsDouble>) [0 PyFloat_AsDouble S1 A8])
            (const_int 0 [0]))) tilesInt.C:173 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 311 135 312 9 (set (reg:V2DF 21 xmm0 [orig:93 D.11889 ] [93])
        (vec_duplicate:V2DF (reg:DF 21 xmm0 [orig:93 D.11889 ] [93]))) tilesInt.C:173 1459 {vec_dupv2df}
     (nil))
(insn:TI 312 311 307 9 (set (reg:V4SF 22 xmm1 [171])
        (vec_concat:V4SF (float_truncate:V2SF (reg:V2DF 21 xmm0 [orig:93 D.11889 ] [93]))
            (const_vector:V2SF [
                    (const_double:SF 0.0 [0x0.0p+0])
                    (const_double:SF 0.0 [0x0.0p+0])
                ]))) tilesInt.C:173 1393 {*sse2_cvtpd2ps}
     (expr_list:REG_DEAD (reg:V2DF 21 xmm0 [orig:93 D.11889 ] [93])
        (nil)))
(insn:TI 307 312 138 9 (set (mem:SF (plus:DI (mult:DI (reg:DI 44 r15 [orig:106 ivtmp.112 ] [106])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 3 bx [orig:69 variables ] [69])) [0 MEM[base: variables_29, index: ivtmp.112_116, step: 4, offset: 0B]+0 S4 A32])
        (reg:SF 22 xmm1 [171])) tilesInt.C:173 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [171])
        (nil)))
(debug_insn 138 307 140 9 (var_location:SI D#7 (plus:SI (reg:SI 44 r15 [orig:106 ivtmp.112 ] [106])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 140 138 141 9 (var_location:SI i (debug_expr:SI D#7)) -1
     (nil))
(insn 141 140 143 9 (parallel [
            (set (reg:DI 44 r15 [orig:106 ivtmp.112 ] [106])
                (plus:DI (reg:DI 44 r15 [orig:106 ivtmp.112 ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 143 141 144 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 6 bp [orig:87 num_variables ] [87])
            (reg:SI 44 r15 [orig:106 ivtmp.112 ] [106]))) tilesInt.C:172 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 144 143 142 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 281)
            (pc))) tilesInt.C:172 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 281)
;;  succ:       9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              10 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (CAN_FALLTHRU)
;;              9 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 142 144 114 10 68 "" [1 uses])
(note 114 142 117 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 117 114 116 10 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 memorctable+0 S8 A128])) tilesInt.C:175 87 {*movdi_internal_rex64}
     (nil))
(insn 116 117 118 10 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>)) tilesInt.C:175 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 118 116 120 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyObject_IsInstance") [flags 0x41]  <function_decl 0x2b9b8a05e600 PyObject_IsInstance>) [0 PyObject_IsInstance S1 A8])
            (const_int 0 [0]))) tilesInt.C:175 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 120 118 121 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 D.11886 ] [96])
            (const_int 0 [0]))) tilesInt.C:175 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:96 D.11886 ] [96])
        (nil)))
(jump_insn:TI 121 120 150 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 346)
            (pc))) tilesInt.C:175 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 346)
;;  succ:       11 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(note 150 121 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 151 150 152 11 (var_location:DI ct (mem/f/j:DI (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 96 [0x60])) [0 memorctable+0 S8 A128])
            (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.29_77].ct+0 S8 A64])) tilesInt.C:177 -1
     (nil))
(insn:TI 152 151 160 11 (set (reg/f:DI 0 ax [orig:148 memorctable ] [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 memorctable+0 S8 A128])) tilesInt.C:177 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 memorctable+0 S8 A128])
        (nil)))
(insn 160 152 156 11 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 num_tilings+0 S4 A128])) tilesInt.C:178 89 {*movsi_internal}
     (nil))
(insn 156 160 161 11 (set (reg:DI 38 r9)
        (reg/v/f:DI 41 r12 [orig:61 ints ] [61])) tilesInt.C:178 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:61 ints ] [61])
        (nil)))
(insn:TI 161 156 157 11 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0 %sfp+40 S8 A64])) tilesInt.C:178 87 {*movdi_internal_rex64}
     (nil))
(insn 157 161 158 11 (set (reg:SI 37 r8)
        (reg:SI 43 r14 [orig:86 D.11887 ] [86])) tilesInt.C:178 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:86 D.11887 ] [86])
        (nil)))
(insn 158 157 153 11 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:69 variables ] [69])) tilesInt.C:178 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:69 variables ] [69])
        (nil)))
(insn:TI 153 158 155 11 (set (reg/f:DI 1 dx [orig:149 MEM[(struct CollisionTable *)memorctable.29_77].ct ] [149])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:148 memorctable ] [148])
                (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.29_77].ct+0 S8 A64])) tilesInt.C:178 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:148 memorctable ] [148])
        (nil)))
(insn 155 153 162 11 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (reg/v:SI 42 r13 [orig:62 num_ints ] [62])) tilesInt.C:178 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 42 r13 [orig:62 num_ints ] [62])
        (nil)))
(call_insn:TI 162 155 181 11 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x41]  <function_decl 0x2b9b8a092400 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tilesInt.C:178 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [100.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 181 162 182 12 70 "" [1 uses])
(note 182 181 183 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 183 182 184 12 NOTE_INSN_DELETED)
(note 184 183 186 12 NOTE_INSN_DELETED)
(debug_insn 186 184 308 12 (var_location:SI i (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 num_tilings+0 S4 A128])
        (const_int -1 [0xffffffffffffffff]))) -1
     (nil))
(insn:TI 308 186 187 12 (set (reg/v:SI 0 ax [orig:105 i ] [105])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 num_tilings+0 S4 A128])) tilesInt.C:186 89 {*movsi_internal}
     (nil))
(insn:TI 187 308 188 12 (parallel [
            (set (reg:CCGOC 17 flags)
                (compare:CCGOC (plus:SI (reg/v:SI 0 ax [orig:105 i ] [105])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg/v:SI 0 ax [orig:105 i ] [105])
                (plus:SI (reg/v:SI 0 ax [orig:105 i ] [105])
                    (const_int -1 [0xffffffffffffffff])))
        ]) tilesInt.C:186 281 {*addsi_2}
     (nil))
(jump_insn:TI 188 187 197 12 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 226)
            (pc))) tilesInt.C:186 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 226)
;;  succ:       13 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
(note 197 188 200 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(note 200 197 207 13 NOTE_INSN_DELETED)
(note 207 200 310 13 NOTE_INSN_DELETED)
(insn:TI 310 207 199 13 (set (reg/v/f:DI 2 cx [orig:73 the_tiles ] [73])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0 %sfp+40 S8 A64])) 87 {*movdi_internal_rex64}
     (nil))
(insn 199 310 206 13 (set (reg:DI 6 bp [157])
        (zero_extend:DI (reg/v:SI 0 ax [orig:105 i ] [105]))) 139 {*zero_extendsidi2_rex64}
     (nil))
(insn 206 199 202 13 (set (reg:DI 0 ax [orig:159 D.11891 ] [159])
        (sign_extend:DI (reg/v:SI 0 ax [orig:105 i ] [105]))) 149 {*extendsidi2_rex64}
     (nil))
(insn:TI 202 206 341 13 (set (reg:DI 6 bp [157])
        (not:DI (reg:DI 6 bp [157]))) 496 {*one_cmpldi2_1}
     (nil))
(insn 341 202 203 13 (parallel [
            (set (reg:DI 3 bx [orig:115 ivtmp.109 ] [115])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:186 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 203 341 208 13 (parallel [
            (set (reg:DI 6 bp [158])
                (ashift:DI (reg:DI 6 bp [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 208 203 230 13 (set (reg/f:DI 41 r12 [orig:121 D.11893 ] [121])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:159 D.11891 ] [159])
                (const_int 4 [0x4]))
            (reg/v/f:DI 2 cx [orig:73 the_tiles ] [73]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg/v/f:DI 2 cx [orig:73 the_tiles ] [73])
        (expr_list:REG_DEAD (reg:DI 0 ax [orig:159 D.11891 ] [159])
            (nil))))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 14, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 230 208 209 14 73 "" [1 uses])
(note 209 230 211 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 211 209 216 14 NOTE_INSN_DELETED)
(note 216 211 210 14 NOTE_INSN_DELETED)
(debug_insn 210 216 212 14 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(insn:TI 212 210 225 14 (set (reg:DI 5 di [orig:161 D.11887 ] [161])
        (sign_extend:DI (mem:SI (plus:DI (reg/f:DI 41 r12 [orig:121 D.11893 ] [121])
                    (reg:DI 3 bx [orig:115 ivtmp.109 ] [115])) [0 MEM[base: _130, index: ivtmp.109_121, offset: 0B]+0 S4 A32]))) tilesInt.C:187 149 {*extendsidi2_rex64}
     (nil))
(insn 225 212 214 14 (parallel [
            (set (reg:DI 3 bx [orig:115 ivtmp.109 ] [115])
                (plus:DI (reg:DI 3 bx [orig:115 ivtmp.109 ] [115])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 214 225 217 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_FromLong") [flags 0x41]  <function_decl 0x2b9b89f4cc00 PyInt_FromLong>) [0 PyInt_FromLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:187 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 217 214 221 14 (set (reg:DI 4 si [orig:163 D.11887 ] [163])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])) [0 start_element+0 S4 A128]))) tilesInt.C:187 149 {*extendsidi2_rex64}
     (nil))
(insn 221 217 219 14 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 tiles_list+0 S8 A128])) tilesInt.C:187 87 {*movdi_internal_rex64}
     (nil))
(insn 219 221 222 14 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:110 D.11885 ] [110])) tilesInt.C:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:110 D.11885 ] [110])
        (nil)))
(call_insn:TI 222 219 224 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Insert") [flags 0x41]  <function_decl 0x2b9b89f7bf00 PyList_Insert>) [0 PyList_Insert S1 A8])
            (const_int 0 [0]))) tilesInt.C:187 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 224 222 227 14 (var_location:SI i (debug_expr:SI D#6)) -1
     (nil))
(insn:TI 227 224 228 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 3 bx [orig:115 ivtmp.109 ] [115])
            (reg:DI 6 bp [158]))) tilesInt.C:186 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 228 227 226 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 230)
            (pc))) tilesInt.C:186 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 230)
;;  succ:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              15 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [9.0%]  (CAN_FALLTHRU)
;;              14 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	 17 [flags]
(code_label 226 228 189 15 72 "" [1 uses])
(note 189 226 190 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn:TI 190 189 342 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b9b8a16a7b8 *.LC1>)) tilesInt.C:188 87 {*movdi_internal_rex64}
     (nil))
(insn 342 190 192 15 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:188 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 192 342 279 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_BuildValue") [flags 0x41]  <function_decl 0x2b9b8a018600 Py_BuildValue>) [0 Py_BuildValue S1 A8])
            (const_int 0 [0]))) tilesInt.C:188 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
;;  succ:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 2290, maybe hot
;; Invalid sum of incoming frequencies 1145, should be 2290
;;  prev block 15, next block 17, flags: (REACHABLE, RTL)
;;  pred:       2 [21.4%]  (CAN_FALLTHRU)
;;              15 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 279 192 274 16 79 "" [1 uses])
(note 274 279 351 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 351 274 329 16 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 329 351 270 16 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 152 [0x98])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:189 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 152 [0x98])))
            (nil))))
(insn 270 329 330 16 (use (reg/i:DI 0 ax)) tilesInt.C:189 -1
     (nil))
(insn/f:TI 330 270 331 16 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:189 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 331 330 332 16 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:189 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 332 331 333 16 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:189 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 333 332 334 16 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:189 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 334 333 335 16 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:189 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 335 334 336 16 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:189 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 336 335 337 16 (simple_return) tilesInt.C:189 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 337 336 262)
;; basic block 17, loop depth 0, count 0, freq 442, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [30.2%]  (CAN_FALLTHRU)
;;              4 [27.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 41 [r12] 42 [r13]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(code_label 262 337 263 17 62 "" [2 uses])
(note 263 262 338 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 338 263 339 17 (parallel [
            (set (reg:DI 42 r13 [orig:62 num_ints ] [62])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:148 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 339 338 347 17 (parallel [
            (set (reg/v/f:DI 41 r12 [orig:61 ints ] [61])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:147 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 347 339 348 17 (set (pc)
        (label_ref 255)) 650 {jump}
     (nil)
 -> 255)
;;  succ:       8 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 348 347 346)
;; basic block 18, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 17, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(code_label 346 348 166 18 85 "" [1 uses])
(note 166 346 168 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn:TI 168 166 169 18 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [0 memorctable+0 S8 A128])) tilesInt.C:182 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 169 168 171 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:182 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(debug_insn 171 169 178 18 (var_location:SI memory_size (reg:SI 0 ax [orig:101 D.11887 ] [101])) tilesInt.C:182 -1
     (nil))
(insn:TI 178 171 179 18 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 num_tilings+0 S4 A128])) tilesInt.C:183 89 {*movsi_internal}
     (nil))
(insn 179 178 174 18 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0 %sfp+40 S8 A64])) tilesInt.C:183 87 {*movdi_internal_rex64}
     (nil))
(insn 174 179 173 18 (set (reg:DI 38 r9)
        (reg/v/f:DI 41 r12 [orig:61 ints ] [61])) tilesInt.C:183 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:61 ints ] [61])
        (nil)))
(insn:TI 173 174 175 18 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (reg/v:SI 42 r13 [orig:62 num_ints ] [62])) tilesInt.C:183 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 42 r13 [orig:62 num_ints ] [62])
        (nil)))
(insn 175 173 176 18 (set (reg:SI 37 r8)
        (reg:SI 43 r14 [orig:86 D.11887 ] [86])) tilesInt.C:183 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:86 D.11887 ] [86])
        (nil)))
(insn 176 175 177 18 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:69 variables ] [69])) tilesInt.C:183 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:69 variables ] [69])
        (nil)))
(insn:TI 177 176 180 18 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:101 D.11887 ] [101])) tilesInt.C:183 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:101 D.11887 ] [101])
        (nil)))
(call_insn:TI 180 177 349 18 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x41]  <function_decl 0x2b9b8a086b00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tilesInt.C:183 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(jump_insn:TI 349 180 350 18 (set (pc)
        (label_ref 181)) 650 {jump}
     (nil)
 -> 181)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 350 349 0)

;; Function PyObject* tiles_GetTiles(PyObject*, PyObject*) (_ZL14tiles_GetTilesP7_objectS0_, funcdef_no=153, decl_uid=11285, cgraph_uid=153)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 27 count 20 (  1.1)


PyObject* tiles_GetTiles(PyObject*, PyObject*)

Dataflow summary:
def_info->table_size = 931, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={25d,28u} r1={25d,6u} r2={23d,3u} r3={5d,11u} r4={27d,8u} r5={41d,22u} r6={3d,6u} r7={15d,86u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r17={43d,10u} r18={19d} r19={19d} r20={2e} r21={21d,2u} r22={21d,1u} r23={20d} r24={20d} r25={20d} r26={20d} r27={20d} r28={20d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={23d,4u} r38={23d,3u} r39={19d} r40={19d} r41={8d,12u} r42={4d,7u} r43={4d,6u} r44={4d,8u} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} 
;;    total ref usage 1192{967d,223u,2e} in 156{137 regular + 19 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 15 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp] 41 [r12]
;; live  out 	 7 [sp] 41 [r12]

( 2 )->[3]->( 4 16 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

( 3 )->[4]->( 5 16 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 7 6 )->[7]->( 7 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 5 7 16 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[9]->( 9 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 8 9 )->[10]->( 11 17 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 11 17 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 14 13 )->[14]->( 14 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 14 2 12 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 3 4 )->[16]->( 8 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 10 )->[17]->( 12 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 42 to worklist
  Adding insn 39 to worklist
  Adding insn 30 to worklist
  Adding insn 27 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 17 to worklist
  Adding insn 304 to worklist
  Adding insn 303 to worklist
  Adding insn 302 to worklist
  Adding insn 301 to worklist
  Adding insn 300 to worklist
  Adding insn 299 to worklist
  Adding insn 64 to worklist
  Adding insn 58 to worklist
  Adding insn 50 to worklist
  Adding insn 46 to worklist
  Adding insn 70 to worklist
  Adding insn 67 to worklist
  Adding insn 229 to worklist
  Adding insn 221 to worklist
  Adding insn 214 to worklist
  Adding insn 92 to worklist
  Adding insn 85 to worklist
  Adding insn 83 to worklist
  Adding insn 80 to worklist
  Adding insn 105 to worklist
  Adding insn 291 to worklist
  Adding insn 98 to worklist
  Adding insn 136 to worklist
  Adding insn 289 to worklist
  Adding insn 127 to worklist
  Adding insn 124 to worklist
  Adding insn 113 to worklist
  Adding insn 110 to worklist
  Adding insn 154 to worklist
  Adding insn 147 to worklist
  Adding insn 182 to worklist
  Adding insn 178 to worklist
  Adding insn 200 to worklist
  Adding insn 194 to worklist
  Adding insn 189 to worklist
  Adding insn 317 to worklist
  Adding insn 242 to worklist
  Adding insn 329 to worklist
  Adding insn 331 to worklist
  Adding insn 172 to worklist
  Adding insn 165 to worklist
  Adding insn 161 to worklist
Finished finding needed instructions:
processing block 15 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 316 to worklist
  Adding insn 315 to worklist
  Adding insn 314 to worklist
  Adding insn 313 to worklist
  Adding insn 312 to worklist
  Adding insn 311 to worklist
  Adding insn 310 to worklist
  Adding insn 239 to worklist
processing block 14 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 199 to worklist
  Adding insn 198 to worklist
  Adding insn 292 to worklist
  Adding insn 193 to worklist
  Adding insn 192 to worklist
  Adding insn 190 to worklist
  Adding insn 187 to worklist
processing block 13 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 322 to worklist
processing block 12 lr out =  6 [bp] 7 [sp] 41 [r12]
  Adding insn 324 to worklist
  Adding insn 323 to worklist
  Adding insn 179 to worklist
  Adding insn 176 to worklist
processing block 11 lr out =  6 [bp] 7 [sp]
  Adding insn 153 to worklist
  Adding insn 152 to worklist
  Adding insn 150 to worklist
  Adding insn 149 to worklist
  Adding insn 148 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
processing block 17 lr out =  6 [bp] 7 [sp]
  Adding insn 171 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
  Adding insn 168 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 160 to worklist
processing block 10 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 112 to worklist
  Adding insn 109 to worklist
  Adding insn 108 to worklist
processing block 9 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 135 to worklist
  Adding insn 133 to worklist
  Adding insn 294 to worklist
  Adding insn 293 to worklist
  Adding insn 126 to worklist
  Adding insn 123 to worklist
  Adding insn 122 to worklist
processing block 8 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 104 to worklist
  Adding insn 325 to worklist
  Adding insn 100 to worklist
  Adding insn 97 to worklist
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 91 to worklist
  Adding insn 89 to worklist
  Adding insn 82 to worklist
  Adding insn 79 to worklist
  Adding insn 78 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 321 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 228 to worklist
  Adding insn 222 to worklist
  Adding insn 219 to worklist
  Adding insn 218 to worklist
  Adding insn 216 to worklist
  Adding insn 215 to worklist
  Adding insn 213 to worklist
processing block 16 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 320 to worklist
  Adding insn 319 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 69 to worklist
processing block 3 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp]
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 59 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
  Adding insn 51 to worklist
  Adding insn 295 to worklist
  Adding insn 45 to worklist
processing block 2 lr out =  7 [sp] 41 [r12]
  Adding insn 41 to worklist
  Adding insn 327 to worklist
  Adding insn 326 to worklist
  Adding insn 36 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 298 to worklist
  Adding insn 297 to worklist
  Adding insn 296 to worklist
  Adding insn 4 to worklist
  Adding insn 305 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 27 count 21 (  1.2)
deleting insn with uid = 306.
deleting insn with uid = 5.
deleting insn with uid = 23.
;;   ======================================================
;;   -- basic block 2 from 299 to 42 -- after reload
;;   ======================================================

;;	  0--> b  0: i  16loc 0                                   :nothing
;;	  0--> b  0: i 299[--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   4di=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  36si=`*.LC3'                              :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 300[--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 301[--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 302[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 327{r12=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i 303[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 304[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 305{sp=sp-0x68;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 12--> b  0: i  28r8=[const(unspec[`PyList_Type'] 2)]     :athlon-direct,athlon-load
;;	 13--> b  0: i 298ax=sp+0x50                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i 296cx=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i 297dx=sp+0x20                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  31r9=sp+0x40                              :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i  17[sp+0x30]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  18loc 0                                   :nothing
;;	 14--> b  0: i  19[sp+0x40]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  27[sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  30[sp]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 326{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 16--> b  0: i  20[sp+0x50]=0                             :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  21loc 0                                   :nothing
;;	 16--> b  0: i  22loc 0                                   :nothing
;;	 17--> b  0: i  39ax=call [`PyArg_ParseTuple']            :athlon-vector,athlon-ieu
;;	 18--> b  0: i  41flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 19--> b  0: i  42pc={(flags==0)?L259:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 19
;;   new head = 299
;;   new tail = 42

deleting insn with uid = 54.
;;   ======================================================
;;   -- basic block 3 from 45 to 64 -- after reload
;;   ======================================================

;;	  0--> b  0: i  45di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  46ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 295di=ax*0x4                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i  50ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i  55di=sxn([sp+0x20])                       :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i  51bx=ax                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i  53loc bx                                  :nothing
;;	 11--> b  0: i  56{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	 12--> b  0: i  58ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	 13--> b  0: i  62di=[sp+0x50]                            :athlon-direct,athlon-load
;;	 13--> b  0: i  59bp=ax                                   :athlon-direct,athlon-ieu
;;	 13--> b  0: i  61loc bp                                  :nothing
;;	 16--> b  0: i  63flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	 17--> b  0: i  64pc={(flags==0)?L234:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 17
;;   new head = 45
;;   new tail = 64

;;   ======================================================
;;   -- basic block 4 from 67 to 70 -- after reload
;;   ======================================================

;;	  0--> b  0: i  67ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  1--> b  0: i  69flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  2--> b  0: i  70pc={(flags<=0)?L234:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 67
;;   new tail = 70

;;   ======================================================
;;   -- basic block 5 from 213 to 229 -- after reload
;;   ======================================================

;;	  0--> b  0: i 213di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 214ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 218di=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 215r12=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 216r14=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 217loc ax                                  :nothing
;;	  5--> b  0: i 219{di=di<<0x2;clobber flags;}             :athlon-direct,athlon-ieu
;;	  6--> b  0: i 221ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  7--> b  0: i 228flags=cmp(r12,0)                        :athlon-direct,athlon-ieu
;;	  7--> b  0: i 222r13=ax                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 224loc r13                                 :nothing
;;	  7--> b  0: i 226loc 0                                   :nothing
;;	  8--> b  0: i 229pc={(flags<=0)?L227:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 213
;;   new tail = 229

;;   ======================================================
;;   -- basic block 6 from 321 to 321 -- after reload
;;   ======================================================

;;	  0--> b  0: i 321{r12=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 321
;;   new tail = 321

;;   ======================================================
;;   -- basic block 7 from 76 to 92 -- after reload
;;   ======================================================

;;	  0--> b  0: i  76loc r12                                 :nothing
;;	  0--> b  0: i  79di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  78si=r12                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  80ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i  82di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  83ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  6--> b  0: i  85[r12*0x4+r13]=ax                        :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  86loc r12+0x1                             :nothing
;;	  6--> b  0: i  88loc D#10                                :nothing
;;	  6--> b  0: i  89{r12=r12+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  7--> b  0: i  91flags=cmp(r14,r12)                      :athlon-direct,athlon-ieu
;;	  8--> b  0: i  92pc={(flags>0)?L231:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 76
;;   new tail = 92

;;   ======================================================
;;   -- basic block 8 from 94 to 105 -- after reload
;;   ======================================================

;;	  0--> b  0: i  94loc r14                                 :nothing
;;	  0--> b  0: i  95loc r13                                 :nothing
;;	  0--> b  0: i  97di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 325{r15=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  98ax=call [`PyList_Size']                 :athlon-vector,athlon-ieu
;;	  4--> b  0: i 104flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 291[sp+0x18]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 100r12=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 101loc ax                                  :nothing
;;	  4--> b  0: i 103loc 0                                   :nothing
;;	  5--> b  0: i 105pc={(flags<=0)?L134:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 94
;;   new tail = 105

;;   ======================================================
;;   -- basic block 9 from 120 to 136 -- after reload
;;   ======================================================

;;	  0--> b  0: i 120loc r15                                 :nothing
;;	  0--> b  0: i 123di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 122si=r15                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 124ax=call [`PyList_GetItem']              :athlon-vector,athlon-ieu
;;	  4--> b  0: i 126di=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 127xmm0=call [`PyFloat_AsDouble']          :athlon-vector,athlon-ieu
;;	  6--> b  0: i 293xmm0=vec_duplicate(xmm0)                :athlon-double,athlon-fpsched,athlon-fmul
;;	  9--> b  0: i 294xmm1=vec_concat(ftr(xmm0),const_vector) :athlon-vector,athlon-fpsched,athlon-fvector*2
;;	 17--> b  0: i 289[r15*0x4+bx]=xmm1                       :athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)
;;	 17--> b  0: i 130loc r15+0x1                             :nothing
;;	 17--> b  0: i 132loc D#9                                 :nothing
;;	 17--> b  0: i 133{r15=r15+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	 18--> b  0: i 135flags=cmp(r12,r15)                      :athlon-direct,athlon-ieu
;;	 19--> b  0: i 136pc={(flags>0)?L261:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 19
;;   new head = 120
;;   new tail = 136

;;   ======================================================
;;   -- basic block 10 from 108 to 113 -- after reload
;;   ======================================================

;;	  0--> b  0: i 109di=[sp+0x30]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 108si=`_ZL18CollisionTableType'            :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 110ax=call [`PyObject_IsInstance']         :athlon-vector,athlon-ieu
;;	  4--> b  0: i 112flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i 113pc={(flags==0)?L328:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 108
;;   new tail = 113

;;   ======================================================
;;   -- basic block 11 from 143 to 154 -- after reload
;;   ======================================================

;;	  0--> b  0: i 143loc [[sp+0x30]+0x10]                    :nothing
;;	  0--> b  0: i 144ax=[sp+0x30]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 149r8=[sp+0x18]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 148r9=r13                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 152si=[sp+0x20]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 150cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 153di=bp                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 145dx=[ax+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 147[sp]=r14                                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 154call [`_Z5tilesPiiP15collision_tablePfiS_i']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 143
;;   new tail = 154

;;   ======================================================
;;   -- basic block 12 from 176 to 182 -- after reload
;;   ======================================================

;;	  0--> b  0: i 176di=sxn([sp+0x20])                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 178ax=call [`PyList_New']                  :athlon-vector,athlon-ieu
;;	  5--> b  0: i 179r12=ax                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 180loc 0                                   :nothing
;;	  5--> b  0: i 323ax=[sp+0x20]                            :athlon-direct,athlon-load
;;	  8--> b  0: i 324flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  9--> b  0: i 182pc={(flags<=0)?L259:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 176
;;   new tail = 182

;;   ======================================================
;;   -- basic block 13 from 322 to 322 -- after reload
;;   ======================================================

;;	  0--> b  0: i 322{bx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 322
;;   new tail = 322

;;   ======================================================
;;   -- basic block 14 from 185 to 200 -- after reload
;;   ======================================================

;;	  0--> b  0: i 185loc bx                                  :nothing
;;	  0--> b  0: i 187di=sxn([bx*0x4+bp])                     :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 189ax=call [`PyInt_FromLong']              :athlon-vector,athlon-ieu
;;	  5--> b  0: i 192si=bx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 190dx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 193di=r12                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i 194ax=call [`PyList_SetItem']              :athlon-vector,athlon-ieu
;;	  7--> b  0: i 292dx=bx+0x1                               :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i 197loc dx                                  :nothing
;;	  7--> b  0: i 198{bx=bx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  7--> b  0: i 199flags=cmp([sp+0x20],dx)                 :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i 200pc={(flags>0)?L202:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 185
;;   new tail = 200

deleting insn with uid = 309.
;;   ======================================================
;;   -- basic block 15 from 239 to 317 -- after reload
;;   ======================================================

;;	  0--> b  0: i 310{sp=sp+0x68;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 239ax=r12                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 242use ax                                  :nothing
;;	  1--> b  0: i 311bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 312bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 313r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 314r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 315r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 316r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 317simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 239
;;   new tail = 317

;;   ======================================================
;;   -- basic block 16 from 319 to 329 -- after reload
;;   ======================================================

;;	  0--> b  0: i 319{r14=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 320{r13=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 329pc=L227                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 319
;;   new tail = 329

;;   ======================================================
;;   -- basic block 17 from 160 to 331 -- after reload
;;   ======================================================

;;	  0--> b  0: i 160di=[sp+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 161ax=call [`PyInt_AsLong']                :athlon-vector,athlon-ieu
;;	  3--> b  0: i 163loc ax                                  :nothing
;;	  4--> b  0: i 167r8=[sp+0x18]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 170si=[sp+0x20]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 166r9=r13                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 165[sp]=r14                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 168cx=bx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 169dx=ax                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 171di=bp                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i 172call [`_Z5tilesPiiiPfiS_i']             :athlon-vector,athlon-ieu
;;	  8--> b  0: i 331pc=L173                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 160
;;   new tail = 331



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* tiles_GetTiles(PyObject*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={25d,28u} r1={25d,6u} r2={23d,3u} r3={5d,11u} r4={27d,8u} r5={41d,22u} r6={3d,6u} r7={15d,86u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r17={43d,10u} r18={19d} r19={19d} r20={2e} r21={21d,2u} r22={21d,1u} r23={20d} r24={20d} r25={20d} r26={20d} r27={20d} r28={20d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={23d,4u} r38={23d,3u} r39={19d} r40={19d} r41={8d,12u} r42={4d,7u} r43={4d,6u} r44={4d,8u} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} 
;;    total ref usage 1192{967d,223u,2e} in 156{137 regular + 19 call} insns.
(note 2 0 14 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 1145, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	 17 [flags]
(note 14 2 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 14 23 2 NOTE_INSN_FUNCTION_BEG)
(note 23 5 16 2 NOTE_INSN_DELETED)
(debug_insn 16 23 299 2 (var_location:DI tiles_list (const_int 0 [0])) tilesInt.C:193 -1
     (nil))
(insn/f:TI 299 16 4 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) tilesInt.C:192 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn 4 299 36 2 (set (reg/v/f:DI 5 di [orig:120 args ] [120])
        (reg:DI 4 si [ args ])) tilesInt.C:192 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ args ])
        (nil)))
(insn 36 4 300 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b9b8a243688 *.LC3>)) tilesInt.C:209 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 300 36 301 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) tilesInt.C:192 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 301 300 302 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) tilesInt.C:192 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 302 301 327 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tilesInt.C:192 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 327 302 303 2 (parallel [
            (set (reg/f:DI 41 r12 [orig:62 D.11917 ] [62])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:210 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f:TI 303 327 304 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tilesInt.C:192 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 304 303 305 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tilesInt.C:192 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 305 304 306 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -104 [0xffffffffffffff98])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:192 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -104 [0xffffffffffffff98])))
            (nil))))
(note 306 305 28 2 NOTE_INSN_PROLOGUE_END)
(insn 28 306 298 2 (set (reg:DI 37 r8 [126])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tilesInt.C:209 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyList_Type") [flags 0x40]  <var_decl 0x2b9b89f7a8e8 PyList_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])
        (nil)))
(insn:TI 298 28 296 2 (set (reg/f:DI 0 ax [124])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 80 [0x50]))) tilesInt.C:209 267 {*leadi}
     (nil))
(insn 296 298 297 2 (set (reg/f:DI 2 cx [122])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) tilesInt.C:209 267 {*leadi}
     (nil))
(insn 297 296 31 2 (set (reg/f:DI 1 dx [123])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) tilesInt.C:209 267 {*leadi}
     (nil))
(insn:TI 31 297 17 2 (set (reg:DI 38 r9)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 64 [0x40]))) tilesInt.C:209 267 {*leadi}
     (nil))
(insn 17 31 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 memorctable+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:196 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 18 17 19 2 (var_location:DI ct (const_int 0 [0])) tilesInt.C:197 -1
     (nil))
(insn 19 18 27 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 variables_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:199 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 27 19 30 2 (set (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg/f:DI 0 ax [124])) tilesInt.C:209 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [124])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 30 27 326 2 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 37 r8 [126])) tilesInt.C:209 87 {*movdi_internal_rex64}
     (nil))
(insn 326 30 20 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:209 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 20 326 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 ints_list+0 S8 A128])
        (const_int 0 [0])) tilesInt.C:202 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 21 20 22 2 (var_location:DI ints (const_int 0 [0])) tilesInt.C:203 -1
     (nil))
(debug_insn 22 21 39 2 (var_location:SI num_ints (const_int 0 [0])) tilesInt.C:204 -1
     (nil))
(call_insn:TI 39 22 41 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyArg_ParseTuple") [flags 0x41]  <function_decl 0x2b9b8a018300 PyArg_ParseTuple>) [0 PyArg_ParseTuple S1 A8])
            (const_int 16 [0x10]))) tilesInt.C:209 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 8 [0x8])) [0  S8 A64]))
                                        (nil)))))))))))
(insn:TI 41 39 42 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:63 D.11918 ] [63])
            (const_int 0 [0]))) tilesInt.C:207 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.11918 ] [63])
        (nil)))
(jump_insn:TI 42 41 43 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 259)
            (pc))) tilesInt.C:207 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2139 [0x85b])
            (nil)))
 -> 259)
;;  succ:       15 [21.4%]  (CAN_FALLTHRU)
;;              3 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp] 41 [r12]
;; live  out 	 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(note 43 42 54 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 54 43 45 3 NOTE_INSN_DELETED)
(insn:TI 45 54 46 3 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 variables_list+0 S8 A128])) tilesInt.C:212 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 46 45 295 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:212 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 295 46 50 3 (set (reg:DI 5 di [orig:129 D.11920 ] [129])
        (mult:DI (reg:DI 0 ax [orig:65 D.11919 ] [65])
            (const_int 4 [0x4]))) tilesInt.C:212 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.11919 ] [65])
        (nil)))
(call_insn:TI 50 295 55 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:212 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 55 50 51 3 (set (reg:DI 5 di [orig:131 D.11920 ] [131])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])) [0 num_tilings+0 S4 A128]))) tilesInt.C:213 149 {*extendsidi2_rex64}
     (nil))
(insn 51 55 53 3 (set (reg/v/f:DI 3 bx [orig:68 variables ] [68])
        (reg:DI 0 ax)) tilesInt.C:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 130)
            (nil))))
(debug_insn 53 51 56 3 (var_location:DI variables (reg/v/f:DI 3 bx [orig:68 variables ] [68])) tilesInt.C:212 -1
     (nil))
(insn:TI 56 53 58 3 (parallel [
            (set (reg:DI 5 di [orig:133 D.11920 ] [133])
                (ashift:DI (reg:DI 5 di [orig:131 D.11920 ] [131])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:213 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 58 56 62 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:213 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 62 58 59 3 (set (reg/f:DI 5 di [orig:73 ints_list.37 ] [73])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 ints_list+0 S8 A128])) tilesInt.C:214 87 {*movdi_internal_rex64}
     (nil))
(insn 59 62 61 3 (set (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])
        (reg:DI 0 ax)) tilesInt.C:213 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 134)
            (nil))))
(debug_insn 61 59 63 3 (var_location:DI the_tiles (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) tilesInt.C:213 -1
     (nil))
(insn:TI 63 61 64 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:73 ints_list.37 ] [73])
            (const_int 0 [0]))) tilesInt.C:214 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 64 63 65 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 234)
            (pc))) tilesInt.C:214 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil)))
 -> 234)
;;  succ:       4 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 628, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 65 64 67 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 67 65 69 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:214 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 69 67 70 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:DI 0 ax [orig:74 D.11919 ] [74])
            (const_int 0 [0]))) tilesInt.C:214 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:74 D.11919 ] [74])
        (nil)))
(jump_insn:TI 70 69 211 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 234)
            (pc))) tilesInt.C:214 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil)))
 -> 234)
;;  succ:       5 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [27.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 458, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [73.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 211 70 213 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 213 211 214 5 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 ints_list+0 S8 A128])) tilesInt.C:216 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 214 213 218 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:216 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 218 214 215 5 (set (reg:DI 5 di [orig:150 D.11920 ] [150])
        (sign_extend:DI (reg:SI 0 ax [orig:76 D.11919 ] [76]))) tilesInt.C:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:76 D.11919 ] [76])
        (nil)))
(insn 215 218 216 5 (set (reg:DI 41 r12 [orig:76 D.11919 ] [76])
        (reg:DI 0 ax)) tilesInt.C:216 87 {*movdi_internal_rex64}
     (nil))
(insn 216 215 217 5 (set (reg/v:SI 43 r14 [orig:61 num_ints ] [61])
        (reg:SI 0 ax [orig:76 D.11919 ] [76])) tilesInt.C:216 89 {*movsi_internal}
     (nil))
(debug_insn 217 216 219 5 (var_location:SI num_ints (reg:SI 0 ax [orig:76 D.11919 ] [76])) tilesInt.C:216 -1
     (nil))
(insn:TI 219 217 221 5 (parallel [
            (set (reg:DI 5 di [orig:151 D.11920 ] [151])
                (ashift:DI (reg:DI 5 di [orig:150 D.11920 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:217 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 221 219 228 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9b895d0000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) tilesInt.C:217 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 228 221 222 5 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 41 r12 [orig:76 D.11919 ] [76])
            (const_int 0 [0]))) tilesInt.C:218 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 41 r12 [orig:76 D.11919 ] [76])
        (nil)))
(insn 222 228 224 5 (set (reg/v/f:DI 42 r13 [orig:60 ints ] [60])
        (reg:DI 0 ax)) tilesInt.C:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 152)
            (nil))))
(debug_insn 224 222 226 5 (var_location:DI ints (reg/v/f:DI 42 r13 [orig:60 ints ] [60])) tilesInt.C:217 -1
     (nil))
(debug_insn 226 224 229 5 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 229 226 230 5 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 227)
            (pc))) tilesInt.C:218 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 227)
;;  succ:       6 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 417, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	 17 [flags]
(note 230 229 321 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 321 230 231 6 (parallel [
            (set (reg:DI 41 r12 [orig:87 ivtmp.134 ] [87])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:218 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 7, loop depth 0, count 0, freq 2639, maybe hot
;; Invalid sum of incoming frequencies 2818, should be 2639
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(code_label 231 321 75 7 99 "" [1 uses])
(note 75 231 76 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 76 75 79 7 (var_location:SI i (reg:SI 41 r12 [orig:87 ivtmp.134 ] [87])) -1
     (nil))
(insn:TI 79 76 78 7 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 ints_list+0 S8 A128])) tilesInt.C:219 87 {*movdi_internal_rex64}
     (nil))
(insn 78 79 80 7 (set (reg:DI 4 si)
        (reg:DI 41 r12 [orig:87 ivtmp.134 ] [87])) tilesInt.C:219 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 80 78 82 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:219 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 82 80 83 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:81 D.11917 ] [81])) tilesInt.C:219 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.11917 ] [81])
        (nil)))
(call_insn:TI 83 82 85 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:219 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 85 83 86 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 41 r12 [orig:87 ivtmp.134 ] [87])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 42 r13 [orig:60 ints ] [60])) [0 MEM[base: ints_44, index: ivtmp.134_112, step: 4, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:82 D.11919 ] [82])) tilesInt.C:219 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:82 D.11919 ] [82])
        (nil)))
(debug_insn 86 85 88 7 (var_location:SI D#10 (plus:SI (reg:SI 41 r12 [orig:87 ivtmp.134 ] [87])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 88 86 89 7 (var_location:SI i (debug_expr:SI D#10)) -1
     (nil))
(insn 89 88 91 7 (parallel [
            (set (reg:DI 41 r12 [orig:87 ivtmp.134 ] [87])
                (plus:DI (reg:DI 41 r12 [orig:87 ivtmp.134 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 91 89 92 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 43 r14 [orig:61 num_ints ] [61])
            (reg:SI 41 r12 [orig:87 ivtmp.134 ] [87]))) tilesInt.C:218 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 92 91 227 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 231)
            (pc))) tilesInt.C:218 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 231)
;;  succ:       7 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              8 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 8, loop depth 0, count 0, freq 900, maybe hot
;; Invalid sum of incoming frequencies 721, should be 900
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [9.0%]  (CAN_FALLTHRU)
;;              7 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              16 [100.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12] 44 [r15]
;; live  kill	 17 [flags]
(code_label 227 92 93 8 98 "" [2 uses])
(note 93 227 94 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 94 93 95 8 (var_location:SI num_ints (reg/v:SI 43 r14 [orig:61 num_ints ] [61])) -1
     (nil))
(debug_insn 95 94 97 8 (var_location:DI ints (reg/v/f:DI 42 r13 [orig:60 ints ] [60])) -1
     (nil))
(insn:TI 97 95 325 8 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 variables_list+0 S8 A128])) tilesInt.C:222 87 {*movdi_internal_rex64}
     (nil))
(insn 325 97 98 8 (parallel [
            (set (reg:DI 44 r15 [orig:107 ivtmp.129 ] [107])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:224 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 98 325 104 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_Size") [flags 0x41]  <function_decl 0x2b9b89f7bc00 PyList_Size>) [0 PyList_Size S1 A8])
            (const_int 0 [0]))) tilesInt.C:222 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 104 98 291 8 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:85 D.11919 ] [85])
            (const_int 0 [0]))) tilesInt.C:224 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 D.11919 ] [85])
        (nil)))
(insn 291 104 100 8 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+8 S8 A64])
        (reg:DI 0 ax [orig:85 D.11919 ] [85])) tilesInt.C:222 87 {*movdi_internal_rex64}
     (nil))
(insn 100 291 101 8 (set (reg/v:SI 41 r12 [orig:86 num_variables ] [86])
        (reg:SI 0 ax [orig:85 D.11919 ] [85])) tilesInt.C:222 89 {*movsi_internal}
     (nil))
(debug_insn 101 100 103 8 (var_location:SI num_variables (reg:SI 0 ax [orig:85 D.11919 ] [85])) tilesInt.C:222 -1
     (nil))
(debug_insn 103 101 105 8 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(jump_insn:TI 105 103 261 8 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 134)
            (pc))) tilesInt.C:224 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 134)
;;  succ:       9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              10 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 9, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 21 [xmm0] 22 [xmm1] 44 [r15]
;; live  kill	 17 [flags]
(code_label 261 105 260 9 106 "" [1 uses])
(note 260 261 120 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 120 260 123 9 (var_location:SI i (reg:SI 44 r15 [orig:107 ivtmp.129 ] [107])) -1
     (nil))
(insn:TI 123 120 122 9 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 variables_list+0 S8 A128])) tilesInt.C:225 87 {*movdi_internal_rex64}
     (nil))
(insn 122 123 124 9 (set (reg:DI 4 si)
        (reg:DI 44 r15 [orig:107 ivtmp.129 ] [107])) tilesInt.C:225 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 124 122 126 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_GetItem") [flags 0x41]  <function_decl 0x2b9b89f7bd00 PyList_GetItem>) [0 PyList_GetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:225 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 126 124 127 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 D.11917 ] [91])) tilesInt.C:225 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.11917 ] [91])
        (nil)))
(call_insn:TI 127 126 293 9 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("PyFloat_AsDouble") [flags 0x41]  <function_decl 0x2b9b89f5be00 PyFloat_AsDouble>) [0 PyFloat_AsDouble S1 A8])
            (const_int 0 [0]))) tilesInt.C:225 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 293 127 294 9 (set (reg:V2DF 21 xmm0 [orig:92 D.11921 ] [92])
        (vec_duplicate:V2DF (reg:DF 21 xmm0 [orig:92 D.11921 ] [92]))) tilesInt.C:225 1459 {vec_dupv2df}
     (nil))
(insn:TI 294 293 289 9 (set (reg:V4SF 22 xmm1 [153])
        (vec_concat:V4SF (float_truncate:V2SF (reg:V2DF 21 xmm0 [orig:92 D.11921 ] [92]))
            (const_vector:V2SF [
                    (const_double:SF 0.0 [0x0.0p+0])
                    (const_double:SF 0.0 [0x0.0p+0])
                ]))) tilesInt.C:225 1393 {*sse2_cvtpd2ps}
     (expr_list:REG_DEAD (reg:V2DF 21 xmm0 [orig:92 D.11921 ] [92])
        (nil)))
(insn:TI 289 294 130 9 (set (mem:SF (plus:DI (mult:DI (reg:DI 44 r15 [orig:107 ivtmp.129 ] [107])
                    (const_int 4 [0x4]))
                (reg/v/f:DI 3 bx [orig:68 variables ] [68])) [0 MEM[base: variables_28, index: ivtmp.129_113, step: 4, offset: 0B]+0 S4 A32])
        (reg:SF 22 xmm1 [153])) tilesInt.C:225 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 22 xmm1 [153])
        (nil)))
(debug_insn 130 289 132 9 (var_location:SI D#9 (plus:SI (reg:SI 44 r15 [orig:107 ivtmp.129 ] [107])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 132 130 133 9 (var_location:SI i (debug_expr:SI D#9)) -1
     (nil))
(insn 133 132 135 9 (parallel [
            (set (reg:DI 44 r15 [orig:107 ivtmp.129 ] [107])
                (plus:DI (reg:DI 44 r15 [orig:107 ivtmp.129 ] [107])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 135 133 136 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 41 r12 [orig:86 num_variables ] [86])
            (reg:SI 44 r15 [orig:107 ivtmp.129 ] [107]))) tilesInt.C:224 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 136 135 134 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 261)
            (pc))) tilesInt.C:224 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 261)
;;  succ:       9 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              10 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (CAN_FALLTHRU)
;;              9 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 134 136 106 10 94 "" [1 uses])
(note 106 134 109 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 109 106 108 10 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 memorctable+0 S8 A128])) tilesInt.C:227 87 {*movdi_internal_rex64}
     (nil))
(insn 108 109 110 10 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>)) tilesInt.C:227 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 110 108 112 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyObject_IsInstance") [flags 0x41]  <function_decl 0x2b9b8a05e600 PyObject_IsInstance>) [0 PyObject_IsInstance S1 A8])
            (const_int 0 [0]))) tilesInt.C:227 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn:TI 112 110 113 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:95 D.11918 ] [95])
            (const_int 0 [0]))) tilesInt.C:227 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:95 D.11918 ] [95])
        (nil)))
(jump_insn:TI 113 112 142 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 328)
            (pc))) tilesInt.C:227 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 328)
;;  succ:       11 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(note 142 113 143 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 143 142 144 11 (var_location:DI ct (mem/f/j:DI (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])) [0 memorctable+0 S8 A128])
            (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.39_76].ct+0 S8 A64])) tilesInt.C:229 -1
     (nil))
(insn:TI 144 143 149 11 (set (reg/f:DI 0 ax [orig:139 memorctable ] [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 memorctable+0 S8 A128])) tilesInt.C:229 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 memorctable+0 S8 A128])
        (nil)))
(insn 149 144 148 11 (set (reg:SI 37 r8)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+8 S4 A64])) tilesInt.C:230 89 {*movsi_internal}
     (nil))
(insn 148 149 152 11 (set (reg:DI 38 r9)
        (reg/v/f:DI 42 r13 [orig:60 ints ] [60])) tilesInt.C:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 42 r13 [orig:60 ints ] [60])
        (nil)))
(insn:TI 152 148 150 11 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0 num_tilings+0 S4 A128])) tilesInt.C:230 89 {*movsi_internal}
     (nil))
(insn 150 152 153 11 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:68 variables ] [68])) tilesInt.C:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:68 variables ] [68])
        (nil)))
(insn 153 150 145 11 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) tilesInt.C:230 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 145 153 147 11 (set (reg/f:DI 1 dx [orig:140 MEM[(struct CollisionTable *)memorctable.39_76].ct ] [140])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:139 memorctable ] [139])
                (const_int 16 [0x10])) [0 MEM[(struct CollisionTable *)memorctable.39_76].ct+0 S8 A64])) tilesInt.C:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:139 memorctable ] [139])
        (nil)))
(insn 147 145 154 11 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (reg/v:SI 43 r14 [orig:61 num_ints ] [61])) tilesInt.C:230 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:61 num_ints ] [61])
        (nil)))
(call_insn:TI 154 147 173 11 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiP15collision_tablePfiS_i") [flags 0x41]  <function_decl 0x2b9b8a092400 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tilesInt.C:230 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [100.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 41 [r12]
;; live  kill	
(code_label 173 154 174 12 96 "" [1 uses])
(note 174 173 175 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 175 174 176 12 NOTE_INSN_DELETED)
(insn:TI 176 175 178 12 (set (reg:DI 5 di [orig:144 D.11919 ] [144])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])) [0 num_tilings+0 S4 A128]))) tilesInt.C:237 149 {*extendsidi2_rex64}
     (nil))
(call_insn:TI 178 176 179 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_New") [flags 0x41]  <function_decl 0x2b9b89f7bb00 PyList_New>) [0 PyList_New S1 A8])
            (const_int 0 [0]))) tilesInt.C:237 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 179 178 180 12 (set (reg/v/f:DI 41 r12 [orig:105 tiles_list ] [105])
        (reg:DI 0 ax)) tilesInt.C:237 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(debug_insn 180 179 323 12 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(insn 323 180 324 12 (set (reg:SI 0 ax)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0 num_tilings+0 S4 A128])) tilesInt.C:238 89 {*movsi_internal}
     (nil))
(insn:TI 324 323 182 12 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax)
            (const_int 0 [0]))) tilesInt.C:238 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 182 324 183 12 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 259)
            (pc))) tilesInt.C:238 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 259)
;;  succ:       13 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

;; basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
(note 183 182 322 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 322 183 202 13 (parallel [
            (set (reg:DI 3 bx [orig:115 ivtmp.124 ] [115])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:238 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 14, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 202 322 184 14 97 "" [1 uses])
(note 184 202 186 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 186 184 185 14 NOTE_INSN_DELETED)
(debug_insn 185 186 187 14 (var_location:SI i (reg:SI 3 bx [orig:115 ivtmp.124 ] [115])) -1
     (nil))
(insn:TI 187 185 189 14 (set (reg:DI 5 di [orig:146 D.11919 ] [146])
        (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI 3 bx [orig:115 ivtmp.124 ] [115])
                        (const_int 4 [0x4]))
                    (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) [0 MEM[base: the_tiles_33, index: ivtmp.124_122, step: 4, offset: 0B]+0 S4 A32]))) tilesInt.C:239 149 {*extendsidi2_rex64}
     (nil))
(call_insn:TI 189 187 192 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_FromLong") [flags 0x41]  <function_decl 0x2b9b89f4cc00 PyInt_FromLong>) [0 PyInt_FromLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:239 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 192 189 190 14 (set (reg:DI 4 si)
        (reg:DI 3 bx [orig:115 ivtmp.124 ] [115])) tilesInt.C:239 87 {*movdi_internal_rex64}
     (nil))
(insn 190 192 193 14 (set (reg/f:DI 1 dx [orig:111 D.11917 ] [111])
        (reg:DI 0 ax)) tilesInt.C:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 193 190 194 14 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:105 tiles_list ] [105])) tilesInt.C:239 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 194 193 292 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyList_SetItem") [flags 0x41]  <function_decl 0x2b9b89f7be00 PyList_SetItem>) [0 PyList_SetItem S1 A8])
            (const_int 0 [0]))) tilesInt.C:239 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn:TI 292 194 197 14 (set (reg:SI 1 dx [orig:117 D.11918 ] [117])
        (plus:SI (reg:SI 3 bx [orig:115 ivtmp.124 ] [115])
            (const_int 1 [0x1]))) 266 {*leasi}
     (nil))
(debug_insn 197 292 198 14 (var_location:SI i (reg:SI 1 dx [orig:117 D.11918 ] [117])) -1
     (nil))
(insn 198 197 199 14 (parallel [
            (set (reg:DI 3 bx [orig:115 ivtmp.124 ] [115])
                (plus:DI (reg:DI 3 bx [orig:115 ivtmp.124 ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 199 198 200 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])) [0 num_tilings+0 S4 A128])
            (reg:SI 1 dx [orig:117 D.11918 ] [117]))) tilesInt.C:238 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:117 D.11918 ] [117])
        (nil)))
(jump_insn:TI 200 199 259 14 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 202)
            (pc))) tilesInt.C:238 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 202)
;;  succ:       14 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              15 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 15, loop depth 0, count 0, freq 2290, maybe hot
;; Invalid sum of incoming frequencies 1145, should be 2290
;;  prev block 14, next block 16, flags: (REACHABLE, RTL)
;;  pred:       14 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              2 [21.4%]  (CAN_FALLTHRU)
;;              12 [9.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 259 200 254 15 105 "" [2 uses])
(note 254 259 333 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 333 254 310 15 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 310 333 239 15 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 104 [0x68])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:241 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 104 [0x68])))
            (nil))))
(insn 239 310 242 15 (set (reg/i:DI 0 ax)
        (reg/f:DI 41 r12 [orig:62 D.11917 ] [62])) tilesInt.C:241 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 41 r12 [orig:62 D.11917 ] [62])
        (nil)))
(insn 242 239 311 15 (use (reg/i:DI 0 ax)) tilesInt.C:241 -1
     (nil))
(insn/f:TI 311 242 312 15 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:241 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 312 311 313 15 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:241 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 313 312 314 15 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:241 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 314 313 315 15 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:241 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 315 314 316 15 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:241 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 316 315 317 15 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:241 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 317 316 318 15 (simple_return) tilesInt.C:241 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 318 317 234)
;; basic block 16, loop depth 0, count 0, freq 442, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [30.2%]  (CAN_FALLTHRU)
;;              4 [27.0%]  (CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(code_label 234 318 235 16 88 "" [2 uses])
(note 235 234 319 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 319 235 320 16 (parallel [
            (set (reg:DI 43 r14 [orig:61 num_ints ] [61])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:204 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 320 319 329 16 (parallel [
            (set (reg/v/f:DI 42 r13 [orig:60 ints ] [60])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:203 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 329 320 330 16 (set (pc)
        (label_ref 227)) 650 {jump}
     (nil)
 -> 227)
;;  succ:       8 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

(barrier 330 329 328)
;; basic block 17, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 16, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 38 [r9]
;; live  kill	
(code_label 328 330 158 17 111 "" [1 uses])
(note 158 328 160 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 160 158 161 17 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 memorctable+0 S8 A128])) tilesInt.C:234 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 161 160 163 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_AsLong") [flags 0x41]  <function_decl 0x2b9b89f4cf00 PyInt_AsLong>) [0 PyInt_AsLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:234 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(debug_insn 163 161 167 17 (var_location:SI memory_size (reg:SI 0 ax [orig:100 D.11919 ] [100])) tilesInt.C:234 -1
     (nil))
(insn:TI 167 163 170 17 (set (reg:SI 37 r8)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0 %sfp+8 S4 A64])) tilesInt.C:235 89 {*movsi_internal}
     (nil))
(insn 170 167 166 17 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0 num_tilings+0 S4 A128])) tilesInt.C:235 89 {*movsi_internal}
     (nil))
(insn 166 170 165 17 (set (reg:DI 38 r9)
        (reg/v/f:DI 42 r13 [orig:60 ints ] [60])) tilesInt.C:235 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 42 r13 [orig:60 ints ] [60])
        (nil)))
(insn:TI 165 166 168 17 (set (mem:SI (reg/f:DI 7 sp) [0  S4 A64])
        (reg/v:SI 43 r14 [orig:61 num_ints ] [61])) tilesInt.C:235 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:61 num_ints ] [61])
        (nil)))
(insn 168 165 169 17 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:68 variables ] [68])) tilesInt.C:235 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:68 variables ] [68])
        (nil)))
(insn 169 168 171 17 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:100 D.11919 ] [100])) tilesInt.C:235 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:100 D.11919 ] [100])
        (nil)))
(insn:TI 171 169 172 17 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:72 the_tiles ] [72])) tilesInt.C:235 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 172 171 331 17 (call (mem:QI (symbol_ref:DI ("_Z5tilesPiiiPfiS_i") [flags 0x41]  <function_decl 0x2b9b8a086b00 tiles>) [0 tiles S1 A8])
        (const_int 8 [0x8])) tilesInt.C:235 656 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0  S4 A64]))
                                (nil)))))))))
(jump_insn:TI 331 172 332 17 (set (pc)
        (label_ref 173)) 650 {jump}
     (nil)
 -> 173)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 332 331 0)

;; Function int CollisionTable_init(CollisionTable*, PyObject*, PyObject*) (_ZL19CollisionTable_initP14CollisionTableP7_objectS2_, funcdef_no=147, decl_uid=11218, cgraph_uid=147)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 8 count 8 (    1)


int CollisionTable_init(CollisionTable*, PyObject*, PyObject*)

Dataflow summary:
def_info->table_size = 317, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12]
;;  ref usage 	r0={13d,10u,1e} r1={11d,4u} r2={10d,2u} r3={6d,7u} r4={11d,4u} r5={15d,8u} r6={3d,4u} r7={9d,29u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1u} r17={15d,4u} r18={6d} r19={6d} r20={1e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={8d,1u} r38={8d,1u} r39={6d} r40={6d} r41={3d,3u} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 416{336d,78u,2e} in 52{46 regular + 6 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	 16 [argp]
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 0 )->[2]->( 6 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 7 [sp] 41 [r12]

( 2 )->[3]->( 7(EH) 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 4 6 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 2 )->[6]->( 5 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 3(EH) )->[7]->( )
;; bb 7 artificial_defs: { d1(0){ }d15(1){ }}
;; bb 7 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 24 to worklist
  Adding insn 21 to worklist
  Adding insn 12 to worklist
  Adding insn 93 to worklist
  Adding insn 92 to worklist
  Adding insn 91 to worklist
  Adding insn 50 to worklist
  Adding insn 41 to worklist
  Adding insn 28 to worklist
  Adding insn 52 to worklist
  Adding insn 103 to worklist
  Adding insn 70 to worklist
  Adding insn 110 to worklist
  Adding insn 64 to worklist
  Adding insn 61 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 102 to worklist
  Adding insn 101 to worklist
  Adding insn 100 to worklist
  Adding insn 99 to worklist
processing block 6 lr out =  0 [ax] 7 [sp]
  Adding insn 6 to worklist
processing block 7 lr out =  7 [sp]
  Adding insn 63 to worklist
  Adding insn 60 to worklist
  Adding insn 78 to worklist
processing block 4 lr out =  0 [ax] 7 [sp]
  Adding insn 105 to worklist
processing block 3 lr out =  6 [bp] 7 [sp] 16 [argp] 41 [r12]
  Adding insn 49 to worklist
  Adding insn 48 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 106 to worklist
  Adding insn 42 to worklist
  Adding insn 40 to worklist
  Adding insn 38 to worklist
  Adding insn 87 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 33 to worklist
  Adding insn 27 to worklist
processing block 2 lr out =  7 [sp] 16 [argp] 41 [r12]
  Adding insn 23 to worklist
  Adding insn 109 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 90 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 94 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 8 count 8 (    1)
deleting insn with uid = 95.
deleting insn with uid = 5.
deleting insn with uid = 10.
deleting insn with uid = 13.
;;   ======================================================
;;   -- basic block 2 from 91 to 24 -- after reload
;;   ======================================================

;;	  0--> b  0: i  91[--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  16cx=`_ZZL19CollisionTable_initP14CollisionTableP7_objectS2_E6kwlist':athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i   2r12=di                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i   3di=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i   4si=dx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  17dx=`*.LC4'                              :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i  92[--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  93[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  94{sp=sp-0x30;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i  14r9=[const(unspec[`PyString_Type'] 2)]   :athlon-direct,athlon-load
;;	  7--> b  0: i  90ax=sp+0x20                              :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i  15r8=sp+0x10                              :athlon-direct,athlon-agu,nothing
;;	  9--> b  0: i  12[sp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 109{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 10--> b  0: i  21ax=call [`PyArg_ParseTupleAndKeywords'] :athlon-vector,athlon-ieu
;;	 11--> b  0: i  23flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 12--> b  0: i  24pc={(flags==0)?L75:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 91
;;   new tail = 24

;;   ======================================================
;;   -- basic block 3 from 27 to 50 -- after reload
;;   ======================================================

;;	  0--> b  0: i  27di=[sp+0x20]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  28ax=call [`PyString_AsString']           :athlon-vector,athlon-ieu
;;	  4--> b  0: i  85di=`*.LC5'                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i  86si=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  33cx=0x7                                  :athlon-direct,athlon-ieu
;;	  6--> b  0: i  34{flags=cmp([si],[di]);use cx;use 0x1;clobber si;clobber di;clobber cx;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i  40di=0x30                                 :athlon-direct,athlon-ieu
;;	  8--> b  0: i  35bx=gtu(flags,0)                         :athlon-direct,athlon-ieu
;;	  8--> b  0: i  36ax=ltu(flags,0)                         :athlon-direct,athlon-ieu
;;	  9--> b  0: i  87{bx=bx-ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 10--> b  0: i  38bx=sxn(bx)                              :athlon-direct,athlon-ieu
;;	 10--> b  0: i  39loc zxn(bx!=0)                          :nothing
;;	 11--> b  0: i  41ax=call [`_Znwm']                       :athlon-vector,athlon-ieu
;;	 12--> b  0: i  48si=[sp+0x10]                            :athlon-direct,athlon-load
;;	 12--> b  0: i 106{dx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i 107flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	 13--> b  0: i 108strict_low_part(dx)=flags!=0            :athlon-direct,athlon-ieu
;;	 13--> b  0: i  49di=ax                                   :athlon-direct,athlon-ieu
;;	 13--> b  0: i  42bp=ax                                   :athlon-direct,athlon-ieu
;;	 15--> b  0: i  50call [`_ZN15collision_tableC1Eii']      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 27
;;   new tail = 50

;;   ======================================================
;;   -- basic block 4 from 52 to 105 -- after reload
;;   ======================================================

;;	  0--> b  0: i  52[r12+0x10]=bp                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 105{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 52
;;   new tail = 105

deleting insn with uid = 98.
;;   ======================================================
;;   -- basic block 5 from 70 to 103 -- after reload
;;   ======================================================

;;	  0--> b  0: i  99{sp=sp+0x30;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  70use ax                                  :nothing
;;	  1--> b  0: i 100bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 101bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 102r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 103simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 70
;;   new tail = 103

;;   ======================================================
;;   -- basic block 6 from 6 to 110 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6ax=0xffffffffffffffff                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 110pc=L80                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 6
;;   new tail = 110

;;   ======================================================
;;   -- basic block 7 from 78 to 64 -- after reload
;;   ======================================================

;;	  0--> b  0: i  78bx=ax                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  60di=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  61call [`_ZdlPv']                         :athlon-vector,athlon-ieu
;;	  2--> b  0: i  63di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  64call [`_Unwind_Resume']                 :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 78
;;   new tail = 64



starting the processing of deferred insns
ending the processing of deferred insns


int CollisionTable_init(CollisionTable*, PyObject*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12]
;;  ref usage 	r0={13d,10u,1e} r1={11d,4u} r2={10d,2u} r3={6d,7u} r4={11d,4u} r5={15d,8u} r6={3d,4u} r7={9d,29u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1u} r17={15d,4u} r18={6d} r19={6d} r20={1e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={8d,1u} r38={8d,1u} r39={6d} r40={6d} r41={3d,3u} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 416{336d,78u,2e} in 52{46 regular + 6 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	 17 [flags]
(note 8 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 8 10 2 NOTE_INSN_FUNCTION_BEG)
(note 10 5 13 2 NOTE_INSN_DELETED)
(note 13 10 91 2 NOTE_INSN_DELETED)
(insn/f:TI 91 13 16 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) tilesInt.C:32 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 16 91 2 2 (set (reg:DI 2 cx)
        (symbol_ref:DI ("_ZZL19CollisionTable_initP14CollisionTableP7_objectS2_E6kwlist") [flags 0x2]  <var_decl 0x2b9b8a090be0 kwlist>)) tilesInt.C:37 87 {*movdi_internal_rex64}
     (nil))
(insn 2 16 3 2 (set (reg/v/f:DI 41 r12 [orig:70 self ] [70])
        (reg:DI 5 di [ self ])) tilesInt.C:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn:TI 3 2 4 2 (set (reg/v/f:DI 5 di [orig:71 args ] [71])
        (reg:DI 4 si [ args ])) tilesInt.C:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ args ])
        (nil)))
(insn 4 3 17 2 (set (reg/v/f:DI 4 si [orig:72 kwds ] [72])
        (reg:DI 1 dx [ kwds ])) tilesInt.C:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ kwds ])
        (nil)))
(insn 17 4 92 2 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b9b8a269980 *.LC4>)) tilesInt.C:37 87 {*movdi_internal_rex64}
     (nil))
(insn/f:TI 92 17 93 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) tilesInt.C:32 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 93 92 94 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tilesInt.C:32 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 94 93 95 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:32 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -48 [0xffffffffffffffd0])))
            (nil))))
(note 95 94 14 2 NOTE_INSN_PROLOGUE_END)
(insn 14 95 90 2 (set (reg:DI 38 r9)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("PyString_Type") [flags 0x40]  <var_decl 0x2b9b89f66688 PyString_Type>)
                    ] UNSPEC_GOTPCREL)) [0  S8 A8])) tilesInt.C:37 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("PyString_Type") [flags 0x40]  <var_decl 0x2b9b89f66688 PyString_Type>)
        (nil)))
(insn:TI 90 14 15 2 (set (reg/f:DI 0 ax [74])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) tilesInt.C:37 267 {*leadi}
     (nil))
(insn 15 90 12 2 (set (reg:DI 37 r8)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) tilesInt.C:37 267 {*leadi}
     (nil))
(insn:TI 12 15 109 2 (set (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg/f:DI 0 ax [74])) tilesInt.C:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 109 12 21 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:37 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 21 109 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyArg_ParseTupleAndKeywords") [flags 0x41]  <function_decl 0x2b9b8a018400 PyArg_ParseTupleAndKeywords>) [0 PyArg_ParseTupleAndKeywords S1 A8])
            (const_int 8 [0x8]))) tilesInt.C:37 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                                (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (reg/f:DI 7 sp) [0  S8 A64]))
                                    (nil))))))))))
(insn:TI 23 21 24 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:61 D.11928 ] [61])
            (const_int 0 [0]))) tilesInt.C:37 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.11928 ] [61])
        (nil)))
(jump_insn:TI 24 23 25 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 75)
            (pc))) tilesInt.C:37 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 926 [0x39e])
            (nil)))
 -> 75)
;;  succ:       6 [9.3%]  (CAN_FALLTHRU)
;;              3 [90.7%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 9074, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [90.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 2 [cx] 4 [si] 5 [di] 17 [flags]
(note 25 24 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 27 25 28 3 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0 safety+0 S8 A128])) tilesInt.C:40 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 28 27 85 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyString_AsString") [flags 0x41]  <function_decl 0x2b9b89f65c00 PyString_AsString>) [0 PyString_AsString S1 A8])
            (const_int 0 [0]))) tilesInt.C:40 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 85 28 86 3 (set (reg/f:DI 5 di [77])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b9b8a269a18 *.LC5>)) tilesInt.C:40 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b9b8a269a18 *.LC5>)
        (nil)))
(insn 86 85 33 3 (set (reg/f:DI 4 si [orig:78 D.11929 ] [78])
        (reg/f:DI 0 ax [orig:63 D.11929 ] [63])) tilesInt.C:40 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.11929 ] [63])
        (nil)))
(insn 33 86 34 3 (set (reg:DI 2 cx [80])
        (const_int 7 [0x7])) tilesInt.C:40 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))
(insn:TI 34 33 40 3 (parallel [
            (set (reg:CC 17 flags)
                (compare:CC (mem:BLK (reg/f:DI 4 si [orig:78 D.11929 ] [78]) [0 MEM[(void *)_11]+0 A8])
                    (mem/u/c:BLK (reg/f:DI 5 di [77]) [0 MEM[(void *)"unsafe"]+0 A8])))
            (use (reg:DI 2 cx [80]))
            (use (const_int 1 [0x1]))
            (clobber (reg/f:DI 4 si [orig:78 D.11929 ] [78]))
            (clobber (reg/f:DI 5 di [79]))
            (clobber (reg:DI 2 cx [80]))
        ]) tilesInt.C:40 921 {*cmpstrnqi_nz_1}
     (expr_list:REG_DEAD (reg/f:DI 5 di [77])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:78 D.11929 ] [78])
            (expr_list:REG_DEAD (reg:DI 2 cx [80])
                (expr_list:REG_UNUSED (reg/f:DI 5 di [79])
                    (expr_list:REG_UNUSED (reg/f:DI 4 si [orig:78 D.11929 ] [78])
                        (expr_list:REG_UNUSED (reg:DI 2 cx [80])
                            (expr_list:REG_EQUAL (compare:CC (mem:BLK (reg/f:DI 0 ax [orig:63 D.11929 ] [63]) [0 MEM[(void *)_11]+0 A8])
                                    (mem/u/c:BLK (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b9b8a269a18 *.LC5>) [0 MEM[(void *)"unsafe"]+0 A8]))
                                (nil)))))))))
(insn:TI 40 34 35 3 (set (reg:DI 5 di)
        (const_int 48 [0x30])) tilesInt.C:44 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 35 40 36 3 (set (reg:QI 3 bx [81])
        (gtu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) tilesInt.C:40 608 {*setcc_qi}
     (nil))
(insn 36 35 87 3 (set (reg:QI 0 ax [82])
        (ltu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) tilesInt.C:40 608 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
(insn:TI 87 36 38 3 (parallel [
            (set (reg:SI 3 bx [orig:64 D.11928 ] [64])
                (minus:SI (reg:SI 3 bx [81])
                    (reg:SI 0 ax [82])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:40 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [82])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 38 87 39 3 (set (reg:SI 3 bx [orig:64 D.11928 ] [64])
        (sign_extend:SI (reg:QI 3 bx [orig:64 D.11928 ] [64]))) tilesInt.C:40 155 {extendqisi2}
     (nil))
(debug_insn 39 38 41 3 (var_location:SI isafety (zero_extend:SI (ne:QI (reg:SI 3 bx [orig:64 D.11928 ] [64])
            (const_int 0 [0])))) -1
     (nil))
(call_insn:TI 41 39 48 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x2b9b8963e700 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) tilesInt.C:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 48 41 106 3 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0 size+0 S4 A128])) tilesInt.C:44 89 {*movsi_internal}
     (nil))
(insn 106 48 107 3 (parallel [
            (set (reg:SI 1 dx [orig:83 D.11931 ] [83])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:40 80 {*movsi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 107 106 108 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 3 bx [orig:64 D.11928 ] [64])
            (const_int 0 [0]))) tilesInt.C:40 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:64 D.11928 ] [64])
        (nil)))
(insn:TI 108 107 49 3 (set (strict_low_part (reg:QI 1 dx [orig:83 D.11931 ] [83]))
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) tilesInt.C:40 609 {*setcc_qi_slp}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 49 108 42 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:65 D.11930 ] [65])) tilesInt.C:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.11930 ] [65])
        (nil)))
(insn 42 49 50 3 (set (reg/f:DI 6 bp [orig:65 D.11930 ] [65])
        (reg:DI 0 ax)) tilesInt.C:44 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 50 42 51 3 (call (mem:QI (symbol_ref:DI ("_ZN15collision_tableC1Eii") [flags 0x41]  <function_decl 0x2b9b8a092000 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) tilesInt.C:44 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_EH_REGION (const_int 2 [0x2])
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       7 (ABNORMAL,ABNORMAL_CALL,EH)
;;              4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 9074, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 52 51 105 4 (set (mem/f/j:DI (plus:DI (reg/v/f:DI 41 r12 [orig:70 self ] [70])
                (const_int 16 [0x10])) [0 self_17(D)->ct+0 S8 A64])
        (reg/f:DI 6 bp [orig:65 D.11930 ] [65])) tilesInt.C:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:70 self ] [70])
        (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:65 D.11930 ] [65])
            (nil))))
(insn 105 52 80 4 (parallel [
            (set (reg:DI 0 ax [orig:60 D.11928 ] [60])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:45 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 20000, maybe hot
;; Invalid sum of incoming frequencies 10000, should be 20000
;;  prev block 4, next block 6, flags: (REACHABLE, RTL)
;;  pred:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [100.0%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	 17 [flags]
(code_label 80 105 76 5 117 "" [1 uses])
(note 76 80 112 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 112 76 99 5 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 99 112 70 5 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:46 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (nil))))
(insn 70 99 100 5 (use (reg/i:SI 0 ax)) tilesInt.C:46 -1
     (nil))
(insn/f:TI 100 70 101 5 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:46 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 101 100 102 5 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:46 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 102 101 103 5 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:46 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 103 102 104 5 (simple_return) tilesInt.C:46 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 104 103 75)
;; basic block 6, loop depth 0, count 0, freq 926, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [9.3%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 75 104 74 6 115 "" [1 uses])
(note 74 75 6 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 6 74 110 6 (set (reg:SI 0 ax [orig:60 D.11928 ] [60])
        (const_int -1 [0xffffffffffffffff])) tilesInt.C:38 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))
(jump_insn 110 6 111 6 (set (pc)
        (label_ref 80)) 650 {jump}
     (nil)
 -> 80)
;;  succ:       5 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 111 110 77)
;; basic block 7, loop depth 0, count 0, freq 0
;;  prev block 6, next block 1, flags: (REACHABLE, RTL)
;;  pred:       3 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 7 artificial_defs: { d1(0){ }d15(1){ }}
;; bb 7 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di]
;; live  kill	
(code_label/s 77 111 79 7 116 "" [1 uses])
(note 79 77 78 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 78 79 60 7 (set (reg:DI 3 bx [87])
        (reg:DI 0 ax)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 60 78 61 7 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [orig:65 D.11930 ] [65])) tilesInt.C:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:65 D.11930 ] [65])
        (nil)))
(call_insn:TI 61 60 63 7 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x2b9b8963e900 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) tilesInt.C:44 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 63 61 64 7 (set (reg:DI 5 di)
        (reg:DI 3 bx [87])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx [87])
        (nil)))
(call_insn:TI 64 63 65 7 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x2b9b8963cb00 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 65 64 0)

;; Function PyObject* CollisionTable_restore(CollisionTable*, PyObject*) (_ZL22CollisionTable_restoreP14CollisionTableP7_object, funcdef_no=151, decl_uid=11248, cgraph_uid=151)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


PyObject* CollisionTable_restore(CollisionTable*, PyObject*)

Dataflow summary:
def_info->table_size = 160, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={6d,2u} r2={4d} r3={3d,3u} r4={6d,3u} r5={7d,4u} r7={5d,15u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,1u} r18={3d} r19={3d} r20={1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 205{171d,33u,1e} in 22{19 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 5 [di] 7 [sp]

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 45 to worklist
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 53 to worklist
  Adding insn 36 to worklist
Finished finding needed instructions:
processing block 4 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 52 to worklist
  Adding insn 51 to worklist
processing block 3 lr out =  0 [ax] 7 [sp]
  Adding insn 55 to worklist
  Adding insn 23 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 15 to worklist
  Adding insn 57 to worklist
  Adding insn 14 to worklist
  Adding insn 56 to worklist
  Adding insn 10 to worklist
  Adding insn 8 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 46 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
deleting insn with uid = 47.
deleting insn with uid = 4.
;;   ======================================================
;;   -- basic block 2 from 45 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  45[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2bx=di                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i   3di=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  10si=`*.LC6'                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  56{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  46{sp=sp-0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  3--> b  0: i   8dx=sp                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  13ax=call [`PyArg_ParseTuple']            :athlon-vector,athlon-ieu
;;	  5--> b  0: i  14dx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  57{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  15flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i  16pc={(flags==0)?L27:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 45
;;   new tail = 16

;;   ======================================================
;;   -- basic block 3 from 19 to 25 -- after reload
;;   ======================================================

;;	  0--> b  0: i  19di=[bx+0x10]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  20si=[sp]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i  22call [`_ZN15collision_table7restoreEi'] :athlon-vector,athlon-ieu
;;	  4--> b  0: i  23di=`*.LC1'                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i  55{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  25ax=call [`Py_BuildValue']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 19
;;   new tail = 25

deleting insn with uid = 50.
;;   ======================================================
;;   -- basic block 4 from 36 to 53 -- after reload
;;   ======================================================

;;	  0--> b  0: i  51{sp=sp+0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  36use ax                                  :nothing
;;	  1--> b  0: i  52bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i  53simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 36
;;   new tail = 53



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* CollisionTable_restore(CollisionTable*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={6d,2u} r2={4d} r3={3d,3u} r4={6d,3u} r5={7d,4u} r7={5d,15u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,1u} r18={3d} r19={3d} r20={1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 205{171d,33u,1e} in 22{19 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 6 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 6 45 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 45 4 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tilesInt.C:72 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 45 3 2 (set (reg/v/f:DI 3 bx [orig:64 self ] [64])
        (reg:DI 5 di [ self ])) tilesInt.C:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 10 2 (set (reg/v/f:DI 5 di [orig:65 args ] [65])
        (reg:DI 4 si [ args ])) tilesInt.C:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ args ])
        (nil)))
(insn:TI 10 3 56 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b9b8a2834c0 *.LC6>)) tilesInt.C:74 87 {*movdi_internal_rex64}
     (nil))
(insn 56 10 46 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:74 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f:TI 46 56 47 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:72 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (nil))))
(note 47 46 8 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 8 47 13 2 (set (reg/f:DI 1 dx [66])
        (reg/f:DI 7 sp)) tilesInt.C:74 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(call_insn:TI 13 8 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyArg_ParseTuple") [flags 0x41]  <function_decl 0x2b9b8a018300 PyArg_ParseTuple>) [0 PyArg_ParseTuple S1 A8])
            (const_int 0 [0]))) tilesInt.C:74 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(insn:TI 14 13 57 2 (set (reg:SI 1 dx [orig:60 D.11937 ] [60])
        (reg:SI 0 ax)) tilesInt.C:74 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 57 14 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:59 D.11936 ] [59])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:75 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 15 57 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:60 D.11937 ] [60])
            (const_int 0 [0]))) tilesInt.C:74 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:60 D.11937 ] [60])
        (nil)))
(jump_insn:TI 16 15 17 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 27)
            (pc))) tilesInt.C:74 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2139 [0x85b])
            (nil)))
 -> 27)
;;  succ:       4 [21.4%]  (CAN_FALLTHRU)
;;              3 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7861, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 17 16 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 19 17 20 3 (set (reg/f:DI 5 di [orig:68 self_8(D)->ct ] [68])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:64 self ] [64])
                (const_int 16 [0x10])) [0 self_8(D)->ct+0 S8 A64])) tilesInt.C:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:64 self ] [64])
        (nil)))
(insn 20 19 22 3 (set (reg:SI 4 si)
        (mem/c:SI (reg/f:DI 7 sp) [0 file+0 S4 A128])) tilesInt.C:76 89 {*movsi_internal}
     (nil))
(call_insn:TI 22 20 23 3 (call (mem:QI (symbol_ref:DI ("_ZN15collision_table7restoreEi") [flags 0x41]  <function_decl 0x2b9b8a086a00 restore>) [0 restore S1 A8])
        (const_int 0 [0])) tilesInt.C:76 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn:TI 23 22 55 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b9b8a16a7b8 *.LC1>)) tilesInt.C:77 87 {*movdi_internal_rex64}
     (nil))
(insn 55 23 25 3 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:77 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 25 55 27 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_BuildValue") [flags 0x41]  <function_decl 0x2b9b8a018600 Py_BuildValue>) [0 Py_BuildValue S1 A8])
            (const_int 0 [0]))) tilesInt.C:77 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, RTL)
;;  pred:       2 [21.4%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
(code_label 27 25 28 4 120 "" [1 uses])
(note 28 27 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 58 28 51 4 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 51 58 36 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:78 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (nil))))
(insn 36 51 52 4 (use (reg/i:DI 0 ax)) tilesInt.C:78 -1
     (nil))
(insn/f:TI 52 36 53 4 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:78 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 53 52 54 4 (simple_return) tilesInt.C:78 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 54 53 0)

;; Function PyObject* CollisionTable_save(CollisionTable*, PyObject*) (_ZL19CollisionTable_saveP14CollisionTableP7_object, funcdef_no=150, decl_uid=11243, cgraph_uid=150)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


PyObject* CollisionTable_save(CollisionTable*, PyObject*)

Dataflow summary:
def_info->table_size = 160, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={6d,2u} r2={4d} r3={3d,3u} r4={6d,3u} r5={7d,4u} r7={5d,15u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,1u} r18={3d} r19={3d} r20={1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 205{171d,33u,1e} in 22{19 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 5 [di] 7 [sp]

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 45 to worklist
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 53 to worklist
  Adding insn 36 to worklist
Finished finding needed instructions:
processing block 4 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 52 to worklist
  Adding insn 51 to worklist
processing block 3 lr out =  0 [ax] 7 [sp]
  Adding insn 55 to worklist
  Adding insn 23 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 15 to worklist
  Adding insn 57 to worklist
  Adding insn 14 to worklist
  Adding insn 56 to worklist
  Adding insn 10 to worklist
  Adding insn 8 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 46 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
deleting insn with uid = 47.
deleting insn with uid = 4.
;;   ======================================================
;;   -- basic block 2 from 45 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  45[--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2bx=di                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i   3di=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  10si=`*.LC6'                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  56{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  46{sp=sp-0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  3--> b  0: i   8dx=sp                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  13ax=call [`PyArg_ParseTuple']            :athlon-vector,athlon-ieu
;;	  5--> b  0: i  14dx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  57{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  15flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i  16pc={(flags==0)?L27:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 45
;;   new tail = 16

;;   ======================================================
;;   -- basic block 3 from 19 to 25 -- after reload
;;   ======================================================

;;	  0--> b  0: i  19di=[bx+0x10]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  20si=[sp]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i  22call [`_ZN15collision_table4saveEi']    :athlon-vector,athlon-ieu
;;	  4--> b  0: i  23di=`*.LC1'                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i  55{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  25ax=call [`Py_BuildValue']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 19
;;   new tail = 25

deleting insn with uid = 50.
;;   ======================================================
;;   -- basic block 4 from 36 to 53 -- after reload
;;   ======================================================

;;	  0--> b  0: i  51{sp=sp+0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i  36use ax                                  :nothing
;;	  1--> b  0: i  52bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i  53simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 36
;;   new tail = 53



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* CollisionTable_save(CollisionTable*, PyObject*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={6d,2u} r2={4d} r3={3d,3u} r4={6d,3u} r5={7d,4u} r7={5d,15u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,1u} r18={3d} r19={3d} r20={1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 205{171d,33u,1e} in 22{19 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 6 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 6 45 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 45 4 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) tilesInt.C:63 67 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 45 3 2 (set (reg/v/f:DI 3 bx [orig:64 self ] [64])
        (reg:DI 5 di [ self ])) tilesInt.C:63 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 10 2 (set (reg/v/f:DI 5 di [orig:65 args ] [65])
        (reg:DI 4 si [ args ])) tilesInt.C:63 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ args ])
        (nil)))
(insn:TI 10 3 56 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b9b8a2834c0 *.LC6>)) tilesInt.C:65 87 {*movdi_internal_rex64}
     (nil))
(insn 56 10 46 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:65 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f:TI 46 56 47 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:63 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (nil))))
(note 47 46 8 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 8 47 13 2 (set (reg/f:DI 1 dx [66])
        (reg/f:DI 7 sp)) tilesInt.C:65 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(call_insn:TI 13 8 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyArg_ParseTuple") [flags 0x41]  <function_decl 0x2b9b8a018300 PyArg_ParseTuple>) [0 PyArg_ParseTuple S1 A8])
            (const_int 0 [0]))) tilesInt.C:65 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(insn:TI 14 13 57 2 (set (reg:SI 1 dx [orig:60 D.11943 ] [60])
        (reg:SI 0 ax)) tilesInt.C:65 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 57 14 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:59 D.11942 ] [59])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:66 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 15 57 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:60 D.11943 ] [60])
            (const_int 0 [0]))) tilesInt.C:65 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:60 D.11943 ] [60])
        (nil)))
(jump_insn:TI 16 15 17 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 27)
            (pc))) tilesInt.C:65 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2139 [0x85b])
            (nil)))
 -> 27)
;;  succ:       4 [21.4%]  (CAN_FALLTHRU)
;;              3 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7861, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 17 16 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 19 17 20 3 (set (reg/f:DI 5 di [orig:68 self_8(D)->ct ] [68])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:64 self ] [64])
                (const_int 16 [0x10])) [0 self_8(D)->ct+0 S8 A64])) tilesInt.C:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:64 self ] [64])
        (nil)))
(insn 20 19 22 3 (set (reg:SI 4 si)
        (mem/c:SI (reg/f:DI 7 sp) [0 file+0 S4 A128])) tilesInt.C:67 89 {*movsi_internal}
     (nil))
(call_insn:TI 22 20 23 3 (call (mem:QI (symbol_ref:DI ("_ZN15collision_table4saveEi") [flags 0x41]  <function_decl 0x2b9b8a086500 save>) [0 save S1 A8])
        (const_int 0 [0])) tilesInt.C:67 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn:TI 23 22 55 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b9b8a16a7b8 *.LC1>)) tilesInt.C:68 87 {*movdi_internal_rex64}
     (nil))
(insn 55 23 25 3 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:68 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 25 55 27 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_BuildValue") [flags 0x41]  <function_decl 0x2b9b8a018600 Py_BuildValue>) [0 Py_BuildValue S1 A8])
            (const_int 0 [0]))) tilesInt.C:68 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, RTL)
;;  pred:       2 [21.4%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
(code_label 27 25 28 4 125 "" [1 uses])
(note 28 27 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 58 28 51 4 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 51 58 36 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:69 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (nil))))
(insn 36 51 52 4 (use (reg/i:DI 0 ax)) tilesInt.C:69 -1
     (nil))
(insn/f:TI 52 36 53 4 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) tilesInt.C:69 77 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 53 52 54 4 (simple_return) tilesInt.C:69 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 54 53 0)

;; Function PyObject* CollisionTable_usage(CollisionTable*) (_ZL20CollisionTable_usageP14CollisionTable, funcdef_no=149, decl_uid=11238, cgraph_uid=149)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 24.
deleting insn with uid = 3.
deleting insn with uid = 28.
;;   ======================================================
;;   -- basic block 2 from 23 to 13 -- after reload
;;   ======================================================

;;	  0--> b  0: i  23{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i   6di=[di+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i   8ax=call [`_ZN15collision_table5usageEv']:athlon-vector,athlon-ieu
;;	  3--> b  0: i  10loc ax                                  :nothing
;;	  4--> b  0: i  27{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i  11di=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  5--> b  0: i  13ax=call [`PyInt_FromLong']              :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 23
;;   new tail = 13



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* CollisionTable_usage(CollisionTable*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r7={3d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 124{110d,14u,0e} in 7{5 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 23 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 23 3 24 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:55 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 24 23 6 2 NOTE_INSN_PROLOGUE_END)
(insn 6 24 8 2 (set (reg/f:DI 5 di [orig:65 self_2(D)->ct ] [65])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 5 di [orig:64 self ] [64])
                (const_int 16 [0x10])) [0 self_2(D)->ct+0 S8 A64])) tilesInt.C:58 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 8 6 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN15collision_table5usageEv") [flags 0x41]  <function_decl 0x2b9b8a086f00 usage>) [0 usage S1 A8])
            (const_int 0 [0]))) tilesInt.C:58 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(debug_insn 10 8 29 2 (var_location:SI ret (reg/v:SI 0 ax [orig:60 ret ] [60])) tilesInt.C:58 -1
     (nil))
(note 29 10 27 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 27 29 11 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:60 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn 11 27 13 2 (set (reg:DI 5 di [orig:66 D.11948 ] [66])
        (sign_extend:DI (reg/v:SI 0 ax [orig:60 ret ] [60]))) tilesInt.C:59 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 0 ax [orig:60 ret ] [60])
        (nil)))
(call_insn/j:TI 13 11 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyInt_FromLong") [flags 0x41]  <function_decl 0x2b9b89f4cc00 PyInt_FromLong>) [0 PyInt_FromLong S1 A8])
            (const_int 0 [0]))) tilesInt.C:59 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 14 13 0)

;; Function PyObject* CollisionTable_reset(CollisionTable*) (_ZL20CollisionTable_resetP14CollisionTable, funcdef_no=148, decl_uid=11235, cgraph_uid=148)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
deleting insn with uid = 22.
deleting insn with uid = 3.
deleting insn with uid = 26.
;;   ======================================================
;;   -- basic block 2 from 21 to 11 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i   6di=[di+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i   8call [`_ZN15collision_table5resetEv']   :athlon-vector,athlon-ieu
;;	  4--> b  0: i   9di=`*.LC1'                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i  27{ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  25{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i  11ax=call [`Py_BuildValue']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 21
;;   new tail = 11



starting the processing of deferred insns
ending the processing of deferred insns


PyObject* CollisionTable_reset(CollisionTable*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,2u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r7={3d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 125{112d,13u,0e} in 7{5 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 21 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 21 3 22 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:49 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 22 21 6 2 NOTE_INSN_PROLOGUE_END)
(insn 6 22 8 2 (set (reg/f:DI 5 di [orig:63 self_2(D)->ct ] [63])
        (mem/f/j:DI (plus:DI (reg/v/f:DI 5 di [orig:62 self ] [62])
                (const_int 16 [0x10])) [0 self_2(D)->ct+0 S8 A64])) tilesInt.C:50 87 {*movdi_internal_rex64}
     (nil))
(call_insn:TI 8 6 9 2 (call (mem:QI (symbol_ref:DI ("_ZN15collision_table5resetEv") [flags 0x41]  <function_decl 0x2b9b8a086e00 reset>) [0 reset S1 A8])
        (const_int 0 [0])) tilesInt.C:50 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 9 8 27 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b9b8a16a7b8 *.LC1>)) tilesInt.C:51 87 {*movdi_internal_rex64}
     (nil))
(insn 27 9 28 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:51 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 28 27 25 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f 25 28 11 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:52 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(call_insn/j:TI 11 25 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_BuildValue") [flags 0x41]  <function_decl 0x2b9b8a018600 Py_BuildValue>) [0 Py_BuildValue S1 A8])
            (const_int 0 [0]))) tilesInt.C:51 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 12 11 0)

;; Function void inittiles() (inittiles, funcdef_no=156, decl_uid=11376, cgraph_uid=156)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 6 (    1)


void inittiles()

Dataflow summary:
def_info->table_size = 160, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={4d,4u} r1={6d,2u} r2={5d,1u} r4={6d,2u} r5={7d,3u} r7={4d,14u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d,2u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 197{168d,29u,0e} in 22{19 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d3(0){ }d9(1){ }d14(2){ }d20(4){ }d27(5){ }d28(7){ }d68(21){ }d72(22){ }d76(23){ }d80(24){ }d84(25){ }d88(26){ }d92(27){ }d96(28){ }d125(37){ }d129(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 3 2 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 4 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 6 to worklist
  Adding insn 25 to worklist
  Adding insn 20 to worklist
  Adding insn 38 to worklist
  Adding insn 34 to worklist
  Adding insn 56 to worklist
Finished finding needed instructions:
processing block 5 lr out =  7 [sp]
  Adding insn 55 to worklist
processing block 4 lr out =  7 [sp]
  Adding insn 58 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
processing block 3 lr out =  0 [ax] 7 [sp]
  Adding insn 24 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 61 to worklist
  Adding insn 60 to worklist
  Adding insn 15 to worklist
processing block 2 lr out =  7 [sp]
  Adding insn 8 to worklist
  Adding insn 5 to worklist
  Adding insn 50 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 6 (    1)
deleting insn with uid = 51.
deleting insn with uid = 2.
;;   ======================================================
;;   -- basic block 2 from 50 to 9 -- after reload
;;   ======================================================

;;	  0--> b  0: i   5di=`_ZL18CollisionTableType'            :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  50{sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  2--> b  0: i   6ax=call [`PyType_Ready']                :athlon-vector,athlon-ieu
;;	  3--> b  0: i   8flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i   9pc={(flags<0)?L42:pc}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 50
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 15 to 25 -- after reload
;;   ======================================================

;;	  0--> b  0: i  18si=`_ZL12TilesMethods'                  :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  19di=`*.LC7'                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  60{cx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  61{dx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  15r8=0x3f5                                :athlon-direct,athlon-ieu
;;	  2--> b  0: i  20ax=call [`Py_InitModule4_64']           :athlon-vector,athlon-ieu
;;	  2--> b  0: i  22loc ax                                  :nothing
;;	  3--> b  0: i  24flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  25pc={(flags==0)?L42:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 15
;;   new tail = 25

deleting insn with uid = 59.
;;   ======================================================
;;   -- basic block 4 from 34 to 38 -- after reload
;;   ======================================================

;;	  0--> b  0: i  34{[`_ZL18CollisionTableType']=[`_ZL18CollisionTableType']+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  0--> b  0: i  35dx=`_ZL18CollisionTableType'            :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  36si=`*.LC8'                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  37di=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  58{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i  38ax=call [`PyModule_AddObject']          :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 34
;;   new tail = 38

;;   ======================================================
;;   -- basic block 5 from 55 to 56 -- after reload
;;   ======================================================

;;	  0--> b  0: i  55{sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i  56simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 55
;;   new tail = 56



starting the processing of deferred insns
ending the processing of deferred insns


void inittiles()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={4d,4u} r1={6d,2u} r2={5d,1u} r4={6d,2u} r5={7d,3u} r7={4d,14u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d,2u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 197{168d,29u,0e} in 22{19 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 5 2 50 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>)) tilesInt.C:380 87 {*movdi_internal_rex64}
     (nil))
(insn/f 50 5 51 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:377 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 51 50 6 2 NOTE_INSN_PROLOGUE_END)
(call_insn:TI 6 51 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyType_Ready") [flags 0x41]  <function_decl 0x2b9b89e48c00 PyType_Ready>) [0 PyType_Ready S1 A8])
            (const_int 0 [0]))) tilesInt.C:380 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn:TI 8 6 9 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:59 D.11956 ] [59])
            (const_int 0 [0]))) tilesInt.C:380 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.11956 ] [59])
        (nil)))
(jump_insn:TI 9 8 14 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) tilesInt.C:380 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
            (nil)))
 -> 42)
;;  succ:       5 [36.7%]  (CAN_FALLTHRU)
;;              3 [63.3%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 6333, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [63.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 14 9 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 18 14 19 3 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZL12TilesMethods") [flags 0x2]  <var_decl 0x2b9b8a0c44c0 TilesMethods>)) tilesInt.C:382 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 60 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b9b8a29bb48 *.LC7>)) tilesInt.C:382 87 {*movdi_internal_rex64}
     (nil))
(insn 60 19 61 3 (parallel [
            (set (reg:DI 2 cx)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:382 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 61 60 15 3 (parallel [
            (set (reg:DI 1 dx)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:382 81 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 15 61 20 3 (set (reg:SI 37 r8)
        (const_int 1013 [0x3f5])) tilesInt.C:382 89 {*movsi_internal}
     (nil))
(call_insn:TI 20 15 22 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_InitModule4_64") [flags 0x41]  <function_decl 0x2b9b8a018f00 Py_InitModule4_64>) [0 Py_InitModule4_64 S1 A8])
            (const_int 0 [0]))) tilesInt.C:382 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                        (nil)))))))
(debug_insn 22 20 24 3 (var_location:DI m (reg/v/f:DI 0 ax [orig:60 m ] [60])) tilesInt.C:382 -1
     (nil))
(insn:TI 24 22 25 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 0 ax [orig:60 m ] [60])
            (const_int 0 [0]))) tilesInt.C:384 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 25 24 26 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) tilesInt.C:384 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 2164 [0x874])
            (nil)))
 -> 42)
;;  succ:       5 [21.6%]  (CAN_FALLTHRU)
;;              4 [78.4%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 4963, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL)
;;  pred:       3 [78.4%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(note 26 25 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 32 26 33 4 NOTE_INSN_DELETED)
(note 33 32 34 4 NOTE_INSN_DELETED)
(insn:TI 34 33 35 4 (parallel [
            (set (mem/j/c:DI (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>) [0 MEM[(struct PyObject *)&CollisionTableType].ob_refcnt+0 S8 A256])
                (plus:DI (mem/j/c:DI (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>) [0 MEM[(struct PyObject *)&CollisionTableType].ob_refcnt+0 S8 A256])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) tilesInt.C:387 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 35 34 36 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("_ZL18CollisionTableType") [flags 0x2]  <var_decl 0x2b9b8a0b0000 CollisionTableType>)) tilesInt.C:388 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b9b8a29bbe0 *.LC8>)) tilesInt.C:388 87 {*movdi_internal_rex64}
     (nil))
(insn:TI 37 36 62 4 (set (reg:DI 5 di)
        (reg/v/f:DI 0 ax [orig:60 m ] [60])) tilesInt.C:388 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 0 ax [orig:60 m ] [60])
        (nil)))
(note 62 37 58 4 NOTE_INSN_EPILOGUE_BEG)
(insn/f 58 62 38 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:389 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(call_insn/j:TI 38 58 39 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PyModule_AddObject") [flags 0x41]  <function_decl 0x2b9b8a018c00 PyModule_AddObject>) [0 PyModule_AddObject S1 A8])
            (const_int 0 [0]))) tilesInt.C:388 665 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 39 38 42)
;; basic block 5, loop depth 0, count 0, freq 5037, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, RTL)
;;  pred:       3 [21.6%]  (CAN_FALLTHRU)
;;              2 [36.7%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 7 [sp]
;; live  kill	 17 [flags]
(code_label 42 39 43 5 133 "" [2 uses])
(note 43 42 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 54 43 55 5 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 55 54 56 5 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) tilesInt.C:389 951 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(jump_insn:TI 56 55 57 5 (simple_return) tilesInt.C:389 672 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 57 56 0)
